// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: validator.proto

package pbvalidator

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ValidOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckIf *CheckIf    `protobuf:"bytes,1,opt,name=check_if,json=checkIf,proto3" json:"check_if,omitempty"`
	Tags    *TagOptions `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ValidOptions) Reset() {
	*x = ValidOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidOptions) ProtoMessage() {}

func (x *ValidOptions) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidOptions.ProtoReflect.Descriptor instead.
func (*ValidOptions) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{0}
}

func (x *ValidOptions) GetCheckIf() *CheckIf {
	if x != nil {
		return x.CheckIf
	}
	return nil
}

func (x *ValidOptions) GetTags() *TagOptions {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CheckIf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string      `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"` // the name of field.
	Tags  *TagOptions `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CheckIf) Reset() {
	*x = CheckIf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIf) ProtoMessage() {}

func (x *CheckIf) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIf.ProtoReflect.Descriptor instead.
func (*CheckIf) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{1}
}

func (x *CheckIf) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *CheckIf) GetTags() *TagOptions {
	if x != nil {
		return x.Tags
	}
	return nil
}

// TagOptions encapsulates the options for each type of field. Depending on the
// field, the correct set should be used to ensure proper validations.
type TagOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//	*TagOptions_Oneof
	//	*TagOptions_Float
	//	*TagOptions_Int
	//	*TagOptions_Uint
	//	*TagOptions_String_
	//	*TagOptions_Bytes
	//	*TagOptions_Bool
	//	*TagOptions_Enum
	//	*TagOptions_Message
	//	*TagOptions_Repeated
	//	*TagOptions_Map
	Kind isTagOptions_Kind `protobuf_oneof:"kind"`
}

func (x *TagOptions) Reset() {
	*x = TagOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagOptions) ProtoMessage() {}

func (x *TagOptions) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagOptions.ProtoReflect.Descriptor instead.
func (*TagOptions) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{2}
}

func (m *TagOptions) GetKind() isTagOptions_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *TagOptions) GetOneof() *OneOfTags {
	if x, ok := x.GetKind().(*TagOptions_Oneof); ok {
		return x.Oneof
	}
	return nil
}

func (x *TagOptions) GetFloat() *FloatTags {
	if x, ok := x.GetKind().(*TagOptions_Float); ok {
		return x.Float
	}
	return nil
}

func (x *TagOptions) GetInt() *IntTags {
	if x, ok := x.GetKind().(*TagOptions_Int); ok {
		return x.Int
	}
	return nil
}

func (x *TagOptions) GetUint() *UintTags {
	if x, ok := x.GetKind().(*TagOptions_Uint); ok {
		return x.Uint
	}
	return nil
}

func (x *TagOptions) GetString_() *StringTags {
	if x, ok := x.GetKind().(*TagOptions_String_); ok {
		return x.String_
	}
	return nil
}

func (x *TagOptions) GetBytes() *BytesTags {
	if x, ok := x.GetKind().(*TagOptions_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *TagOptions) GetBool() *BoolTags {
	if x, ok := x.GetKind().(*TagOptions_Bool); ok {
		return x.Bool
	}
	return nil
}

func (x *TagOptions) GetEnum() *EnumTags {
	if x, ok := x.GetKind().(*TagOptions_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *TagOptions) GetMessage() *MessageTags {
	if x, ok := x.GetKind().(*TagOptions_Message); ok {
		return x.Message
	}
	return nil
}

func (x *TagOptions) GetRepeated() *RepeatedTags {
	if x, ok := x.GetKind().(*TagOptions_Repeated); ok {
		return x.Repeated
	}
	return nil
}

func (x *TagOptions) GetMap() *MapTags {
	if x, ok := x.GetKind().(*TagOptions_Map); ok {
		return x.Map
	}
	return nil
}

type isTagOptions_Kind interface {
	isTagOptions_Kind()
}

type TagOptions_Oneof struct {
	// OneOf Field types
	Oneof *OneOfTags `protobuf:"bytes,20,opt,name=oneof,proto3,oneof"`
}

type TagOptions_Float struct {
	// Basic Field Types
	Float *FloatTags `protobuf:"bytes,21,opt,name=float,proto3,oneof"`
}

type TagOptions_Int struct {
	Int *IntTags `protobuf:"bytes,22,opt,name=int,proto3,oneof"`
}

type TagOptions_Uint struct {
	Uint *UintTags `protobuf:"bytes,23,opt,name=uint,proto3,oneof"`
}

type TagOptions_String_ struct {
	String_ *StringTags `protobuf:"bytes,24,opt,name=string,proto3,oneof"`
}

type TagOptions_Bytes struct {
	Bytes *BytesTags `protobuf:"bytes,25,opt,name=bytes,proto3,oneof"`
}

type TagOptions_Bool struct {
	Bool *BoolTags `protobuf:"bytes,26,opt,name=bool,proto3,oneof"`
}

type TagOptions_Enum struct {
	Enum *EnumTags `protobuf:"bytes,27,opt,name=enum,proto3,oneof"`
}

type TagOptions_Message struct {
	// Complex Field Types
	Message *MessageTags `protobuf:"bytes,28,opt,name=message,proto3,oneof"`
}

type TagOptions_Repeated struct {
	Repeated *RepeatedTags `protobuf:"bytes,29,opt,name=repeated,proto3,oneof"`
}

type TagOptions_Map struct {
	Map *MapTags `protobuf:"bytes,30,opt,name=map,proto3,oneof"`
}

func (*TagOptions_Oneof) isTagOptions_Kind() {}

func (*TagOptions_Float) isTagOptions_Kind() {}

func (*TagOptions_Int) isTagOptions_Kind() {}

func (*TagOptions_Uint) isTagOptions_Kind() {}

func (*TagOptions_String_) isTagOptions_Kind() {}

func (*TagOptions_Bytes) isTagOptions_Kind() {}

func (*TagOptions_Bool) isTagOptions_Kind() {}

func (*TagOptions_Enum) isTagOptions_Kind() {}

func (*TagOptions_Message) isTagOptions_Kind() {}

func (*TagOptions_Repeated) isTagOptions_Kind() {}

func (*TagOptions_Map) isTagOptions_Kind() {}

// OneOfOptions describe the constraints applied to the values type of oneof.
type OneOfTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// not_null ensures that exactly one the field options in a oneof is set;
	// validation fails if no fields in the oneof are set.
	NotNull *bool `protobuf:"varint,1,opt,name=not_null,json=notNull,proto3,oneof" json:"not_null,omitempty"`
}

func (x *OneOfTags) Reset() {
	*x = OneOfTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOfTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOfTags) ProtoMessage() {}

func (x *OneOfTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOfTags.ProtoReflect.Descriptor instead.
func (*OneOfTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{3}
}

func (x *OneOfTags) GetNotNull() bool {
	if x != nil && x.NotNull != nil {
		return *x.NotNull
	}
	return false
}

// FloatOptions describe the constraints applied to the values type of
// `float` and `double`.
type FloatTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Eq    *float64  `protobuf:"fixed64,3,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	Ne    *float64  `protobuf:"fixed64,4,opt,name=ne,proto3,oneof" json:"ne,omitempty"`
	Lt    *float64  `protobuf:"fixed64,5,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	Gt    *float64  `protobuf:"fixed64,6,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	Lte   *float64  `protobuf:"fixed64,7,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	Gte   *float64  `protobuf:"fixed64,8,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	In    []float64 `protobuf:"fixed64,9,rep,packed,name=in,proto3" json:"in,omitempty"`
	NotIn []float64 `protobuf:"fixed64,10,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (x *FloatTags) Reset() {
	*x = FloatTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatTags) ProtoMessage() {}

func (x *FloatTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatTags.ProtoReflect.Descriptor instead.
func (*FloatTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{4}
}

func (x *FloatTags) GetEq() float64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *FloatTags) GetNe() float64 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *FloatTags) GetLt() float64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *FloatTags) GetGt() float64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *FloatTags) GetLte() float64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *FloatTags) GetGte() float64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *FloatTags) GetIn() []float64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FloatTags) GetNotIn() []float64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// IntOptions describe the constraints applied to the values type of
// `int32`, `int64`, `sint32`, `sint64`, `sfixed32`, `sfixed64`.
type IntTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// eq specifies that this field must be equal to the specified value.
	Eq *int64 `protobuf:"varint,3,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// ne specifies that this field must be not equal to the specified value.
	Ne *int64 `protobuf:"varint,4,opt,name=ne,proto3,oneof" json:"ne,omitempty"`
	// lt specifies that this field must be less than the specified value.
	Lt *int64 `protobuf:"varint,5,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// gt specifies that this field must be greater than the specified value.
	Gt *int64 `protobuf:"varint,6,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// lte specifies that this field must be less than or equal to the specified value.
	Lte *int64 `protobuf:"varint,7,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// gte specifies that this field must be greater than or equal to the specified value.
	Gte *int64 `protobuf:"varint,8,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// in specifies that this field must be in the specified value lists.
	In []int64 `protobuf:"varint,9,rep,packed,name=in,proto3" json:"in,omitempty"`
	// not_in specifies that this field must not be in the specified value lists.
	NotIn []int64 `protobuf:"varint,10,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (x *IntTags) Reset() {
	*x = IntTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntTags) ProtoMessage() {}

func (x *IntTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntTags.ProtoReflect.Descriptor instead.
func (*IntTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{5}
}

func (x *IntTags) GetEq() int64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *IntTags) GetNe() int64 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *IntTags) GetLt() int64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *IntTags) GetGt() int64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *IntTags) GetLte() int64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *IntTags) GetGte() int64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *IntTags) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *IntTags) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// UintOptions describe the constraints applied to the values type of
// `uint32`, `uint64`, `fixed32`, `fixed64`.
type UintTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// eq specifies that this field must be equal to the specified value.
	Eq *uint64 `protobuf:"varint,3,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// ne specifies that this field must be not equal to the specified value.
	Ne *uint64 `protobuf:"varint,4,opt,name=ne,proto3,oneof" json:"ne,omitempty"`
	// lt specifies that this field must be less than the specified value.
	Lt *uint64 `protobuf:"varint,5,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// gt specifies that this field must be greater than the specified value.
	Gt *uint64 `protobuf:"varint,6,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// lte specifies that this field must be less than or equal to the specified value.
	Lte *uint64 `protobuf:"varint,7,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// gte specifies that this field must be greater than or equal to the specified value.
	Gte *uint64 `protobuf:"varint,8,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// in specifies that this field must be in the specified value lists.
	In []uint64 `protobuf:"varint,9,rep,packed,name=in,proto3" json:"in,omitempty"`
	// not_in specifies that this field must not be in the specified value lists.
	NotIn []uint64 `protobuf:"varint,10,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
}

func (x *UintTags) Reset() {
	*x = UintTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UintTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UintTags) ProtoMessage() {}

func (x *UintTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UintTags.ProtoReflect.Descriptor instead.
func (*UintTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{6}
}

func (x *UintTags) GetEq() uint64 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *UintTags) GetNe() uint64 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *UintTags) GetLt() uint64 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *UintTags) GetGt() uint64 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *UintTags) GetLte() uint64 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *UintTags) GetGte() uint64 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *UintTags) GetIn() []uint64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *UintTags) GetNotIn() []uint64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// StringOptions describe the constraints applied to the values type of `string`.
type StringTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// eq specifies that this field must be equal to the specified value.
	Eq *string `protobuf:"bytes,3,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// ne specifies that this field must be not equal to the specified value.
	Ne *string `protobuf:"bytes,4,opt,name=ne,proto3,oneof" json:"ne,omitempty"`
	// lt specifies that this field must be less than the specified value.
	Lt *string `protobuf:"bytes,5,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// gt specifies that this field must be greater than the specified value.
	Gt *string `protobuf:"bytes,6,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// lte specifies that this field must be less than or equal to the specified value.
	Lte *string `protobuf:"bytes,7,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// gte specifies that this field must be greater than or equal to the specified value.
	Gte *string `protobuf:"bytes,8,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// in specifies that this field must be in the specified value lists.
	In []string `protobuf:"bytes,9,rep,name=in,proto3" json:"in,omitempty"`
	// not_in specifies that this field must not be in the specified value lists.
	NotIn []string `protobuf:"bytes,10,rep,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// char_len_eq specifies that this field must be equal to the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	CharLenEq *int64 `protobuf:"varint,20,opt,name=char_len_eq,json=charLenEq,proto3,oneof" json:"char_len_eq,omitempty"`
	// char_len_ne specifies that this field must not be equal to the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	CharLenNe *int64 `protobuf:"varint,21,opt,name=char_len_ne,json=charLenNe,proto3,oneof" json:"char_len_ne,omitempty"`
	// char_len_gt specifies that this field must be greater than the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	CharLenGt *int64 `protobuf:"varint,22,opt,name=char_len_gt,json=charLenGt,proto3,oneof" json:"char_len_gt,omitempty"`
	// char_len_lt specifies that this field must be less than the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	CharLenLt *int64 `protobuf:"varint,23,opt,name=char_len_lt,json=charLenLt,proto3,oneof" json:"char_len_lt,omitempty"`
	// char_len_gte specifies that this field must be greater than or equal to the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	CharLenGte *int64 `protobuf:"varint,24,opt,name=char_len_gte,json=charLenGte,proto3,oneof" json:"char_len_gte,omitempty"`
	// char_len_lte specifies that this field must be less than or equal to the specified number of
	// characters (Unicode code points). Note that the number of
	// characters may differ from the number of bytes in the string.
	CharLenLte *int64 `protobuf:"varint,25,opt,name=char_len_lte,json=charLenLte,proto3,oneof" json:"char_len_lte,omitempty"`
	// byte_len_eq specifies that this field must be equal to the specified number of bytes.
	ByteLenEq *int64 `protobuf:"varint,30,opt,name=byte_len_eq,json=byteLenEq,proto3,oneof" json:"byte_len_eq,omitempty"`
	// byte_len_ne specifies that this field must not be equal to the specified number of bytes.
	ByteLenNe *int64 `protobuf:"varint,31,opt,name=byte_len_ne,json=byteLenNe,proto3,oneof" json:"byte_len_ne,omitempty"`
	// byte_len_gt specifies that this field must be greater than the specified number of bytes.
	ByteLenGt *int64 `protobuf:"varint,32,opt,name=byte_len_gt,json=byteLenGt,proto3,oneof" json:"byte_len_gt,omitempty"`
	// byte_len_lt specifies that this field must be less than the specified number of bytes.
	ByteLenLt *int64 `protobuf:"varint,33,opt,name=byte_len_lt,json=byteLenLt,proto3,oneof" json:"byte_len_lt,omitempty"`
	// byte_len_gte specifies that this field must be greater than or equal to the specified number of bytes.
	ByteLenGte *int64 `protobuf:"varint,34,opt,name=byte_len_gte,json=byteLenGte,proto3,oneof" json:"byte_len_gte,omitempty"`
	// byte_len_lte specifies that this field must be less than or equal to the specified number of bytes.
	ByteLenLte *int64 `protobuf:"varint,35,opt,name=byte_len_lte,json=byteLenLte,proto3,oneof" json:"byte_len_lte,omitempty"`
	// regex specifies that this field must be math a RE2-syntax regex.
	Regex *string `protobuf:"bytes,40,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
	// prefix specifies that this field must be start with the specified prefix.
	Prefix *string `protobuf:"bytes,41,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
	// no_prefix specifies that this field must not be start with the specified prefix.
	NoPrefix *string `protobuf:"bytes,42,opt,name=no_prefix,json=noPrefix,proto3,oneof" json:"no_prefix,omitempty"`
	// prefix specifies that this field must be end with the specified suffix.
	Suffix *string `protobuf:"bytes,43,opt,name=suffix,proto3,oneof" json:"suffix,omitempty"`
	// prefix specifies that this field must not be end with the specified suffix.
	NoSuffix *string `protobuf:"bytes,44,opt,name=no_suffix,json=noSuffix,proto3,oneof" json:"no_suffix,omitempty"`
	// prefix specifies that this field must be contains the specified value.
	Contains *string `protobuf:"bytes,45,opt,name=contains,proto3,oneof" json:"contains,omitempty"`
	// prefix specifies that this field must not be contains the specified value.
	NotContains *string `protobuf:"bytes,46,opt,name=not_contains,json=notContains,proto3,oneof" json:"not_contains,omitempty"`
	// prefix specifies that this field must be contains the specified any value.
	ContainsAny *string `protobuf:"bytes,47,opt,name=contains_any,json=containsAny,proto3,oneof" json:"contains_any,omitempty"`
	// prefix specifies that this field must not be contains the specified any value.
	NotContainsAny *string `protobuf:"bytes,48,opt,name=not_contains_any,json=notContainsAny,proto3,oneof" json:"not_contains_any,omitempty"`
	// utf8 specifies that the field must be utf8 codec string.
	Utf8 *bool `protobuf:"varint,81,opt,name=utf8,proto3,oneof" json:"utf8,omitempty"`
	// ascii specifies that the field must be a ASCII characters string.
	Ascii *bool `protobuf:"varint,71,opt,name=ascii,proto3,oneof" json:"ascii,omitempty"`
	// print_ascii specifies that the field must be a printable ASCII string.
	PrintAscii *bool `protobuf:"varint,72,opt,name=print_ascii,json=printAscii,proto3,oneof" json:"print_ascii,omitempty"`
	// boolean specifies that the field must be a boolean string.
	Boolean *bool `protobuf:"varint,73,opt,name=boolean,proto3,oneof" json:"boolean,omitempty"`
	// lowercase specifies that the field must be a lowercase string.
	Lowercase *bool `protobuf:"varint,74,opt,name=lowercase,proto3,oneof" json:"lowercase,omitempty"`
	// uppercase specifies that the field must be a uppercase string.
	Uppercase *bool `protobuf:"varint,75,opt,name=uppercase,proto3,oneof" json:"uppercase,omitempty"`
	// alpha specifies that the field must be a alpha characters string.
	Alpha *bool `protobuf:"varint,76,opt,name=alpha,proto3,oneof" json:"alpha,omitempty"` // a ~ z and A ~ Z
	// number specifies that the field must be a number characters string.
	Number *bool `protobuf:"varint,77,opt,name=number,proto3,oneof" json:"number,omitempty"` // 0 ~ 9
	// alpha_number specifies that the field must be a alphanumeric characters string.
	AlphaNumber *bool `protobuf:"varint,78,opt,name=alpha_number,json=alphaNumber,proto3,oneof" json:"alpha_number,omitempty"` // 0 ~ 9, a ~ z and A ~ Z
	// ip specifies that the field must be a valid IP (v4 or v6) address.
	Ip *bool `protobuf:"varint,101,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	// ipv4 specifies that the field must be a valid IPv4 address.
	Ipv4 *bool `protobuf:"varint,102,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
	// ipv6 specifies that the field must be a valid IPv6 address.
	Ipv6 *bool `protobuf:"varint,103,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
	// ip_addr specifies that the field must be a resolvable IP address.
	IpAddr *bool `protobuf:"varint,104,opt,name=ip_addr,json=ipAddr,proto3,oneof" json:"ip_addr,omitempty"`
	// ip4_addr specifies that the field must be a resolvable Ipv4 address.
	Ip4Addr *bool `protobuf:"varint,105,opt,name=ip4_addr,json=ip4Addr,proto3,oneof" json:"ip4_addr,omitempty"`
	// ip6_addr specifies that the field must be a resolvable Ipv6 address.
	Ip6Addr *bool `protobuf:"varint,106,opt,name=ip6_addr,json=ip6Addr,proto3,oneof" json:"ip6_addr,omitempty"`
	// cidr specifies that the field must be a valid CIDR notation.
	Cidr *bool `protobuf:"varint,107,opt,name=cidr,proto3,oneof" json:"cidr,omitempty"`
	// cidrv4 specifies that the field must be a valid CIDR notation for an IPv4 address.
	Cidrv4 *bool `protobuf:"varint,108,opt,name=cidrv4,proto3,oneof" json:"cidrv4,omitempty"`
	// cidrv6 specifies that the field must be a valid CIDR notation for an IPv6 address.
	Cidrv6 *bool `protobuf:"varint,109,opt,name=cidrv6,proto3,oneof" json:"cidrv6,omitempty"`
	// tcp_addr specifies that the field must be a valid TCP address.
	TcpAddr *bool `protobuf:"varint,111,opt,name=tcp_addr,json=tcpAddr,proto3,oneof" json:"tcp_addr,omitempty"`
	// tcp4_addr specifies that the field must be a valid IPv4 TCP address.
	Tcp4Addr *bool `protobuf:"varint,112,opt,name=tcp4_addr,json=tcp4Addr,proto3,oneof" json:"tcp4_addr,omitempty"`
	// tcp6_addr specifies that the field must be a valid IPv6 TCP address.
	Tcp6Addr *bool `protobuf:"varint,113,opt,name=tcp6_addr,json=tcp6Addr,proto3,oneof" json:"tcp6_addr,omitempty"`
	// udp_addr specifies that the field must be a valid UDP address.
	UdpAddr *bool `protobuf:"varint,114,opt,name=udp_addr,json=udpAddr,proto3,oneof" json:"udp_addr,omitempty"`
	// udp4_addr specifies that the field must be a valid UDP v4 address.
	Udp4Addr *bool `protobuf:"varint,115,opt,name=udp4_addr,json=udp4Addr,proto3,oneof" json:"udp4_addr,omitempty"`
	// udp6_addr specifies that the field must be a valid UDP v6 address.
	Udp6Addr *bool `protobuf:"varint,116,opt,name=udp6_addr,json=udp6Addr,proto3,oneof" json:"udp6_addr,omitempty"`
	// mac specifies that the field must be a valid MAC address.
	Mac *bool `protobuf:"varint,110,opt,name=mac,proto3,oneof" json:"mac,omitempty"`
	// unix_addr specifies that the field must be a valid UNIX address.
	UnixAddr *bool `protobuf:"varint,117,opt,name=unix_addr,json=unixAddr,proto3,oneof" json:"unix_addr,omitempty"`
	// hostname specified that the field must be valid hostname as defined by RFC 952.
	Hostname *bool `protobuf:"varint,118,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	// hostname specified that the field must be valid hostname as defined by RFC 1123.
	HostnameRfc1123 *bool `protobuf:"varint,119,opt,name=hostname_rfc1123,json=hostnameRfc1123,proto3,oneof" json:"hostname_rfc1123,omitempty"`
	// hostname_port specifies that the field must be a string format with hostname and port.
	HostnamePort *bool `protobuf:"varint,120,opt,name=hostname_port,json=hostnamePort,proto3,oneof" json:"hostname_port,omitempty"`
	// data_uri specifies that the field must be a string in DATA URI format.
	DataUri *bool `protobuf:"varint,121,opt,name=data_uri,json=dataUri,proto3,oneof" json:"data_uri,omitempty"`
	// fqdn specifies that the field must be a string in FQDN format.
	Fqdn *bool `protobuf:"varint,122,opt,name=fqdn,proto3,oneof" json:"fqdn,omitempty"`
	// uri specifies that the field must be a string in URI format.
	Uri *bool `protobuf:"varint,123,opt,name=uri,proto3,oneof" json:"uri,omitempty"`
	// url specifies that the field must be a string in URL format.
	Url *bool `protobuf:"varint,124,opt,name=url,proto3,oneof" json:"url,omitempty"`
	// url_encoded specifies that the field must be a string in URL encoded format.
	UrlEncoded *bool `protobuf:"varint,125,opt,name=url_encoded,json=urlEncoded,proto3,oneof" json:"url_encoded,omitempty"`
	// unix_cron specifies the field must be a valid standard UNIX-Style crontab expression.
	UnixCron *bool `protobuf:"varint,80,opt,name=unix_cron,json=unixCron,proto3,oneof" json:"unix_cron,omitempty"`
	// email specifies that the field must be a valid email address as defined by RFC 5322.
	Email *bool `protobuf:"varint,140,opt,name=email,proto3,oneof" json:"email,omitempty"`
	// json specifies that the field must be a string in JSON format.
	Json *bool `protobuf:"varint,141,opt,name=json,proto3,oneof" json:"json,omitempty"`
	// jwt specifies that the field must be a string in JWT format.
	Jwt *bool `protobuf:"varint,142,opt,name=jwt,proto3,oneof" json:"jwt,omitempty"`
	// html specifies that the field must be a string in HTML format.
	Html *bool `protobuf:"varint,143,opt,name=html,proto3,oneof" json:"html,omitempty"`
	// html_encoded specifies that the field must be a string in HTML encoded format.
	HtmlEncoded *bool `protobuf:"varint,144,opt,name=html_encoded,json=htmlEncoded,proto3,oneof" json:"html_encoded,omitempty"`
	// base64 specifies that the field must be a string in BASE64 format.
	Base64 *bool `protobuf:"varint,145,opt,name=base64,proto3,oneof" json:"base64,omitempty"`
	// base64_url specifies that the field must be a string in BASE64 URL format.
	Base64Url *bool `protobuf:"varint,146,opt,name=base64_url,json=base64Url,proto3,oneof" json:"base64_url,omitempty"`
	// hexadecimal specifies that the field must be a string in hexadecimal format.
	Hexadecimal *bool `protobuf:"varint,147,opt,name=hexadecimal,proto3,oneof" json:"hexadecimal,omitempty"`
	// datetime specifies that the field must be format with specified datetime layout.
	Datetime *string `protobuf:"bytes,148,opt,name=datetime,proto3,oneof" json:"datetime,omitempty"`
	// timezone specifies that the field must be a valid timezone.
	Timezone *bool `protobuf:"varint,149,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`
	// uuid specifies that the field must be a valid UUID.
	Uuid *bool `protobuf:"varint,150,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"` // RFC4122
	// uuid1 specifies that the field must be a valid version 1 UUID.
	Uuid1 *bool `protobuf:"varint,151,opt,name=uuid1,proto3,oneof" json:"uuid1,omitempty"` // RFC4122
	// uuid3 specifies that the field must be a valid version 3 UUID.
	Uuid3 *bool `protobuf:"varint,152,opt,name=uuid3,proto3,oneof" json:"uuid3,omitempty"` // RFC4122
	// uuid4 specifies that the field must be a valid version 4 UUID.
	Uuid4 *bool `protobuf:"varint,153,opt,name=uuid4,proto3,oneof" json:"uuid4,omitempty"` // RFC4122
	// uuid5 specifies that the field must be a valid version 5 UUID.
	Uuid5 *bool `protobuf:"varint,154,opt,name=uuid5,proto3,oneof" json:"uuid5,omitempty"` // RFC4122
}

func (x *StringTags) Reset() {
	*x = StringTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringTags) ProtoMessage() {}

func (x *StringTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringTags.ProtoReflect.Descriptor instead.
func (*StringTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{7}
}

func (x *StringTags) GetEq() string {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return ""
}

func (x *StringTags) GetNe() string {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return ""
}

func (x *StringTags) GetLt() string {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return ""
}

func (x *StringTags) GetGt() string {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return ""
}

func (x *StringTags) GetLte() string {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return ""
}

func (x *StringTags) GetGte() string {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return ""
}

func (x *StringTags) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *StringTags) GetNotIn() []string {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *StringTags) GetCharLenEq() int64 {
	if x != nil && x.CharLenEq != nil {
		return *x.CharLenEq
	}
	return 0
}

func (x *StringTags) GetCharLenNe() int64 {
	if x != nil && x.CharLenNe != nil {
		return *x.CharLenNe
	}
	return 0
}

func (x *StringTags) GetCharLenGt() int64 {
	if x != nil && x.CharLenGt != nil {
		return *x.CharLenGt
	}
	return 0
}

func (x *StringTags) GetCharLenLt() int64 {
	if x != nil && x.CharLenLt != nil {
		return *x.CharLenLt
	}
	return 0
}

func (x *StringTags) GetCharLenGte() int64 {
	if x != nil && x.CharLenGte != nil {
		return *x.CharLenGte
	}
	return 0
}

func (x *StringTags) GetCharLenLte() int64 {
	if x != nil && x.CharLenLte != nil {
		return *x.CharLenLte
	}
	return 0
}

func (x *StringTags) GetByteLenEq() int64 {
	if x != nil && x.ByteLenEq != nil {
		return *x.ByteLenEq
	}
	return 0
}

func (x *StringTags) GetByteLenNe() int64 {
	if x != nil && x.ByteLenNe != nil {
		return *x.ByteLenNe
	}
	return 0
}

func (x *StringTags) GetByteLenGt() int64 {
	if x != nil && x.ByteLenGt != nil {
		return *x.ByteLenGt
	}
	return 0
}

func (x *StringTags) GetByteLenLt() int64 {
	if x != nil && x.ByteLenLt != nil {
		return *x.ByteLenLt
	}
	return 0
}

func (x *StringTags) GetByteLenGte() int64 {
	if x != nil && x.ByteLenGte != nil {
		return *x.ByteLenGte
	}
	return 0
}

func (x *StringTags) GetByteLenLte() int64 {
	if x != nil && x.ByteLenLte != nil {
		return *x.ByteLenLte
	}
	return 0
}

func (x *StringTags) GetRegex() string {
	if x != nil && x.Regex != nil {
		return *x.Regex
	}
	return ""
}

func (x *StringTags) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *StringTags) GetNoPrefix() string {
	if x != nil && x.NoPrefix != nil {
		return *x.NoPrefix
	}
	return ""
}

func (x *StringTags) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *StringTags) GetNoSuffix() string {
	if x != nil && x.NoSuffix != nil {
		return *x.NoSuffix
	}
	return ""
}

func (x *StringTags) GetContains() string {
	if x != nil && x.Contains != nil {
		return *x.Contains
	}
	return ""
}

func (x *StringTags) GetNotContains() string {
	if x != nil && x.NotContains != nil {
		return *x.NotContains
	}
	return ""
}

func (x *StringTags) GetContainsAny() string {
	if x != nil && x.ContainsAny != nil {
		return *x.ContainsAny
	}
	return ""
}

func (x *StringTags) GetNotContainsAny() string {
	if x != nil && x.NotContainsAny != nil {
		return *x.NotContainsAny
	}
	return ""
}

func (x *StringTags) GetUtf8() bool {
	if x != nil && x.Utf8 != nil {
		return *x.Utf8
	}
	return false
}

func (x *StringTags) GetAscii() bool {
	if x != nil && x.Ascii != nil {
		return *x.Ascii
	}
	return false
}

func (x *StringTags) GetPrintAscii() bool {
	if x != nil && x.PrintAscii != nil {
		return *x.PrintAscii
	}
	return false
}

func (x *StringTags) GetBoolean() bool {
	if x != nil && x.Boolean != nil {
		return *x.Boolean
	}
	return false
}

func (x *StringTags) GetLowercase() bool {
	if x != nil && x.Lowercase != nil {
		return *x.Lowercase
	}
	return false
}

func (x *StringTags) GetUppercase() bool {
	if x != nil && x.Uppercase != nil {
		return *x.Uppercase
	}
	return false
}

func (x *StringTags) GetAlpha() bool {
	if x != nil && x.Alpha != nil {
		return *x.Alpha
	}
	return false
}

func (x *StringTags) GetNumber() bool {
	if x != nil && x.Number != nil {
		return *x.Number
	}
	return false
}

func (x *StringTags) GetAlphaNumber() bool {
	if x != nil && x.AlphaNumber != nil {
		return *x.AlphaNumber
	}
	return false
}

func (x *StringTags) GetIp() bool {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return false
}

func (x *StringTags) GetIpv4() bool {
	if x != nil && x.Ipv4 != nil {
		return *x.Ipv4
	}
	return false
}

func (x *StringTags) GetIpv6() bool {
	if x != nil && x.Ipv6 != nil {
		return *x.Ipv6
	}
	return false
}

func (x *StringTags) GetIpAddr() bool {
	if x != nil && x.IpAddr != nil {
		return *x.IpAddr
	}
	return false
}

func (x *StringTags) GetIp4Addr() bool {
	if x != nil && x.Ip4Addr != nil {
		return *x.Ip4Addr
	}
	return false
}

func (x *StringTags) GetIp6Addr() bool {
	if x != nil && x.Ip6Addr != nil {
		return *x.Ip6Addr
	}
	return false
}

func (x *StringTags) GetCidr() bool {
	if x != nil && x.Cidr != nil {
		return *x.Cidr
	}
	return false
}

func (x *StringTags) GetCidrv4() bool {
	if x != nil && x.Cidrv4 != nil {
		return *x.Cidrv4
	}
	return false
}

func (x *StringTags) GetCidrv6() bool {
	if x != nil && x.Cidrv6 != nil {
		return *x.Cidrv6
	}
	return false
}

func (x *StringTags) GetTcpAddr() bool {
	if x != nil && x.TcpAddr != nil {
		return *x.TcpAddr
	}
	return false
}

func (x *StringTags) GetTcp4Addr() bool {
	if x != nil && x.Tcp4Addr != nil {
		return *x.Tcp4Addr
	}
	return false
}

func (x *StringTags) GetTcp6Addr() bool {
	if x != nil && x.Tcp6Addr != nil {
		return *x.Tcp6Addr
	}
	return false
}

func (x *StringTags) GetUdpAddr() bool {
	if x != nil && x.UdpAddr != nil {
		return *x.UdpAddr
	}
	return false
}

func (x *StringTags) GetUdp4Addr() bool {
	if x != nil && x.Udp4Addr != nil {
		return *x.Udp4Addr
	}
	return false
}

func (x *StringTags) GetUdp6Addr() bool {
	if x != nil && x.Udp6Addr != nil {
		return *x.Udp6Addr
	}
	return false
}

func (x *StringTags) GetMac() bool {
	if x != nil && x.Mac != nil {
		return *x.Mac
	}
	return false
}

func (x *StringTags) GetUnixAddr() bool {
	if x != nil && x.UnixAddr != nil {
		return *x.UnixAddr
	}
	return false
}

func (x *StringTags) GetHostname() bool {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return false
}

func (x *StringTags) GetHostnameRfc1123() bool {
	if x != nil && x.HostnameRfc1123 != nil {
		return *x.HostnameRfc1123
	}
	return false
}

func (x *StringTags) GetHostnamePort() bool {
	if x != nil && x.HostnamePort != nil {
		return *x.HostnamePort
	}
	return false
}

func (x *StringTags) GetDataUri() bool {
	if x != nil && x.DataUri != nil {
		return *x.DataUri
	}
	return false
}

func (x *StringTags) GetFqdn() bool {
	if x != nil && x.Fqdn != nil {
		return *x.Fqdn
	}
	return false
}

func (x *StringTags) GetUri() bool {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return false
}

func (x *StringTags) GetUrl() bool {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return false
}

func (x *StringTags) GetUrlEncoded() bool {
	if x != nil && x.UrlEncoded != nil {
		return *x.UrlEncoded
	}
	return false
}

func (x *StringTags) GetUnixCron() bool {
	if x != nil && x.UnixCron != nil {
		return *x.UnixCron
	}
	return false
}

func (x *StringTags) GetEmail() bool {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return false
}

func (x *StringTags) GetJson() bool {
	if x != nil && x.Json != nil {
		return *x.Json
	}
	return false
}

func (x *StringTags) GetJwt() bool {
	if x != nil && x.Jwt != nil {
		return *x.Jwt
	}
	return false
}

func (x *StringTags) GetHtml() bool {
	if x != nil && x.Html != nil {
		return *x.Html
	}
	return false
}

func (x *StringTags) GetHtmlEncoded() bool {
	if x != nil && x.HtmlEncoded != nil {
		return *x.HtmlEncoded
	}
	return false
}

func (x *StringTags) GetBase64() bool {
	if x != nil && x.Base64 != nil {
		return *x.Base64
	}
	return false
}

func (x *StringTags) GetBase64Url() bool {
	if x != nil && x.Base64Url != nil {
		return *x.Base64Url
	}
	return false
}

func (x *StringTags) GetHexadecimal() bool {
	if x != nil && x.Hexadecimal != nil {
		return *x.Hexadecimal
	}
	return false
}

func (x *StringTags) GetDatetime() string {
	if x != nil && x.Datetime != nil {
		return *x.Datetime
	}
	return ""
}

func (x *StringTags) GetTimezone() bool {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return false
}

func (x *StringTags) GetUuid() bool {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return false
}

func (x *StringTags) GetUuid1() bool {
	if x != nil && x.Uuid1 != nil {
		return *x.Uuid1
	}
	return false
}

func (x *StringTags) GetUuid3() bool {
	if x != nil && x.Uuid3 != nil {
		return *x.Uuid3
	}
	return false
}

func (x *StringTags) GetUuid4() bool {
	if x != nil && x.Uuid4 != nil {
		return *x.Uuid4
	}
	return false
}

func (x *StringTags) GetUuid5() bool {
	if x != nil && x.Uuid5 != nil {
		return *x.Uuid5
	}
	return false
}

// BytesRules describe the constraints applied to `bytes` values
type BytesTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// len_eq specifies that this field must be equal to the specified number of
	LenEq *int64 `protobuf:"varint,3,opt,name=len_eq,json=lenEq,proto3,oneof" json:"len_eq,omitempty"`
	// len_ne specifies that this field must not be equal to the specified number of
	LenNe *int64 `protobuf:"varint,4,opt,name=len_ne,json=lenNe,proto3,oneof" json:"len_ne,omitempty"`
	// len_lt specifies that this field must be less than the specified number of
	LenLt *int64 `protobuf:"varint,5,opt,name=len_lt,json=lenLt,proto3,oneof" json:"len_lt,omitempty"`
	// len_gt specifies that this field must be greater than the specified number of
	LenGt *int64 `protobuf:"varint,6,opt,name=len_gt,json=lenGt,proto3,oneof" json:"len_gt,omitempty"`
	// len_lte specifies that this field must be less than or equal to the specified number of
	LenLte *int64 `protobuf:"varint,7,opt,name=len_lte,json=lenLte,proto3,oneof" json:"len_lte,omitempty"`
	// len_gte specifies that this field must be greater than or equal to the specified number of
	LenGte *int64 `protobuf:"varint,8,opt,name=len_gte,json=lenGte,proto3,oneof" json:"len_gte,omitempty"`
}

func (x *BytesTags) Reset() {
	*x = BytesTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesTags) ProtoMessage() {}

func (x *BytesTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesTags.ProtoReflect.Descriptor instead.
func (*BytesTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{8}
}

func (x *BytesTags) GetLenEq() int64 {
	if x != nil && x.LenEq != nil {
		return *x.LenEq
	}
	return 0
}

func (x *BytesTags) GetLenNe() int64 {
	if x != nil && x.LenNe != nil {
		return *x.LenNe
	}
	return 0
}

func (x *BytesTags) GetLenLt() int64 {
	if x != nil && x.LenLt != nil {
		return *x.LenLt
	}
	return 0
}

func (x *BytesTags) GetLenGt() int64 {
	if x != nil && x.LenGt != nil {
		return *x.LenGt
	}
	return 0
}

func (x *BytesTags) GetLenLte() int64 {
	if x != nil && x.LenLte != nil {
		return *x.LenLte
	}
	return 0
}

func (x *BytesTags) GetLenGte() int64 {
	if x != nil && x.LenGte != nil {
		return *x.LenGte
	}
	return 0
}

type BoolTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// eq specifies that this field must be exactly the specified value
	Eq *bool `protobuf:"varint,3,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
}

func (x *BoolTags) Reset() {
	*x = BoolTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolTags) ProtoMessage() {}

func (x *BoolTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolTags.ProtoReflect.Descriptor instead.
func (*BoolTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{9}
}

func (x *BoolTags) GetEq() bool {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return false
}

type EnumTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// eq specifies that this field must be equal to the specified value.
	Eq *int32 `protobuf:"varint,3,opt,name=eq,proto3,oneof" json:"eq,omitempty"`
	// ne specifies that this field must be not equal to the specified value.
	Ne *int32 `protobuf:"varint,4,opt,name=ne,proto3,oneof" json:"ne,omitempty"`
	// lt specifies that this field must be less than the specified value.
	Lt *int32 `protobuf:"varint,5,opt,name=lt,proto3,oneof" json:"lt,omitempty"`
	// gt specifies that this field must be greater than the specified value.
	Gt *int32 `protobuf:"varint,6,opt,name=gt,proto3,oneof" json:"gt,omitempty"`
	// lte specifies that this field must be less than or equal to the specified value.
	Lte *int32 `protobuf:"varint,7,opt,name=lte,proto3,oneof" json:"lte,omitempty"`
	// gte specifies that this field must be greater than or equal to the specified value.
	Gte *int32 `protobuf:"varint,8,opt,name=gte,proto3,oneof" json:"gte,omitempty"`
	// in specifies that this field must be in the specified value lists.
	In []int32 `protobuf:"varint,9,rep,packed,name=in,proto3" json:"in,omitempty"`
	// not_in specifies that this field must not be in the specified value lists.
	NotIn []int32 `protobuf:"varint,10,rep,packed,name=not_in,json=notIn,proto3" json:"not_in,omitempty"`
	// in_enums specifies that this field must be a valid enum number.
	InEnums *bool `protobuf:"varint,11,opt,name=in_enums,json=inEnums,proto3,oneof" json:"in_enums,omitempty"`
}

func (x *EnumTags) Reset() {
	*x = EnumTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumTags) ProtoMessage() {}

func (x *EnumTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumTags.ProtoReflect.Descriptor instead.
func (*EnumTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{10}
}

func (x *EnumTags) GetEq() int32 {
	if x != nil && x.Eq != nil {
		return *x.Eq
	}
	return 0
}

func (x *EnumTags) GetNe() int32 {
	if x != nil && x.Ne != nil {
		return *x.Ne
	}
	return 0
}

func (x *EnumTags) GetLt() int32 {
	if x != nil && x.Lt != nil {
		return *x.Lt
	}
	return 0
}

func (x *EnumTags) GetGt() int32 {
	if x != nil && x.Gt != nil {
		return *x.Gt
	}
	return 0
}

func (x *EnumTags) GetLte() int32 {
	if x != nil && x.Lte != nil {
		return *x.Lte
	}
	return 0
}

func (x *EnumTags) GetGte() int32 {
	if x != nil && x.Gte != nil {
		return *x.Gte
	}
	return 0
}

func (x *EnumTags) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *EnumTags) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *EnumTags) GetInEnums() bool {
	if x != nil && x.InEnums != nil {
		return *x.InEnums
	}
	return false
}

type MessageTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// not_null specifies that this field must be set
	NotNull *bool `protobuf:"varint,2,opt,name=not_null,json=notNull,proto3,oneof" json:"not_null,omitempty"`
	// skip specifies that the validation option of this field should not be evaluated
	Skip *bool `protobuf:"varint,3,opt,name=skip,proto3,oneof" json:"skip,omitempty"`
}

func (x *MessageTags) Reset() {
	*x = MessageTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageTags) ProtoMessage() {}

func (x *MessageTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageTags.ProtoReflect.Descriptor instead.
func (*MessageTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{11}
}

func (x *MessageTags) GetNotNull() bool {
	if x != nil && x.NotNull != nil {
		return *x.NotNull
	}
	return false
}

func (x *MessageTags) GetSkip() bool {
	if x != nil && x.Skip != nil {
		return *x.Skip
	}
	return false
}

type RepeatedTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// not_null specifies that this field must be set
	NotNull *bool `protobuf:"varint,2,opt,name=not_null,json=notNull,proto3,oneof" json:"not_null,omitempty"`
	// len_eq specifies that this field must be equal to the specified number of
	LenEq *int64 `protobuf:"varint,3,opt,name=len_eq,json=lenEq,proto3,oneof" json:"len_eq,omitempty"`
	// len_ne specifies that this field must not be equal to the specified number of
	LenNe *int64 `protobuf:"varint,4,opt,name=len_ne,json=lenNe,proto3,oneof" json:"len_ne,omitempty"`
	// len_lt specifies that this field must be less than the specified number of
	LenLt *int64 `protobuf:"varint,5,opt,name=len_lt,json=lenLt,proto3,oneof" json:"len_lt,omitempty"`
	// len_gt specifies that this field must be greater than the specified number of
	LenGt *int64 `protobuf:"varint,6,opt,name=len_gt,json=lenGt,proto3,oneof" json:"len_gt,omitempty"`
	// len_lte specifies that this field must be less than or equal to the specified number of
	LenLte *int64 `protobuf:"varint,7,opt,name=len_lte,json=lenLte,proto3,oneof" json:"len_lte,omitempty"`
	// len_gte specifies that this field must be greater than or equal to the specified number of
	LenGte *int64 `protobuf:"varint,8,opt,name=len_gte,json=lenGte,proto3,oneof" json:"len_gte,omitempty"`
	// Unique specifies that all elements in this field must be unique.
	// For message types, only check the pointer address is unique(not its fields).
	Unique *bool `protobuf:"varint,10,opt,name=unique,proto3,oneof" json:"unique,omitempty"`
	// Items specifies the contraints to be applied to each item in the field.
	// Repeated message fields will still execute validation against each item
	// unless skip is specified here.
	Item *TagOptions `protobuf:"bytes,11,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *RepeatedTags) Reset() {
	*x = RepeatedTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedTags) ProtoMessage() {}

func (x *RepeatedTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedTags.ProtoReflect.Descriptor instead.
func (*RepeatedTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{12}
}

func (x *RepeatedTags) GetNotNull() bool {
	if x != nil && x.NotNull != nil {
		return *x.NotNull
	}
	return false
}

func (x *RepeatedTags) GetLenEq() int64 {
	if x != nil && x.LenEq != nil {
		return *x.LenEq
	}
	return 0
}

func (x *RepeatedTags) GetLenNe() int64 {
	if x != nil && x.LenNe != nil {
		return *x.LenNe
	}
	return 0
}

func (x *RepeatedTags) GetLenLt() int64 {
	if x != nil && x.LenLt != nil {
		return *x.LenLt
	}
	return 0
}

func (x *RepeatedTags) GetLenGt() int64 {
	if x != nil && x.LenGt != nil {
		return *x.LenGt
	}
	return 0
}

func (x *RepeatedTags) GetLenLte() int64 {
	if x != nil && x.LenLte != nil {
		return *x.LenLte
	}
	return 0
}

func (x *RepeatedTags) GetLenGte() int64 {
	if x != nil && x.LenGte != nil {
		return *x.LenGte
	}
	return 0
}

func (x *RepeatedTags) GetUnique() bool {
	if x != nil && x.Unique != nil {
		return *x.Unique
	}
	return false
}

func (x *RepeatedTags) GetItem() *TagOptions {
	if x != nil {
		return x.Item
	}
	return nil
}

type MapTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// not_null specifies that this field must be set
	NotNull *bool `protobuf:"varint,2,opt,name=not_null,json=notNull,proto3,oneof" json:"not_null,omitempty"`
	// len_eq specifies that this field must be equal to the specified number of
	LenEq *int64 `protobuf:"varint,3,opt,name=len_eq,json=lenEq,proto3,oneof" json:"len_eq,omitempty"`
	// len_ne specifies that this field must not be equal to the specified number of
	LenNe *int64 `protobuf:"varint,4,opt,name=len_ne,json=lenNe,proto3,oneof" json:"len_ne,omitempty"`
	// len_lt specifies that this field must be less than the specified number of
	LenLt *int64 `protobuf:"varint,5,opt,name=len_lt,json=lenLt,proto3,oneof" json:"len_lt,omitempty"`
	// len_gt specifies that this field must be greater than the specified number of
	LenGt *int64 `protobuf:"varint,6,opt,name=len_gt,json=lenGt,proto3,oneof" json:"len_gt,omitempty"`
	// len_lte specifies that this field must be less than or equal to the specified number of
	LenLte *int64 `protobuf:"varint,7,opt,name=len_lte,json=lenLte,proto3,oneof" json:"len_lte,omitempty"`
	// len_gte specifies that this field must be greater than or equal to the specified number of
	LenGte *int64 `protobuf:"varint,8,opt,name=len_gte,json=lenGte,proto3,oneof" json:"len_gte,omitempty"`
	// key specifies the constraints to be applied to each key in the field.
	Key *TagOptions `protobuf:"bytes,11,opt,name=key,proto3" json:"key,omitempty"`
	// value specifies the constraints to be applied to the value of each key
	// in the field. Message values will still have their validations evaluated
	// unless skip is specified here.
	Value *TagOptions `protobuf:"bytes,12,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MapTags) Reset() {
	*x = MapTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_validator_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTags) ProtoMessage() {}

func (x *MapTags) ProtoReflect() protoreflect.Message {
	mi := &file_validator_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTags.ProtoReflect.Descriptor instead.
func (*MapTags) Descriptor() ([]byte, []int) {
	return file_validator_proto_rawDescGZIP(), []int{13}
}

func (x *MapTags) GetNotNull() bool {
	if x != nil && x.NotNull != nil {
		return *x.NotNull
	}
	return false
}

func (x *MapTags) GetLenEq() int64 {
	if x != nil && x.LenEq != nil {
		return *x.LenEq
	}
	return 0
}

func (x *MapTags) GetLenNe() int64 {
	if x != nil && x.LenNe != nil {
		return *x.LenNe
	}
	return 0
}

func (x *MapTags) GetLenLt() int64 {
	if x != nil && x.LenLt != nil {
		return *x.LenLt
	}
	return 0
}

func (x *MapTags) GetLenGt() int64 {
	if x != nil && x.LenGt != nil {
		return *x.LenGt
	}
	return 0
}

func (x *MapTags) GetLenLte() int64 {
	if x != nil && x.LenLte != nil {
		return *x.LenLte
	}
	return 0
}

func (x *MapTags) GetLenGte() int64 {
	if x != nil && x.LenGte != nil {
		return *x.LenGte
	}
	return 0
}

func (x *MapTags) GetKey() *TagOptions {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *MapTags) GetValue() *TagOptions {
	if x != nil {
		return x.Value
	}
	return nil
}

var file_validator_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*ValidOptions)(nil),
		Field:         65020,
		Name:          "validator.field",
		Tag:           "bytes,65020,opt,name=field",
		Filename:      "validator.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*ValidOptions)(nil),
		Field:         65031,
		Name:          "validator.oneof",
		Tag:           "bytes,65031,opt,name=oneof",
		Filename:      "validator.proto",
	},
}

// Extension fields to descriptorpb.FieldOptions.
var (
	// optional validator.ValidOptions field = 65020;
	E_Field = &file_validator_proto_extTypes[0]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// optional validator.ValidOptions oneof = 65031;
	E_Oneof = &file_validator_proto_extTypes[1]
)

var File_validator_proto protoreflect.FileDescriptor

var file_validator_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x68,
	0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d,
	0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x66, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x12, 0x29, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x4a, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x49, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x22, 0x8b, 0x04, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4f,
	0x6e, 0x65, 0x4f, 0x66, 0x54, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x12, 0x2c, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x54, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x26, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x69, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x04, 0x75, 0x69,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x54, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x54, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x04,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x70, 0x54,
	0x61, 0x67, 0x73, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0x38, 0x0a, 0x09, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x1e, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xe0, 0x01, 0x0a,
	0x09, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x65, 0x71,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12,
	0x13, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x02, 0x6e,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x03, 0x6c,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x05, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x49, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6e,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x22,
	0xde, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x65,
	0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x02,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x67, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x03,
	0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a,
	0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x49, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x6e, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65,
	0x22, 0xdf, 0x01, 0x0a, 0x08, 0x55, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a,
	0x02, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x88,
	0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01,
	0x52, 0x02, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x67, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x02, 0x67, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04,
	0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x02, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x6e, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67,
	0x74, 0x65, 0x22, 0x87, 0x1b, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x13, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x65, 0x71, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x13, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x02,
	0x67, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x67, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x03, 0x67, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x06, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x4e,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e,
	0x5f, 0x67, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x72, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x47,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65,
	0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x0c, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x4c, 0x65,
	0x6e, 0x4e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x5f, 0x67, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0e, 0x52, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x0f, 0x52, 0x09, 0x62, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x48, 0x10, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x4c, 0x65,
	0x6e, 0x47, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x48, 0x11, 0x52,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52,
	0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x08, 0x6e, 0x6f, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x6f, 0x5f, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x08, 0x6e, 0x6f, 0x53, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18,
	0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x79,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x41, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x1a, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x41, 0x6e, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x75, 0x74, 0x66, 0x38, 0x18,
	0x51, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x04, 0x75, 0x74, 0x66, 0x38, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x61, 0x73, 0x63, 0x69, 0x69, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x1c, 0x52, 0x05, 0x61, 0x73, 0x63, 0x69, 0x69, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x1d, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x63, 0x69, 0x69, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x1e, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x1f, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x20, 0x52, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63,
	0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x21, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x4d, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x22, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x4e,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x23, 0x52, 0x0b, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x24, 0x52, 0x02, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x18, 0x66, 0x20, 0x01, 0x28, 0x08, 0x48, 0x25, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x26, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x08, 0x48, 0x27,
	0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69,
	0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x48, 0x28, 0x52,
	0x07, 0x69, 0x70, 0x34, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x69,
	0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x29, 0x52,
	0x07, 0x69, 0x70, 0x36, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63,
	0x69, 0x64, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x2a, 0x52, 0x04, 0x63, 0x69, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x69, 0x64, 0x72, 0x76, 0x34, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x2b, 0x52, 0x06, 0x63, 0x69, 0x64, 0x72, 0x76, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x69, 0x64, 0x72, 0x76, 0x36, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x2c, 0x52, 0x06, 0x63, 0x69, 0x64, 0x72, 0x76, 0x36, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x2d, 0x52, 0x07, 0x74, 0x63, 0x70, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x74, 0x63, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x70, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x2e, 0x52, 0x08, 0x74, 0x63, 0x70, 0x34, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x74, 0x63, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x2f, 0x52, 0x08, 0x74, 0x63, 0x70, 0x36, 0x41, 0x64, 0x64, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x75, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x30, 0x52, 0x07, 0x75, 0x64, 0x70, 0x41, 0x64, 0x64, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x64, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x08, 0x48, 0x31, 0x52, 0x08, 0x75, 0x64, 0x70, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x64, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x74, 0x20, 0x01, 0x28, 0x08, 0x48, 0x32, 0x52, 0x08, 0x75, 0x64, 0x70, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x33, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x75, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x34, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x78, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x35, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x66, 0x63,
	0x31, 0x31, 0x32, 0x33, 0x18, 0x77, 0x20, 0x01, 0x28, 0x08, 0x48, 0x36, 0x52, 0x0f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x66, 0x63, 0x31, 0x31, 0x32, 0x33, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08, 0x48, 0x37, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x79, 0x20, 0x01, 0x28, 0x08, 0x48, 0x38, 0x52, 0x07,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x71,
	0x64, 0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x39, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x3a, 0x52, 0x03, 0x75, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3b, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x72, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x18, 0x7d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3c, 0x52, 0x0a, 0x75, 0x72, 0x6c, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x78, 0x5f,
	0x63, 0x72, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3d, 0x52, 0x08, 0x75, 0x6e,
	0x69, 0x78, 0x43, 0x72, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x3e, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x8d, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x3f, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x16, 0x0a, 0x03, 0x6a, 0x77, 0x74, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x40, 0x52,
	0x03, 0x6a, 0x77, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x18,
	0x8f, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x41, 0x52, 0x04, 0x68, 0x74, 0x6d, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x42, 0x52, 0x0b, 0x68, 0x74, 0x6d, 0x6c,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x62, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x43, 0x52, 0x06, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x44, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0b, 0x68, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x93, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x45, 0x52, 0x0b, 0x68, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x46, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x47, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x48, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x31, 0x18, 0x97, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x49, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x33, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x4a, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x33, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x4b, 0x52, 0x05, 0x75,
	0x75, 0x69, 0x64, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x75, 0x75, 0x69, 0x64, 0x35,
	0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x4c, 0x52, 0x05, 0x75, 0x75, 0x69, 0x64, 0x35,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6e,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x67, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x67, 0x74, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65,
	0x71, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67,
	0x74, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x6c, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f,
	0x61, 0x6e, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x74, 0x66, 0x38, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x69, 0x70, 0x76, 0x34, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x70,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x70, 0x36, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x63, 0x69, 0x64, 0x72, 0x76, 0x34, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x69, 0x64, 0x72,
	0x76, 0x36, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x63, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x63, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x75, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x64, 0x70,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x64, 0x70, 0x36, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x66, 0x63, 0x31, 0x31, 0x32, 0x33, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x66, 0x71, 0x64, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x63, 0x72,
	0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x77, 0x74, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x75, 0x72,
	0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x31, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x33, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x34, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x35, 0x22, 0xfb, 0x01, 0x0a,
	0x09, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x5f, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x65,
	0x6e, 0x45, 0x71, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x6e, 0x4e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x65, 0x6e, 0x4c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03,
	0x52, 0x05, 0x6c, 0x65, 0x6e, 0x47, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x65,
	0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x4c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x65, 0x6e, 0x5f,
	0x67, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e,
	0x47, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65,
	0x71, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x67, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65, 0x22, 0x26, 0x0a, 0x08, 0x42, 0x6f,
	0x6f, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x12, 0x13, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x02, 0x65, 0x71, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x65, 0x71, 0x22, 0x8c, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x13, 0x0a, 0x02, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x02, 0x65,
	0x71, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x02, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x6c, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x02, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x13,
	0x0a, 0x02, 0x67, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x02, 0x67, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6c, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x03, 0x6c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x67, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x03, 0x67, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x07, 0x69, 0x6e,
	0x45, 0x6e, 0x75, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x65, 0x71, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x6e, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x6c, 0x74, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x67, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x67, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x22, 0x5c, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x22,
	0xfe, 0x02, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x05, 0x6c, 0x65, 0x6e, 0x45, 0x71, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x05,
	0x6c, 0x65, 0x6e, 0x4e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x5f,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x6e, 0x4c,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x05, 0x6c, 0x65, 0x6e, 0x47, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x4c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x06, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x47, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x06,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x65,
	0x6e, 0x5f, 0x67, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x22, 0xfc, 0x02, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x08,
	0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x07, 0x6e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x05,
	0x6c, 0x65, 0x6e, 0x45, 0x71, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x5f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x05, 0x6c, 0x65, 0x6e, 0x4e,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x6e, 0x4c, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x04, 0x52, 0x05, 0x6c, 0x65, 0x6e, 0x47, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07,
	0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x4c, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x65,
	0x6e, 0x5f, 0x67, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x06, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x47, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x54, 0x61, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x67,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x6c, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65, 0x3a,
	0x4e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xfc, 0xfb, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x3a,
	0x4e, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x87, 0xfc, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42,
	0x5d, 0x0a, 0x1a, 0x69, 0x6f, 0x2e, 0x79, 0x75, 0x33, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2e, 0x70, 0x62, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x0b, 0x50,
	0x42, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x00, 0x5a, 0x30, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x33, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x78, 0x67, 0x6f, 0x2f,
	0x70, 0x62, 0x2f, 0x70, 0x62, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_validator_proto_rawDescOnce sync.Once
	file_validator_proto_rawDescData = file_validator_proto_rawDesc
)

func file_validator_proto_rawDescGZIP() []byte {
	file_validator_proto_rawDescOnce.Do(func() {
		file_validator_proto_rawDescData = protoimpl.X.CompressGZIP(file_validator_proto_rawDescData)
	})
	return file_validator_proto_rawDescData
}

var file_validator_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_validator_proto_goTypes = []interface{}{
	(*ValidOptions)(nil),              // 0: validator.ValidOptions
	(*CheckIf)(nil),                   // 1: validator.CheckIf
	(*TagOptions)(nil),                // 2: validator.TagOptions
	(*OneOfTags)(nil),                 // 3: validator.OneOfTags
	(*FloatTags)(nil),                 // 4: validator.FloatTags
	(*IntTags)(nil),                   // 5: validator.IntTags
	(*UintTags)(nil),                  // 6: validator.UintTags
	(*StringTags)(nil),                // 7: validator.StringTags
	(*BytesTags)(nil),                 // 8: validator.BytesTags
	(*BoolTags)(nil),                  // 9: validator.BoolTags
	(*EnumTags)(nil),                  // 10: validator.EnumTags
	(*MessageTags)(nil),               // 11: validator.MessageTags
	(*RepeatedTags)(nil),              // 12: validator.RepeatedTags
	(*MapTags)(nil),                   // 13: validator.MapTags
	(*descriptorpb.FieldOptions)(nil), // 14: google.protobuf.FieldOptions
	(*descriptorpb.OneofOptions)(nil), // 15: google.protobuf.OneofOptions
}
var file_validator_proto_depIdxs = []int32{
	1,  // 0: validator.ValidOptions.check_if:type_name -> validator.CheckIf
	2,  // 1: validator.ValidOptions.tags:type_name -> validator.TagOptions
	2,  // 2: validator.CheckIf.tags:type_name -> validator.TagOptions
	3,  // 3: validator.TagOptions.oneof:type_name -> validator.OneOfTags
	4,  // 4: validator.TagOptions.float:type_name -> validator.FloatTags
	5,  // 5: validator.TagOptions.int:type_name -> validator.IntTags
	6,  // 6: validator.TagOptions.uint:type_name -> validator.UintTags
	7,  // 7: validator.TagOptions.string:type_name -> validator.StringTags
	8,  // 8: validator.TagOptions.bytes:type_name -> validator.BytesTags
	9,  // 9: validator.TagOptions.bool:type_name -> validator.BoolTags
	10, // 10: validator.TagOptions.enum:type_name -> validator.EnumTags
	11, // 11: validator.TagOptions.message:type_name -> validator.MessageTags
	12, // 12: validator.TagOptions.repeated:type_name -> validator.RepeatedTags
	13, // 13: validator.TagOptions.map:type_name -> validator.MapTags
	2,  // 14: validator.RepeatedTags.item:type_name -> validator.TagOptions
	2,  // 15: validator.MapTags.key:type_name -> validator.TagOptions
	2,  // 16: validator.MapTags.value:type_name -> validator.TagOptions
	14, // 17: validator.field:extendee -> google.protobuf.FieldOptions
	15, // 18: validator.oneof:extendee -> google.protobuf.OneofOptions
	0,  // 19: validator.field:type_name -> validator.ValidOptions
	0,  // 20: validator.oneof:type_name -> validator.ValidOptions
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	19, // [19:21] is the sub-list for extension type_name
	17, // [17:19] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_validator_proto_init() }
func file_validator_proto_init() {
	if File_validator_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_validator_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOfTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UintTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_validator_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_validator_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*TagOptions_Oneof)(nil),
		(*TagOptions_Float)(nil),
		(*TagOptions_Int)(nil),
		(*TagOptions_Uint)(nil),
		(*TagOptions_String_)(nil),
		(*TagOptions_Bytes)(nil),
		(*TagOptions_Bool)(nil),
		(*TagOptions_Enum)(nil),
		(*TagOptions_Message)(nil),
		(*TagOptions_Repeated)(nil),
		(*TagOptions_Map)(nil),
	}
	file_validator_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_validator_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_validator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_validator_proto_goTypes,
		DependencyIndexes: file_validator_proto_depIdxs,
		MessageInfos:      file_validator_proto_msgTypes,
		ExtensionInfos:    file_validator_proto_extTypes,
	}.Build()
	File_validator_proto = out.File
	file_validator_proto_rawDesc = nil
	file_validator_proto_goTypes = nil
	file_validator_proto_depIdxs = nil
}
