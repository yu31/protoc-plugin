// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: xgo/tests/gojsontest/gojson_test.proto

package gojsontest

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbjson"
	gojsonexternal "github.com/yu31/protoc-plugin/xgo/tests/gojsonexternal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StandEnum1 int32

const (
	StandEnum1_January  StandEnum1 = 0
	StandEnum1_February StandEnum1 = 1
	StandEnum1_March    StandEnum1 = 2
	StandEnum1_April    StandEnum1 = 3
	StandEnum1_May      StandEnum1 = 4
	StandEnum1_June     StandEnum1 = 5
)

// Enum value maps for StandEnum1.
var (
	StandEnum1_name = map[int32]string{
		0: "January",
		1: "February",
		2: "March",
		3: "April",
		4: "May",
		5: "June",
	}
	StandEnum1_value = map[string]int32{
		"January":  0,
		"February": 1,
		"March":    2,
		"April":    3,
		"May":      4,
		"June":     5,
	}
)

func (x StandEnum1) Enum() *StandEnum1 {
	p := new(StandEnum1)
	*p = x
	return p
}

func (x StandEnum1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandEnum1) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[0].Descriptor()
}

func (StandEnum1) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[0]
}

func (x StandEnum1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StandEnum1.Descriptor instead.
func (StandEnum1) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{0}
}

type Model1_EmbedEnum1 int32

const (
	Model1_july      Model1_EmbedEnum1 = 0
	Model1_august    Model1_EmbedEnum1 = 1
	Model1_september Model1_EmbedEnum1 = 2
	Model1_october   Model1_EmbedEnum1 = 3
	Model1_november  Model1_EmbedEnum1 = 4
	Model1_december  Model1_EmbedEnum1 = 5
)

// Enum value maps for Model1_EmbedEnum1.
var (
	Model1_EmbedEnum1_name = map[int32]string{
		0: "july",
		1: "august",
		2: "september",
		3: "october",
		4: "november",
		5: "december",
	}
	Model1_EmbedEnum1_value = map[string]int32{
		"july":      0,
		"august":    1,
		"september": 2,
		"october":   3,
		"november":  4,
		"december":  5,
	}
)

func (x Model1_EmbedEnum1) Enum() *Model1_EmbedEnum1 {
	p := new(Model1_EmbedEnum1)
	*p = x
	return p
}

func (x Model1_EmbedEnum1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Model1_EmbedEnum1) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[1].Descriptor()
}

func (Model1_EmbedEnum1) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[1]
}

func (x Model1_EmbedEnum1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Model1_EmbedEnum1.Descriptor instead.
func (Model1_EmbedEnum1) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{2, 0}
}

type Model2_EmbedEnum1 int32

const (
	Model2_july      Model2_EmbedEnum1 = 0
	Model2_august    Model2_EmbedEnum1 = 1
	Model2_september Model2_EmbedEnum1 = 2
	Model2_october   Model2_EmbedEnum1 = 3
	Model2_november  Model2_EmbedEnum1 = 4
	Model2_december  Model2_EmbedEnum1 = 5
)

// Enum value maps for Model2_EmbedEnum1.
var (
	Model2_EmbedEnum1_name = map[int32]string{
		0: "july",
		1: "august",
		2: "september",
		3: "october",
		4: "november",
		5: "december",
	}
	Model2_EmbedEnum1_value = map[string]int32{
		"july":      0,
		"august":    1,
		"september": 2,
		"october":   3,
		"november":  4,
		"december":  5,
	}
)

func (x Model2_EmbedEnum1) Enum() *Model2_EmbedEnum1 {
	p := new(Model2_EmbedEnum1)
	*p = x
	return p
}

func (x Model2_EmbedEnum1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Model2_EmbedEnum1) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[2].Descriptor()
}

func (Model2_EmbedEnum1) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[2]
}

func (x Model2_EmbedEnum1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Model2_EmbedEnum1.Descriptor instead.
func (Model2_EmbedEnum1) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{3, 0}
}

type FieldCustomName_Enum int32

const (
	FieldCustomName_running FieldCustomName_Enum = 0
	FieldCustomName_stopped FieldCustomName_Enum = 1
)

// Enum value maps for FieldCustomName_Enum.
var (
	FieldCustomName_Enum_name = map[int32]string{
		0: "running",
		1: "stopped",
	}
	FieldCustomName_Enum_value = map[string]int32{
		"running": 0,
		"stopped": 1,
	}
)

func (x FieldCustomName_Enum) Enum() *FieldCustomName_Enum {
	p := new(FieldCustomName_Enum)
	*p = x
	return p
}

func (x FieldCustomName_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldCustomName_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[3].Descriptor()
}

func (FieldCustomName_Enum) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[3]
}

func (x FieldCustomName_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldCustomName_Enum.Descriptor instead.
func (FieldCustomName_Enum) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{8, 0}
}

type EnumUseString1_Status1 int32

const (
	EnumUseString1_enabled  EnumUseString1_Status1 = 0
	EnumUseString1_disabled EnumUseString1_Status1 = 1
)

// Enum value maps for EnumUseString1_Status1.
var (
	EnumUseString1_Status1_name = map[int32]string{
		0: "enabled",
		1: "disabled",
	}
	EnumUseString1_Status1_value = map[string]int32{
		"enabled":  0,
		"disabled": 1,
	}
)

func (x EnumUseString1_Status1) Enum() *EnumUseString1_Status1 {
	p := new(EnumUseString1_Status1)
	*p = x
	return p
}

func (x EnumUseString1_Status1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumUseString1_Status1) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[4].Descriptor()
}

func (EnumUseString1_Status1) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[4]
}

func (x EnumUseString1_Status1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumUseString1_Status1.Descriptor instead.
func (EnumUseString1_Status1) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{21, 0}
}

type EnumUseString1_Status2 int32

const (
	EnumUseString1_success EnumUseString1_Status2 = 0
	EnumUseString1_failed  EnumUseString1_Status2 = 1
)

// Enum value maps for EnumUseString1_Status2.
var (
	EnumUseString1_Status2_name = map[int32]string{
		0: "success",
		1: "failed",
	}
	EnumUseString1_Status2_value = map[string]int32{
		"success": 0,
		"failed":  1,
	}
)

func (x EnumUseString1_Status2) Enum() *EnumUseString1_Status2 {
	p := new(EnumUseString1_Status2)
	*p = x
	return p
}

func (x EnumUseString1_Status2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumUseString1_Status2) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[5].Descriptor()
}

func (EnumUseString1_Status2) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[5]
}

func (x EnumUseString1_Status2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumUseString1_Status2.Descriptor instead.
func (EnumUseString1_Status2) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{21, 1}
}

type EnumUseString2_Status1 int32

const (
	EnumUseString2_enabled  EnumUseString2_Status1 = 0
	EnumUseString2_disabled EnumUseString2_Status1 = 1
)

// Enum value maps for EnumUseString2_Status1.
var (
	EnumUseString2_Status1_name = map[int32]string{
		0: "enabled",
		1: "disabled",
	}
	EnumUseString2_Status1_value = map[string]int32{
		"enabled":  0,
		"disabled": 1,
	}
)

func (x EnumUseString2_Status1) Enum() *EnumUseString2_Status1 {
	p := new(EnumUseString2_Status1)
	*p = x
	return p
}

func (x EnumUseString2_Status1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumUseString2_Status1) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[6].Descriptor()
}

func (EnumUseString2_Status1) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[6]
}

func (x EnumUseString2_Status1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumUseString2_Status1.Descriptor instead.
func (EnumUseString2_Status1) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{22, 0}
}

type EnumUseString2_Status2 int32

const (
	EnumUseString2_success EnumUseString2_Status2 = 0
	EnumUseString2_failed  EnumUseString2_Status2 = 1
)

// Enum value maps for EnumUseString2_Status2.
var (
	EnumUseString2_Status2_name = map[int32]string{
		0: "success",
		1: "failed",
	}
	EnumUseString2_Status2_value = map[string]int32{
		"success": 0,
		"failed":  1,
	}
)

func (x EnumUseString2_Status2) Enum() *EnumUseString2_Status2 {
	p := new(EnumUseString2_Status2)
	*p = x
	return p
}

func (x EnumUseString2_Status2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumUseString2_Status2) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[7].Descriptor()
}

func (EnumUseString2_Status2) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[7]
}

func (x EnumUseString2_Status2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumUseString2_Status2.Descriptor instead.
func (EnumUseString2_Status2) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{22, 1}
}

type EnumUseString3_Status1 int32

const (
	EnumUseString3_enabled  EnumUseString3_Status1 = 0
	EnumUseString3_disabled EnumUseString3_Status1 = 1
)

// Enum value maps for EnumUseString3_Status1.
var (
	EnumUseString3_Status1_name = map[int32]string{
		0: "enabled",
		1: "disabled",
	}
	EnumUseString3_Status1_value = map[string]int32{
		"enabled":  0,
		"disabled": 1,
	}
)

func (x EnumUseString3_Status1) Enum() *EnumUseString3_Status1 {
	p := new(EnumUseString3_Status1)
	*p = x
	return p
}

func (x EnumUseString3_Status1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumUseString3_Status1) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[8].Descriptor()
}

func (EnumUseString3_Status1) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[8]
}

func (x EnumUseString3_Status1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumUseString3_Status1.Descriptor instead.
func (EnumUseString3_Status1) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{23, 0}
}

type EnumUseString3_Status2 int32

const (
	EnumUseString3_success EnumUseString3_Status2 = 0
	EnumUseString3_failed  EnumUseString3_Status2 = 1
)

// Enum value maps for EnumUseString3_Status2.
var (
	EnumUseString3_Status2_name = map[int32]string{
		0: "success",
		1: "failed",
	}
	EnumUseString3_Status2_value = map[string]int32{
		"success": 0,
		"failed":  1,
	}
)

func (x EnumUseString3_Status2) Enum() *EnumUseString3_Status2 {
	p := new(EnumUseString3_Status2)
	*p = x
	return p
}

func (x EnumUseString3_Status2) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumUseString3_Status2) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[9].Descriptor()
}

func (EnumUseString3_Status2) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[9]
}

func (x EnumUseString3_Status2) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumUseString3_Status2.Descriptor instead.
func (EnumUseString3_Status2) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{23, 1}
}

type EnumUseString4_Status int32

const (
	EnumUseString4__        EnumUseString4_Status = 0
	EnumUseString4_enabled  EnumUseString4_Status = 1
	EnumUseString4_disabled EnumUseString4_Status = 2
)

// Enum value maps for EnumUseString4_Status.
var (
	EnumUseString4_Status_name = map[int32]string{
		0: "_",
		1: "enabled",
		2: "disabled",
	}
	EnumUseString4_Status_value = map[string]int32{
		"_":        0,
		"enabled":  1,
		"disabled": 2,
	}
)

func (x EnumUseString4_Status) Enum() *EnumUseString4_Status {
	p := new(EnumUseString4_Status)
	*p = x
	return p
}

func (x EnumUseString4_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumUseString4_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[10].Descriptor()
}

func (EnumUseString4_Status) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[10]
}

func (x EnumUseString4_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumUseString4_Status.Descriptor instead.
func (EnumUseString4_Status) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{24, 0}
}

type EnumUseString5_Status int32

const (
	EnumUseString5__        EnumUseString5_Status = 0
	EnumUseString5_enabled  EnumUseString5_Status = 1
	EnumUseString5_disabled EnumUseString5_Status = 2
)

// Enum value maps for EnumUseString5_Status.
var (
	EnumUseString5_Status_name = map[int32]string{
		0: "_",
		1: "enabled",
		2: "disabled",
	}
	EnumUseString5_Status_value = map[string]int32{
		"_":        0,
		"enabled":  1,
		"disabled": 2,
	}
)

func (x EnumUseString5_Status) Enum() *EnumUseString5_Status {
	p := new(EnumUseString5_Status)
	*p = x
	return p
}

func (x EnumUseString5_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumUseString5_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[11].Descriptor()
}

func (EnumUseString5_Status) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[11]
}

func (x EnumUseString5_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumUseString5_Status.Descriptor instead.
func (EnumUseString5_Status) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{25, 0}
}

type UnmarshalData_Enum int32

const (
	UnmarshalData_running UnmarshalData_Enum = 0
	UnmarshalData_stopped UnmarshalData_Enum = 1
)

// Enum value maps for UnmarshalData_Enum.
var (
	UnmarshalData_Enum_name = map[int32]string{
		0: "running",
		1: "stopped",
	}
	UnmarshalData_Enum_value = map[string]int32{
		"running": 0,
		"stopped": 1,
	}
)

func (x UnmarshalData_Enum) Enum() *UnmarshalData_Enum {
	p := new(UnmarshalData_Enum)
	*p = x
	return p
}

func (x UnmarshalData_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnmarshalData_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[12].Descriptor()
}

func (UnmarshalData_Enum) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[12]
}

func (x UnmarshalData_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnmarshalData_Enum.Descriptor instead.
func (UnmarshalData_Enum) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{30, 0}
}

type UnmarshalOneofNotHide_Enum int32

const (
	UnmarshalOneofNotHide_running UnmarshalOneofNotHide_Enum = 0
	UnmarshalOneofNotHide_stopped UnmarshalOneofNotHide_Enum = 1
)

// Enum value maps for UnmarshalOneofNotHide_Enum.
var (
	UnmarshalOneofNotHide_Enum_name = map[int32]string{
		0: "running",
		1: "stopped",
	}
	UnmarshalOneofNotHide_Enum_value = map[string]int32{
		"running": 0,
		"stopped": 1,
	}
)

func (x UnmarshalOneofNotHide_Enum) Enum() *UnmarshalOneofNotHide_Enum {
	p := new(UnmarshalOneofNotHide_Enum)
	*p = x
	return p
}

func (x UnmarshalOneofNotHide_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnmarshalOneofNotHide_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[13].Descriptor()
}

func (UnmarshalOneofNotHide_Enum) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[13]
}

func (x UnmarshalOneofNotHide_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnmarshalOneofNotHide_Enum.Descriptor instead.
func (UnmarshalOneofNotHide_Enum) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{31, 0}
}

type UnmarshalOneofHide_Enum int32

const (
	UnmarshalOneofHide_running UnmarshalOneofHide_Enum = 0
	UnmarshalOneofHide_stopped UnmarshalOneofHide_Enum = 1
)

// Enum value maps for UnmarshalOneofHide_Enum.
var (
	UnmarshalOneofHide_Enum_name = map[int32]string{
		0: "running",
		1: "stopped",
	}
	UnmarshalOneofHide_Enum_value = map[string]int32{
		"running": 0,
		"stopped": 1,
	}
)

func (x UnmarshalOneofHide_Enum) Enum() *UnmarshalOneofHide_Enum {
	p := new(UnmarshalOneofHide_Enum)
	*p = x
	return p
}

func (x UnmarshalOneofHide_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnmarshalOneofHide_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[14].Descriptor()
}

func (UnmarshalOneofHide_Enum) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[14]
}

func (x UnmarshalOneofHide_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnmarshalOneofHide_Enum.Descriptor instead.
func (UnmarshalOneofHide_Enum) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{32, 0}
}

type OptionalModel1_Enum int32

const (
	OptionalModel1_running OptionalModel1_Enum = 0
	OptionalModel1_stopped OptionalModel1_Enum = 1
)

// Enum value maps for OptionalModel1_Enum.
var (
	OptionalModel1_Enum_name = map[int32]string{
		0: "running",
		1: "stopped",
	}
	OptionalModel1_Enum_value = map[string]int32{
		"running": 0,
		"stopped": 1,
	}
)

func (x OptionalModel1_Enum) Enum() *OptionalModel1_Enum {
	p := new(OptionalModel1_Enum)
	*p = x
	return p
}

func (x OptionalModel1_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionalModel1_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[15].Descriptor()
}

func (OptionalModel1_Enum) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[15]
}

func (x OptionalModel1_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionalModel1_Enum.Descriptor instead.
func (OptionalModel1_Enum) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{33, 0}
}

type OptionalModel2_Enum int32

const (
	OptionalModel2_running OptionalModel2_Enum = 0
	OptionalModel2_stopped OptionalModel2_Enum = 1
)

// Enum value maps for OptionalModel2_Enum.
var (
	OptionalModel2_Enum_name = map[int32]string{
		0: "running",
		1: "stopped",
	}
	OptionalModel2_Enum_value = map[string]int32{
		"running": 0,
		"stopped": 1,
	}
)

func (x OptionalModel2_Enum) Enum() *OptionalModel2_Enum {
	p := new(OptionalModel2_Enum)
	*p = x
	return p
}

func (x OptionalModel2_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionalModel2_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[16].Descriptor()
}

func (OptionalModel2_Enum) Type() protoreflect.EnumType {
	return &file_xgo_tests_gojsontest_gojson_test_proto_enumTypes[16]
}

func (x OptionalModel2_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionalModel2_Enum.Descriptor instead.
func (OptionalModel2_Enum) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{34, 0}
}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{0}
}

type StandMessage1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name1 string `protobuf:"bytes,1,opt,name=name1,proto3" json:"name1,omitempty"`
	Name2 string `protobuf:"bytes,2,opt,name=name2,proto3" json:"name2,omitempty"`
	Name3 string `protobuf:"bytes,3,opt,name=name3,proto3" json:"name3,omitempty"`
}

func (x *StandMessage1) Reset() {
	*x = StandMessage1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandMessage1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandMessage1) ProtoMessage() {}

func (x *StandMessage1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandMessage1.ProtoReflect.Descriptor instead.
func (*StandMessage1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{1}
}

func (x *StandMessage1) GetName1() string {
	if x != nil {
		return x.Name1
	}
	return ""
}

func (x *StandMessage1) GetName2() string {
	if x != nil {
		return x.Name2
	}
	return ""
}

func (x *StandMessage1) GetName3() string {
	if x != nil {
		return x.Name3
	}
	return ""
}

//
type Model1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofType1:
	//	*Model1_Oneof1Double
	//	*Model1_Oneof1Float
	//	*Model1_Oneof1Int32
	//	*Model1_Oneof1Int64
	//	*Model1_Oneof1Uint32
	//	*Model1_Oneof1Uint64
	//	*Model1_Oneof1Sint32
	//	*Model1_Oneof1Sint64
	//	*Model1_Oneof1Fixed32
	//	*Model1_Oneof1Fixed64
	//	*Model1_Oneof1Sfixed32
	//	*Model1_Oneof1Sfixed64
	//	*Model1_Oneof1Bool
	//	*Model1_Oneof1String
	//	*Model1_Oneof1Bytes
	//	*Model1_Oneof1EmbedMessage
	//	*Model1_Oneof1StandMessage
	//	*Model1_Oneof1ExternalMessage
	//	*Model1_Oneof1EmbedEnum
	//	*Model1_Oneof1StandEnum
	//	*Model1_Oneof1ExternalEnum
	OneofType1 isModel1_OneofType1 `protobuf_oneof:"OneofType1"`
	// Types that are assignable to OneofType2:
	//	*Model1_Oneof2Double
	//	*Model1_Oneof2Float
	//	*Model1_Oneof2Int32
	//	*Model1_Oneof2Int64
	//	*Model1_Oneof2Uint32
	//	*Model1_Oneof2Uint64
	//	*Model1_Oneof2Sint32
	//	*Model1_Oneof2Sint64
	//	*Model1_Oneof2Fixed32
	//	*Model1_Oneof2Fixed64
	//	*Model1_Oneof2Sfixed32
	//	*Model1_Oneof2Sfixed64
	//	*Model1_Oneof2Bool
	//	*Model1_Oneof2String
	//	*Model1_Oneof2Bytes
	//	*Model1_Oneof2EmbedMessage
	//	*Model1_Oneof2StandMessage
	//	*Model1_Oneof2ExternalMessage
	//	*Model1_Oneof2EmbedEnum
	//	*Model1_Oneof2StandEnum
	//	*Model1_Oneof2ExternalEnum
	OneofType2 isModel1_OneofType2 `protobuf_oneof:"oneofType2"`
	// Types that are assignable to OneofType3:
	//	*Model1_Oneof3Double
	//	*Model1_Oneof3Float
	//	*Model1_Oneof3Int32
	//	*Model1_Oneof3Int64
	//	*Model1_Oneof3Uint32
	//	*Model1_Oneof3Uint64
	//	*Model1_Oneof3Sint32
	//	*Model1_Oneof3Sint64
	//	*Model1_Oneof3Fixed32
	//	*Model1_Oneof3Fixed64
	//	*Model1_Oneof3Sfixed32
	//	*Model1_Oneof3Sfixed64
	//	*Model1_Oneof3Bool
	//	*Model1_Oneof3String
	//	*Model1_Oneof3Bytes
	//	*Model1_Oneof3EmbedMessage
	//	*Model1_Oneof3StandMessage
	//	*Model1_Oneof3ExternalMessage
	//	*Model1_Oneof3EmbedEnum
	//	*Model1_Oneof3StandEnum
	//	*Model1_Oneof3ExternalEnum
	OneofType3 isModel1_OneofType3 `protobuf_oneof:"OneofType3"`
	// Types that are assignable to Oneof_Type4:
	//	*Model1_Oneof4Double
	//	*Model1_Oneof4Float
	//	*Model1_Oneof4Int32
	//	*Model1_Oneof4Int64
	//	*Model1_Oneof4Uint32
	//	*Model1_Oneof4Uint64
	//	*Model1_Oneof4Sint32
	//	*Model1_Oneof4Sint64
	//	*Model1_Oneof4Fixed32
	//	*Model1_Oneof4Fixed64
	//	*Model1_Oneof4Sfixed32
	//	*Model1_Oneof4Sfixed64
	//	*Model1_Oneof4Bool
	//	*Model1_Oneof4String
	//	*Model1_Oneof4Bytes
	//	*Model1_Oneof4EmbedMessage
	//	*Model1_Oneof4StandMessage
	//	*Model1_Oneof4ExternalMessage
	//	*Model1_Oneof4EmbedEnum
	//	*Model1_Oneof4StandEnum
	//	*Model1_Oneof4ExternalEnum
	Oneof_Type4 isModel1_Oneof_Type4 `protobuf_oneof:"Oneof_Type4"`
	// Types that are assignable to Oneof_Type5:
	//	*Model1_Oneof5Double
	//	*Model1_Oneof5Float
	//	*Model1_Oneof5Int32
	//	*Model1_Oneof5Int64
	//	*Model1_Oneof5Uint32
	//	*Model1_Oneof5Uint64
	//	*Model1_Oneof5Sint32
	//	*Model1_Oneof5Sint64
	//	*Model1_Oneof5Fixed32
	//	*Model1_Oneof5Fixed64
	//	*Model1_Oneof5Sfixed32
	//	*Model1_Oneof5Sfixed64
	//	*Model1_Oneof5Bool
	//	*Model1_Oneof5String
	//	*Model1_Oneof5Bytes
	//	*Model1_Oneof5EmbedMessage
	//	*Model1_Oneof5StandMessage
	//	*Model1_Oneof5ExternalMessage
	//	*Model1_Oneof5EmbedEnum
	//	*Model1_Oneof5StandEnum
	//	*Model1_Oneof5ExternalEnum
	Oneof_Type5 isModel1_Oneof_Type5 `protobuf_oneof:"oneof_Type5"`
	// Types that are assignable to OneofType6:
	//	*Model1_Oneof6Double
	//	*Model1_Oneof6Float
	//	*Model1_Oneof6Int32
	//	*Model1_Oneof6Int64
	//	*Model1_Oneof6Uint32
	//	*Model1_Oneof6Uint64
	//	*Model1_Oneof6Sint32
	//	*Model1_Oneof6Sint64
	//	*Model1_Oneof6Fixed32
	//	*Model1_Oneof6Fixed64
	//	*Model1_Oneof6Sfixed32
	//	*Model1_Oneof6Sfixed64
	//	*Model1_Oneof6Bool
	//	*Model1_Oneof6String
	//	*Model1_Oneof6Bytes
	//	*Model1_Oneof6EmbedMessage
	//	*Model1_Oneof6StandMessage
	//	*Model1_Oneof6ExternalMessage
	//	*Model1_Oneof6EmbedEnum
	//	*Model1_Oneof6StandEnum
	//	*Model1_Oneof6ExternalEnum
	OneofType6 isModel1_OneofType6 `protobuf_oneof:"oneof_type6"`
	// Types that are assignable to OneofType7:
	//	*Model1_Oneof7Double
	//	*Model1_Oneof7Float
	//	*Model1_Oneof7Int32
	//	*Model1_Oneof7Int64
	//	*Model1_Oneof7Uint32
	//	*Model1_Oneof7Uint64
	//	*Model1_Oneof7Sint32
	//	*Model1_Oneof7Sint64
	//	*Model1_Oneof7Fixed32
	//	*Model1_Oneof7Fixed64
	//	*Model1_Oneof7Sfixed32
	//	*Model1_Oneof7Sfixed64
	//	*Model1_Oneof7Bool
	//	*Model1_Oneof7String
	//	*Model1_Oneof7Bytes
	//	*Model1_Oneof7EmbedMessage
	//	*Model1_Oneof7StandMessage
	//	*Model1_Oneof7ExternalMessage
	//	*Model1_Oneof7EmbedEnum
	//	*Model1_Oneof7StandEnum
	//	*Model1_Oneof7ExternalEnum
	OneofType7 isModel1_OneofType7 `protobuf_oneof:"Oneof_type7"`
	// Types that are assignable to Oneof_Type8:
	//	*Model1_Oneof8Double
	//	*Model1_Oneof8Float
	//	*Model1_Oneof8Int32
	//	*Model1_Oneof8Int64
	//	*Model1_Oneof8Uint32
	//	*Model1_Oneof8Uint64
	//	*Model1_Oneof8Sint32
	//	*Model1_Oneof8Sint64
	//	*Model1_Oneof8Fixed32
	//	*Model1_Oneof8Fixed64
	//	*Model1_Oneof8Sfixed32
	//	*Model1_Oneof8Sfixed64
	//	*Model1_Oneof8Bool
	//	*Model1_Oneof8String
	//	*Model1_Oneof8Bytes
	//	*Model1_Oneof8EmbedMessage
	//	*Model1_Oneof8StandMessage
	//	*Model1_Oneof8ExternalMessage
	//	*Model1_Oneof8EmbedEnum
	//	*Model1_Oneof8StandEnum
	//	*Model1_Oneof8ExternalEnum
	Oneof_Type8 isModel1_Oneof_Type8 `protobuf_oneof:"Oneof_Type8"`
	// Types that are assignable to Oneof_Type9:
	//	*Model1_Oneof9Double
	//	*Model1_Oneof9Float
	//	*Model1_Oneof9Int32
	//	*Model1_Oneof9Int64
	//	*Model1_Oneof9Uint32
	//	*Model1_Oneof9Uint64
	//	*Model1_Oneof9Sint32
	//	*Model1_Oneof9Sint64
	//	*Model1_Oneof9Fixed32
	//	*Model1_Oneof9Fixed64
	//	*Model1_Oneof9Sfixed32
	//	*Model1_Oneof9Sfixed64
	//	*Model1_Oneof9Bool
	//	*Model1_Oneof9String
	//	*Model1_Oneof9Bytes
	//	*Model1_Oneof9EmbedMessage
	//	*Model1_Oneof9StandMessage
	//	*Model1_Oneof9ExternalMessage
	//	*Model1_Oneof9EmbedEnum
	//	*Model1_Oneof9StandEnum
	//	*Model1_Oneof9ExternalEnum
	Oneof_Type9 isModel1_Oneof_Type9 `protobuf_oneof:"Oneof_Type9"`
	// Types that are assignable to Oneof_Type10:
	//	*Model1_Oneof10Double
	//	*Model1_Oneof10Float
	//	*Model1_Oneof10Int32
	//	*Model1_Oneof10Int64
	//	*Model1_Oneof10Uint32
	//	*Model1_Oneof10Uint64
	//	*Model1_Oneof10Sint32
	//	*Model1_Oneof10Sint64
	//	*Model1_Oneof10Fixed32
	//	*Model1_Oneof10Fixed64
	//	*Model1_Oneof10Sfixed32
	//	*Model1_Oneof10Sfixed64
	//	*Model1_Oneof10Bool
	//	*Model1_Oneof10String
	//	*Model1_Oneof10Bytes
	//	*Model1_Oneof10EmbedMessage
	//	*Model1_Oneof10StandMessage
	//	*Model1_Oneof10ExternalMessage
	//	*Model1_Oneof10EmbedEnum
	//	*Model1_Oneof10StandEnum
	//	*Model1_Oneof10ExternalEnum
	Oneof_Type10 isModel1_Oneof_Type10 `protobuf_oneof:"Oneof_Type10"`
	// Types that are assignable to Oneof_Type11:
	//	*Model1_Oneof11Double
	//	*Model1_Oneof11Float
	//	*Model1_Oneof11Int32
	//	*Model1_Oneof11Int64
	//	*Model1_Oneof11Uint32
	//	*Model1_Oneof11Uint64
	//	*Model1_Oneof11Sint32
	//	*Model1_Oneof11Sint64
	//	*Model1_Oneof11Fixed32
	//	*Model1_Oneof11Fixed64
	//	*Model1_Oneof11Sfixed32
	//	*Model1_Oneof11Sfixed64
	//	*Model1_Oneof11Bool
	//	*Model1_Oneof11String
	//	*Model1_Oneof11Bytes
	//	*Model1_Oneof11EmbedMessage
	//	*Model1_Oneof11StandMessage
	//	*Model1_Oneof11ExternalMessage
	//	*Model1_Oneof11EmbedEnum
	//	*Model1_Oneof11StandEnum
	//	*Model1_Oneof11ExternalEnum
	Oneof_Type11 isModel1_Oneof_Type11 `protobuf_oneof:"Oneof_Type11"`
	// Types that are assignable to Oneof_Type12:
	//	*Model1_Oneof12Double
	//	*Model1_Oneof12Float
	//	*Model1_Oneof12Int32
	//	*Model1_Oneof12Int64
	//	*Model1_Oneof12Uint32
	//	*Model1_Oneof12Uint64
	//	*Model1_Oneof12Sint32
	//	*Model1_Oneof12Sint64
	//	*Model1_Oneof12Fixed32
	//	*Model1_Oneof12Fixed64
	//	*Model1_Oneof12Sfixed32
	//	*Model1_Oneof12Sfixed64
	//	*Model1_Oneof12Bool
	//	*Model1_Oneof12String
	//	*Model1_Oneof12Bytes
	//	*Model1_Oneof12EmbedMessage
	//	*Model1_Oneof12StandMessage
	//	*Model1_Oneof12ExternalMessage
	//	*Model1_Oneof12EmbedEnum
	//	*Model1_Oneof12StandEnum
	//	*Model1_Oneof12ExternalEnum
	Oneof_Type12 isModel1_Oneof_Type12 `protobuf_oneof:"Oneof_Type12"`
	// Types that are assignable to Oneof_Type13:
	//	*Model1_Oneof13Double
	//	*Model1_Oneof13Float
	//	*Model1_Oneof13Int32
	//	*Model1_Oneof13Int64
	//	*Model1_Oneof13Uint32
	//	*Model1_Oneof13Uint64
	//	*Model1_Oneof13Sint32
	//	*Model1_Oneof13Sint64
	//	*Model1_Oneof13Fixed32
	//	*Model1_Oneof13Fixed64
	//	*Model1_Oneof13Sfixed32
	//	*Model1_Oneof13Sfixed64
	//	*Model1_Oneof13Bool
	//	*Model1_Oneof13String
	//	*Model1_Oneof13Bytes
	//	*Model1_Oneof13EmbedMessage
	//	*Model1_Oneof13StandMessage
	//	*Model1_Oneof13ExternalMessage
	//	*Model1_Oneof13EmbedEnum
	//	*Model1_Oneof13StandEnum
	//	*Model1_Oneof13ExternalEnum
	Oneof_Type13 isModel1_Oneof_Type13 `protobuf_oneof:"Oneof_Type13"`
	// Types that are assignable to Oneof_Type14:
	//	*Model1_Oneof14Double
	//	*Model1_Oneof14Float
	//	*Model1_Oneof14Int32
	//	*Model1_Oneof14Int64
	//	*Model1_Oneof14Uint32
	//	*Model1_Oneof14Uint64
	//	*Model1_Oneof14Sint32
	//	*Model1_Oneof14Sint64
	//	*Model1_Oneof14Fixed32
	//	*Model1_Oneof14Fixed64
	//	*Model1_Oneof14Sfixed32
	//	*Model1_Oneof14Sfixed64
	//	*Model1_Oneof14Bool
	//	*Model1_Oneof14String
	//	*Model1_Oneof14Bytes
	//	*Model1_Oneof14EmbedMessage
	//	*Model1_Oneof14StandMessage
	//	*Model1_Oneof14ExternalMessage
	//	*Model1_Oneof14EmbedEnum
	//	*Model1_Oneof14StandEnum
	//	*Model1_Oneof14ExternalEnum
	Oneof_Type14 isModel1_Oneof_Type14 `protobuf_oneof:"Oneof_Type14"`
	// Types that are assignable to Oneof_Type15:
	//	*Model1_Oneof15Double
	//	*Model1_Oneof15Float
	//	*Model1_Oneof15Int32
	//	*Model1_Oneof15Int64
	//	*Model1_Oneof15Uint32
	//	*Model1_Oneof15Uint64
	//	*Model1_Oneof15Sint32
	//	*Model1_Oneof15Sint64
	//	*Model1_Oneof15Fixed32
	//	*Model1_Oneof15Fixed64
	//	*Model1_Oneof15Sfixed32
	//	*Model1_Oneof15Sfixed64
	//	*Model1_Oneof15Bool
	//	*Model1_Oneof15String
	//	*Model1_Oneof15Bytes
	//	*Model1_Oneof15EmbedMessage
	//	*Model1_Oneof15StandMessage
	//	*Model1_Oneof15ExternalMessage
	//	*Model1_Oneof15EmbedEnum
	//	*Model1_Oneof15StandEnum
	//	*Model1_Oneof15ExternalEnum
	Oneof_Type15 isModel1_Oneof_Type15 `protobuf_oneof:"Oneof_Type15"`
	// Types that are assignable to Oneof_Type16:
	//	*Model1_Oneof16Double
	//	*Model1_Oneof16Float
	//	*Model1_Oneof16Int32
	//	*Model1_Oneof16Int64
	//	*Model1_Oneof16Uint32
	//	*Model1_Oneof16Uint64
	//	*Model1_Oneof16Sint32
	//	*Model1_Oneof16Sint64
	//	*Model1_Oneof16Fixed32
	//	*Model1_Oneof16Fixed64
	//	*Model1_Oneof16Sfixed32
	//	*Model1_Oneof16Sfixed64
	//	*Model1_Oneof16Bool
	//	*Model1_Oneof16String
	//	*Model1_Oneof16Bytes
	//	*Model1_Oneof16EmbedMessage
	//	*Model1_Oneof16StandMessage
	//	*Model1_Oneof16ExternalMessage
	//	*Model1_Oneof16EmbedEnum
	//	*Model1_Oneof16StandEnum
	//	*Model1_Oneof16ExternalEnum
	Oneof_Type16 isModel1_Oneof_Type16 `protobuf_oneof:"Oneof_Type16"`
	// Types that are assignable to Oneof_Type17:
	//	*Model1_Oneof17Double
	//	*Model1_Oneof17Float
	//	*Model1_Oneof17Int32
	//	*Model1_Oneof17Int64
	//	*Model1_Oneof17Uint32
	//	*Model1_Oneof17Uint64
	//	*Model1_Oneof17Sint32
	//	*Model1_Oneof17Sint64
	//	*Model1_Oneof17Fixed32
	//	*Model1_Oneof17Fixed64
	//	*Model1_Oneof17Sfixed32
	//	*Model1_Oneof17Sfixed64
	//	*Model1_Oneof17Bool
	//	*Model1_Oneof17String
	//	*Model1_Oneof17Bytes
	//	*Model1_Oneof17EmbedMessage
	//	*Model1_Oneof17StandMessage
	//	*Model1_Oneof17ExternalMessage
	//	*Model1_Oneof17EmbedEnum
	//	*Model1_Oneof17StandEnum
	//	*Model1_Oneof17ExternalEnum
	Oneof_Type17 isModel1_Oneof_Type17 `protobuf_oneof:"Oneof_Type17"`
	// Types that are assignable to Oneof_Type18:
	//	*Model1_Oneof18Double
	//	*Model1_Oneof18Float
	//	*Model1_Oneof18Int32
	//	*Model1_Oneof18Int64
	//	*Model1_Oneof18Uint32
	//	*Model1_Oneof18Uint64
	//	*Model1_Oneof18Sint32
	//	*Model1_Oneof18Sint64
	//	*Model1_Oneof18Fixed32
	//	*Model1_Oneof18Fixed64
	//	*Model1_Oneof18Sfixed32
	//	*Model1_Oneof18Sfixed64
	//	*Model1_Oneof18Bool
	//	*Model1_Oneof18String
	//	*Model1_Oneof18Bytes
	//	*Model1_Oneof18EmbedMessage
	//	*Model1_Oneof18StandMessage
	//	*Model1_Oneof18ExternalMessage
	//	*Model1_Oneof18EmbedEnum
	//	*Model1_Oneof18StandEnum
	//	*Model1_Oneof18ExternalEnum
	Oneof_Type18 isModel1_Oneof_Type18 `protobuf_oneof:"Oneof_Type18"`
	// Types that are assignable to Oneof_Type19:
	//	*Model1_Oneof19Double
	//	*Model1_Oneof19Float
	//	*Model1_Oneof19Int32
	//	*Model1_Oneof19Int64
	//	*Model1_Oneof19Uint32
	//	*Model1_Oneof19Uint64
	//	*Model1_Oneof19Sint32
	//	*Model1_Oneof19Sint64
	//	*Model1_Oneof19Fixed32
	//	*Model1_Oneof19Fixed64
	//	*Model1_Oneof19Sfixed32
	//	*Model1_Oneof19Sfixed64
	//	*Model1_Oneof19Bool
	//	*Model1_Oneof19String
	//	*Model1_Oneof19Bytes
	//	*Model1_Oneof19EmbedMessage
	//	*Model1_Oneof19StandMessage
	//	*Model1_Oneof19ExternalMessage
	//	*Model1_Oneof19EmbedEnum
	//	*Model1_Oneof19StandEnum
	//	*Model1_Oneof19ExternalEnum
	Oneof_Type19 isModel1_Oneof_Type19 `protobuf_oneof:"Oneof_Type19"`
	// Types that are assignable to Oneof_Type20:
	//	*Model1_Oneof20Double
	//	*Model1_Oneof20Float
	//	*Model1_Oneof20Int32
	//	*Model1_Oneof20Int64
	//	*Model1_Oneof20Uint32
	//	*Model1_Oneof20Uint64
	//	*Model1_Oneof20Sint32
	//	*Model1_Oneof20Sint64
	//	*Model1_Oneof20Fixed32
	//	*Model1_Oneof20Fixed64
	//	*Model1_Oneof20Sfixed32
	//	*Model1_Oneof20Sfixed64
	//	*Model1_Oneof20Bool
	//	*Model1_Oneof20String
	//	*Model1_Oneof20Bytes
	//	*Model1_Oneof20EmbedMessage
	//	*Model1_Oneof20StandMessage
	//	*Model1_Oneof20ExternalMessage
	//	*Model1_Oneof20EmbedEnum
	//	*Model1_Oneof20StandEnum
	//	*Model1_Oneof20ExternalEnum
	Oneof_Type20 isModel1_Oneof_Type20 `protobuf_oneof:"Oneof_Type20"`
	// Types that are assignable to Oneof_Type21:
	//	*Model1_Oneof21Double
	//	*Model1_Oneof21Float
	//	*Model1_Oneof21Int32
	//	*Model1_Oneof21Int64
	//	*Model1_Oneof21Uint32
	//	*Model1_Oneof21Uint64
	//	*Model1_Oneof21Sint32
	//	*Model1_Oneof21Sint64
	//	*Model1_Oneof21Fixed32
	//	*Model1_Oneof21Fixed64
	//	*Model1_Oneof21Sfixed32
	//	*Model1_Oneof21Sfixed64
	//	*Model1_Oneof21Bool
	//	*Model1_Oneof21String
	//	*Model1_Oneof21Bytes
	//	*Model1_Oneof21EmbedMessage
	//	*Model1_Oneof21StandMessage
	//	*Model1_Oneof21ExternalMessage
	//	*Model1_Oneof21EmbedEnum
	//	*Model1_Oneof21StandEnum
	//	*Model1_Oneof21ExternalEnum
	Oneof_Type21 isModel1_Oneof_Type21 `protobuf_oneof:"Oneof_Type21"`
	// Types that are assignable to Oneof_Type22Null:
	//	*Model1_Oneof22Double
	//	*Model1_Oneof22Float
	//	*Model1_Oneof22Int32
	//	*Model1_Oneof22Int64
	//	*Model1_Oneof22Uint32
	//	*Model1_Oneof22Uint64
	//	*Model1_Oneof22Sint32
	//	*Model1_Oneof22Sint64
	//	*Model1_Oneof22Fixed32
	//	*Model1_Oneof22Fixed64
	//	*Model1_Oneof22Sfixed32
	//	*Model1_Oneof22Sfixed64
	//	*Model1_Oneof22Bool
	//	*Model1_Oneof22String
	//	*Model1_Oneof22Bytes
	//	*Model1_Oneof22EmbedMessage
	//	*Model1_Oneof22StandMessage
	//	*Model1_Oneof22ExternalMessage
	//	*Model1_Oneof22EmbedEnum
	//	*Model1_Oneof22StandEnum
	//	*Model1_Oneof22ExternalEnum
	Oneof_Type22Null isModel1_Oneof_Type22Null `protobuf_oneof:"Oneof_Type22_null"`
	// Types that are assignable to Oneof_Type23Null:
	//	*Model1_Oneof23Double
	//	*Model1_Oneof23Float
	//	*Model1_Oneof23Int32
	//	*Model1_Oneof23Int64
	//	*Model1_Oneof23Uint32
	//	*Model1_Oneof23Uint64
	//	*Model1_Oneof23Sint32
	//	*Model1_Oneof23Sint64
	//	*Model1_Oneof23Fixed32
	//	*Model1_Oneof23Fixed64
	//	*Model1_Oneof23Sfixed32
	//	*Model1_Oneof23Sfixed64
	//	*Model1_Oneof23Bool
	//	*Model1_Oneof23String
	//	*Model1_Oneof23Bytes
	//	*Model1_Oneof23EmbedMessage
	//	*Model1_Oneof23StandMessage
	//	*Model1_Oneof23ExternalMessage
	//	*Model1_Oneof23EmbedEnum
	//	*Model1_Oneof23StandEnum
	//	*Model1_Oneof23ExternalEnum
	Oneof_Type23Null         isModel1_Oneof_Type23Null                   `protobuf_oneof:"Oneof_Type23_null"`
	TypeDouble1              float64                                     `protobuf:"fixed64,1201,opt,name=type_double1,json=typeDouble1,proto3" json:"type_double1,omitempty"`
	TypeDouble2              float64                                     `protobuf:"fixed64,1202,opt,name=TypeDouble2,proto3" json:"TypeDouble2,omitempty"`
	TypeDouble3              float64                                     `protobuf:"fixed64,1203,opt,name=typeDouble3,proto3" json:"typeDouble3,omitempty"`
	TypeDouble4              float64                                     `protobuf:"fixed64,1204,opt,name=Type_double4,json=TypeDouble4,proto3" json:"Type_double4,omitempty"`
	Type_Double5             float64                                     `protobuf:"fixed64,1205,opt,name=Type_Double5,json=TypeDouble5,proto3" json:"Type_Double5,omitempty"`
	TypeFloat                float32                                     `protobuf:"fixed32,1211,opt,name=type_float,json=typeFloat,proto3" json:"type_float,omitempty"`
	TypeInt32                int32                                       `protobuf:"varint,1212,opt,name=type_int32,json=typeInt32,proto3" json:"type_int32,omitempty"`
	TypeInt64                int64                                       `protobuf:"varint,1213,opt,name=type_int64,json=typeInt64,proto3" json:"type_int64,omitempty"`
	TypeUint32               uint32                                      `protobuf:"varint,1214,opt,name=type_uint32,json=typeUint32,proto3" json:"type_uint32,omitempty"`
	TypeUint64               uint64                                      `protobuf:"varint,1215,opt,name=type_uint64,json=typeUint64,proto3" json:"type_uint64,omitempty"`
	TypeSint32               int32                                       `protobuf:"zigzag32,1216,opt,name=type_sint32,json=typeSint32,proto3" json:"type_sint32,omitempty"`
	TypeSint64               int64                                       `protobuf:"zigzag64,1217,opt,name=type_sint64,json=typeSint64,proto3" json:"type_sint64,omitempty"`
	TypeFixed32              uint32                                      `protobuf:"fixed32,1218,opt,name=type_fixed32,json=typeFixed32,proto3" json:"type_fixed32,omitempty"`
	TypeFixed64              uint64                                      `protobuf:"fixed64,1219,opt,name=type_fixed64,json=typeFixed64,proto3" json:"type_fixed64,omitempty"`
	TypeSfixed32             int32                                       `protobuf:"fixed32,1220,opt,name=type_sfixed32,json=typeSfixed32,proto3" json:"type_sfixed32,omitempty"`
	TypeSfixed64             int64                                       `protobuf:"fixed64,1221,opt,name=type_sfixed64,json=typeSfixed64,proto3" json:"type_sfixed64,omitempty"`
	TypeBool1                bool                                        `protobuf:"varint,1222,opt,name=type_bool1,json=typeBool1,proto3" json:"type_bool1,omitempty"`
	TypeBool2                bool                                        `protobuf:"varint,1223,opt,name=type_bool2,json=typeBool2,proto3" json:"type_bool2,omitempty"`
	TypeString1              string                                      `protobuf:"bytes,1224,opt,name=type_string1,json=typeString1,proto3" json:"type_string1,omitempty"`
	TypeString2              string                                      `protobuf:"bytes,1225,opt,name=type_string2,json=typeString2,proto3" json:"type_string2,omitempty"`
	TypeString3              string                                      `protobuf:"bytes,1226,opt,name=type_string3,json=typeString3,proto3" json:"type_string3,omitempty"`
	TypeString4              string                                      `protobuf:"bytes,1227,opt,name=type_string4,json=typeString4,proto3" json:"type_string4,omitempty"`
	TypeString5              string                                      `protobuf:"bytes,1228,opt,name=type_string5,json=typeString5,proto3" json:"type_string5,omitempty"`
	TypeBytes                []byte                                      `protobuf:"bytes,1229,opt,name=type_bytes,json=typeBytes,proto3" json:"type_bytes,omitempty"`
	TypeEmbedMessage         *Model1_EmbedMessage1                       `protobuf:"bytes,1241,opt,name=type_embed_message,json=typeEmbedMessage,proto3" json:"type_embed_message,omitempty"`
	TypeStandMessage         *StandMessage1                              `protobuf:"bytes,1243,opt,name=type_stand_message,json=typeStandMessage,proto3" json:"type_stand_message,omitempty"`
	TypeEmbedEnum            Model1_EmbedEnum1                           `protobuf:"varint,1244,opt,name=type_embed_enum,json=typeEmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1" json:"type_embed_enum,omitempty"`
	TypeStandEnum            StandEnum1                                  `protobuf:"varint,1245,opt,name=type_stand_enum,json=typeStandEnum,proto3,enum=gojsontest.StandEnum1" json:"type_stand_enum,omitempty"`
	TypeExternalEnum         gojsonexternal.ExternalEnum1                `protobuf:"varint,1246,opt,name=type_external_enum,json=typeExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1" json:"type_external_enum,omitempty"`
	TypeExternalMessage      *gojsonexternal.ExternalMessage1            `protobuf:"bytes,1247,opt,name=type_external_message,json=typeExternalMessage,proto3" json:"type_external_message,omitempty"`
	TypeBytesNull            []byte                                      `protobuf:"bytes,1261,opt,name=type_bytes_null,json=typeBytesNull,proto3" json:"type_bytes_null,omitempty"`
	TypeEmbedMessageNull     *Model1_EmbedMessage1                       `protobuf:"bytes,1262,opt,name=type_embed_message_null,json=typeEmbedMessageNull,proto3" json:"type_embed_message_null,omitempty"`          // test null
	TypeStandMessageNull     *StandMessage1                              `protobuf:"bytes,1263,opt,name=type_stand_message_null,json=typeStandMessageNull,proto3" json:"type_stand_message_null,omitempty"`          // test null
	TypeExternalMessageNull  *gojsonexternal.ExternalMessage1            `protobuf:"bytes,1264,opt,name=type_external_message_null,json=typeExternalMessageNull,proto3" json:"type_external_message_null,omitempty"` // test null
	ArrayDouble              []float64                                   `protobuf:"fixed64,1301,rep,packed,name=array_double,json=arrayDouble,proto3" json:"array_double,omitempty"`
	ArrayFloat               []float32                                   `protobuf:"fixed32,1302,rep,packed,name=array_float,json=arrayFloat,proto3" json:"array_float,omitempty"`
	ArrayInt32               []int32                                     `protobuf:"varint,1303,rep,packed,name=array_int32,json=arrayInt32,proto3" json:"array_int32,omitempty"`
	ArrayInt64               []int64                                     `protobuf:"varint,1304,rep,packed,name=array_int64,json=arrayInt64,proto3" json:"array_int64,omitempty"`
	ArrayUint32              []uint32                                    `protobuf:"varint,1305,rep,packed,name=array_uint32,json=arrayUint32,proto3" json:"array_uint32,omitempty"`
	ArrayUint64              []uint64                                    `protobuf:"varint,1306,rep,packed,name=array_uint64,json=arrayUint64,proto3" json:"array_uint64,omitempty"`
	ArraySint32              []int32                                     `protobuf:"zigzag32,1307,rep,packed,name=array_sint32,json=arraySint32,proto3" json:"array_sint32,omitempty"`
	ArraySint64              []int64                                     `protobuf:"zigzag64,1308,rep,packed,name=array_sint64,json=arraySint64,proto3" json:"array_sint64,omitempty"`
	ArrayFixed32             []uint32                                    `protobuf:"fixed32,1309,rep,packed,name=array_fixed32,json=arrayFixed32,proto3" json:"array_fixed32,omitempty"`
	ArrayFixed64             []uint64                                    `protobuf:"fixed64,1310,rep,packed,name=array_fixed64,json=arrayFixed64,proto3" json:"array_fixed64,omitempty"`
	ArraySfixed32            []int32                                     `protobuf:"fixed32,1311,rep,packed,name=array_sfixed32,json=arraySfixed32,proto3" json:"array_sfixed32,omitempty"`
	ArraySfixed64            []int64                                     `protobuf:"fixed64,1312,rep,packed,name=array_sfixed64,json=arraySfixed64,proto3" json:"array_sfixed64,omitempty"`
	ArrayBool                []bool                                      `protobuf:"varint,1313,rep,packed,name=array_bool,json=arrayBool,proto3" json:"array_bool,omitempty"`
	ArrayString              []string                                    `protobuf:"bytes,1314,rep,name=array_string,json=arrayString,proto3" json:"array_string,omitempty"`
	ArrayBytes               [][]byte                                    `protobuf:"bytes,1315,rep,name=array_bytes,json=arrayBytes,proto3" json:"array_bytes,omitempty"`
	ArrayEmbedMessage        []*Model1_EmbedMessage1                     `protobuf:"bytes,1316,rep,name=array_embed_message,json=arrayEmbedMessage,proto3" json:"array_embed_message,omitempty"`
	ArrayStandMessage        []*StandMessage1                            `protobuf:"bytes,1317,rep,name=array_stand_message,json=arrayStandMessage,proto3" json:"array_stand_message,omitempty"`
	ArrayExternalMessage     []*gojsonexternal.ExternalMessage1          `protobuf:"bytes,1318,rep,name=array_external_message,json=arrayExternalMessage,proto3" json:"array_external_message,omitempty"`
	ArrayEmbedEnum           []Model1_EmbedEnum1                         `protobuf:"varint,1319,rep,packed,name=array_embed_enum,json=arrayEmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1" json:"array_embed_enum,omitempty"`
	ArrayStandEnum           []StandEnum1                                `protobuf:"varint,1320,rep,packed,name=array_stand_enum,json=arrayStandEnum,proto3,enum=gojsontest.StandEnum1" json:"array_stand_enum,omitempty"`
	ArrayExternalEnum        []gojsonexternal.ExternalEnum1              `protobuf:"varint,1321,rep,packed,name=array_external_enum,json=arrayExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1" json:"array_external_enum,omitempty"`
	ArrayStandEnumNull       []StandEnum1                                `protobuf:"varint,1322,rep,packed,name=array_stand_enum_null,json=arrayStandEnumNull,proto3,enum=gojsontest.StandEnum1" json:"array_stand_enum_null,omitempty"`
	MapInt32Double           map[int32]float64                           `protobuf:"bytes,1402,rep,name=map_int32_double,json=mapInt32Double,proto3" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Float            map[int32]float32                           `protobuf:"bytes,1403,rep,name=map_int32_float,json=mapInt32Float,proto3" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Int32            map[int32]int32                             `protobuf:"bytes,1404,rep,name=map_int32_int32,json=mapInt32Int32,proto3" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Int64            map[int32]int64                             `protobuf:"bytes,1405,rep,name=map_int32_int64,json=mapInt32Int64,proto3" json:"map_int32_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint32           map[int32]uint32                            `protobuf:"bytes,1406,rep,name=map_int32_uint32,json=mapInt32Uint32,proto3" json:"map_int32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint64           map[int32]uint64                            `protobuf:"bytes,1407,rep,name=map_int32_uint64,json=mapInt32Uint64,proto3" json:"map_int32_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Sint32           map[int32]int32                             `protobuf:"bytes,1408,rep,name=map_int32_sint32,json=mapInt32Sint32,proto3" json:"map_int32_sint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapInt32Sint64           map[int32]int64                             `protobuf:"bytes,1409,rep,name=map_int32_sint64,json=mapInt32Sint64,proto3" json:"map_int32_sint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapInt32Fixed32          map[int32]uint32                            `protobuf:"bytes,1410,rep,name=map_int32_fixed32,json=mapInt32Fixed32,proto3" json:"map_int32_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Fixed64          map[int32]uint64                            `protobuf:"bytes,1411,rep,name=map_int32_fixed64,json=mapInt32Fixed64,proto3" json:"map_int32_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Sfixed32         map[int32]int32                             `protobuf:"bytes,1412,rep,name=map_int32_sfixed32,json=mapInt32Sfixed32,proto3" json:"map_int32_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Sfixed64         map[int32]int64                             `protobuf:"bytes,1413,rep,name=map_int32_sfixed64,json=mapInt32Sfixed64,proto3" json:"map_int32_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Bool             map[int32]bool                              `protobuf:"bytes,1414,rep,name=map_int32_bool,json=mapInt32Bool,proto3" json:"map_int32_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32String           map[int32]string                            `protobuf:"bytes,1415,rep,name=map_int32_string,json=mapInt32String,proto3" json:"map_int32_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Bytes            map[int32][]byte                            `protobuf:"bytes,1416,rep,name=map_int32_bytes,json=mapInt32Bytes,proto3" json:"map_int32_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32EmbedMessage     map[int32]*Model1_EmbedMessage1             `protobuf:"bytes,1417,rep,name=map_int32_embed_message,json=mapInt32EmbedMessage,proto3" json:"map_int32_embed_message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32StandMessage     map[int32]*StandMessage1                    `protobuf:"bytes,1418,rep,name=map_int32_stand_message,json=mapInt32StandMessage,proto3" json:"map_int32_stand_message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32EmbedEnum        map[int32]Model1_EmbedEnum1                 `protobuf:"bytes,1419,rep,name=map_int32_embed_enum,json=mapInt32EmbedEnum,proto3" json:"map_int32_embed_enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.Model1_EmbedEnum1"`
	MapInt32StandEnum        map[int32]StandEnum1                        `protobuf:"bytes,1420,rep,name=map_int32_stand_enum,json=mapInt32StandEnum,proto3" json:"map_int32_stand_enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.StandEnum1"`
	MapInt64Int32            map[int64]int32                             `protobuf:"bytes,1451,rep,name=map_int64_int32,json=mapInt64Int32,proto3" json:"map_int64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Int32           map[uint32]int32                            `protobuf:"bytes,1452,rep,name=map_uint32_int32,json=mapUint32Int32,proto3" json:"map_uint32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Int32           map[uint64]int32                            `protobuf:"bytes,1453,rep,name=map_uint64_int32,json=mapUint64Int32,proto3" json:"map_uint64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint32Int32           map[int32]int32                             `protobuf:"bytes,1454,rep,name=map_sint32_int32,json=mapSint32Int32,proto3" json:"map_sint32_int32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint64Int32           map[int64]int32                             `protobuf:"bytes,1455,rep,name=map_sint64_int32,json=mapSint64Int32,proto3" json:"map_sint64_int32,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed32Int32          map[uint32]int32                            `protobuf:"bytes,1456,rep,name=map_fixed32_int32,json=mapFixed32Int32,proto3" json:"map_fixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed64Int32          map[uint64]int32                            `protobuf:"bytes,1457,rep,name=map_fixed64_int32,json=mapFixed64Int32,proto3" json:"map_fixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed32Int32         map[int32]int32                             `protobuf:"bytes,1458,rep,name=map_sfixed32_int32,json=mapSfixed32Int32,proto3" json:"map_sfixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed64Int32         map[int64]int32                             `protobuf:"bytes,1459,rep,name=map_sfixed64_int32,json=mapSfixed64Int32,proto3" json:"map_sfixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringInt32           map[string]int32                            `protobuf:"bytes,1460,rep,name=map_string_int32,json=mapStringInt32,proto3" json:"map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringInt32Null       map[string]int32                            `protobuf:"bytes,1461,rep,name=map_string_int32_null,json=mapStringInt32Null,proto3" json:"map_string_int32_null,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringString          map[string]string                           `protobuf:"bytes,1462,rep,name=map_string_string,json=mapStringString,proto3" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringEmbedMessage    map[string]*Model1_EmbedMessage1            `protobuf:"bytes,1463,rep,name=map_string_embed_message,json=mapStringEmbedMessage,proto3" json:"map_string_embed_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringStandMessage    map[string]*StandMessage1                   `protobuf:"bytes,1464,rep,name=map_string_stand_message,json=mapStringStandMessage,proto3" json:"map_string_stand_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringExternalMessage map[string]*gojsonexternal.ExternalMessage1 `protobuf:"bytes,1465,rep,name=map_string_external_message,json=mapStringExternalMessage,proto3" json:"map_string_external_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringEmbedEnum       map[string]Model1_EmbedEnum1                `protobuf:"bytes,1466,rep,name=map_string_embed_enum,json=mapStringEmbedEnum,proto3" json:"map_string_embed_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.Model1_EmbedEnum1"`
	MapStringStandEnum       map[string]StandEnum1                       `protobuf:"bytes,1467,rep,name=map_string_stand_enum,json=mapStringStandEnum,proto3" json:"map_string_stand_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.StandEnum1"`
	MapStringExternalEnum    map[string]gojsonexternal.ExternalEnum1     `protobuf:"bytes,1468,rep,name=map_string_external_enum,json=mapStringExternalEnum,proto3" json:"map_string_external_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsonexternal.ExternalEnum1"`
}

func (x *Model1) Reset() {
	*x = Model1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model1) ProtoMessage() {}

func (x *Model1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model1.ProtoReflect.Descriptor instead.
func (*Model1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{2}
}

func (m *Model1) GetOneofType1() isModel1_OneofType1 {
	if m != nil {
		return m.OneofType1
	}
	return nil
}

func (x *Model1) GetOneof1Double() float64 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Double); ok {
		return x.Oneof1Double
	}
	return 0
}

func (x *Model1) GetOneof1Float() float32 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Float); ok {
		return x.Oneof1Float
	}
	return 0
}

func (x *Model1) GetOneof1Int32() int32 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Int32); ok {
		return x.Oneof1Int32
	}
	return 0
}

func (x *Model1) GetOneof1Int64() int64 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Int64); ok {
		return x.Oneof1Int64
	}
	return 0
}

func (x *Model1) GetOneof1Uint32() uint32 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Uint32); ok {
		return x.Oneof1Uint32
	}
	return 0
}

func (x *Model1) GetOneof1Uint64() uint64 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Uint64); ok {
		return x.Oneof1Uint64
	}
	return 0
}

func (x *Model1) GetOneof1Sint32() int32 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Sint32); ok {
		return x.Oneof1Sint32
	}
	return 0
}

func (x *Model1) GetOneof1Sint64() int64 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Sint64); ok {
		return x.Oneof1Sint64
	}
	return 0
}

func (x *Model1) GetOneof1Fixed32() uint32 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Fixed32); ok {
		return x.Oneof1Fixed32
	}
	return 0
}

func (x *Model1) GetOneof1Fixed64() uint64 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Fixed64); ok {
		return x.Oneof1Fixed64
	}
	return 0
}

func (x *Model1) GetOneof1Sfixed32() int32 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Sfixed32); ok {
		return x.Oneof1Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof1Sfixed64() int64 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Sfixed64); ok {
		return x.Oneof1Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof1Bool() bool {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Bool); ok {
		return x.Oneof1Bool
	}
	return false
}

func (x *Model1) GetOneof1String() string {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1String); ok {
		return x.Oneof1String
	}
	return ""
}

func (x *Model1) GetOneof1Bytes() []byte {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1Bytes); ok {
		return x.Oneof1Bytes
	}
	return nil
}

func (x *Model1) GetOneof1EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1EmbedMessage); ok {
		return x.Oneof1EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof1StandMessage() *StandMessage1 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1StandMessage); ok {
		return x.Oneof1StandMessage
	}
	return nil
}

func (x *Model1) GetOneof1ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1ExternalMessage); ok {
		return x.Oneof1ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof1EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1EmbedEnum); ok {
		return x.Oneof1EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof1StandEnum() StandEnum1 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1StandEnum); ok {
		return x.Oneof1StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof1ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneofType1().(*Model1_Oneof1ExternalEnum); ok {
		return x.Oneof1ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneofType2() isModel1_OneofType2 {
	if m != nil {
		return m.OneofType2
	}
	return nil
}

func (x *Model1) GetOneof2Double() float64 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Double); ok {
		return x.Oneof2Double
	}
	return 0
}

func (x *Model1) GetOneof2Float() float32 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Float); ok {
		return x.Oneof2Float
	}
	return 0
}

func (x *Model1) GetOneof2Int32() int32 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Int32); ok {
		return x.Oneof2Int32
	}
	return 0
}

func (x *Model1) GetOneof2Int64() int64 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Int64); ok {
		return x.Oneof2Int64
	}
	return 0
}

func (x *Model1) GetOneof2Uint32() uint32 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Uint32); ok {
		return x.Oneof2Uint32
	}
	return 0
}

func (x *Model1) GetOneof2Uint64() uint64 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Uint64); ok {
		return x.Oneof2Uint64
	}
	return 0
}

func (x *Model1) GetOneof2Sint32() int32 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Sint32); ok {
		return x.Oneof2Sint32
	}
	return 0
}

func (x *Model1) GetOneof2Sint64() int64 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Sint64); ok {
		return x.Oneof2Sint64
	}
	return 0
}

func (x *Model1) GetOneof2Fixed32() uint32 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Fixed32); ok {
		return x.Oneof2Fixed32
	}
	return 0
}

func (x *Model1) GetOneof2Fixed64() uint64 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Fixed64); ok {
		return x.Oneof2Fixed64
	}
	return 0
}

func (x *Model1) GetOneof2Sfixed32() int32 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Sfixed32); ok {
		return x.Oneof2Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof2Sfixed64() int64 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Sfixed64); ok {
		return x.Oneof2Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof2Bool() bool {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Bool); ok {
		return x.Oneof2Bool
	}
	return false
}

func (x *Model1) GetOneof2String() string {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2String); ok {
		return x.Oneof2String
	}
	return ""
}

func (x *Model1) GetOneof2Bytes() []byte {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2Bytes); ok {
		return x.Oneof2Bytes
	}
	return nil
}

func (x *Model1) GetOneof2EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2EmbedMessage); ok {
		return x.Oneof2EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof2StandMessage() *StandMessage1 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2StandMessage); ok {
		return x.Oneof2StandMessage
	}
	return nil
}

func (x *Model1) GetOneof2ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2ExternalMessage); ok {
		return x.Oneof2ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof2EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2EmbedEnum); ok {
		return x.Oneof2EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof2StandEnum() StandEnum1 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2StandEnum); ok {
		return x.Oneof2StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof2ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneofType2().(*Model1_Oneof2ExternalEnum); ok {
		return x.Oneof2ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneofType3() isModel1_OneofType3 {
	if m != nil {
		return m.OneofType3
	}
	return nil
}

func (x *Model1) GetOneof3Double() float64 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Double); ok {
		return x.Oneof3Double
	}
	return 0
}

func (x *Model1) GetOneof3Float() float32 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Float); ok {
		return x.Oneof3Float
	}
	return 0
}

func (x *Model1) GetOneof3Int32() int32 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Int32); ok {
		return x.Oneof3Int32
	}
	return 0
}

func (x *Model1) GetOneof3Int64() int64 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Int64); ok {
		return x.Oneof3Int64
	}
	return 0
}

func (x *Model1) GetOneof3Uint32() uint32 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Uint32); ok {
		return x.Oneof3Uint32
	}
	return 0
}

func (x *Model1) GetOneof3Uint64() uint64 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Uint64); ok {
		return x.Oneof3Uint64
	}
	return 0
}

func (x *Model1) GetOneof3Sint32() int32 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Sint32); ok {
		return x.Oneof3Sint32
	}
	return 0
}

func (x *Model1) GetOneof3Sint64() int64 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Sint64); ok {
		return x.Oneof3Sint64
	}
	return 0
}

func (x *Model1) GetOneof3Fixed32() uint32 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Fixed32); ok {
		return x.Oneof3Fixed32
	}
	return 0
}

func (x *Model1) GetOneof3Fixed64() uint64 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Fixed64); ok {
		return x.Oneof3Fixed64
	}
	return 0
}

func (x *Model1) GetOneof3Sfixed32() int32 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Sfixed32); ok {
		return x.Oneof3Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof3Sfixed64() int64 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Sfixed64); ok {
		return x.Oneof3Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof3Bool() bool {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Bool); ok {
		return x.Oneof3Bool
	}
	return false
}

func (x *Model1) GetOneof3String() string {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3String); ok {
		return x.Oneof3String
	}
	return ""
}

func (x *Model1) GetOneof3Bytes() []byte {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3Bytes); ok {
		return x.Oneof3Bytes
	}
	return nil
}

func (x *Model1) GetOneof3EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3EmbedMessage); ok {
		return x.Oneof3EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof3StandMessage() *StandMessage1 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3StandMessage); ok {
		return x.Oneof3StandMessage
	}
	return nil
}

func (x *Model1) GetOneof3ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3ExternalMessage); ok {
		return x.Oneof3ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof3EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3EmbedEnum); ok {
		return x.Oneof3EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof3StandEnum() StandEnum1 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3StandEnum); ok {
		return x.Oneof3StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof3ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneofType3().(*Model1_Oneof3ExternalEnum); ok {
		return x.Oneof3ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type4() isModel1_Oneof_Type4 {
	if m != nil {
		return m.Oneof_Type4
	}
	return nil
}

func (x *Model1) GetOneof4Double() float64 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Double); ok {
		return x.Oneof4Double
	}
	return 0
}

func (x *Model1) GetOneof4Float() float32 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Float); ok {
		return x.Oneof4Float
	}
	return 0
}

func (x *Model1) GetOneof4Int32() int32 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Int32); ok {
		return x.Oneof4Int32
	}
	return 0
}

func (x *Model1) GetOneof4Int64() int64 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Int64); ok {
		return x.Oneof4Int64
	}
	return 0
}

func (x *Model1) GetOneof4Uint32() uint32 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Uint32); ok {
		return x.Oneof4Uint32
	}
	return 0
}

func (x *Model1) GetOneof4Uint64() uint64 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Uint64); ok {
		return x.Oneof4Uint64
	}
	return 0
}

func (x *Model1) GetOneof4Sint32() int32 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Sint32); ok {
		return x.Oneof4Sint32
	}
	return 0
}

func (x *Model1) GetOneof4Sint64() int64 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Sint64); ok {
		return x.Oneof4Sint64
	}
	return 0
}

func (x *Model1) GetOneof4Fixed32() uint32 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Fixed32); ok {
		return x.Oneof4Fixed32
	}
	return 0
}

func (x *Model1) GetOneof4Fixed64() uint64 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Fixed64); ok {
		return x.Oneof4Fixed64
	}
	return 0
}

func (x *Model1) GetOneof4Sfixed32() int32 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Sfixed32); ok {
		return x.Oneof4Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof4Sfixed64() int64 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Sfixed64); ok {
		return x.Oneof4Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof4Bool() bool {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Bool); ok {
		return x.Oneof4Bool
	}
	return false
}

func (x *Model1) GetOneof4String() string {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4String); ok {
		return x.Oneof4String
	}
	return ""
}

func (x *Model1) GetOneof4Bytes() []byte {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4Bytes); ok {
		return x.Oneof4Bytes
	}
	return nil
}

func (x *Model1) GetOneof4EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4EmbedMessage); ok {
		return x.Oneof4EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof4StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4StandMessage); ok {
		return x.Oneof4StandMessage
	}
	return nil
}

func (x *Model1) GetOneof4ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4ExternalMessage); ok {
		return x.Oneof4ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof4EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4EmbedEnum); ok {
		return x.Oneof4EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof4StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4StandEnum); ok {
		return x.Oneof4StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof4ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type4().(*Model1_Oneof4ExternalEnum); ok {
		return x.Oneof4ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type5() isModel1_Oneof_Type5 {
	if m != nil {
		return m.Oneof_Type5
	}
	return nil
}

func (x *Model1) GetOneof5Double() float64 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Double); ok {
		return x.Oneof5Double
	}
	return 0
}

func (x *Model1) GetOneof5Float() float32 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Float); ok {
		return x.Oneof5Float
	}
	return 0
}

func (x *Model1) GetOneof5Int32() int32 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Int32); ok {
		return x.Oneof5Int32
	}
	return 0
}

func (x *Model1) GetOneof5Int64() int64 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Int64); ok {
		return x.Oneof5Int64
	}
	return 0
}

func (x *Model1) GetOneof5Uint32() uint32 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Uint32); ok {
		return x.Oneof5Uint32
	}
	return 0
}

func (x *Model1) GetOneof5Uint64() uint64 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Uint64); ok {
		return x.Oneof5Uint64
	}
	return 0
}

func (x *Model1) GetOneof5Sint32() int32 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Sint32); ok {
		return x.Oneof5Sint32
	}
	return 0
}

func (x *Model1) GetOneof5Sint64() int64 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Sint64); ok {
		return x.Oneof5Sint64
	}
	return 0
}

func (x *Model1) GetOneof5Fixed32() uint32 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Fixed32); ok {
		return x.Oneof5Fixed32
	}
	return 0
}

func (x *Model1) GetOneof5Fixed64() uint64 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Fixed64); ok {
		return x.Oneof5Fixed64
	}
	return 0
}

func (x *Model1) GetOneof5Sfixed32() int32 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Sfixed32); ok {
		return x.Oneof5Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof5Sfixed64() int64 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Sfixed64); ok {
		return x.Oneof5Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof5Bool() bool {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Bool); ok {
		return x.Oneof5Bool
	}
	return false
}

func (x *Model1) GetOneof5String() string {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5String); ok {
		return x.Oneof5String
	}
	return ""
}

func (x *Model1) GetOneof5Bytes() []byte {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5Bytes); ok {
		return x.Oneof5Bytes
	}
	return nil
}

func (x *Model1) GetOneof5EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5EmbedMessage); ok {
		return x.Oneof5EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof5StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5StandMessage); ok {
		return x.Oneof5StandMessage
	}
	return nil
}

func (x *Model1) GetOneof5ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5ExternalMessage); ok {
		return x.Oneof5ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof5EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5EmbedEnum); ok {
		return x.Oneof5EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof5StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5StandEnum); ok {
		return x.Oneof5StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof5ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type5().(*Model1_Oneof5ExternalEnum); ok {
		return x.Oneof5ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneofType6() isModel1_OneofType6 {
	if m != nil {
		return m.OneofType6
	}
	return nil
}

func (x *Model1) GetOneof6Double() float64 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Double); ok {
		return x.Oneof6Double
	}
	return 0
}

func (x *Model1) GetOneof6Float() float32 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Float); ok {
		return x.Oneof6Float
	}
	return 0
}

func (x *Model1) GetOneof6Int32() int32 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Int32); ok {
		return x.Oneof6Int32
	}
	return 0
}

func (x *Model1) GetOneof6Int64() int64 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Int64); ok {
		return x.Oneof6Int64
	}
	return 0
}

func (x *Model1) GetOneof6Uint32() uint32 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Uint32); ok {
		return x.Oneof6Uint32
	}
	return 0
}

func (x *Model1) GetOneof6Uint64() uint64 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Uint64); ok {
		return x.Oneof6Uint64
	}
	return 0
}

func (x *Model1) GetOneof6Sint32() int32 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Sint32); ok {
		return x.Oneof6Sint32
	}
	return 0
}

func (x *Model1) GetOneof6Sint64() int64 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Sint64); ok {
		return x.Oneof6Sint64
	}
	return 0
}

func (x *Model1) GetOneof6Fixed32() uint32 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Fixed32); ok {
		return x.Oneof6Fixed32
	}
	return 0
}

func (x *Model1) GetOneof6Fixed64() uint64 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Fixed64); ok {
		return x.Oneof6Fixed64
	}
	return 0
}

func (x *Model1) GetOneof6Sfixed32() int32 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Sfixed32); ok {
		return x.Oneof6Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof6Sfixed64() int64 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Sfixed64); ok {
		return x.Oneof6Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof6Bool() bool {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Bool); ok {
		return x.Oneof6Bool
	}
	return false
}

func (x *Model1) GetOneof6String() string {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6String); ok {
		return x.Oneof6String
	}
	return ""
}

func (x *Model1) GetOneof6Bytes() []byte {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6Bytes); ok {
		return x.Oneof6Bytes
	}
	return nil
}

func (x *Model1) GetOneof6EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6EmbedMessage); ok {
		return x.Oneof6EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof6StandMessage() *StandMessage1 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6StandMessage); ok {
		return x.Oneof6StandMessage
	}
	return nil
}

func (x *Model1) GetOneof6ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6ExternalMessage); ok {
		return x.Oneof6ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof6EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6EmbedEnum); ok {
		return x.Oneof6EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof6StandEnum() StandEnum1 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6StandEnum); ok {
		return x.Oneof6StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof6ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneofType6().(*Model1_Oneof6ExternalEnum); ok {
		return x.Oneof6ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneofType7() isModel1_OneofType7 {
	if m != nil {
		return m.OneofType7
	}
	return nil
}

func (x *Model1) GetOneof7Double() float64 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Double); ok {
		return x.Oneof7Double
	}
	return 0
}

func (x *Model1) GetOneof7Float() float32 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Float); ok {
		return x.Oneof7Float
	}
	return 0
}

func (x *Model1) GetOneof7Int32() int32 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Int32); ok {
		return x.Oneof7Int32
	}
	return 0
}

func (x *Model1) GetOneof7Int64() int64 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Int64); ok {
		return x.Oneof7Int64
	}
	return 0
}

func (x *Model1) GetOneof7Uint32() uint32 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Uint32); ok {
		return x.Oneof7Uint32
	}
	return 0
}

func (x *Model1) GetOneof7Uint64() uint64 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Uint64); ok {
		return x.Oneof7Uint64
	}
	return 0
}

func (x *Model1) GetOneof7Sint32() int32 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Sint32); ok {
		return x.Oneof7Sint32
	}
	return 0
}

func (x *Model1) GetOneof7Sint64() int64 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Sint64); ok {
		return x.Oneof7Sint64
	}
	return 0
}

func (x *Model1) GetOneof7Fixed32() uint32 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Fixed32); ok {
		return x.Oneof7Fixed32
	}
	return 0
}

func (x *Model1) GetOneof7Fixed64() uint64 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Fixed64); ok {
		return x.Oneof7Fixed64
	}
	return 0
}

func (x *Model1) GetOneof7Sfixed32() int32 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Sfixed32); ok {
		return x.Oneof7Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof7Sfixed64() int64 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Sfixed64); ok {
		return x.Oneof7Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof7Bool() bool {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Bool); ok {
		return x.Oneof7Bool
	}
	return false
}

func (x *Model1) GetOneof7String() string {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7String); ok {
		return x.Oneof7String
	}
	return ""
}

func (x *Model1) GetOneof7Bytes() []byte {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7Bytes); ok {
		return x.Oneof7Bytes
	}
	return nil
}

func (x *Model1) GetOneof7EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7EmbedMessage); ok {
		return x.Oneof7EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof7StandMessage() *StandMessage1 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7StandMessage); ok {
		return x.Oneof7StandMessage
	}
	return nil
}

func (x *Model1) GetOneof7ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7ExternalMessage); ok {
		return x.Oneof7ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof7EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7EmbedEnum); ok {
		return x.Oneof7EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof7StandEnum() StandEnum1 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7StandEnum); ok {
		return x.Oneof7StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof7ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneofType7().(*Model1_Oneof7ExternalEnum); ok {
		return x.Oneof7ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type8() isModel1_Oneof_Type8 {
	if m != nil {
		return m.Oneof_Type8
	}
	return nil
}

func (x *Model1) GetOneof8Double() float64 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Double); ok {
		return x.Oneof8Double
	}
	return 0
}

func (x *Model1) GetOneof8Float() float32 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Float); ok {
		return x.Oneof8Float
	}
	return 0
}

func (x *Model1) GetOneof8Int32() int32 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Int32); ok {
		return x.Oneof8Int32
	}
	return 0
}

func (x *Model1) GetOneof8Int64() int64 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Int64); ok {
		return x.Oneof8Int64
	}
	return 0
}

func (x *Model1) GetOneof8Uint32() uint32 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Uint32); ok {
		return x.Oneof8Uint32
	}
	return 0
}

func (x *Model1) GetOneof8Uint64() uint64 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Uint64); ok {
		return x.Oneof8Uint64
	}
	return 0
}

func (x *Model1) GetOneof8Sint32() int32 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Sint32); ok {
		return x.Oneof8Sint32
	}
	return 0
}

func (x *Model1) GetOneof8Sint64() int64 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Sint64); ok {
		return x.Oneof8Sint64
	}
	return 0
}

func (x *Model1) GetOneof8Fixed32() uint32 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Fixed32); ok {
		return x.Oneof8Fixed32
	}
	return 0
}

func (x *Model1) GetOneof8Fixed64() uint64 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Fixed64); ok {
		return x.Oneof8Fixed64
	}
	return 0
}

func (x *Model1) GetOneof8Sfixed32() int32 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Sfixed32); ok {
		return x.Oneof8Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof8Sfixed64() int64 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Sfixed64); ok {
		return x.Oneof8Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof8Bool() bool {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Bool); ok {
		return x.Oneof8Bool
	}
	return false
}

func (x *Model1) GetOneof8String() string {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8String); ok {
		return x.Oneof8String
	}
	return ""
}

func (x *Model1) GetOneof8Bytes() []byte {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8Bytes); ok {
		return x.Oneof8Bytes
	}
	return nil
}

func (x *Model1) GetOneof8EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8EmbedMessage); ok {
		return x.Oneof8EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof8StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8StandMessage); ok {
		return x.Oneof8StandMessage
	}
	return nil
}

func (x *Model1) GetOneof8ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8ExternalMessage); ok {
		return x.Oneof8ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof8EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8EmbedEnum); ok {
		return x.Oneof8EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof8StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8StandEnum); ok {
		return x.Oneof8StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof8ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type8().(*Model1_Oneof8ExternalEnum); ok {
		return x.Oneof8ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type9() isModel1_Oneof_Type9 {
	if m != nil {
		return m.Oneof_Type9
	}
	return nil
}

func (x *Model1) GetOneof9Double() float64 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Double); ok {
		return x.Oneof9Double
	}
	return 0
}

func (x *Model1) GetOneof9Float() float32 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Float); ok {
		return x.Oneof9Float
	}
	return 0
}

func (x *Model1) GetOneof9Int32() int32 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Int32); ok {
		return x.Oneof9Int32
	}
	return 0
}

func (x *Model1) GetOneof9Int64() int64 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Int64); ok {
		return x.Oneof9Int64
	}
	return 0
}

func (x *Model1) GetOneof9Uint32() uint32 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Uint32); ok {
		return x.Oneof9Uint32
	}
	return 0
}

func (x *Model1) GetOneof9Uint64() uint64 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Uint64); ok {
		return x.Oneof9Uint64
	}
	return 0
}

func (x *Model1) GetOneof9Sint32() int32 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Sint32); ok {
		return x.Oneof9Sint32
	}
	return 0
}

func (x *Model1) GetOneof9Sint64() int64 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Sint64); ok {
		return x.Oneof9Sint64
	}
	return 0
}

func (x *Model1) GetOneof9Fixed32() uint32 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Fixed32); ok {
		return x.Oneof9Fixed32
	}
	return 0
}

func (x *Model1) GetOneof9Fixed64() uint64 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Fixed64); ok {
		return x.Oneof9Fixed64
	}
	return 0
}

func (x *Model1) GetOneof9Sfixed32() int32 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Sfixed32); ok {
		return x.Oneof9Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof9Sfixed64() int64 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Sfixed64); ok {
		return x.Oneof9Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof9Bool() bool {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Bool); ok {
		return x.Oneof9Bool
	}
	return false
}

func (x *Model1) GetOneof9String() string {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9String); ok {
		return x.Oneof9String
	}
	return ""
}

func (x *Model1) GetOneof9Bytes() []byte {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9Bytes); ok {
		return x.Oneof9Bytes
	}
	return nil
}

func (x *Model1) GetOneof9EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9EmbedMessage); ok {
		return x.Oneof9EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof9StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9StandMessage); ok {
		return x.Oneof9StandMessage
	}
	return nil
}

func (x *Model1) GetOneof9ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9ExternalMessage); ok {
		return x.Oneof9ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof9EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9EmbedEnum); ok {
		return x.Oneof9EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof9StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9StandEnum); ok {
		return x.Oneof9StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof9ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type9().(*Model1_Oneof9ExternalEnum); ok {
		return x.Oneof9ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type10() isModel1_Oneof_Type10 {
	if m != nil {
		return m.Oneof_Type10
	}
	return nil
}

func (x *Model1) GetOneof10Double() float64 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Double); ok {
		return x.Oneof10Double
	}
	return 0
}

func (x *Model1) GetOneof10Float() float32 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Float); ok {
		return x.Oneof10Float
	}
	return 0
}

func (x *Model1) GetOneof10Int32() int32 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Int32); ok {
		return x.Oneof10Int32
	}
	return 0
}

func (x *Model1) GetOneof10Int64() int64 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Int64); ok {
		return x.Oneof10Int64
	}
	return 0
}

func (x *Model1) GetOneof10Uint32() uint32 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Uint32); ok {
		return x.Oneof10Uint32
	}
	return 0
}

func (x *Model1) GetOneof10Uint64() uint64 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Uint64); ok {
		return x.Oneof10Uint64
	}
	return 0
}

func (x *Model1) GetOneof10Sint32() int32 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Sint32); ok {
		return x.Oneof10Sint32
	}
	return 0
}

func (x *Model1) GetOneof10Sint64() int64 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Sint64); ok {
		return x.Oneof10Sint64
	}
	return 0
}

func (x *Model1) GetOneof10Fixed32() uint32 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Fixed32); ok {
		return x.Oneof10Fixed32
	}
	return 0
}

func (x *Model1) GetOneof10Fixed64() uint64 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Fixed64); ok {
		return x.Oneof10Fixed64
	}
	return 0
}

func (x *Model1) GetOneof10Sfixed32() int32 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Sfixed32); ok {
		return x.Oneof10Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof10Sfixed64() int64 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Sfixed64); ok {
		return x.Oneof10Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof10Bool() bool {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Bool); ok {
		return x.Oneof10Bool
	}
	return false
}

func (x *Model1) GetOneof10String() string {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10String); ok {
		return x.Oneof10String
	}
	return ""
}

func (x *Model1) GetOneof10Bytes() []byte {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10Bytes); ok {
		return x.Oneof10Bytes
	}
	return nil
}

func (x *Model1) GetOneof10EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10EmbedMessage); ok {
		return x.Oneof10EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof10StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10StandMessage); ok {
		return x.Oneof10StandMessage
	}
	return nil
}

func (x *Model1) GetOneof10ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10ExternalMessage); ok {
		return x.Oneof10ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof10EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10EmbedEnum); ok {
		return x.Oneof10EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof10StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10StandEnum); ok {
		return x.Oneof10StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof10ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type10().(*Model1_Oneof10ExternalEnum); ok {
		return x.Oneof10ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type11() isModel1_Oneof_Type11 {
	if m != nil {
		return m.Oneof_Type11
	}
	return nil
}

func (x *Model1) GetOneof11Double() float64 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Double); ok {
		return x.Oneof11Double
	}
	return 0
}

func (x *Model1) GetOneof11Float() float32 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Float); ok {
		return x.Oneof11Float
	}
	return 0
}

func (x *Model1) GetOneof11Int32() int32 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Int32); ok {
		return x.Oneof11Int32
	}
	return 0
}

func (x *Model1) GetOneof11Int64() int64 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Int64); ok {
		return x.Oneof11Int64
	}
	return 0
}

func (x *Model1) GetOneof11Uint32() uint32 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Uint32); ok {
		return x.Oneof11Uint32
	}
	return 0
}

func (x *Model1) GetOneof11Uint64() uint64 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Uint64); ok {
		return x.Oneof11Uint64
	}
	return 0
}

func (x *Model1) GetOneof11Sint32() int32 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Sint32); ok {
		return x.Oneof11Sint32
	}
	return 0
}

func (x *Model1) GetOneof11Sint64() int64 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Sint64); ok {
		return x.Oneof11Sint64
	}
	return 0
}

func (x *Model1) GetOneof11Fixed32() uint32 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Fixed32); ok {
		return x.Oneof11Fixed32
	}
	return 0
}

func (x *Model1) GetOneof11Fixed64() uint64 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Fixed64); ok {
		return x.Oneof11Fixed64
	}
	return 0
}

func (x *Model1) GetOneof11Sfixed32() int32 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Sfixed32); ok {
		return x.Oneof11Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof11Sfixed64() int64 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Sfixed64); ok {
		return x.Oneof11Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof11Bool() bool {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Bool); ok {
		return x.Oneof11Bool
	}
	return false
}

func (x *Model1) GetOneof11String() string {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11String); ok {
		return x.Oneof11String
	}
	return ""
}

func (x *Model1) GetOneof11Bytes() []byte {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11Bytes); ok {
		return x.Oneof11Bytes
	}
	return nil
}

func (x *Model1) GetOneof11EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11EmbedMessage); ok {
		return x.Oneof11EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof11StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11StandMessage); ok {
		return x.Oneof11StandMessage
	}
	return nil
}

func (x *Model1) GetOneof11ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11ExternalMessage); ok {
		return x.Oneof11ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof11EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11EmbedEnum); ok {
		return x.Oneof11EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof11StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11StandEnum); ok {
		return x.Oneof11StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof11ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type11().(*Model1_Oneof11ExternalEnum); ok {
		return x.Oneof11ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type12() isModel1_Oneof_Type12 {
	if m != nil {
		return m.Oneof_Type12
	}
	return nil
}

func (x *Model1) GetOneof12Double() float64 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Double); ok {
		return x.Oneof12Double
	}
	return 0
}

func (x *Model1) GetOneof12Float() float32 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Float); ok {
		return x.Oneof12Float
	}
	return 0
}

func (x *Model1) GetOneof12Int32() int32 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Int32); ok {
		return x.Oneof12Int32
	}
	return 0
}

func (x *Model1) GetOneof12Int64() int64 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Int64); ok {
		return x.Oneof12Int64
	}
	return 0
}

func (x *Model1) GetOneof12Uint32() uint32 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Uint32); ok {
		return x.Oneof12Uint32
	}
	return 0
}

func (x *Model1) GetOneof12Uint64() uint64 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Uint64); ok {
		return x.Oneof12Uint64
	}
	return 0
}

func (x *Model1) GetOneof12Sint32() int32 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Sint32); ok {
		return x.Oneof12Sint32
	}
	return 0
}

func (x *Model1) GetOneof12Sint64() int64 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Sint64); ok {
		return x.Oneof12Sint64
	}
	return 0
}

func (x *Model1) GetOneof12Fixed32() uint32 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Fixed32); ok {
		return x.Oneof12Fixed32
	}
	return 0
}

func (x *Model1) GetOneof12Fixed64() uint64 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Fixed64); ok {
		return x.Oneof12Fixed64
	}
	return 0
}

func (x *Model1) GetOneof12Sfixed32() int32 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Sfixed32); ok {
		return x.Oneof12Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof12Sfixed64() int64 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Sfixed64); ok {
		return x.Oneof12Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof12Bool() bool {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Bool); ok {
		return x.Oneof12Bool
	}
	return false
}

func (x *Model1) GetOneof12String() string {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12String); ok {
		return x.Oneof12String
	}
	return ""
}

func (x *Model1) GetOneof12Bytes() []byte {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12Bytes); ok {
		return x.Oneof12Bytes
	}
	return nil
}

func (x *Model1) GetOneof12EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12EmbedMessage); ok {
		return x.Oneof12EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof12StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12StandMessage); ok {
		return x.Oneof12StandMessage
	}
	return nil
}

func (x *Model1) GetOneof12ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12ExternalMessage); ok {
		return x.Oneof12ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof12EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12EmbedEnum); ok {
		return x.Oneof12EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof12StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12StandEnum); ok {
		return x.Oneof12StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof12ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type12().(*Model1_Oneof12ExternalEnum); ok {
		return x.Oneof12ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type13() isModel1_Oneof_Type13 {
	if m != nil {
		return m.Oneof_Type13
	}
	return nil
}

func (x *Model1) GetOneof13Double() float64 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Double); ok {
		return x.Oneof13Double
	}
	return 0
}

func (x *Model1) GetOneof13Float() float32 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Float); ok {
		return x.Oneof13Float
	}
	return 0
}

func (x *Model1) GetOneof13Int32() int32 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Int32); ok {
		return x.Oneof13Int32
	}
	return 0
}

func (x *Model1) GetOneof13Int64() int64 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Int64); ok {
		return x.Oneof13Int64
	}
	return 0
}

func (x *Model1) GetOneof13Uint32() uint32 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Uint32); ok {
		return x.Oneof13Uint32
	}
	return 0
}

func (x *Model1) GetOneof13Uint64() uint64 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Uint64); ok {
		return x.Oneof13Uint64
	}
	return 0
}

func (x *Model1) GetOneof13Sint32() int32 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Sint32); ok {
		return x.Oneof13Sint32
	}
	return 0
}

func (x *Model1) GetOneof13Sint64() int64 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Sint64); ok {
		return x.Oneof13Sint64
	}
	return 0
}

func (x *Model1) GetOneof13Fixed32() uint32 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Fixed32); ok {
		return x.Oneof13Fixed32
	}
	return 0
}

func (x *Model1) GetOneof13Fixed64() uint64 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Fixed64); ok {
		return x.Oneof13Fixed64
	}
	return 0
}

func (x *Model1) GetOneof13Sfixed32() int32 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Sfixed32); ok {
		return x.Oneof13Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof13Sfixed64() int64 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Sfixed64); ok {
		return x.Oneof13Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof13Bool() bool {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Bool); ok {
		return x.Oneof13Bool
	}
	return false
}

func (x *Model1) GetOneof13String() string {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13String); ok {
		return x.Oneof13String
	}
	return ""
}

func (x *Model1) GetOneof13Bytes() []byte {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13Bytes); ok {
		return x.Oneof13Bytes
	}
	return nil
}

func (x *Model1) GetOneof13EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13EmbedMessage); ok {
		return x.Oneof13EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof13StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13StandMessage); ok {
		return x.Oneof13StandMessage
	}
	return nil
}

func (x *Model1) GetOneof13ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13ExternalMessage); ok {
		return x.Oneof13ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof13EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13EmbedEnum); ok {
		return x.Oneof13EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof13StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13StandEnum); ok {
		return x.Oneof13StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof13ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type13().(*Model1_Oneof13ExternalEnum); ok {
		return x.Oneof13ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type14() isModel1_Oneof_Type14 {
	if m != nil {
		return m.Oneof_Type14
	}
	return nil
}

func (x *Model1) GetOneof14Double() float64 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Double); ok {
		return x.Oneof14Double
	}
	return 0
}

func (x *Model1) GetOneof14Float() float32 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Float); ok {
		return x.Oneof14Float
	}
	return 0
}

func (x *Model1) GetOneof14Int32() int32 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Int32); ok {
		return x.Oneof14Int32
	}
	return 0
}

func (x *Model1) GetOneof14Int64() int64 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Int64); ok {
		return x.Oneof14Int64
	}
	return 0
}

func (x *Model1) GetOneof14Uint32() uint32 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Uint32); ok {
		return x.Oneof14Uint32
	}
	return 0
}

func (x *Model1) GetOneof14Uint64() uint64 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Uint64); ok {
		return x.Oneof14Uint64
	}
	return 0
}

func (x *Model1) GetOneof14Sint32() int32 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Sint32); ok {
		return x.Oneof14Sint32
	}
	return 0
}

func (x *Model1) GetOneof14Sint64() int64 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Sint64); ok {
		return x.Oneof14Sint64
	}
	return 0
}

func (x *Model1) GetOneof14Fixed32() uint32 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Fixed32); ok {
		return x.Oneof14Fixed32
	}
	return 0
}

func (x *Model1) GetOneof14Fixed64() uint64 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Fixed64); ok {
		return x.Oneof14Fixed64
	}
	return 0
}

func (x *Model1) GetOneof14Sfixed32() int32 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Sfixed32); ok {
		return x.Oneof14Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof14Sfixed64() int64 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Sfixed64); ok {
		return x.Oneof14Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof14Bool() bool {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Bool); ok {
		return x.Oneof14Bool
	}
	return false
}

func (x *Model1) GetOneof14String() string {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14String); ok {
		return x.Oneof14String
	}
	return ""
}

func (x *Model1) GetOneof14Bytes() []byte {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14Bytes); ok {
		return x.Oneof14Bytes
	}
	return nil
}

func (x *Model1) GetOneof14EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14EmbedMessage); ok {
		return x.Oneof14EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof14StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14StandMessage); ok {
		return x.Oneof14StandMessage
	}
	return nil
}

func (x *Model1) GetOneof14ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14ExternalMessage); ok {
		return x.Oneof14ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof14EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14EmbedEnum); ok {
		return x.Oneof14EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof14StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14StandEnum); ok {
		return x.Oneof14StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof14ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type14().(*Model1_Oneof14ExternalEnum); ok {
		return x.Oneof14ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type15() isModel1_Oneof_Type15 {
	if m != nil {
		return m.Oneof_Type15
	}
	return nil
}

func (x *Model1) GetOneof15Double() float64 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Double); ok {
		return x.Oneof15Double
	}
	return 0
}

func (x *Model1) GetOneof15Float() float32 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Float); ok {
		return x.Oneof15Float
	}
	return 0
}

func (x *Model1) GetOneof15Int32() int32 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Int32); ok {
		return x.Oneof15Int32
	}
	return 0
}

func (x *Model1) GetOneof15Int64() int64 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Int64); ok {
		return x.Oneof15Int64
	}
	return 0
}

func (x *Model1) GetOneof15Uint32() uint32 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Uint32); ok {
		return x.Oneof15Uint32
	}
	return 0
}

func (x *Model1) GetOneof15Uint64() uint64 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Uint64); ok {
		return x.Oneof15Uint64
	}
	return 0
}

func (x *Model1) GetOneof15Sint32() int32 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Sint32); ok {
		return x.Oneof15Sint32
	}
	return 0
}

func (x *Model1) GetOneof15Sint64() int64 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Sint64); ok {
		return x.Oneof15Sint64
	}
	return 0
}

func (x *Model1) GetOneof15Fixed32() uint32 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Fixed32); ok {
		return x.Oneof15Fixed32
	}
	return 0
}

func (x *Model1) GetOneof15Fixed64() uint64 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Fixed64); ok {
		return x.Oneof15Fixed64
	}
	return 0
}

func (x *Model1) GetOneof15Sfixed32() int32 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Sfixed32); ok {
		return x.Oneof15Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof15Sfixed64() int64 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Sfixed64); ok {
		return x.Oneof15Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof15Bool() bool {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Bool); ok {
		return x.Oneof15Bool
	}
	return false
}

func (x *Model1) GetOneof15String() string {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15String); ok {
		return x.Oneof15String
	}
	return ""
}

func (x *Model1) GetOneof15Bytes() []byte {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15Bytes); ok {
		return x.Oneof15Bytes
	}
	return nil
}

func (x *Model1) GetOneof15EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15EmbedMessage); ok {
		return x.Oneof15EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof15StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15StandMessage); ok {
		return x.Oneof15StandMessage
	}
	return nil
}

func (x *Model1) GetOneof15ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15ExternalMessage); ok {
		return x.Oneof15ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof15EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15EmbedEnum); ok {
		return x.Oneof15EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof15StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15StandEnum); ok {
		return x.Oneof15StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof15ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type15().(*Model1_Oneof15ExternalEnum); ok {
		return x.Oneof15ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type16() isModel1_Oneof_Type16 {
	if m != nil {
		return m.Oneof_Type16
	}
	return nil
}

func (x *Model1) GetOneof16Double() float64 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Double); ok {
		return x.Oneof16Double
	}
	return 0
}

func (x *Model1) GetOneof16Float() float32 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Float); ok {
		return x.Oneof16Float
	}
	return 0
}

func (x *Model1) GetOneof16Int32() int32 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Int32); ok {
		return x.Oneof16Int32
	}
	return 0
}

func (x *Model1) GetOneof16Int64() int64 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Int64); ok {
		return x.Oneof16Int64
	}
	return 0
}

func (x *Model1) GetOneof16Uint32() uint32 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Uint32); ok {
		return x.Oneof16Uint32
	}
	return 0
}

func (x *Model1) GetOneof16Uint64() uint64 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Uint64); ok {
		return x.Oneof16Uint64
	}
	return 0
}

func (x *Model1) GetOneof16Sint32() int32 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Sint32); ok {
		return x.Oneof16Sint32
	}
	return 0
}

func (x *Model1) GetOneof16Sint64() int64 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Sint64); ok {
		return x.Oneof16Sint64
	}
	return 0
}

func (x *Model1) GetOneof16Fixed32() uint32 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Fixed32); ok {
		return x.Oneof16Fixed32
	}
	return 0
}

func (x *Model1) GetOneof16Fixed64() uint64 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Fixed64); ok {
		return x.Oneof16Fixed64
	}
	return 0
}

func (x *Model1) GetOneof16Sfixed32() int32 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Sfixed32); ok {
		return x.Oneof16Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof16Sfixed64() int64 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Sfixed64); ok {
		return x.Oneof16Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof16Bool() bool {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Bool); ok {
		return x.Oneof16Bool
	}
	return false
}

func (x *Model1) GetOneof16String() string {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16String); ok {
		return x.Oneof16String
	}
	return ""
}

func (x *Model1) GetOneof16Bytes() []byte {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16Bytes); ok {
		return x.Oneof16Bytes
	}
	return nil
}

func (x *Model1) GetOneof16EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16EmbedMessage); ok {
		return x.Oneof16EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof16StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16StandMessage); ok {
		return x.Oneof16StandMessage
	}
	return nil
}

func (x *Model1) GetOneof16ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16ExternalMessage); ok {
		return x.Oneof16ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof16EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16EmbedEnum); ok {
		return x.Oneof16EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof16StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16StandEnum); ok {
		return x.Oneof16StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof16ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type16().(*Model1_Oneof16ExternalEnum); ok {
		return x.Oneof16ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type17() isModel1_Oneof_Type17 {
	if m != nil {
		return m.Oneof_Type17
	}
	return nil
}

func (x *Model1) GetOneof17Double() float64 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Double); ok {
		return x.Oneof17Double
	}
	return 0
}

func (x *Model1) GetOneof17Float() float32 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Float); ok {
		return x.Oneof17Float
	}
	return 0
}

func (x *Model1) GetOneof17Int32() int32 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Int32); ok {
		return x.Oneof17Int32
	}
	return 0
}

func (x *Model1) GetOneof17Int64() int64 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Int64); ok {
		return x.Oneof17Int64
	}
	return 0
}

func (x *Model1) GetOneof17Uint32() uint32 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Uint32); ok {
		return x.Oneof17Uint32
	}
	return 0
}

func (x *Model1) GetOneof17Uint64() uint64 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Uint64); ok {
		return x.Oneof17Uint64
	}
	return 0
}

func (x *Model1) GetOneof17Sint32() int32 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Sint32); ok {
		return x.Oneof17Sint32
	}
	return 0
}

func (x *Model1) GetOneof17Sint64() int64 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Sint64); ok {
		return x.Oneof17Sint64
	}
	return 0
}

func (x *Model1) GetOneof17Fixed32() uint32 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Fixed32); ok {
		return x.Oneof17Fixed32
	}
	return 0
}

func (x *Model1) GetOneof17Fixed64() uint64 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Fixed64); ok {
		return x.Oneof17Fixed64
	}
	return 0
}

func (x *Model1) GetOneof17Sfixed32() int32 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Sfixed32); ok {
		return x.Oneof17Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof17Sfixed64() int64 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Sfixed64); ok {
		return x.Oneof17Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof17Bool() bool {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Bool); ok {
		return x.Oneof17Bool
	}
	return false
}

func (x *Model1) GetOneof17String() string {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17String); ok {
		return x.Oneof17String
	}
	return ""
}

func (x *Model1) GetOneof17Bytes() []byte {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17Bytes); ok {
		return x.Oneof17Bytes
	}
	return nil
}

func (x *Model1) GetOneof17EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17EmbedMessage); ok {
		return x.Oneof17EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof17StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17StandMessage); ok {
		return x.Oneof17StandMessage
	}
	return nil
}

func (x *Model1) GetOneof17ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17ExternalMessage); ok {
		return x.Oneof17ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof17EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17EmbedEnum); ok {
		return x.Oneof17EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof17StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17StandEnum); ok {
		return x.Oneof17StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof17ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type17().(*Model1_Oneof17ExternalEnum); ok {
		return x.Oneof17ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type18() isModel1_Oneof_Type18 {
	if m != nil {
		return m.Oneof_Type18
	}
	return nil
}

func (x *Model1) GetOneof18Double() float64 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Double); ok {
		return x.Oneof18Double
	}
	return 0
}

func (x *Model1) GetOneof18Float() float32 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Float); ok {
		return x.Oneof18Float
	}
	return 0
}

func (x *Model1) GetOneof18Int32() int32 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Int32); ok {
		return x.Oneof18Int32
	}
	return 0
}

func (x *Model1) GetOneof18Int64() int64 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Int64); ok {
		return x.Oneof18Int64
	}
	return 0
}

func (x *Model1) GetOneof18Uint32() uint32 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Uint32); ok {
		return x.Oneof18Uint32
	}
	return 0
}

func (x *Model1) GetOneof18Uint64() uint64 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Uint64); ok {
		return x.Oneof18Uint64
	}
	return 0
}

func (x *Model1) GetOneof18Sint32() int32 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Sint32); ok {
		return x.Oneof18Sint32
	}
	return 0
}

func (x *Model1) GetOneof18Sint64() int64 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Sint64); ok {
		return x.Oneof18Sint64
	}
	return 0
}

func (x *Model1) GetOneof18Fixed32() uint32 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Fixed32); ok {
		return x.Oneof18Fixed32
	}
	return 0
}

func (x *Model1) GetOneof18Fixed64() uint64 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Fixed64); ok {
		return x.Oneof18Fixed64
	}
	return 0
}

func (x *Model1) GetOneof18Sfixed32() int32 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Sfixed32); ok {
		return x.Oneof18Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof18Sfixed64() int64 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Sfixed64); ok {
		return x.Oneof18Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof18Bool() bool {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Bool); ok {
		return x.Oneof18Bool
	}
	return false
}

func (x *Model1) GetOneof18String() string {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18String); ok {
		return x.Oneof18String
	}
	return ""
}

func (x *Model1) GetOneof18Bytes() []byte {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18Bytes); ok {
		return x.Oneof18Bytes
	}
	return nil
}

func (x *Model1) GetOneof18EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18EmbedMessage); ok {
		return x.Oneof18EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof18StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18StandMessage); ok {
		return x.Oneof18StandMessage
	}
	return nil
}

func (x *Model1) GetOneof18ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18ExternalMessage); ok {
		return x.Oneof18ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof18EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18EmbedEnum); ok {
		return x.Oneof18EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof18StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18StandEnum); ok {
		return x.Oneof18StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof18ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type18().(*Model1_Oneof18ExternalEnum); ok {
		return x.Oneof18ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type19() isModel1_Oneof_Type19 {
	if m != nil {
		return m.Oneof_Type19
	}
	return nil
}

func (x *Model1) GetOneof19Double() float64 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Double); ok {
		return x.Oneof19Double
	}
	return 0
}

func (x *Model1) GetOneof19Float() float32 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Float); ok {
		return x.Oneof19Float
	}
	return 0
}

func (x *Model1) GetOneof19Int32() int32 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Int32); ok {
		return x.Oneof19Int32
	}
	return 0
}

func (x *Model1) GetOneof19Int64() int64 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Int64); ok {
		return x.Oneof19Int64
	}
	return 0
}

func (x *Model1) GetOneof19Uint32() uint32 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Uint32); ok {
		return x.Oneof19Uint32
	}
	return 0
}

func (x *Model1) GetOneof19Uint64() uint64 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Uint64); ok {
		return x.Oneof19Uint64
	}
	return 0
}

func (x *Model1) GetOneof19Sint32() int32 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Sint32); ok {
		return x.Oneof19Sint32
	}
	return 0
}

func (x *Model1) GetOneof19Sint64() int64 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Sint64); ok {
		return x.Oneof19Sint64
	}
	return 0
}

func (x *Model1) GetOneof19Fixed32() uint32 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Fixed32); ok {
		return x.Oneof19Fixed32
	}
	return 0
}

func (x *Model1) GetOneof19Fixed64() uint64 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Fixed64); ok {
		return x.Oneof19Fixed64
	}
	return 0
}

func (x *Model1) GetOneof19Sfixed32() int32 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Sfixed32); ok {
		return x.Oneof19Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof19Sfixed64() int64 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Sfixed64); ok {
		return x.Oneof19Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof19Bool() bool {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Bool); ok {
		return x.Oneof19Bool
	}
	return false
}

func (x *Model1) GetOneof19String() string {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19String); ok {
		return x.Oneof19String
	}
	return ""
}

func (x *Model1) GetOneof19Bytes() []byte {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19Bytes); ok {
		return x.Oneof19Bytes
	}
	return nil
}

func (x *Model1) GetOneof19EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19EmbedMessage); ok {
		return x.Oneof19EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof19StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19StandMessage); ok {
		return x.Oneof19StandMessage
	}
	return nil
}

func (x *Model1) GetOneof19ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19ExternalMessage); ok {
		return x.Oneof19ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof19EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19EmbedEnum); ok {
		return x.Oneof19EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof19StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19StandEnum); ok {
		return x.Oneof19StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof19ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type19().(*Model1_Oneof19ExternalEnum); ok {
		return x.Oneof19ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type20() isModel1_Oneof_Type20 {
	if m != nil {
		return m.Oneof_Type20
	}
	return nil
}

func (x *Model1) GetOneof20Double() float64 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Double); ok {
		return x.Oneof20Double
	}
	return 0
}

func (x *Model1) GetOneof20Float() float32 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Float); ok {
		return x.Oneof20Float
	}
	return 0
}

func (x *Model1) GetOneof20Int32() int32 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Int32); ok {
		return x.Oneof20Int32
	}
	return 0
}

func (x *Model1) GetOneof20Int64() int64 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Int64); ok {
		return x.Oneof20Int64
	}
	return 0
}

func (x *Model1) GetOneof20Uint32() uint32 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Uint32); ok {
		return x.Oneof20Uint32
	}
	return 0
}

func (x *Model1) GetOneof20Uint64() uint64 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Uint64); ok {
		return x.Oneof20Uint64
	}
	return 0
}

func (x *Model1) GetOneof20Sint32() int32 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Sint32); ok {
		return x.Oneof20Sint32
	}
	return 0
}

func (x *Model1) GetOneof20Sint64() int64 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Sint64); ok {
		return x.Oneof20Sint64
	}
	return 0
}

func (x *Model1) GetOneof20Fixed32() uint32 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Fixed32); ok {
		return x.Oneof20Fixed32
	}
	return 0
}

func (x *Model1) GetOneof20Fixed64() uint64 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Fixed64); ok {
		return x.Oneof20Fixed64
	}
	return 0
}

func (x *Model1) GetOneof20Sfixed32() int32 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Sfixed32); ok {
		return x.Oneof20Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof20Sfixed64() int64 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Sfixed64); ok {
		return x.Oneof20Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof20Bool() bool {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Bool); ok {
		return x.Oneof20Bool
	}
	return false
}

func (x *Model1) GetOneof20String() string {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20String); ok {
		return x.Oneof20String
	}
	return ""
}

func (x *Model1) GetOneof20Bytes() []byte {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20Bytes); ok {
		return x.Oneof20Bytes
	}
	return nil
}

func (x *Model1) GetOneof20EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20EmbedMessage); ok {
		return x.Oneof20EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof20StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20StandMessage); ok {
		return x.Oneof20StandMessage
	}
	return nil
}

func (x *Model1) GetOneof20ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20ExternalMessage); ok {
		return x.Oneof20ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof20EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20EmbedEnum); ok {
		return x.Oneof20EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof20StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20StandEnum); ok {
		return x.Oneof20StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof20ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type20().(*Model1_Oneof20ExternalEnum); ok {
		return x.Oneof20ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type21() isModel1_Oneof_Type21 {
	if m != nil {
		return m.Oneof_Type21
	}
	return nil
}

func (x *Model1) GetOneof21Double() float64 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Double); ok {
		return x.Oneof21Double
	}
	return 0
}

func (x *Model1) GetOneof21Float() float32 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Float); ok {
		return x.Oneof21Float
	}
	return 0
}

func (x *Model1) GetOneof21Int32() int32 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Int32); ok {
		return x.Oneof21Int32
	}
	return 0
}

func (x *Model1) GetOneof21Int64() int64 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Int64); ok {
		return x.Oneof21Int64
	}
	return 0
}

func (x *Model1) GetOneof21Uint32() uint32 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Uint32); ok {
		return x.Oneof21Uint32
	}
	return 0
}

func (x *Model1) GetOneof21Uint64() uint64 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Uint64); ok {
		return x.Oneof21Uint64
	}
	return 0
}

func (x *Model1) GetOneof21Sint32() int32 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Sint32); ok {
		return x.Oneof21Sint32
	}
	return 0
}

func (x *Model1) GetOneof21Sint64() int64 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Sint64); ok {
		return x.Oneof21Sint64
	}
	return 0
}

func (x *Model1) GetOneof21Fixed32() uint32 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Fixed32); ok {
		return x.Oneof21Fixed32
	}
	return 0
}

func (x *Model1) GetOneof21Fixed64() uint64 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Fixed64); ok {
		return x.Oneof21Fixed64
	}
	return 0
}

func (x *Model1) GetOneof21Sfixed32() int32 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Sfixed32); ok {
		return x.Oneof21Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof21Sfixed64() int64 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Sfixed64); ok {
		return x.Oneof21Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof21Bool() bool {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Bool); ok {
		return x.Oneof21Bool
	}
	return false
}

func (x *Model1) GetOneof21String() string {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21String); ok {
		return x.Oneof21String
	}
	return ""
}

func (x *Model1) GetOneof21Bytes() []byte {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21Bytes); ok {
		return x.Oneof21Bytes
	}
	return nil
}

func (x *Model1) GetOneof21EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21EmbedMessage); ok {
		return x.Oneof21EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof21StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21StandMessage); ok {
		return x.Oneof21StandMessage
	}
	return nil
}

func (x *Model1) GetOneof21ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21ExternalMessage); ok {
		return x.Oneof21ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof21EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21EmbedEnum); ok {
		return x.Oneof21EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof21StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21StandEnum); ok {
		return x.Oneof21StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof21ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type21().(*Model1_Oneof21ExternalEnum); ok {
		return x.Oneof21ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type22Null() isModel1_Oneof_Type22Null {
	if m != nil {
		return m.Oneof_Type22Null
	}
	return nil
}

func (x *Model1) GetOneof22Double() float64 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Double); ok {
		return x.Oneof22Double
	}
	return 0
}

func (x *Model1) GetOneof22Float() float32 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Float); ok {
		return x.Oneof22Float
	}
	return 0
}

func (x *Model1) GetOneof22Int32() int32 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Int32); ok {
		return x.Oneof22Int32
	}
	return 0
}

func (x *Model1) GetOneof22Int64() int64 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Int64); ok {
		return x.Oneof22Int64
	}
	return 0
}

func (x *Model1) GetOneof22Uint32() uint32 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Uint32); ok {
		return x.Oneof22Uint32
	}
	return 0
}

func (x *Model1) GetOneof22Uint64() uint64 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Uint64); ok {
		return x.Oneof22Uint64
	}
	return 0
}

func (x *Model1) GetOneof22Sint32() int32 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Sint32); ok {
		return x.Oneof22Sint32
	}
	return 0
}

func (x *Model1) GetOneof22Sint64() int64 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Sint64); ok {
		return x.Oneof22Sint64
	}
	return 0
}

func (x *Model1) GetOneof22Fixed32() uint32 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Fixed32); ok {
		return x.Oneof22Fixed32
	}
	return 0
}

func (x *Model1) GetOneof22Fixed64() uint64 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Fixed64); ok {
		return x.Oneof22Fixed64
	}
	return 0
}

func (x *Model1) GetOneof22Sfixed32() int32 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Sfixed32); ok {
		return x.Oneof22Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof22Sfixed64() int64 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Sfixed64); ok {
		return x.Oneof22Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof22Bool() bool {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Bool); ok {
		return x.Oneof22Bool
	}
	return false
}

func (x *Model1) GetOneof22String() string {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22String); ok {
		return x.Oneof22String
	}
	return ""
}

func (x *Model1) GetOneof22Bytes() []byte {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22Bytes); ok {
		return x.Oneof22Bytes
	}
	return nil
}

func (x *Model1) GetOneof22EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22EmbedMessage); ok {
		return x.Oneof22EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof22StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22StandMessage); ok {
		return x.Oneof22StandMessage
	}
	return nil
}

func (x *Model1) GetOneof22ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22ExternalMessage); ok {
		return x.Oneof22ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof22EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22EmbedEnum); ok {
		return x.Oneof22EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof22StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22StandEnum); ok {
		return x.Oneof22StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof22ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type22Null().(*Model1_Oneof22ExternalEnum); ok {
		return x.Oneof22ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (m *Model1) GetOneof_Type23Null() isModel1_Oneof_Type23Null {
	if m != nil {
		return m.Oneof_Type23Null
	}
	return nil
}

func (x *Model1) GetOneof23Double() float64 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Double); ok {
		return x.Oneof23Double
	}
	return 0
}

func (x *Model1) GetOneof23Float() float32 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Float); ok {
		return x.Oneof23Float
	}
	return 0
}

func (x *Model1) GetOneof23Int32() int32 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Int32); ok {
		return x.Oneof23Int32
	}
	return 0
}

func (x *Model1) GetOneof23Int64() int64 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Int64); ok {
		return x.Oneof23Int64
	}
	return 0
}

func (x *Model1) GetOneof23Uint32() uint32 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Uint32); ok {
		return x.Oneof23Uint32
	}
	return 0
}

func (x *Model1) GetOneof23Uint64() uint64 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Uint64); ok {
		return x.Oneof23Uint64
	}
	return 0
}

func (x *Model1) GetOneof23Sint32() int32 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Sint32); ok {
		return x.Oneof23Sint32
	}
	return 0
}

func (x *Model1) GetOneof23Sint64() int64 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Sint64); ok {
		return x.Oneof23Sint64
	}
	return 0
}

func (x *Model1) GetOneof23Fixed32() uint32 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Fixed32); ok {
		return x.Oneof23Fixed32
	}
	return 0
}

func (x *Model1) GetOneof23Fixed64() uint64 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Fixed64); ok {
		return x.Oneof23Fixed64
	}
	return 0
}

func (x *Model1) GetOneof23Sfixed32() int32 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Sfixed32); ok {
		return x.Oneof23Sfixed32
	}
	return 0
}

func (x *Model1) GetOneof23Sfixed64() int64 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Sfixed64); ok {
		return x.Oneof23Sfixed64
	}
	return 0
}

func (x *Model1) GetOneof23Bool() bool {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Bool); ok {
		return x.Oneof23Bool
	}
	return false
}

func (x *Model1) GetOneof23String() string {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23String); ok {
		return x.Oneof23String
	}
	return ""
}

func (x *Model1) GetOneof23Bytes() []byte {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23Bytes); ok {
		return x.Oneof23Bytes
	}
	return nil
}

func (x *Model1) GetOneof23EmbedMessage() *Model1_EmbedMessage1 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23EmbedMessage); ok {
		return x.Oneof23EmbedMessage
	}
	return nil
}

func (x *Model1) GetOneof23StandMessage() *StandMessage1 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23StandMessage); ok {
		return x.Oneof23StandMessage
	}
	return nil
}

func (x *Model1) GetOneof23ExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23ExternalMessage); ok {
		return x.Oneof23ExternalMessage
	}
	return nil
}

func (x *Model1) GetOneof23EmbedEnum() Model1_EmbedEnum1 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23EmbedEnum); ok {
		return x.Oneof23EmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetOneof23StandEnum() StandEnum1 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23StandEnum); ok {
		return x.Oneof23StandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetOneof23ExternalEnum() gojsonexternal.ExternalEnum1 {
	if x, ok := x.GetOneof_Type23Null().(*Model1_Oneof23ExternalEnum); ok {
		return x.Oneof23ExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (x *Model1) GetTypeDouble1() float64 {
	if x != nil {
		return x.TypeDouble1
	}
	return 0
}

func (x *Model1) GetTypeDouble2() float64 {
	if x != nil {
		return x.TypeDouble2
	}
	return 0
}

func (x *Model1) GetTypeDouble3() float64 {
	if x != nil {
		return x.TypeDouble3
	}
	return 0
}

func (x *Model1) GetTypeDouble4() float64 {
	if x != nil {
		return x.TypeDouble4
	}
	return 0
}

func (x *Model1) GetType_Double5() float64 {
	if x != nil {
		return x.Type_Double5
	}
	return 0
}

func (x *Model1) GetTypeFloat() float32 {
	if x != nil {
		return x.TypeFloat
	}
	return 0
}

func (x *Model1) GetTypeInt32() int32 {
	if x != nil {
		return x.TypeInt32
	}
	return 0
}

func (x *Model1) GetTypeInt64() int64 {
	if x != nil {
		return x.TypeInt64
	}
	return 0
}

func (x *Model1) GetTypeUint32() uint32 {
	if x != nil {
		return x.TypeUint32
	}
	return 0
}

func (x *Model1) GetTypeUint64() uint64 {
	if x != nil {
		return x.TypeUint64
	}
	return 0
}

func (x *Model1) GetTypeSint32() int32 {
	if x != nil {
		return x.TypeSint32
	}
	return 0
}

func (x *Model1) GetTypeSint64() int64 {
	if x != nil {
		return x.TypeSint64
	}
	return 0
}

func (x *Model1) GetTypeFixed32() uint32 {
	if x != nil {
		return x.TypeFixed32
	}
	return 0
}

func (x *Model1) GetTypeFixed64() uint64 {
	if x != nil {
		return x.TypeFixed64
	}
	return 0
}

func (x *Model1) GetTypeSfixed32() int32 {
	if x != nil {
		return x.TypeSfixed32
	}
	return 0
}

func (x *Model1) GetTypeSfixed64() int64 {
	if x != nil {
		return x.TypeSfixed64
	}
	return 0
}

func (x *Model1) GetTypeBool1() bool {
	if x != nil {
		return x.TypeBool1
	}
	return false
}

func (x *Model1) GetTypeBool2() bool {
	if x != nil {
		return x.TypeBool2
	}
	return false
}

func (x *Model1) GetTypeString1() string {
	if x != nil {
		return x.TypeString1
	}
	return ""
}

func (x *Model1) GetTypeString2() string {
	if x != nil {
		return x.TypeString2
	}
	return ""
}

func (x *Model1) GetTypeString3() string {
	if x != nil {
		return x.TypeString3
	}
	return ""
}

func (x *Model1) GetTypeString4() string {
	if x != nil {
		return x.TypeString4
	}
	return ""
}

func (x *Model1) GetTypeString5() string {
	if x != nil {
		return x.TypeString5
	}
	return ""
}

func (x *Model1) GetTypeBytes() []byte {
	if x != nil {
		return x.TypeBytes
	}
	return nil
}

func (x *Model1) GetTypeEmbedMessage() *Model1_EmbedMessage1 {
	if x != nil {
		return x.TypeEmbedMessage
	}
	return nil
}

func (x *Model1) GetTypeStandMessage() *StandMessage1 {
	if x != nil {
		return x.TypeStandMessage
	}
	return nil
}

func (x *Model1) GetTypeEmbedEnum() Model1_EmbedEnum1 {
	if x != nil {
		return x.TypeEmbedEnum
	}
	return Model1_july
}

func (x *Model1) GetTypeStandEnum() StandEnum1 {
	if x != nil {
		return x.TypeStandEnum
	}
	return StandEnum1_January
}

func (x *Model1) GetTypeExternalEnum() gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.TypeExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (x *Model1) GetTypeExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.TypeExternalMessage
	}
	return nil
}

func (x *Model1) GetTypeBytesNull() []byte {
	if x != nil {
		return x.TypeBytesNull
	}
	return nil
}

func (x *Model1) GetTypeEmbedMessageNull() *Model1_EmbedMessage1 {
	if x != nil {
		return x.TypeEmbedMessageNull
	}
	return nil
}

func (x *Model1) GetTypeStandMessageNull() *StandMessage1 {
	if x != nil {
		return x.TypeStandMessageNull
	}
	return nil
}

func (x *Model1) GetTypeExternalMessageNull() *gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.TypeExternalMessageNull
	}
	return nil
}

func (x *Model1) GetArrayDouble() []float64 {
	if x != nil {
		return x.ArrayDouble
	}
	return nil
}

func (x *Model1) GetArrayFloat() []float32 {
	if x != nil {
		return x.ArrayFloat
	}
	return nil
}

func (x *Model1) GetArrayInt32() []int32 {
	if x != nil {
		return x.ArrayInt32
	}
	return nil
}

func (x *Model1) GetArrayInt64() []int64 {
	if x != nil {
		return x.ArrayInt64
	}
	return nil
}

func (x *Model1) GetArrayUint32() []uint32 {
	if x != nil {
		return x.ArrayUint32
	}
	return nil
}

func (x *Model1) GetArrayUint64() []uint64 {
	if x != nil {
		return x.ArrayUint64
	}
	return nil
}

func (x *Model1) GetArraySint32() []int32 {
	if x != nil {
		return x.ArraySint32
	}
	return nil
}

func (x *Model1) GetArraySint64() []int64 {
	if x != nil {
		return x.ArraySint64
	}
	return nil
}

func (x *Model1) GetArrayFixed32() []uint32 {
	if x != nil {
		return x.ArrayFixed32
	}
	return nil
}

func (x *Model1) GetArrayFixed64() []uint64 {
	if x != nil {
		return x.ArrayFixed64
	}
	return nil
}

func (x *Model1) GetArraySfixed32() []int32 {
	if x != nil {
		return x.ArraySfixed32
	}
	return nil
}

func (x *Model1) GetArraySfixed64() []int64 {
	if x != nil {
		return x.ArraySfixed64
	}
	return nil
}

func (x *Model1) GetArrayBool() []bool {
	if x != nil {
		return x.ArrayBool
	}
	return nil
}

func (x *Model1) GetArrayString() []string {
	if x != nil {
		return x.ArrayString
	}
	return nil
}

func (x *Model1) GetArrayBytes() [][]byte {
	if x != nil {
		return x.ArrayBytes
	}
	return nil
}

func (x *Model1) GetArrayEmbedMessage() []*Model1_EmbedMessage1 {
	if x != nil {
		return x.ArrayEmbedMessage
	}
	return nil
}

func (x *Model1) GetArrayStandMessage() []*StandMessage1 {
	if x != nil {
		return x.ArrayStandMessage
	}
	return nil
}

func (x *Model1) GetArrayExternalMessage() []*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.ArrayExternalMessage
	}
	return nil
}

func (x *Model1) GetArrayEmbedEnum() []Model1_EmbedEnum1 {
	if x != nil {
		return x.ArrayEmbedEnum
	}
	return nil
}

func (x *Model1) GetArrayStandEnum() []StandEnum1 {
	if x != nil {
		return x.ArrayStandEnum
	}
	return nil
}

func (x *Model1) GetArrayExternalEnum() []gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.ArrayExternalEnum
	}
	return nil
}

func (x *Model1) GetArrayStandEnumNull() []StandEnum1 {
	if x != nil {
		return x.ArrayStandEnumNull
	}
	return nil
}

func (x *Model1) GetMapInt32Double() map[int32]float64 {
	if x != nil {
		return x.MapInt32Double
	}
	return nil
}

func (x *Model1) GetMapInt32Float() map[int32]float32 {
	if x != nil {
		return x.MapInt32Float
	}
	return nil
}

func (x *Model1) GetMapInt32Int32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Int32
	}
	return nil
}

func (x *Model1) GetMapInt32Int64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Int64
	}
	return nil
}

func (x *Model1) GetMapInt32Uint32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Uint32
	}
	return nil
}

func (x *Model1) GetMapInt32Uint64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Uint64
	}
	return nil
}

func (x *Model1) GetMapInt32Sint32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sint32
	}
	return nil
}

func (x *Model1) GetMapInt32Sint64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sint64
	}
	return nil
}

func (x *Model1) GetMapInt32Fixed32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Fixed32
	}
	return nil
}

func (x *Model1) GetMapInt32Fixed64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Fixed64
	}
	return nil
}

func (x *Model1) GetMapInt32Sfixed32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sfixed32
	}
	return nil
}

func (x *Model1) GetMapInt32Sfixed64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sfixed64
	}
	return nil
}

func (x *Model1) GetMapInt32Bool() map[int32]bool {
	if x != nil {
		return x.MapInt32Bool
	}
	return nil
}

func (x *Model1) GetMapInt32String() map[int32]string {
	if x != nil {
		return x.MapInt32String
	}
	return nil
}

func (x *Model1) GetMapInt32Bytes() map[int32][]byte {
	if x != nil {
		return x.MapInt32Bytes
	}
	return nil
}

func (x *Model1) GetMapInt32EmbedMessage() map[int32]*Model1_EmbedMessage1 {
	if x != nil {
		return x.MapInt32EmbedMessage
	}
	return nil
}

func (x *Model1) GetMapInt32StandMessage() map[int32]*StandMessage1 {
	if x != nil {
		return x.MapInt32StandMessage
	}
	return nil
}

func (x *Model1) GetMapInt32EmbedEnum() map[int32]Model1_EmbedEnum1 {
	if x != nil {
		return x.MapInt32EmbedEnum
	}
	return nil
}

func (x *Model1) GetMapInt32StandEnum() map[int32]StandEnum1 {
	if x != nil {
		return x.MapInt32StandEnum
	}
	return nil
}

func (x *Model1) GetMapInt64Int32() map[int64]int32 {
	if x != nil {
		return x.MapInt64Int32
	}
	return nil
}

func (x *Model1) GetMapUint32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapUint32Int32
	}
	return nil
}

func (x *Model1) GetMapUint64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapUint64Int32
	}
	return nil
}

func (x *Model1) GetMapSint32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSint32Int32
	}
	return nil
}

func (x *Model1) GetMapSint64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSint64Int32
	}
	return nil
}

func (x *Model1) GetMapFixed32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapFixed32Int32
	}
	return nil
}

func (x *Model1) GetMapFixed64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapFixed64Int32
	}
	return nil
}

func (x *Model1) GetMapSfixed32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSfixed32Int32
	}
	return nil
}

func (x *Model1) GetMapSfixed64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSfixed64Int32
	}
	return nil
}

func (x *Model1) GetMapStringInt32() map[string]int32 {
	if x != nil {
		return x.MapStringInt32
	}
	return nil
}

func (x *Model1) GetMapStringInt32Null() map[string]int32 {
	if x != nil {
		return x.MapStringInt32Null
	}
	return nil
}

func (x *Model1) GetMapStringString() map[string]string {
	if x != nil {
		return x.MapStringString
	}
	return nil
}

func (x *Model1) GetMapStringEmbedMessage() map[string]*Model1_EmbedMessage1 {
	if x != nil {
		return x.MapStringEmbedMessage
	}
	return nil
}

func (x *Model1) GetMapStringStandMessage() map[string]*StandMessage1 {
	if x != nil {
		return x.MapStringStandMessage
	}
	return nil
}

func (x *Model1) GetMapStringExternalMessage() map[string]*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.MapStringExternalMessage
	}
	return nil
}

func (x *Model1) GetMapStringEmbedEnum() map[string]Model1_EmbedEnum1 {
	if x != nil {
		return x.MapStringEmbedEnum
	}
	return nil
}

func (x *Model1) GetMapStringStandEnum() map[string]StandEnum1 {
	if x != nil {
		return x.MapStringStandEnum
	}
	return nil
}

func (x *Model1) GetMapStringExternalEnum() map[string]gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.MapStringExternalEnum
	}
	return nil
}

type isModel1_OneofType1 interface {
	isModel1_OneofType1()
}

type Model1_Oneof1Double struct {
	Oneof1Double float64 `protobuf:"fixed64,1,opt,name=oneof1_double,json=oneof1Double,proto3,oneof"`
}

type Model1_Oneof1Float struct {
	Oneof1Float float32 `protobuf:"fixed32,2,opt,name=oneof1_float,json=oneof1Float,proto3,oneof"`
}

type Model1_Oneof1Int32 struct {
	Oneof1Int32 int32 `protobuf:"varint,3,opt,name=oneof1_int32,json=oneof1Int32,proto3,oneof"`
}

type Model1_Oneof1Int64 struct {
	Oneof1Int64 int64 `protobuf:"varint,4,opt,name=oneof1_int64,json=oneof1Int64,proto3,oneof"`
}

type Model1_Oneof1Uint32 struct {
	Oneof1Uint32 uint32 `protobuf:"varint,5,opt,name=oneof1_uint32,json=oneof1Uint32,proto3,oneof"`
}

type Model1_Oneof1Uint64 struct {
	Oneof1Uint64 uint64 `protobuf:"varint,6,opt,name=oneof1_uint64,json=oneof1Uint64,proto3,oneof"`
}

type Model1_Oneof1Sint32 struct {
	Oneof1Sint32 int32 `protobuf:"zigzag32,7,opt,name=oneof1_sint32,json=oneof1Sint32,proto3,oneof"`
}

type Model1_Oneof1Sint64 struct {
	Oneof1Sint64 int64 `protobuf:"zigzag64,8,opt,name=oneof1_sint64,json=oneof1Sint64,proto3,oneof"`
}

type Model1_Oneof1Fixed32 struct {
	Oneof1Fixed32 uint32 `protobuf:"fixed32,9,opt,name=oneof1_fixed32,json=oneof1Fixed32,proto3,oneof"`
}

type Model1_Oneof1Fixed64 struct {
	Oneof1Fixed64 uint64 `protobuf:"fixed64,10,opt,name=oneof1_fixed64,json=oneof1Fixed64,proto3,oneof"`
}

type Model1_Oneof1Sfixed32 struct {
	Oneof1Sfixed32 int32 `protobuf:"fixed32,11,opt,name=oneof1_sfixed32,json=oneof1Sfixed32,proto3,oneof"`
}

type Model1_Oneof1Sfixed64 struct {
	Oneof1Sfixed64 int64 `protobuf:"fixed64,12,opt,name=oneof1_sfixed64,json=oneof1Sfixed64,proto3,oneof"`
}

type Model1_Oneof1Bool struct {
	Oneof1Bool bool `protobuf:"varint,13,opt,name=oneof1_bool,json=oneof1Bool,proto3,oneof"`
}

type Model1_Oneof1String struct {
	Oneof1String string `protobuf:"bytes,14,opt,name=oneof1_string,json=oneof1String,proto3,oneof"`
}

type Model1_Oneof1Bytes struct {
	Oneof1Bytes []byte `protobuf:"bytes,15,opt,name=oneof1_bytes,json=oneof1Bytes,proto3,oneof"`
}

type Model1_Oneof1EmbedMessage struct {
	Oneof1EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,16,opt,name=oneof1_embed_message,json=oneof1EmbedMessage,proto3,oneof"`
}

type Model1_Oneof1StandMessage struct {
	Oneof1StandMessage *StandMessage1 `protobuf:"bytes,17,opt,name=oneof1_stand_message,json=oneof1StandMessage,proto3,oneof"`
}

type Model1_Oneof1ExternalMessage struct {
	Oneof1ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,18,opt,name=oneof1_external_message,json=oneof1ExternalMessage,proto3,oneof"`
}

type Model1_Oneof1EmbedEnum struct {
	Oneof1EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,19,opt,name=oneof1_embed_enum,json=oneof1EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof1StandEnum struct {
	Oneof1StandEnum StandEnum1 `protobuf:"varint,20,opt,name=oneof1_stand_enum,json=oneof1StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof1ExternalEnum struct {
	Oneof1ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,21,opt,name=oneof1_external_enum,json=oneof1ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof1Double) isModel1_OneofType1() {}

func (*Model1_Oneof1Float) isModel1_OneofType1() {}

func (*Model1_Oneof1Int32) isModel1_OneofType1() {}

func (*Model1_Oneof1Int64) isModel1_OneofType1() {}

func (*Model1_Oneof1Uint32) isModel1_OneofType1() {}

func (*Model1_Oneof1Uint64) isModel1_OneofType1() {}

func (*Model1_Oneof1Sint32) isModel1_OneofType1() {}

func (*Model1_Oneof1Sint64) isModel1_OneofType1() {}

func (*Model1_Oneof1Fixed32) isModel1_OneofType1() {}

func (*Model1_Oneof1Fixed64) isModel1_OneofType1() {}

func (*Model1_Oneof1Sfixed32) isModel1_OneofType1() {}

func (*Model1_Oneof1Sfixed64) isModel1_OneofType1() {}

func (*Model1_Oneof1Bool) isModel1_OneofType1() {}

func (*Model1_Oneof1String) isModel1_OneofType1() {}

func (*Model1_Oneof1Bytes) isModel1_OneofType1() {}

func (*Model1_Oneof1EmbedMessage) isModel1_OneofType1() {}

func (*Model1_Oneof1StandMessage) isModel1_OneofType1() {}

func (*Model1_Oneof1ExternalMessage) isModel1_OneofType1() {}

func (*Model1_Oneof1EmbedEnum) isModel1_OneofType1() {}

func (*Model1_Oneof1StandEnum) isModel1_OneofType1() {}

func (*Model1_Oneof1ExternalEnum) isModel1_OneofType1() {}

type isModel1_OneofType2 interface {
	isModel1_OneofType2()
}

type Model1_Oneof2Double struct {
	Oneof2Double float64 `protobuf:"fixed64,31,opt,name=oneof2_double,json=oneof2Double,proto3,oneof"`
}

type Model1_Oneof2Float struct {
	Oneof2Float float32 `protobuf:"fixed32,32,opt,name=oneof2_float,json=oneof2Float,proto3,oneof"`
}

type Model1_Oneof2Int32 struct {
	Oneof2Int32 int32 `protobuf:"varint,33,opt,name=oneof2_int32,json=oneof2Int32,proto3,oneof"`
}

type Model1_Oneof2Int64 struct {
	Oneof2Int64 int64 `protobuf:"varint,34,opt,name=oneof2_int64,json=oneof2Int64,proto3,oneof"`
}

type Model1_Oneof2Uint32 struct {
	Oneof2Uint32 uint32 `protobuf:"varint,35,opt,name=oneof2_uint32,json=oneof2Uint32,proto3,oneof"`
}

type Model1_Oneof2Uint64 struct {
	Oneof2Uint64 uint64 `protobuf:"varint,36,opt,name=oneof2_uint64,json=oneof2Uint64,proto3,oneof"`
}

type Model1_Oneof2Sint32 struct {
	Oneof2Sint32 int32 `protobuf:"zigzag32,37,opt,name=oneof2_sint32,json=oneof2Sint32,proto3,oneof"`
}

type Model1_Oneof2Sint64 struct {
	Oneof2Sint64 int64 `protobuf:"zigzag64,38,opt,name=oneof2_sint64,json=oneof2Sint64,proto3,oneof"`
}

type Model1_Oneof2Fixed32 struct {
	Oneof2Fixed32 uint32 `protobuf:"fixed32,39,opt,name=oneof2_fixed32,json=oneof2Fixed32,proto3,oneof"`
}

type Model1_Oneof2Fixed64 struct {
	Oneof2Fixed64 uint64 `protobuf:"fixed64,40,opt,name=oneof2_fixed64,json=oneof2Fixed64,proto3,oneof"`
}

type Model1_Oneof2Sfixed32 struct {
	Oneof2Sfixed32 int32 `protobuf:"fixed32,41,opt,name=oneof2_sfixed32,json=oneof2Sfixed32,proto3,oneof"`
}

type Model1_Oneof2Sfixed64 struct {
	Oneof2Sfixed64 int64 `protobuf:"fixed64,42,opt,name=oneof2_sfixed64,json=oneof2Sfixed64,proto3,oneof"`
}

type Model1_Oneof2Bool struct {
	Oneof2Bool bool `protobuf:"varint,43,opt,name=oneof2_bool,json=oneof2Bool,proto3,oneof"`
}

type Model1_Oneof2String struct {
	Oneof2String string `protobuf:"bytes,44,opt,name=oneof2_string,json=oneof2String,proto3,oneof"`
}

type Model1_Oneof2Bytes struct {
	Oneof2Bytes []byte `protobuf:"bytes,45,opt,name=oneof2_bytes,json=oneof2Bytes,proto3,oneof"`
}

type Model1_Oneof2EmbedMessage struct {
	Oneof2EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,46,opt,name=oneof2_embed_message,json=oneof2EmbedMessage,proto3,oneof"`
}

type Model1_Oneof2StandMessage struct {
	Oneof2StandMessage *StandMessage1 `protobuf:"bytes,47,opt,name=oneof2_stand_message,json=oneof2StandMessage,proto3,oneof"`
}

type Model1_Oneof2ExternalMessage struct {
	Oneof2ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,48,opt,name=oneof2_external_message,json=oneof2ExternalMessage,proto3,oneof"`
}

type Model1_Oneof2EmbedEnum struct {
	Oneof2EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,49,opt,name=oneof2_embed_enum,json=oneof2EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof2StandEnum struct {
	Oneof2StandEnum StandEnum1 `protobuf:"varint,50,opt,name=oneof2_stand_enum,json=oneof2StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof2ExternalEnum struct {
	Oneof2ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,51,opt,name=oneof2_external_enum,json=oneof2ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof2Double) isModel1_OneofType2() {}

func (*Model1_Oneof2Float) isModel1_OneofType2() {}

func (*Model1_Oneof2Int32) isModel1_OneofType2() {}

func (*Model1_Oneof2Int64) isModel1_OneofType2() {}

func (*Model1_Oneof2Uint32) isModel1_OneofType2() {}

func (*Model1_Oneof2Uint64) isModel1_OneofType2() {}

func (*Model1_Oneof2Sint32) isModel1_OneofType2() {}

func (*Model1_Oneof2Sint64) isModel1_OneofType2() {}

func (*Model1_Oneof2Fixed32) isModel1_OneofType2() {}

func (*Model1_Oneof2Fixed64) isModel1_OneofType2() {}

func (*Model1_Oneof2Sfixed32) isModel1_OneofType2() {}

func (*Model1_Oneof2Sfixed64) isModel1_OneofType2() {}

func (*Model1_Oneof2Bool) isModel1_OneofType2() {}

func (*Model1_Oneof2String) isModel1_OneofType2() {}

func (*Model1_Oneof2Bytes) isModel1_OneofType2() {}

func (*Model1_Oneof2EmbedMessage) isModel1_OneofType2() {}

func (*Model1_Oneof2StandMessage) isModel1_OneofType2() {}

func (*Model1_Oneof2ExternalMessage) isModel1_OneofType2() {}

func (*Model1_Oneof2EmbedEnum) isModel1_OneofType2() {}

func (*Model1_Oneof2StandEnum) isModel1_OneofType2() {}

func (*Model1_Oneof2ExternalEnum) isModel1_OneofType2() {}

type isModel1_OneofType3 interface {
	isModel1_OneofType3()
}

type Model1_Oneof3Double struct {
	Oneof3Double float64 `protobuf:"fixed64,61,opt,name=oneof3_double,json=oneof3Double,proto3,oneof"`
}

type Model1_Oneof3Float struct {
	Oneof3Float float32 `protobuf:"fixed32,62,opt,name=oneof3_float,json=oneof3Float,proto3,oneof"`
}

type Model1_Oneof3Int32 struct {
	Oneof3Int32 int32 `protobuf:"varint,63,opt,name=oneof3_int32,json=oneof3Int32,proto3,oneof"`
}

type Model1_Oneof3Int64 struct {
	Oneof3Int64 int64 `protobuf:"varint,64,opt,name=oneof3_int64,json=oneof3Int64,proto3,oneof"`
}

type Model1_Oneof3Uint32 struct {
	Oneof3Uint32 uint32 `protobuf:"varint,65,opt,name=oneof3_uint32,json=oneof3Uint32,proto3,oneof"`
}

type Model1_Oneof3Uint64 struct {
	Oneof3Uint64 uint64 `protobuf:"varint,66,opt,name=oneof3_uint64,json=oneof3Uint64,proto3,oneof"`
}

type Model1_Oneof3Sint32 struct {
	Oneof3Sint32 int32 `protobuf:"zigzag32,67,opt,name=oneof3_sint32,json=oneof3Sint32,proto3,oneof"`
}

type Model1_Oneof3Sint64 struct {
	Oneof3Sint64 int64 `protobuf:"zigzag64,68,opt,name=oneof3_sint64,json=oneof3Sint64,proto3,oneof"`
}

type Model1_Oneof3Fixed32 struct {
	Oneof3Fixed32 uint32 `protobuf:"fixed32,69,opt,name=oneof3_fixed32,json=oneof3Fixed32,proto3,oneof"`
}

type Model1_Oneof3Fixed64 struct {
	Oneof3Fixed64 uint64 `protobuf:"fixed64,70,opt,name=oneof3_fixed64,json=oneof3Fixed64,proto3,oneof"`
}

type Model1_Oneof3Sfixed32 struct {
	Oneof3Sfixed32 int32 `protobuf:"fixed32,71,opt,name=oneof3_sfixed32,json=oneof3Sfixed32,proto3,oneof"`
}

type Model1_Oneof3Sfixed64 struct {
	Oneof3Sfixed64 int64 `protobuf:"fixed64,72,opt,name=oneof3_sfixed64,json=oneof3Sfixed64,proto3,oneof"`
}

type Model1_Oneof3Bool struct {
	Oneof3Bool bool `protobuf:"varint,73,opt,name=oneof3_bool,json=oneof3Bool,proto3,oneof"`
}

type Model1_Oneof3String struct {
	Oneof3String string `protobuf:"bytes,74,opt,name=oneof3_string,json=oneof3String,proto3,oneof"`
}

type Model1_Oneof3Bytes struct {
	Oneof3Bytes []byte `protobuf:"bytes,75,opt,name=oneof3_bytes,json=oneof3Bytes,proto3,oneof"`
}

type Model1_Oneof3EmbedMessage struct {
	Oneof3EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,76,opt,name=oneof3_embed_message,json=oneof3EmbedMessage,proto3,oneof"`
}

type Model1_Oneof3StandMessage struct {
	Oneof3StandMessage *StandMessage1 `protobuf:"bytes,77,opt,name=oneof3_stand_message,json=oneof3StandMessage,proto3,oneof"`
}

type Model1_Oneof3ExternalMessage struct {
	Oneof3ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,78,opt,name=oneof3_external_message,json=oneof3ExternalMessage,proto3,oneof"`
}

type Model1_Oneof3EmbedEnum struct {
	Oneof3EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,79,opt,name=oneof3_embed_enum,json=oneof3EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof3StandEnum struct {
	Oneof3StandEnum StandEnum1 `protobuf:"varint,80,opt,name=oneof3_stand_enum,json=oneof3StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof3ExternalEnum struct {
	Oneof3ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,81,opt,name=oneof3_external_enum,json=oneof3ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof3Double) isModel1_OneofType3() {}

func (*Model1_Oneof3Float) isModel1_OneofType3() {}

func (*Model1_Oneof3Int32) isModel1_OneofType3() {}

func (*Model1_Oneof3Int64) isModel1_OneofType3() {}

func (*Model1_Oneof3Uint32) isModel1_OneofType3() {}

func (*Model1_Oneof3Uint64) isModel1_OneofType3() {}

func (*Model1_Oneof3Sint32) isModel1_OneofType3() {}

func (*Model1_Oneof3Sint64) isModel1_OneofType3() {}

func (*Model1_Oneof3Fixed32) isModel1_OneofType3() {}

func (*Model1_Oneof3Fixed64) isModel1_OneofType3() {}

func (*Model1_Oneof3Sfixed32) isModel1_OneofType3() {}

func (*Model1_Oneof3Sfixed64) isModel1_OneofType3() {}

func (*Model1_Oneof3Bool) isModel1_OneofType3() {}

func (*Model1_Oneof3String) isModel1_OneofType3() {}

func (*Model1_Oneof3Bytes) isModel1_OneofType3() {}

func (*Model1_Oneof3EmbedMessage) isModel1_OneofType3() {}

func (*Model1_Oneof3StandMessage) isModel1_OneofType3() {}

func (*Model1_Oneof3ExternalMessage) isModel1_OneofType3() {}

func (*Model1_Oneof3EmbedEnum) isModel1_OneofType3() {}

func (*Model1_Oneof3StandEnum) isModel1_OneofType3() {}

func (*Model1_Oneof3ExternalEnum) isModel1_OneofType3() {}

type isModel1_Oneof_Type4 interface {
	isModel1_Oneof_Type4()
}

type Model1_Oneof4Double struct {
	Oneof4Double float64 `protobuf:"fixed64,91,opt,name=oneof4_double,json=oneof4Double,proto3,oneof"`
}

type Model1_Oneof4Float struct {
	Oneof4Float float32 `protobuf:"fixed32,92,opt,name=oneof4_float,json=oneof4Float,proto3,oneof"`
}

type Model1_Oneof4Int32 struct {
	Oneof4Int32 int32 `protobuf:"varint,93,opt,name=oneof4_int32,json=oneof4Int32,proto3,oneof"`
}

type Model1_Oneof4Int64 struct {
	Oneof4Int64 int64 `protobuf:"varint,94,opt,name=oneof4_int64,json=oneof4Int64,proto3,oneof"`
}

type Model1_Oneof4Uint32 struct {
	Oneof4Uint32 uint32 `protobuf:"varint,95,opt,name=oneof4_uint32,json=oneof4Uint32,proto3,oneof"`
}

type Model1_Oneof4Uint64 struct {
	Oneof4Uint64 uint64 `protobuf:"varint,96,opt,name=oneof4_uint64,json=oneof4Uint64,proto3,oneof"`
}

type Model1_Oneof4Sint32 struct {
	Oneof4Sint32 int32 `protobuf:"zigzag32,97,opt,name=oneof4_sint32,json=oneof4Sint32,proto3,oneof"`
}

type Model1_Oneof4Sint64 struct {
	Oneof4Sint64 int64 `protobuf:"zigzag64,98,opt,name=oneof4_sint64,json=oneof4Sint64,proto3,oneof"`
}

type Model1_Oneof4Fixed32 struct {
	Oneof4Fixed32 uint32 `protobuf:"fixed32,99,opt,name=oneof4_fixed32,json=oneof4Fixed32,proto3,oneof"`
}

type Model1_Oneof4Fixed64 struct {
	Oneof4Fixed64 uint64 `protobuf:"fixed64,100,opt,name=oneof4_fixed64,json=oneof4Fixed64,proto3,oneof"`
}

type Model1_Oneof4Sfixed32 struct {
	Oneof4Sfixed32 int32 `protobuf:"fixed32,101,opt,name=oneof4_sfixed32,json=oneof4Sfixed32,proto3,oneof"`
}

type Model1_Oneof4Sfixed64 struct {
	Oneof4Sfixed64 int64 `protobuf:"fixed64,102,opt,name=oneof4_sfixed64,json=oneof4Sfixed64,proto3,oneof"`
}

type Model1_Oneof4Bool struct {
	Oneof4Bool bool `protobuf:"varint,103,opt,name=oneof4_bool,json=oneof4Bool,proto3,oneof"`
}

type Model1_Oneof4String struct {
	Oneof4String string `protobuf:"bytes,104,opt,name=oneof4_string,json=oneof4String,proto3,oneof"`
}

type Model1_Oneof4Bytes struct {
	Oneof4Bytes []byte `protobuf:"bytes,105,opt,name=oneof4_bytes,json=oneof4Bytes,proto3,oneof"`
}

type Model1_Oneof4EmbedMessage struct {
	Oneof4EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,106,opt,name=oneof4_embed_message,json=oneof4EmbedMessage,proto3,oneof"`
}

type Model1_Oneof4StandMessage struct {
	Oneof4StandMessage *StandMessage1 `protobuf:"bytes,107,opt,name=oneof4_stand_message,json=oneof4StandMessage,proto3,oneof"`
}

type Model1_Oneof4ExternalMessage struct {
	Oneof4ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,108,opt,name=oneof4_external_message,json=oneof4ExternalMessage,proto3,oneof"`
}

type Model1_Oneof4EmbedEnum struct {
	Oneof4EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,109,opt,name=oneof4_embed_enum,json=oneof4EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof4StandEnum struct {
	Oneof4StandEnum StandEnum1 `protobuf:"varint,110,opt,name=oneof4_stand_enum,json=oneof4StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof4ExternalEnum struct {
	Oneof4ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,111,opt,name=oneof4_external_enum,json=oneof4ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof4Double) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Float) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Int32) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Int64) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Uint32) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Uint64) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Sint32) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Sint64) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Fixed32) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Fixed64) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Sfixed32) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Sfixed64) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Bool) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4String) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4Bytes) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4EmbedMessage) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4StandMessage) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4ExternalMessage) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4EmbedEnum) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4StandEnum) isModel1_Oneof_Type4() {}

func (*Model1_Oneof4ExternalEnum) isModel1_Oneof_Type4() {}

type isModel1_Oneof_Type5 interface {
	isModel1_Oneof_Type5()
}

type Model1_Oneof5Double struct {
	Oneof5Double float64 `protobuf:"fixed64,121,opt,name=oneof5_double,json=oneof5Double,proto3,oneof"`
}

type Model1_Oneof5Float struct {
	Oneof5Float float32 `protobuf:"fixed32,122,opt,name=oneof5_float,json=oneof5Float,proto3,oneof"`
}

type Model1_Oneof5Int32 struct {
	Oneof5Int32 int32 `protobuf:"varint,123,opt,name=oneof5_int32,json=oneof5Int32,proto3,oneof"`
}

type Model1_Oneof5Int64 struct {
	Oneof5Int64 int64 `protobuf:"varint,124,opt,name=oneof5_int64,json=oneof5Int64,proto3,oneof"`
}

type Model1_Oneof5Uint32 struct {
	Oneof5Uint32 uint32 `protobuf:"varint,125,opt,name=oneof5_uint32,json=oneof5Uint32,proto3,oneof"`
}

type Model1_Oneof5Uint64 struct {
	Oneof5Uint64 uint64 `protobuf:"varint,126,opt,name=oneof5_uint64,json=oneof5Uint64,proto3,oneof"`
}

type Model1_Oneof5Sint32 struct {
	Oneof5Sint32 int32 `protobuf:"zigzag32,127,opt,name=oneof5_sint32,json=oneof5Sint32,proto3,oneof"`
}

type Model1_Oneof5Sint64 struct {
	Oneof5Sint64 int64 `protobuf:"zigzag64,128,opt,name=oneof5_sint64,json=oneof5Sint64,proto3,oneof"`
}

type Model1_Oneof5Fixed32 struct {
	Oneof5Fixed32 uint32 `protobuf:"fixed32,129,opt,name=oneof5_fixed32,json=oneof5Fixed32,proto3,oneof"`
}

type Model1_Oneof5Fixed64 struct {
	Oneof5Fixed64 uint64 `protobuf:"fixed64,130,opt,name=oneof5_fixed64,json=oneof5Fixed64,proto3,oneof"`
}

type Model1_Oneof5Sfixed32 struct {
	Oneof5Sfixed32 int32 `protobuf:"fixed32,131,opt,name=oneof5_sfixed32,json=oneof5Sfixed32,proto3,oneof"`
}

type Model1_Oneof5Sfixed64 struct {
	Oneof5Sfixed64 int64 `protobuf:"fixed64,132,opt,name=oneof5_sfixed64,json=oneof5Sfixed64,proto3,oneof"`
}

type Model1_Oneof5Bool struct {
	Oneof5Bool bool `protobuf:"varint,133,opt,name=oneof5_bool,json=oneof5Bool,proto3,oneof"`
}

type Model1_Oneof5String struct {
	Oneof5String string `protobuf:"bytes,134,opt,name=oneof5_string,json=oneof5String,proto3,oneof"`
}

type Model1_Oneof5Bytes struct {
	Oneof5Bytes []byte `protobuf:"bytes,135,opt,name=oneof5_bytes,json=oneof5Bytes,proto3,oneof"`
}

type Model1_Oneof5EmbedMessage struct {
	Oneof5EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,136,opt,name=oneof5_embed_message,json=oneof5EmbedMessage,proto3,oneof"`
}

type Model1_Oneof5StandMessage struct {
	Oneof5StandMessage *StandMessage1 `protobuf:"bytes,137,opt,name=oneof5_stand_message,json=oneof5StandMessage,proto3,oneof"`
}

type Model1_Oneof5ExternalMessage struct {
	Oneof5ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,138,opt,name=oneof5_external_message,json=oneof5ExternalMessage,proto3,oneof"`
}

type Model1_Oneof5EmbedEnum struct {
	Oneof5EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,139,opt,name=oneof5_embed_enum,json=oneof5EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof5StandEnum struct {
	Oneof5StandEnum StandEnum1 `protobuf:"varint,140,opt,name=oneof5_stand_enum,json=oneof5StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof5ExternalEnum struct {
	Oneof5ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,141,opt,name=oneof5_external_enum,json=oneof5ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof5Double) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Float) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Int32) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Int64) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Uint32) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Uint64) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Sint32) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Sint64) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Fixed32) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Fixed64) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Sfixed32) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Sfixed64) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Bool) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5String) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5Bytes) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5EmbedMessage) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5StandMessage) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5ExternalMessage) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5EmbedEnum) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5StandEnum) isModel1_Oneof_Type5() {}

func (*Model1_Oneof5ExternalEnum) isModel1_Oneof_Type5() {}

type isModel1_OneofType6 interface {
	isModel1_OneofType6()
}

type Model1_Oneof6Double struct {
	Oneof6Double float64 `protobuf:"fixed64,151,opt,name=oneof6_double,json=oneof6Double,proto3,oneof"`
}

type Model1_Oneof6Float struct {
	Oneof6Float float32 `protobuf:"fixed32,152,opt,name=oneof6_float,json=oneof6Float,proto3,oneof"`
}

type Model1_Oneof6Int32 struct {
	Oneof6Int32 int32 `protobuf:"varint,153,opt,name=oneof6_int32,json=oneof6Int32,proto3,oneof"`
}

type Model1_Oneof6Int64 struct {
	Oneof6Int64 int64 `protobuf:"varint,154,opt,name=oneof6_int64,json=oneof6Int64,proto3,oneof"`
}

type Model1_Oneof6Uint32 struct {
	Oneof6Uint32 uint32 `protobuf:"varint,155,opt,name=oneof6_uint32,json=oneof6Uint32,proto3,oneof"`
}

type Model1_Oneof6Uint64 struct {
	Oneof6Uint64 uint64 `protobuf:"varint,156,opt,name=oneof6_uint64,json=oneof6Uint64,proto3,oneof"`
}

type Model1_Oneof6Sint32 struct {
	Oneof6Sint32 int32 `protobuf:"zigzag32,157,opt,name=oneof6_sint32,json=oneof6Sint32,proto3,oneof"`
}

type Model1_Oneof6Sint64 struct {
	Oneof6Sint64 int64 `protobuf:"zigzag64,158,opt,name=oneof6_sint64,json=oneof6Sint64,proto3,oneof"`
}

type Model1_Oneof6Fixed32 struct {
	Oneof6Fixed32 uint32 `protobuf:"fixed32,159,opt,name=oneof6_fixed32,json=oneof6Fixed32,proto3,oneof"`
}

type Model1_Oneof6Fixed64 struct {
	Oneof6Fixed64 uint64 `protobuf:"fixed64,160,opt,name=oneof6_fixed64,json=oneof6Fixed64,proto3,oneof"`
}

type Model1_Oneof6Sfixed32 struct {
	Oneof6Sfixed32 int32 `protobuf:"fixed32,161,opt,name=oneof6_sfixed32,json=oneof6Sfixed32,proto3,oneof"`
}

type Model1_Oneof6Sfixed64 struct {
	Oneof6Sfixed64 int64 `protobuf:"fixed64,162,opt,name=oneof6_sfixed64,json=oneof6Sfixed64,proto3,oneof"`
}

type Model1_Oneof6Bool struct {
	Oneof6Bool bool `protobuf:"varint,163,opt,name=oneof6_bool,json=oneof6Bool,proto3,oneof"`
}

type Model1_Oneof6String struct {
	Oneof6String string `protobuf:"bytes,164,opt,name=oneof6_string,json=oneof6String,proto3,oneof"`
}

type Model1_Oneof6Bytes struct {
	Oneof6Bytes []byte `protobuf:"bytes,165,opt,name=oneof6_bytes,json=oneof6Bytes,proto3,oneof"`
}

type Model1_Oneof6EmbedMessage struct {
	Oneof6EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,166,opt,name=oneof6_embed_message,json=oneof6EmbedMessage,proto3,oneof"`
}

type Model1_Oneof6StandMessage struct {
	Oneof6StandMessage *StandMessage1 `protobuf:"bytes,167,opt,name=oneof6_stand_message,json=oneof6StandMessage,proto3,oneof"`
}

type Model1_Oneof6ExternalMessage struct {
	Oneof6ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,168,opt,name=oneof6_external_message,json=oneof6ExternalMessage,proto3,oneof"`
}

type Model1_Oneof6EmbedEnum struct {
	Oneof6EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,169,opt,name=oneof6_embed_enum,json=oneof6EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof6StandEnum struct {
	Oneof6StandEnum StandEnum1 `protobuf:"varint,170,opt,name=oneof6_stand_enum,json=oneof6StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof6ExternalEnum struct {
	Oneof6ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,171,opt,name=oneof6_external_enum,json=oneof6ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof6Double) isModel1_OneofType6() {}

func (*Model1_Oneof6Float) isModel1_OneofType6() {}

func (*Model1_Oneof6Int32) isModel1_OneofType6() {}

func (*Model1_Oneof6Int64) isModel1_OneofType6() {}

func (*Model1_Oneof6Uint32) isModel1_OneofType6() {}

func (*Model1_Oneof6Uint64) isModel1_OneofType6() {}

func (*Model1_Oneof6Sint32) isModel1_OneofType6() {}

func (*Model1_Oneof6Sint64) isModel1_OneofType6() {}

func (*Model1_Oneof6Fixed32) isModel1_OneofType6() {}

func (*Model1_Oneof6Fixed64) isModel1_OneofType6() {}

func (*Model1_Oneof6Sfixed32) isModel1_OneofType6() {}

func (*Model1_Oneof6Sfixed64) isModel1_OneofType6() {}

func (*Model1_Oneof6Bool) isModel1_OneofType6() {}

func (*Model1_Oneof6String) isModel1_OneofType6() {}

func (*Model1_Oneof6Bytes) isModel1_OneofType6() {}

func (*Model1_Oneof6EmbedMessage) isModel1_OneofType6() {}

func (*Model1_Oneof6StandMessage) isModel1_OneofType6() {}

func (*Model1_Oneof6ExternalMessage) isModel1_OneofType6() {}

func (*Model1_Oneof6EmbedEnum) isModel1_OneofType6() {}

func (*Model1_Oneof6StandEnum) isModel1_OneofType6() {}

func (*Model1_Oneof6ExternalEnum) isModel1_OneofType6() {}

type isModel1_OneofType7 interface {
	isModel1_OneofType7()
}

type Model1_Oneof7Double struct {
	Oneof7Double float64 `protobuf:"fixed64,181,opt,name=oneof7_double,json=oneof7Double,proto3,oneof"`
}

type Model1_Oneof7Float struct {
	Oneof7Float float32 `protobuf:"fixed32,182,opt,name=oneof7_float,json=oneof7Float,proto3,oneof"`
}

type Model1_Oneof7Int32 struct {
	Oneof7Int32 int32 `protobuf:"varint,183,opt,name=oneof7_int32,json=oneof7Int32,proto3,oneof"`
}

type Model1_Oneof7Int64 struct {
	Oneof7Int64 int64 `protobuf:"varint,184,opt,name=oneof7_int64,json=oneof7Int64,proto3,oneof"`
}

type Model1_Oneof7Uint32 struct {
	Oneof7Uint32 uint32 `protobuf:"varint,185,opt,name=oneof7_uint32,json=oneof7Uint32,proto3,oneof"`
}

type Model1_Oneof7Uint64 struct {
	Oneof7Uint64 uint64 `protobuf:"varint,186,opt,name=oneof7_uint64,json=oneof7Uint64,proto3,oneof"`
}

type Model1_Oneof7Sint32 struct {
	Oneof7Sint32 int32 `protobuf:"zigzag32,187,opt,name=oneof7_sint32,json=oneof7Sint32,proto3,oneof"`
}

type Model1_Oneof7Sint64 struct {
	Oneof7Sint64 int64 `protobuf:"zigzag64,188,opt,name=oneof7_sint64,json=oneof7Sint64,proto3,oneof"`
}

type Model1_Oneof7Fixed32 struct {
	Oneof7Fixed32 uint32 `protobuf:"fixed32,189,opt,name=oneof7_fixed32,json=oneof7Fixed32,proto3,oneof"`
}

type Model1_Oneof7Fixed64 struct {
	Oneof7Fixed64 uint64 `protobuf:"fixed64,190,opt,name=oneof7_fixed64,json=oneof7Fixed64,proto3,oneof"`
}

type Model1_Oneof7Sfixed32 struct {
	Oneof7Sfixed32 int32 `protobuf:"fixed32,191,opt,name=oneof7_sfixed32,json=oneof7Sfixed32,proto3,oneof"`
}

type Model1_Oneof7Sfixed64 struct {
	Oneof7Sfixed64 int64 `protobuf:"fixed64,192,opt,name=oneof7_sfixed64,json=oneof7Sfixed64,proto3,oneof"`
}

type Model1_Oneof7Bool struct {
	Oneof7Bool bool `protobuf:"varint,193,opt,name=oneof7_bool,json=oneof7Bool,proto3,oneof"`
}

type Model1_Oneof7String struct {
	Oneof7String string `protobuf:"bytes,194,opt,name=oneof7_string,json=oneof7String,proto3,oneof"`
}

type Model1_Oneof7Bytes struct {
	Oneof7Bytes []byte `protobuf:"bytes,195,opt,name=oneof7_bytes,json=oneof7Bytes,proto3,oneof"`
}

type Model1_Oneof7EmbedMessage struct {
	Oneof7EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,196,opt,name=oneof7_embed_message,json=oneof7EmbedMessage,proto3,oneof"`
}

type Model1_Oneof7StandMessage struct {
	Oneof7StandMessage *StandMessage1 `protobuf:"bytes,197,opt,name=oneof7_stand_message,json=oneof7StandMessage,proto3,oneof"`
}

type Model1_Oneof7ExternalMessage struct {
	Oneof7ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,198,opt,name=oneof7_external_message,json=oneof7ExternalMessage,proto3,oneof"`
}

type Model1_Oneof7EmbedEnum struct {
	Oneof7EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,199,opt,name=oneof7_embed_enum,json=oneof7EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof7StandEnum struct {
	Oneof7StandEnum StandEnum1 `protobuf:"varint,200,opt,name=oneof7_stand_enum,json=oneof7StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof7ExternalEnum struct {
	Oneof7ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,201,opt,name=oneof7_external_enum,json=oneof7ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof7Double) isModel1_OneofType7() {}

func (*Model1_Oneof7Float) isModel1_OneofType7() {}

func (*Model1_Oneof7Int32) isModel1_OneofType7() {}

func (*Model1_Oneof7Int64) isModel1_OneofType7() {}

func (*Model1_Oneof7Uint32) isModel1_OneofType7() {}

func (*Model1_Oneof7Uint64) isModel1_OneofType7() {}

func (*Model1_Oneof7Sint32) isModel1_OneofType7() {}

func (*Model1_Oneof7Sint64) isModel1_OneofType7() {}

func (*Model1_Oneof7Fixed32) isModel1_OneofType7() {}

func (*Model1_Oneof7Fixed64) isModel1_OneofType7() {}

func (*Model1_Oneof7Sfixed32) isModel1_OneofType7() {}

func (*Model1_Oneof7Sfixed64) isModel1_OneofType7() {}

func (*Model1_Oneof7Bool) isModel1_OneofType7() {}

func (*Model1_Oneof7String) isModel1_OneofType7() {}

func (*Model1_Oneof7Bytes) isModel1_OneofType7() {}

func (*Model1_Oneof7EmbedMessage) isModel1_OneofType7() {}

func (*Model1_Oneof7StandMessage) isModel1_OneofType7() {}

func (*Model1_Oneof7ExternalMessage) isModel1_OneofType7() {}

func (*Model1_Oneof7EmbedEnum) isModel1_OneofType7() {}

func (*Model1_Oneof7StandEnum) isModel1_OneofType7() {}

func (*Model1_Oneof7ExternalEnum) isModel1_OneofType7() {}

type isModel1_Oneof_Type8 interface {
	isModel1_Oneof_Type8()
}

type Model1_Oneof8Double struct {
	Oneof8Double float64 `protobuf:"fixed64,211,opt,name=oneof8_double,json=oneof8Double,proto3,oneof"`
}

type Model1_Oneof8Float struct {
	Oneof8Float float32 `protobuf:"fixed32,212,opt,name=oneof8_float,json=oneof8Float,proto3,oneof"`
}

type Model1_Oneof8Int32 struct {
	Oneof8Int32 int32 `protobuf:"varint,213,opt,name=oneof8_int32,json=oneof8Int32,proto3,oneof"`
}

type Model1_Oneof8Int64 struct {
	Oneof8Int64 int64 `protobuf:"varint,214,opt,name=oneof8_int64,json=oneof8Int64,proto3,oneof"`
}

type Model1_Oneof8Uint32 struct {
	Oneof8Uint32 uint32 `protobuf:"varint,215,opt,name=oneof8_uint32,json=oneof8Uint32,proto3,oneof"`
}

type Model1_Oneof8Uint64 struct {
	Oneof8Uint64 uint64 `protobuf:"varint,216,opt,name=oneof8_uint64,json=oneof8Uint64,proto3,oneof"`
}

type Model1_Oneof8Sint32 struct {
	Oneof8Sint32 int32 `protobuf:"zigzag32,217,opt,name=oneof8_sint32,json=oneof8Sint32,proto3,oneof"`
}

type Model1_Oneof8Sint64 struct {
	Oneof8Sint64 int64 `protobuf:"zigzag64,218,opt,name=oneof8_sint64,json=oneof8Sint64,proto3,oneof"`
}

type Model1_Oneof8Fixed32 struct {
	Oneof8Fixed32 uint32 `protobuf:"fixed32,219,opt,name=oneof8_fixed32,json=oneof8Fixed32,proto3,oneof"`
}

type Model1_Oneof8Fixed64 struct {
	Oneof8Fixed64 uint64 `protobuf:"fixed64,220,opt,name=oneof8_fixed64,json=oneof8Fixed64,proto3,oneof"`
}

type Model1_Oneof8Sfixed32 struct {
	Oneof8Sfixed32 int32 `protobuf:"fixed32,221,opt,name=oneof8_sfixed32,json=oneof8Sfixed32,proto3,oneof"`
}

type Model1_Oneof8Sfixed64 struct {
	Oneof8Sfixed64 int64 `protobuf:"fixed64,222,opt,name=oneof8_sfixed64,json=oneof8Sfixed64,proto3,oneof"`
}

type Model1_Oneof8Bool struct {
	Oneof8Bool bool `protobuf:"varint,223,opt,name=oneof8_bool,json=oneof8Bool,proto3,oneof"`
}

type Model1_Oneof8String struct {
	Oneof8String string `protobuf:"bytes,224,opt,name=oneof8_string,json=oneof8String,proto3,oneof"`
}

type Model1_Oneof8Bytes struct {
	Oneof8Bytes []byte `protobuf:"bytes,225,opt,name=oneof8_bytes,json=oneof8Bytes,proto3,oneof"`
}

type Model1_Oneof8EmbedMessage struct {
	Oneof8EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,226,opt,name=oneof8_embed_message,json=oneof8EmbedMessage,proto3,oneof"`
}

type Model1_Oneof8StandMessage struct {
	Oneof8StandMessage *StandMessage1 `protobuf:"bytes,227,opt,name=oneof8_stand_message,json=oneof8StandMessage,proto3,oneof"`
}

type Model1_Oneof8ExternalMessage struct {
	Oneof8ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,228,opt,name=oneof8_external_message,json=oneof8ExternalMessage,proto3,oneof"`
}

type Model1_Oneof8EmbedEnum struct {
	Oneof8EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,229,opt,name=oneof8_embed_enum,json=oneof8EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof8StandEnum struct {
	Oneof8StandEnum StandEnum1 `protobuf:"varint,230,opt,name=oneof8_stand_enum,json=oneof8StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof8ExternalEnum struct {
	Oneof8ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,231,opt,name=oneof8_external_enum,json=oneof8ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof8Double) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Float) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Int32) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Int64) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Uint32) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Uint64) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Sint32) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Sint64) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Fixed32) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Fixed64) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Sfixed32) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Sfixed64) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Bool) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8String) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8Bytes) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8EmbedMessage) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8StandMessage) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8ExternalMessage) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8EmbedEnum) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8StandEnum) isModel1_Oneof_Type8() {}

func (*Model1_Oneof8ExternalEnum) isModel1_Oneof_Type8() {}

type isModel1_Oneof_Type9 interface {
	isModel1_Oneof_Type9()
}

type Model1_Oneof9Double struct {
	Oneof9Double float64 `protobuf:"fixed64,241,opt,name=oneof9_double,json=oneof9Double,proto3,oneof"`
}

type Model1_Oneof9Float struct {
	Oneof9Float float32 `protobuf:"fixed32,242,opt,name=oneof9_float,json=oneof9Float,proto3,oneof"`
}

type Model1_Oneof9Int32 struct {
	Oneof9Int32 int32 `protobuf:"varint,243,opt,name=oneof9_int32,json=oneof9Int32,proto3,oneof"`
}

type Model1_Oneof9Int64 struct {
	Oneof9Int64 int64 `protobuf:"varint,244,opt,name=oneof9_int64,json=oneof9Int64,proto3,oneof"`
}

type Model1_Oneof9Uint32 struct {
	Oneof9Uint32 uint32 `protobuf:"varint,245,opt,name=oneof9_uint32,json=oneof9Uint32,proto3,oneof"`
}

type Model1_Oneof9Uint64 struct {
	Oneof9Uint64 uint64 `protobuf:"varint,246,opt,name=oneof9_uint64,json=oneof9Uint64,proto3,oneof"`
}

type Model1_Oneof9Sint32 struct {
	Oneof9Sint32 int32 `protobuf:"zigzag32,247,opt,name=oneof9_sint32,json=oneof9Sint32,proto3,oneof"`
}

type Model1_Oneof9Sint64 struct {
	Oneof9Sint64 int64 `protobuf:"zigzag64,248,opt,name=oneof9_sint64,json=oneof9Sint64,proto3,oneof"`
}

type Model1_Oneof9Fixed32 struct {
	Oneof9Fixed32 uint32 `protobuf:"fixed32,249,opt,name=oneof9_fixed32,json=oneof9Fixed32,proto3,oneof"`
}

type Model1_Oneof9Fixed64 struct {
	Oneof9Fixed64 uint64 `protobuf:"fixed64,250,opt,name=oneof9_fixed64,json=oneof9Fixed64,proto3,oneof"`
}

type Model1_Oneof9Sfixed32 struct {
	Oneof9Sfixed32 int32 `protobuf:"fixed32,251,opt,name=oneof9_sfixed32,json=oneof9Sfixed32,proto3,oneof"`
}

type Model1_Oneof9Sfixed64 struct {
	Oneof9Sfixed64 int64 `protobuf:"fixed64,252,opt,name=oneof9_sfixed64,json=oneof9Sfixed64,proto3,oneof"`
}

type Model1_Oneof9Bool struct {
	Oneof9Bool bool `protobuf:"varint,253,opt,name=oneof9_bool,json=oneof9Bool,proto3,oneof"`
}

type Model1_Oneof9String struct {
	Oneof9String string `protobuf:"bytes,254,opt,name=oneof9_string,json=oneof9String,proto3,oneof"`
}

type Model1_Oneof9Bytes struct {
	Oneof9Bytes []byte `protobuf:"bytes,255,opt,name=oneof9_bytes,json=oneof9Bytes,proto3,oneof"`
}

type Model1_Oneof9EmbedMessage struct {
	Oneof9EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,256,opt,name=oneof9_embed_message,json=oneof9EmbedMessage,proto3,oneof"`
}

type Model1_Oneof9StandMessage struct {
	Oneof9StandMessage *StandMessage1 `protobuf:"bytes,257,opt,name=oneof9_stand_message,json=oneof9StandMessage,proto3,oneof"`
}

type Model1_Oneof9ExternalMessage struct {
	Oneof9ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,258,opt,name=oneof9_external_message,json=oneof9ExternalMessage,proto3,oneof"`
}

type Model1_Oneof9EmbedEnum struct {
	Oneof9EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,259,opt,name=oneof9_embed_enum,json=oneof9EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof9StandEnum struct {
	Oneof9StandEnum StandEnum1 `protobuf:"varint,260,opt,name=oneof9_stand_enum,json=oneof9StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof9ExternalEnum struct {
	Oneof9ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,261,opt,name=oneof9_external_enum,json=oneof9ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof9Double) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Float) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Int32) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Int64) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Uint32) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Uint64) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Sint32) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Sint64) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Fixed32) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Fixed64) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Sfixed32) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Sfixed64) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Bool) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9String) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9Bytes) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9EmbedMessage) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9StandMessage) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9ExternalMessage) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9EmbedEnum) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9StandEnum) isModel1_Oneof_Type9() {}

func (*Model1_Oneof9ExternalEnum) isModel1_Oneof_Type9() {}

type isModel1_Oneof_Type10 interface {
	isModel1_Oneof_Type10()
}

type Model1_Oneof10Double struct {
	Oneof10Double float64 `protobuf:"fixed64,271,opt,name=oneof10_double,json=oneof10Double,proto3,oneof"`
}

type Model1_Oneof10Float struct {
	Oneof10Float float32 `protobuf:"fixed32,272,opt,name=oneof10_float,json=oneof10Float,proto3,oneof"`
}

type Model1_Oneof10Int32 struct {
	Oneof10Int32 int32 `protobuf:"varint,273,opt,name=oneof10_int32,json=oneof10Int32,proto3,oneof"`
}

type Model1_Oneof10Int64 struct {
	Oneof10Int64 int64 `protobuf:"varint,274,opt,name=oneof10_int64,json=oneof10Int64,proto3,oneof"`
}

type Model1_Oneof10Uint32 struct {
	Oneof10Uint32 uint32 `protobuf:"varint,275,opt,name=oneof10_uint32,json=oneof10Uint32,proto3,oneof"`
}

type Model1_Oneof10Uint64 struct {
	Oneof10Uint64 uint64 `protobuf:"varint,276,opt,name=oneof10_uint64,json=oneof10Uint64,proto3,oneof"`
}

type Model1_Oneof10Sint32 struct {
	Oneof10Sint32 int32 `protobuf:"zigzag32,277,opt,name=oneof10_sint32,json=oneof10Sint32,proto3,oneof"`
}

type Model1_Oneof10Sint64 struct {
	Oneof10Sint64 int64 `protobuf:"zigzag64,278,opt,name=oneof10_sint64,json=oneof10Sint64,proto3,oneof"`
}

type Model1_Oneof10Fixed32 struct {
	Oneof10Fixed32 uint32 `protobuf:"fixed32,279,opt,name=oneof10_fixed32,json=oneof10Fixed32,proto3,oneof"`
}

type Model1_Oneof10Fixed64 struct {
	Oneof10Fixed64 uint64 `protobuf:"fixed64,280,opt,name=oneof10_fixed64,json=oneof10Fixed64,proto3,oneof"`
}

type Model1_Oneof10Sfixed32 struct {
	Oneof10Sfixed32 int32 `protobuf:"fixed32,281,opt,name=oneof10_sfixed32,json=oneof10Sfixed32,proto3,oneof"`
}

type Model1_Oneof10Sfixed64 struct {
	Oneof10Sfixed64 int64 `protobuf:"fixed64,282,opt,name=oneof10_sfixed64,json=oneof10Sfixed64,proto3,oneof"`
}

type Model1_Oneof10Bool struct {
	Oneof10Bool bool `protobuf:"varint,283,opt,name=oneof10_bool,json=oneof10Bool,proto3,oneof"`
}

type Model1_Oneof10String struct {
	Oneof10String string `protobuf:"bytes,284,opt,name=oneof10_string,json=oneof10String,proto3,oneof"`
}

type Model1_Oneof10Bytes struct {
	Oneof10Bytes []byte `protobuf:"bytes,285,opt,name=oneof10_bytes,json=oneof10Bytes,proto3,oneof"`
}

type Model1_Oneof10EmbedMessage struct {
	Oneof10EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,286,opt,name=oneof10_embed_message,json=oneof10EmbedMessage,proto3,oneof"`
}

type Model1_Oneof10StandMessage struct {
	Oneof10StandMessage *StandMessage1 `protobuf:"bytes,287,opt,name=oneof10_stand_message,json=oneof10StandMessage,proto3,oneof"`
}

type Model1_Oneof10ExternalMessage struct {
	Oneof10ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,288,opt,name=oneof10_external_message,json=oneof10ExternalMessage,proto3,oneof"`
}

type Model1_Oneof10EmbedEnum struct {
	Oneof10EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,289,opt,name=oneof10_embed_enum,json=oneof10EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof10StandEnum struct {
	Oneof10StandEnum StandEnum1 `protobuf:"varint,290,opt,name=oneof10_stand_enum,json=oneof10StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof10ExternalEnum struct {
	Oneof10ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,291,opt,name=oneof10_external_enum,json=oneof10ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof10Double) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Float) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Int32) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Int64) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Uint32) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Uint64) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Sint32) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Sint64) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Fixed32) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Fixed64) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Sfixed32) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Sfixed64) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Bool) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10String) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10Bytes) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10EmbedMessage) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10StandMessage) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10ExternalMessage) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10EmbedEnum) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10StandEnum) isModel1_Oneof_Type10() {}

func (*Model1_Oneof10ExternalEnum) isModel1_Oneof_Type10() {}

type isModel1_Oneof_Type11 interface {
	isModel1_Oneof_Type11()
}

type Model1_Oneof11Double struct {
	Oneof11Double float64 `protobuf:"fixed64,301,opt,name=oneof11_double,json=oneof11Double,proto3,oneof"`
}

type Model1_Oneof11Float struct {
	Oneof11Float float32 `protobuf:"fixed32,302,opt,name=oneof11_float,json=oneof11Float,proto3,oneof"`
}

type Model1_Oneof11Int32 struct {
	Oneof11Int32 int32 `protobuf:"varint,303,opt,name=oneof11_int32,json=oneof11Int32,proto3,oneof"`
}

type Model1_Oneof11Int64 struct {
	Oneof11Int64 int64 `protobuf:"varint,304,opt,name=oneof11_int64,json=oneof11Int64,proto3,oneof"`
}

type Model1_Oneof11Uint32 struct {
	Oneof11Uint32 uint32 `protobuf:"varint,305,opt,name=oneof11_uint32,json=oneof11Uint32,proto3,oneof"`
}

type Model1_Oneof11Uint64 struct {
	Oneof11Uint64 uint64 `protobuf:"varint,306,opt,name=oneof11_uint64,json=oneof11Uint64,proto3,oneof"`
}

type Model1_Oneof11Sint32 struct {
	Oneof11Sint32 int32 `protobuf:"zigzag32,307,opt,name=oneof11_sint32,json=oneof11Sint32,proto3,oneof"`
}

type Model1_Oneof11Sint64 struct {
	Oneof11Sint64 int64 `protobuf:"zigzag64,308,opt,name=oneof11_sint64,json=oneof11Sint64,proto3,oneof"`
}

type Model1_Oneof11Fixed32 struct {
	Oneof11Fixed32 uint32 `protobuf:"fixed32,309,opt,name=oneof11_fixed32,json=oneof11Fixed32,proto3,oneof"`
}

type Model1_Oneof11Fixed64 struct {
	Oneof11Fixed64 uint64 `protobuf:"fixed64,310,opt,name=oneof11_fixed64,json=oneof11Fixed64,proto3,oneof"`
}

type Model1_Oneof11Sfixed32 struct {
	Oneof11Sfixed32 int32 `protobuf:"fixed32,311,opt,name=oneof11_sfixed32,json=oneof11Sfixed32,proto3,oneof"`
}

type Model1_Oneof11Sfixed64 struct {
	Oneof11Sfixed64 int64 `protobuf:"fixed64,312,opt,name=oneof11_sfixed64,json=oneof11Sfixed64,proto3,oneof"`
}

type Model1_Oneof11Bool struct {
	Oneof11Bool bool `protobuf:"varint,313,opt,name=oneof11_bool,json=oneof11Bool,proto3,oneof"`
}

type Model1_Oneof11String struct {
	Oneof11String string `protobuf:"bytes,314,opt,name=oneof11_string,json=oneof11String,proto3,oneof"`
}

type Model1_Oneof11Bytes struct {
	Oneof11Bytes []byte `protobuf:"bytes,315,opt,name=oneof11_bytes,json=oneof11Bytes,proto3,oneof"`
}

type Model1_Oneof11EmbedMessage struct {
	Oneof11EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,316,opt,name=oneof11_embed_message,json=oneof11EmbedMessage,proto3,oneof"`
}

type Model1_Oneof11StandMessage struct {
	Oneof11StandMessage *StandMessage1 `protobuf:"bytes,317,opt,name=oneof11_stand_message,json=oneof11StandMessage,proto3,oneof"`
}

type Model1_Oneof11ExternalMessage struct {
	Oneof11ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,318,opt,name=oneof11_external_message,json=oneof11ExternalMessage,proto3,oneof"`
}

type Model1_Oneof11EmbedEnum struct {
	Oneof11EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,319,opt,name=oneof11_embed_enum,json=oneof11EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof11StandEnum struct {
	Oneof11StandEnum StandEnum1 `protobuf:"varint,320,opt,name=oneof11_stand_enum,json=oneof11StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof11ExternalEnum struct {
	Oneof11ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,321,opt,name=oneof11_external_enum,json=oneof11ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof11Double) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Float) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Int32) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Int64) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Uint32) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Uint64) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Sint32) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Sint64) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Fixed32) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Fixed64) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Sfixed32) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Sfixed64) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Bool) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11String) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11Bytes) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11EmbedMessage) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11StandMessage) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11ExternalMessage) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11EmbedEnum) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11StandEnum) isModel1_Oneof_Type11() {}

func (*Model1_Oneof11ExternalEnum) isModel1_Oneof_Type11() {}

type isModel1_Oneof_Type12 interface {
	isModel1_Oneof_Type12()
}

type Model1_Oneof12Double struct {
	Oneof12Double float64 `protobuf:"fixed64,331,opt,name=oneof12_double,json=oneof12Double,proto3,oneof"`
}

type Model1_Oneof12Float struct {
	Oneof12Float float32 `protobuf:"fixed32,332,opt,name=oneof12_float,json=oneof12Float,proto3,oneof"`
}

type Model1_Oneof12Int32 struct {
	Oneof12Int32 int32 `protobuf:"varint,333,opt,name=oneof12_int32,json=oneof12Int32,proto3,oneof"`
}

type Model1_Oneof12Int64 struct {
	Oneof12Int64 int64 `protobuf:"varint,334,opt,name=oneof12_int64,json=oneof12Int64,proto3,oneof"`
}

type Model1_Oneof12Uint32 struct {
	Oneof12Uint32 uint32 `protobuf:"varint,335,opt,name=oneof12_uint32,json=oneof12Uint32,proto3,oneof"`
}

type Model1_Oneof12Uint64 struct {
	Oneof12Uint64 uint64 `protobuf:"varint,336,opt,name=oneof12_uint64,json=oneof12Uint64,proto3,oneof"`
}

type Model1_Oneof12Sint32 struct {
	Oneof12Sint32 int32 `protobuf:"zigzag32,337,opt,name=oneof12_sint32,json=oneof12Sint32,proto3,oneof"`
}

type Model1_Oneof12Sint64 struct {
	Oneof12Sint64 int64 `protobuf:"zigzag64,338,opt,name=oneof12_sint64,json=oneof12Sint64,proto3,oneof"`
}

type Model1_Oneof12Fixed32 struct {
	Oneof12Fixed32 uint32 `protobuf:"fixed32,339,opt,name=oneof12_fixed32,json=oneof12Fixed32,proto3,oneof"`
}

type Model1_Oneof12Fixed64 struct {
	Oneof12Fixed64 uint64 `protobuf:"fixed64,340,opt,name=oneof12_fixed64,json=oneof12Fixed64,proto3,oneof"`
}

type Model1_Oneof12Sfixed32 struct {
	Oneof12Sfixed32 int32 `protobuf:"fixed32,341,opt,name=oneof12_sfixed32,json=oneof12Sfixed32,proto3,oneof"`
}

type Model1_Oneof12Sfixed64 struct {
	Oneof12Sfixed64 int64 `protobuf:"fixed64,342,opt,name=oneof12_sfixed64,json=oneof12Sfixed64,proto3,oneof"`
}

type Model1_Oneof12Bool struct {
	Oneof12Bool bool `protobuf:"varint,343,opt,name=oneof12_bool,json=oneof12Bool,proto3,oneof"`
}

type Model1_Oneof12String struct {
	Oneof12String string `protobuf:"bytes,344,opt,name=oneof12_string,json=oneof12String,proto3,oneof"`
}

type Model1_Oneof12Bytes struct {
	Oneof12Bytes []byte `protobuf:"bytes,345,opt,name=oneof12_bytes,json=oneof12Bytes,proto3,oneof"`
}

type Model1_Oneof12EmbedMessage struct {
	Oneof12EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,346,opt,name=oneof12_embed_message,json=oneof12EmbedMessage,proto3,oneof"`
}

type Model1_Oneof12StandMessage struct {
	Oneof12StandMessage *StandMessage1 `protobuf:"bytes,347,opt,name=oneof12_stand_message,json=oneof12StandMessage,proto3,oneof"`
}

type Model1_Oneof12ExternalMessage struct {
	Oneof12ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,348,opt,name=oneof12_external_message,json=oneof12ExternalMessage,proto3,oneof"`
}

type Model1_Oneof12EmbedEnum struct {
	Oneof12EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,349,opt,name=oneof12_embed_enum,json=oneof12EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof12StandEnum struct {
	Oneof12StandEnum StandEnum1 `protobuf:"varint,350,opt,name=oneof12_stand_enum,json=oneof12StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof12ExternalEnum struct {
	Oneof12ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,351,opt,name=oneof12_external_enum,json=oneof12ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof12Double) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Float) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Int32) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Int64) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Uint32) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Uint64) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Sint32) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Sint64) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Fixed32) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Fixed64) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Sfixed32) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Sfixed64) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Bool) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12String) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12Bytes) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12EmbedMessage) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12StandMessage) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12ExternalMessage) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12EmbedEnum) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12StandEnum) isModel1_Oneof_Type12() {}

func (*Model1_Oneof12ExternalEnum) isModel1_Oneof_Type12() {}

type isModel1_Oneof_Type13 interface {
	isModel1_Oneof_Type13()
}

type Model1_Oneof13Double struct {
	Oneof13Double float64 `protobuf:"fixed64,361,opt,name=oneof13_double,json=oneof13Double,proto3,oneof"`
}

type Model1_Oneof13Float struct {
	Oneof13Float float32 `protobuf:"fixed32,362,opt,name=oneof13_float,json=oneof13Float,proto3,oneof"`
}

type Model1_Oneof13Int32 struct {
	Oneof13Int32 int32 `protobuf:"varint,363,opt,name=oneof13_int32,json=oneof13Int32,proto3,oneof"`
}

type Model1_Oneof13Int64 struct {
	Oneof13Int64 int64 `protobuf:"varint,364,opt,name=oneof13_int64,json=oneof13Int64,proto3,oneof"`
}

type Model1_Oneof13Uint32 struct {
	Oneof13Uint32 uint32 `protobuf:"varint,365,opt,name=oneof13_uint32,json=oneof13Uint32,proto3,oneof"`
}

type Model1_Oneof13Uint64 struct {
	Oneof13Uint64 uint64 `protobuf:"varint,366,opt,name=oneof13_uint64,json=oneof13Uint64,proto3,oneof"`
}

type Model1_Oneof13Sint32 struct {
	Oneof13Sint32 int32 `protobuf:"zigzag32,367,opt,name=oneof13_sint32,json=oneof13Sint32,proto3,oneof"`
}

type Model1_Oneof13Sint64 struct {
	Oneof13Sint64 int64 `protobuf:"zigzag64,368,opt,name=oneof13_sint64,json=oneof13Sint64,proto3,oneof"`
}

type Model1_Oneof13Fixed32 struct {
	Oneof13Fixed32 uint32 `protobuf:"fixed32,369,opt,name=oneof13_fixed32,json=oneof13Fixed32,proto3,oneof"`
}

type Model1_Oneof13Fixed64 struct {
	Oneof13Fixed64 uint64 `protobuf:"fixed64,370,opt,name=oneof13_fixed64,json=oneof13Fixed64,proto3,oneof"`
}

type Model1_Oneof13Sfixed32 struct {
	Oneof13Sfixed32 int32 `protobuf:"fixed32,371,opt,name=oneof13_sfixed32,json=oneof13Sfixed32,proto3,oneof"`
}

type Model1_Oneof13Sfixed64 struct {
	Oneof13Sfixed64 int64 `protobuf:"fixed64,372,opt,name=oneof13_sfixed64,json=oneof13Sfixed64,proto3,oneof"`
}

type Model1_Oneof13Bool struct {
	Oneof13Bool bool `protobuf:"varint,373,opt,name=oneof13_bool,json=oneof13Bool,proto3,oneof"`
}

type Model1_Oneof13String struct {
	Oneof13String string `protobuf:"bytes,374,opt,name=oneof13_string,json=oneof13String,proto3,oneof"`
}

type Model1_Oneof13Bytes struct {
	Oneof13Bytes []byte `protobuf:"bytes,375,opt,name=oneof13_bytes,json=oneof13Bytes,proto3,oneof"`
}

type Model1_Oneof13EmbedMessage struct {
	Oneof13EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,376,opt,name=oneof13_embed_message,json=oneof13EmbedMessage,proto3,oneof"`
}

type Model1_Oneof13StandMessage struct {
	Oneof13StandMessage *StandMessage1 `protobuf:"bytes,377,opt,name=oneof13_stand_message,json=oneof13StandMessage,proto3,oneof"`
}

type Model1_Oneof13ExternalMessage struct {
	Oneof13ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,378,opt,name=oneof13_external_message,json=oneof13ExternalMessage,proto3,oneof"`
}

type Model1_Oneof13EmbedEnum struct {
	Oneof13EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,379,opt,name=oneof13_embed_enum,json=oneof13EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof13StandEnum struct {
	Oneof13StandEnum StandEnum1 `protobuf:"varint,380,opt,name=oneof13_stand_enum,json=oneof13StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof13ExternalEnum struct {
	Oneof13ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,381,opt,name=oneof13_external_enum,json=oneof13ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof13Double) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Float) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Int32) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Int64) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Uint32) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Uint64) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Sint32) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Sint64) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Fixed32) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Fixed64) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Sfixed32) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Sfixed64) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Bool) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13String) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13Bytes) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13EmbedMessage) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13StandMessage) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13ExternalMessage) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13EmbedEnum) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13StandEnum) isModel1_Oneof_Type13() {}

func (*Model1_Oneof13ExternalEnum) isModel1_Oneof_Type13() {}

type isModel1_Oneof_Type14 interface {
	isModel1_Oneof_Type14()
}

type Model1_Oneof14Double struct {
	Oneof14Double float64 `protobuf:"fixed64,391,opt,name=oneof14_double,json=oneof14Double,proto3,oneof"`
}

type Model1_Oneof14Float struct {
	Oneof14Float float32 `protobuf:"fixed32,392,opt,name=oneof14_float,json=oneof14Float,proto3,oneof"`
}

type Model1_Oneof14Int32 struct {
	Oneof14Int32 int32 `protobuf:"varint,393,opt,name=oneof14_int32,json=oneof14Int32,proto3,oneof"`
}

type Model1_Oneof14Int64 struct {
	Oneof14Int64 int64 `protobuf:"varint,394,opt,name=oneof14_int64,json=oneof14Int64,proto3,oneof"`
}

type Model1_Oneof14Uint32 struct {
	Oneof14Uint32 uint32 `protobuf:"varint,395,opt,name=oneof14_uint32,json=oneof14Uint32,proto3,oneof"`
}

type Model1_Oneof14Uint64 struct {
	Oneof14Uint64 uint64 `protobuf:"varint,396,opt,name=oneof14_uint64,json=oneof14Uint64,proto3,oneof"`
}

type Model1_Oneof14Sint32 struct {
	Oneof14Sint32 int32 `protobuf:"zigzag32,397,opt,name=oneof14_sint32,json=oneof14Sint32,proto3,oneof"`
}

type Model1_Oneof14Sint64 struct {
	Oneof14Sint64 int64 `protobuf:"zigzag64,398,opt,name=oneof14_sint64,json=oneof14Sint64,proto3,oneof"`
}

type Model1_Oneof14Fixed32 struct {
	Oneof14Fixed32 uint32 `protobuf:"fixed32,399,opt,name=oneof14_fixed32,json=oneof14Fixed32,proto3,oneof"`
}

type Model1_Oneof14Fixed64 struct {
	Oneof14Fixed64 uint64 `protobuf:"fixed64,400,opt,name=oneof14_fixed64,json=oneof14Fixed64,proto3,oneof"`
}

type Model1_Oneof14Sfixed32 struct {
	Oneof14Sfixed32 int32 `protobuf:"fixed32,401,opt,name=oneof14_sfixed32,json=oneof14Sfixed32,proto3,oneof"`
}

type Model1_Oneof14Sfixed64 struct {
	Oneof14Sfixed64 int64 `protobuf:"fixed64,402,opt,name=oneof14_sfixed64,json=oneof14Sfixed64,proto3,oneof"`
}

type Model1_Oneof14Bool struct {
	Oneof14Bool bool `protobuf:"varint,403,opt,name=oneof14_bool,json=oneof14Bool,proto3,oneof"`
}

type Model1_Oneof14String struct {
	Oneof14String string `protobuf:"bytes,404,opt,name=oneof14_string,json=oneof14String,proto3,oneof"`
}

type Model1_Oneof14Bytes struct {
	Oneof14Bytes []byte `protobuf:"bytes,405,opt,name=oneof14_bytes,json=oneof14Bytes,proto3,oneof"`
}

type Model1_Oneof14EmbedMessage struct {
	Oneof14EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,406,opt,name=oneof14_embed_message,json=oneof14EmbedMessage,proto3,oneof"`
}

type Model1_Oneof14StandMessage struct {
	Oneof14StandMessage *StandMessage1 `protobuf:"bytes,407,opt,name=oneof14_stand_message,json=oneof14StandMessage,proto3,oneof"`
}

type Model1_Oneof14ExternalMessage struct {
	Oneof14ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,408,opt,name=oneof14_external_message,json=oneof14ExternalMessage,proto3,oneof"`
}

type Model1_Oneof14EmbedEnum struct {
	Oneof14EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,409,opt,name=oneof14_embed_enum,json=oneof14EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof14StandEnum struct {
	Oneof14StandEnum StandEnum1 `protobuf:"varint,410,opt,name=oneof14_stand_enum,json=oneof14StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof14ExternalEnum struct {
	Oneof14ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,411,opt,name=oneof14_external_enum,json=oneof14ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof14Double) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Float) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Int32) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Int64) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Uint32) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Uint64) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Sint32) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Sint64) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Fixed32) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Fixed64) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Sfixed32) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Sfixed64) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Bool) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14String) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14Bytes) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14EmbedMessage) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14StandMessage) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14ExternalMessage) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14EmbedEnum) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14StandEnum) isModel1_Oneof_Type14() {}

func (*Model1_Oneof14ExternalEnum) isModel1_Oneof_Type14() {}

type isModel1_Oneof_Type15 interface {
	isModel1_Oneof_Type15()
}

type Model1_Oneof15Double struct {
	Oneof15Double float64 `protobuf:"fixed64,421,opt,name=oneof15_double,json=oneof15Double,proto3,oneof"`
}

type Model1_Oneof15Float struct {
	Oneof15Float float32 `protobuf:"fixed32,422,opt,name=oneof15_float,json=oneof15Float,proto3,oneof"`
}

type Model1_Oneof15Int32 struct {
	Oneof15Int32 int32 `protobuf:"varint,423,opt,name=oneof15_int32,json=oneof15Int32,proto3,oneof"`
}

type Model1_Oneof15Int64 struct {
	Oneof15Int64 int64 `protobuf:"varint,424,opt,name=oneof15_int64,json=oneof15Int64,proto3,oneof"`
}

type Model1_Oneof15Uint32 struct {
	Oneof15Uint32 uint32 `protobuf:"varint,425,opt,name=oneof15_uint32,json=oneof15Uint32,proto3,oneof"`
}

type Model1_Oneof15Uint64 struct {
	Oneof15Uint64 uint64 `protobuf:"varint,426,opt,name=oneof15_uint64,json=oneof15Uint64,proto3,oneof"`
}

type Model1_Oneof15Sint32 struct {
	Oneof15Sint32 int32 `protobuf:"zigzag32,427,opt,name=oneof15_sint32,json=oneof15Sint32,proto3,oneof"`
}

type Model1_Oneof15Sint64 struct {
	Oneof15Sint64 int64 `protobuf:"zigzag64,428,opt,name=oneof15_sint64,json=oneof15Sint64,proto3,oneof"`
}

type Model1_Oneof15Fixed32 struct {
	Oneof15Fixed32 uint32 `protobuf:"fixed32,429,opt,name=oneof15_fixed32,json=oneof15Fixed32,proto3,oneof"`
}

type Model1_Oneof15Fixed64 struct {
	Oneof15Fixed64 uint64 `protobuf:"fixed64,430,opt,name=oneof15_fixed64,json=oneof15Fixed64,proto3,oneof"`
}

type Model1_Oneof15Sfixed32 struct {
	Oneof15Sfixed32 int32 `protobuf:"fixed32,431,opt,name=oneof15_sfixed32,json=oneof15Sfixed32,proto3,oneof"`
}

type Model1_Oneof15Sfixed64 struct {
	Oneof15Sfixed64 int64 `protobuf:"fixed64,432,opt,name=oneof15_sfixed64,json=oneof15Sfixed64,proto3,oneof"`
}

type Model1_Oneof15Bool struct {
	Oneof15Bool bool `protobuf:"varint,433,opt,name=oneof15_bool,json=oneof15Bool,proto3,oneof"`
}

type Model1_Oneof15String struct {
	Oneof15String string `protobuf:"bytes,434,opt,name=oneof15_string,json=oneof15String,proto3,oneof"`
}

type Model1_Oneof15Bytes struct {
	Oneof15Bytes []byte `protobuf:"bytes,435,opt,name=oneof15_bytes,json=oneof15Bytes,proto3,oneof"`
}

type Model1_Oneof15EmbedMessage struct {
	Oneof15EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,436,opt,name=oneof15_embed_message,json=oneof15EmbedMessage,proto3,oneof"`
}

type Model1_Oneof15StandMessage struct {
	Oneof15StandMessage *StandMessage1 `protobuf:"bytes,437,opt,name=oneof15_stand_message,json=oneof15StandMessage,proto3,oneof"`
}

type Model1_Oneof15ExternalMessage struct {
	Oneof15ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,438,opt,name=oneof15_external_message,json=oneof15ExternalMessage,proto3,oneof"`
}

type Model1_Oneof15EmbedEnum struct {
	Oneof15EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,439,opt,name=oneof15_embed_enum,json=oneof15EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof15StandEnum struct {
	Oneof15StandEnum StandEnum1 `protobuf:"varint,440,opt,name=oneof15_stand_enum,json=oneof15StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof15ExternalEnum struct {
	Oneof15ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,441,opt,name=oneof15_external_enum,json=oneof15ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof15Double) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Float) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Int32) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Int64) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Uint32) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Uint64) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Sint32) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Sint64) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Fixed32) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Fixed64) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Sfixed32) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Sfixed64) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Bool) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15String) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15Bytes) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15EmbedMessage) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15StandMessage) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15ExternalMessage) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15EmbedEnum) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15StandEnum) isModel1_Oneof_Type15() {}

func (*Model1_Oneof15ExternalEnum) isModel1_Oneof_Type15() {}

type isModel1_Oneof_Type16 interface {
	isModel1_Oneof_Type16()
}

type Model1_Oneof16Double struct {
	Oneof16Double float64 `protobuf:"fixed64,451,opt,name=oneof16_double,json=oneof16Double,proto3,oneof"`
}

type Model1_Oneof16Float struct {
	Oneof16Float float32 `protobuf:"fixed32,452,opt,name=oneof16_float,json=oneof16Float,proto3,oneof"`
}

type Model1_Oneof16Int32 struct {
	Oneof16Int32 int32 `protobuf:"varint,453,opt,name=oneof16_int32,json=oneof16Int32,proto3,oneof"`
}

type Model1_Oneof16Int64 struct {
	Oneof16Int64 int64 `protobuf:"varint,454,opt,name=oneof16_int64,json=oneof16Int64,proto3,oneof"`
}

type Model1_Oneof16Uint32 struct {
	Oneof16Uint32 uint32 `protobuf:"varint,455,opt,name=oneof16_uint32,json=oneof16Uint32,proto3,oneof"`
}

type Model1_Oneof16Uint64 struct {
	Oneof16Uint64 uint64 `protobuf:"varint,456,opt,name=oneof16_uint64,json=oneof16Uint64,proto3,oneof"`
}

type Model1_Oneof16Sint32 struct {
	Oneof16Sint32 int32 `protobuf:"zigzag32,457,opt,name=oneof16_sint32,json=oneof16Sint32,proto3,oneof"`
}

type Model1_Oneof16Sint64 struct {
	Oneof16Sint64 int64 `protobuf:"zigzag64,458,opt,name=oneof16_sint64,json=oneof16Sint64,proto3,oneof"`
}

type Model1_Oneof16Fixed32 struct {
	Oneof16Fixed32 uint32 `protobuf:"fixed32,459,opt,name=oneof16_fixed32,json=oneof16Fixed32,proto3,oneof"`
}

type Model1_Oneof16Fixed64 struct {
	Oneof16Fixed64 uint64 `protobuf:"fixed64,460,opt,name=oneof16_fixed64,json=oneof16Fixed64,proto3,oneof"`
}

type Model1_Oneof16Sfixed32 struct {
	Oneof16Sfixed32 int32 `protobuf:"fixed32,461,opt,name=oneof16_sfixed32,json=oneof16Sfixed32,proto3,oneof"`
}

type Model1_Oneof16Sfixed64 struct {
	Oneof16Sfixed64 int64 `protobuf:"fixed64,462,opt,name=oneof16_sfixed64,json=oneof16Sfixed64,proto3,oneof"`
}

type Model1_Oneof16Bool struct {
	Oneof16Bool bool `protobuf:"varint,463,opt,name=oneof16_bool,json=oneof16Bool,proto3,oneof"`
}

type Model1_Oneof16String struct {
	Oneof16String string `protobuf:"bytes,464,opt,name=oneof16_string,json=oneof16String,proto3,oneof"`
}

type Model1_Oneof16Bytes struct {
	Oneof16Bytes []byte `protobuf:"bytes,465,opt,name=oneof16_bytes,json=oneof16Bytes,proto3,oneof"`
}

type Model1_Oneof16EmbedMessage struct {
	Oneof16EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,466,opt,name=oneof16_embed_message,json=oneof16EmbedMessage,proto3,oneof"`
}

type Model1_Oneof16StandMessage struct {
	Oneof16StandMessage *StandMessage1 `protobuf:"bytes,467,opt,name=oneof16_stand_message,json=oneof16StandMessage,proto3,oneof"`
}

type Model1_Oneof16ExternalMessage struct {
	Oneof16ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,468,opt,name=oneof16_external_message,json=oneof16ExternalMessage,proto3,oneof"`
}

type Model1_Oneof16EmbedEnum struct {
	Oneof16EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,469,opt,name=oneof16_embed_enum,json=oneof16EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof16StandEnum struct {
	Oneof16StandEnum StandEnum1 `protobuf:"varint,470,opt,name=oneof16_stand_enum,json=oneof16StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof16ExternalEnum struct {
	Oneof16ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,471,opt,name=oneof16_external_enum,json=oneof16ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof16Double) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Float) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Int32) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Int64) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Uint32) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Uint64) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Sint32) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Sint64) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Fixed32) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Fixed64) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Sfixed32) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Sfixed64) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Bool) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16String) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16Bytes) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16EmbedMessage) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16StandMessage) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16ExternalMessage) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16EmbedEnum) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16StandEnum) isModel1_Oneof_Type16() {}

func (*Model1_Oneof16ExternalEnum) isModel1_Oneof_Type16() {}

type isModel1_Oneof_Type17 interface {
	isModel1_Oneof_Type17()
}

type Model1_Oneof17Double struct {
	Oneof17Double float64 `protobuf:"fixed64,481,opt,name=oneof17_double,json=oneof17Double,proto3,oneof"`
}

type Model1_Oneof17Float struct {
	Oneof17Float float32 `protobuf:"fixed32,482,opt,name=oneof17_float,json=oneof17Float,proto3,oneof"`
}

type Model1_Oneof17Int32 struct {
	Oneof17Int32 int32 `protobuf:"varint,483,opt,name=oneof17_int32,json=oneof17Int32,proto3,oneof"`
}

type Model1_Oneof17Int64 struct {
	Oneof17Int64 int64 `protobuf:"varint,484,opt,name=oneof17_int64,json=oneof17Int64,proto3,oneof"`
}

type Model1_Oneof17Uint32 struct {
	Oneof17Uint32 uint32 `protobuf:"varint,485,opt,name=oneof17_uint32,json=oneof17Uint32,proto3,oneof"`
}

type Model1_Oneof17Uint64 struct {
	Oneof17Uint64 uint64 `protobuf:"varint,486,opt,name=oneof17_uint64,json=oneof17Uint64,proto3,oneof"`
}

type Model1_Oneof17Sint32 struct {
	Oneof17Sint32 int32 `protobuf:"zigzag32,487,opt,name=oneof17_sint32,json=oneof17Sint32,proto3,oneof"`
}

type Model1_Oneof17Sint64 struct {
	Oneof17Sint64 int64 `protobuf:"zigzag64,488,opt,name=oneof17_sint64,json=oneof17Sint64,proto3,oneof"`
}

type Model1_Oneof17Fixed32 struct {
	Oneof17Fixed32 uint32 `protobuf:"fixed32,489,opt,name=oneof17_fixed32,json=oneof17Fixed32,proto3,oneof"`
}

type Model1_Oneof17Fixed64 struct {
	Oneof17Fixed64 uint64 `protobuf:"fixed64,480,opt,name=oneof17_fixed64,json=oneof17Fixed64,proto3,oneof"`
}

type Model1_Oneof17Sfixed32 struct {
	Oneof17Sfixed32 int32 `protobuf:"fixed32,491,opt,name=oneof17_sfixed32,json=oneof17Sfixed32,proto3,oneof"`
}

type Model1_Oneof17Sfixed64 struct {
	Oneof17Sfixed64 int64 `protobuf:"fixed64,492,opt,name=oneof17_sfixed64,json=oneof17Sfixed64,proto3,oneof"`
}

type Model1_Oneof17Bool struct {
	Oneof17Bool bool `protobuf:"varint,493,opt,name=oneof17_bool,json=oneof17Bool,proto3,oneof"`
}

type Model1_Oneof17String struct {
	Oneof17String string `protobuf:"bytes,494,opt,name=oneof17_string,json=oneof17String,proto3,oneof"`
}

type Model1_Oneof17Bytes struct {
	Oneof17Bytes []byte `protobuf:"bytes,495,opt,name=oneof17_bytes,json=oneof17Bytes,proto3,oneof"`
}

type Model1_Oneof17EmbedMessage struct {
	Oneof17EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,496,opt,name=oneof17_embed_message,json=oneof17EmbedMessage,proto3,oneof"`
}

type Model1_Oneof17StandMessage struct {
	Oneof17StandMessage *StandMessage1 `protobuf:"bytes,497,opt,name=oneof17_stand_message,json=oneof17StandMessage,proto3,oneof"`
}

type Model1_Oneof17ExternalMessage struct {
	Oneof17ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,498,opt,name=oneof17_external_message,json=oneof17ExternalMessage,proto3,oneof"`
}

type Model1_Oneof17EmbedEnum struct {
	Oneof17EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,499,opt,name=oneof17_embed_enum,json=oneof17EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof17StandEnum struct {
	Oneof17StandEnum StandEnum1 `protobuf:"varint,500,opt,name=oneof17_stand_enum,json=oneof17StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof17ExternalEnum struct {
	Oneof17ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,501,opt,name=oneof17_external_enum,json=oneof17ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof17Double) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Float) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Int32) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Int64) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Uint32) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Uint64) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Sint32) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Sint64) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Fixed32) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Fixed64) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Sfixed32) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Sfixed64) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Bool) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17String) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17Bytes) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17EmbedMessage) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17StandMessage) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17ExternalMessage) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17EmbedEnum) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17StandEnum) isModel1_Oneof_Type17() {}

func (*Model1_Oneof17ExternalEnum) isModel1_Oneof_Type17() {}

type isModel1_Oneof_Type18 interface {
	isModel1_Oneof_Type18()
}

type Model1_Oneof18Double struct {
	Oneof18Double float64 `protobuf:"fixed64,511,opt,name=oneof18_double,json=oneof18Double,proto3,oneof"`
}

type Model1_Oneof18Float struct {
	Oneof18Float float32 `protobuf:"fixed32,512,opt,name=oneof18_float,json=oneof18Float,proto3,oneof"`
}

type Model1_Oneof18Int32 struct {
	Oneof18Int32 int32 `protobuf:"varint,513,opt,name=oneof18_int32,json=oneof18Int32,proto3,oneof"`
}

type Model1_Oneof18Int64 struct {
	Oneof18Int64 int64 `protobuf:"varint,514,opt,name=oneof18_int64,json=oneof18Int64,proto3,oneof"`
}

type Model1_Oneof18Uint32 struct {
	Oneof18Uint32 uint32 `protobuf:"varint,515,opt,name=oneof18_uint32,json=oneof18Uint32,proto3,oneof"`
}

type Model1_Oneof18Uint64 struct {
	Oneof18Uint64 uint64 `protobuf:"varint,516,opt,name=oneof18_uint64,json=oneof18Uint64,proto3,oneof"`
}

type Model1_Oneof18Sint32 struct {
	Oneof18Sint32 int32 `protobuf:"zigzag32,517,opt,name=oneof18_sint32,json=oneof18Sint32,proto3,oneof"`
}

type Model1_Oneof18Sint64 struct {
	Oneof18Sint64 int64 `protobuf:"zigzag64,518,opt,name=oneof18_sint64,json=oneof18Sint64,proto3,oneof"`
}

type Model1_Oneof18Fixed32 struct {
	Oneof18Fixed32 uint32 `protobuf:"fixed32,519,opt,name=oneof18_fixed32,json=oneof18Fixed32,proto3,oneof"`
}

type Model1_Oneof18Fixed64 struct {
	Oneof18Fixed64 uint64 `protobuf:"fixed64,520,opt,name=oneof18_fixed64,json=oneof18Fixed64,proto3,oneof"`
}

type Model1_Oneof18Sfixed32 struct {
	Oneof18Sfixed32 int32 `protobuf:"fixed32,521,opt,name=oneof18_sfixed32,json=oneof18Sfixed32,proto3,oneof"`
}

type Model1_Oneof18Sfixed64 struct {
	Oneof18Sfixed64 int64 `protobuf:"fixed64,522,opt,name=oneof18_sfixed64,json=oneof18Sfixed64,proto3,oneof"`
}

type Model1_Oneof18Bool struct {
	Oneof18Bool bool `protobuf:"varint,523,opt,name=oneof18_bool,json=oneof18Bool,proto3,oneof"`
}

type Model1_Oneof18String struct {
	Oneof18String string `protobuf:"bytes,524,opt,name=oneof18_string,json=oneof18String,proto3,oneof"`
}

type Model1_Oneof18Bytes struct {
	Oneof18Bytes []byte `protobuf:"bytes,525,opt,name=oneof18_bytes,json=oneof18Bytes,proto3,oneof"`
}

type Model1_Oneof18EmbedMessage struct {
	Oneof18EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,526,opt,name=oneof18_embed_message,json=oneof18EmbedMessage,proto3,oneof"`
}

type Model1_Oneof18StandMessage struct {
	Oneof18StandMessage *StandMessage1 `protobuf:"bytes,527,opt,name=oneof18_stand_message,json=oneof18StandMessage,proto3,oneof"`
}

type Model1_Oneof18ExternalMessage struct {
	Oneof18ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,528,opt,name=oneof18_external_message,json=oneof18ExternalMessage,proto3,oneof"`
}

type Model1_Oneof18EmbedEnum struct {
	Oneof18EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,529,opt,name=oneof18_embed_enum,json=oneof18EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof18StandEnum struct {
	Oneof18StandEnum StandEnum1 `protobuf:"varint,530,opt,name=oneof18_stand_enum,json=oneof18StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof18ExternalEnum struct {
	Oneof18ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,531,opt,name=oneof18_external_enum,json=oneof18ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof18Double) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Float) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Int32) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Int64) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Uint32) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Uint64) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Sint32) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Sint64) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Fixed32) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Fixed64) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Sfixed32) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Sfixed64) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Bool) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18String) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18Bytes) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18EmbedMessage) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18StandMessage) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18ExternalMessage) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18EmbedEnum) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18StandEnum) isModel1_Oneof_Type18() {}

func (*Model1_Oneof18ExternalEnum) isModel1_Oneof_Type18() {}

type isModel1_Oneof_Type19 interface {
	isModel1_Oneof_Type19()
}

type Model1_Oneof19Double struct {
	Oneof19Double float64 `protobuf:"fixed64,541,opt,name=oneof19_double,json=oneof19Double,proto3,oneof"`
}

type Model1_Oneof19Float struct {
	Oneof19Float float32 `protobuf:"fixed32,542,opt,name=oneof19_float,json=oneof19Float,proto3,oneof"`
}

type Model1_Oneof19Int32 struct {
	Oneof19Int32 int32 `protobuf:"varint,543,opt,name=oneof19_int32,json=oneof19Int32,proto3,oneof"`
}

type Model1_Oneof19Int64 struct {
	Oneof19Int64 int64 `protobuf:"varint,544,opt,name=oneof19_int64,json=oneof19Int64,proto3,oneof"`
}

type Model1_Oneof19Uint32 struct {
	Oneof19Uint32 uint32 `protobuf:"varint,545,opt,name=oneof19_uint32,json=oneof19Uint32,proto3,oneof"`
}

type Model1_Oneof19Uint64 struct {
	Oneof19Uint64 uint64 `protobuf:"varint,546,opt,name=oneof19_uint64,json=oneof19Uint64,proto3,oneof"`
}

type Model1_Oneof19Sint32 struct {
	Oneof19Sint32 int32 `protobuf:"zigzag32,547,opt,name=oneof19_sint32,json=oneof19Sint32,proto3,oneof"`
}

type Model1_Oneof19Sint64 struct {
	Oneof19Sint64 int64 `protobuf:"zigzag64,548,opt,name=oneof19_sint64,json=oneof19Sint64,proto3,oneof"`
}

type Model1_Oneof19Fixed32 struct {
	Oneof19Fixed32 uint32 `protobuf:"fixed32,549,opt,name=oneof19_fixed32,json=oneof19Fixed32,proto3,oneof"`
}

type Model1_Oneof19Fixed64 struct {
	Oneof19Fixed64 uint64 `protobuf:"fixed64,550,opt,name=oneof19_fixed64,json=oneof19Fixed64,proto3,oneof"`
}

type Model1_Oneof19Sfixed32 struct {
	Oneof19Sfixed32 int32 `protobuf:"fixed32,551,opt,name=oneof19_sfixed32,json=oneof19Sfixed32,proto3,oneof"`
}

type Model1_Oneof19Sfixed64 struct {
	Oneof19Sfixed64 int64 `protobuf:"fixed64,552,opt,name=oneof19_sfixed64,json=oneof19Sfixed64,proto3,oneof"`
}

type Model1_Oneof19Bool struct {
	Oneof19Bool bool `protobuf:"varint,553,opt,name=oneof19_bool,json=oneof19Bool,proto3,oneof"`
}

type Model1_Oneof19String struct {
	Oneof19String string `protobuf:"bytes,554,opt,name=oneof19_string,json=oneof19String,proto3,oneof"`
}

type Model1_Oneof19Bytes struct {
	Oneof19Bytes []byte `protobuf:"bytes,555,opt,name=oneof19_bytes,json=oneof19Bytes,proto3,oneof"`
}

type Model1_Oneof19EmbedMessage struct {
	Oneof19EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,556,opt,name=oneof19_embed_message,json=oneof19EmbedMessage,proto3,oneof"`
}

type Model1_Oneof19StandMessage struct {
	Oneof19StandMessage *StandMessage1 `protobuf:"bytes,557,opt,name=oneof19_stand_message,json=oneof19StandMessage,proto3,oneof"`
}

type Model1_Oneof19ExternalMessage struct {
	Oneof19ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,558,opt,name=oneof19_external_message,json=oneof19ExternalMessage,proto3,oneof"`
}

type Model1_Oneof19EmbedEnum struct {
	Oneof19EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,559,opt,name=oneof19_embed_enum,json=oneof19EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof19StandEnum struct {
	Oneof19StandEnum StandEnum1 `protobuf:"varint,560,opt,name=oneof19_stand_enum,json=oneof19StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof19ExternalEnum struct {
	Oneof19ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,561,opt,name=oneof19_external_enum,json=oneof19ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof19Double) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Float) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Int32) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Int64) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Uint32) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Uint64) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Sint32) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Sint64) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Fixed32) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Fixed64) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Sfixed32) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Sfixed64) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Bool) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19String) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19Bytes) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19EmbedMessage) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19StandMessage) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19ExternalMessage) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19EmbedEnum) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19StandEnum) isModel1_Oneof_Type19() {}

func (*Model1_Oneof19ExternalEnum) isModel1_Oneof_Type19() {}

type isModel1_Oneof_Type20 interface {
	isModel1_Oneof_Type20()
}

type Model1_Oneof20Double struct {
	Oneof20Double float64 `protobuf:"fixed64,571,opt,name=oneof20_double,json=oneof20Double,proto3,oneof"`
}

type Model1_Oneof20Float struct {
	Oneof20Float float32 `protobuf:"fixed32,572,opt,name=oneof20_float,json=oneof20Float,proto3,oneof"`
}

type Model1_Oneof20Int32 struct {
	Oneof20Int32 int32 `protobuf:"varint,573,opt,name=oneof20_int32,json=oneof20Int32,proto3,oneof"`
}

type Model1_Oneof20Int64 struct {
	Oneof20Int64 int64 `protobuf:"varint,574,opt,name=oneof20_int64,json=oneof20Int64,proto3,oneof"`
}

type Model1_Oneof20Uint32 struct {
	Oneof20Uint32 uint32 `protobuf:"varint,575,opt,name=oneof20_uint32,json=oneof20Uint32,proto3,oneof"`
}

type Model1_Oneof20Uint64 struct {
	Oneof20Uint64 uint64 `protobuf:"varint,576,opt,name=oneof20_uint64,json=oneof20Uint64,proto3,oneof"`
}

type Model1_Oneof20Sint32 struct {
	Oneof20Sint32 int32 `protobuf:"zigzag32,577,opt,name=oneof20_sint32,json=oneof20Sint32,proto3,oneof"`
}

type Model1_Oneof20Sint64 struct {
	Oneof20Sint64 int64 `protobuf:"zigzag64,578,opt,name=oneof20_sint64,json=oneof20Sint64,proto3,oneof"`
}

type Model1_Oneof20Fixed32 struct {
	Oneof20Fixed32 uint32 `protobuf:"fixed32,579,opt,name=oneof20_fixed32,json=oneof20Fixed32,proto3,oneof"`
}

type Model1_Oneof20Fixed64 struct {
	Oneof20Fixed64 uint64 `protobuf:"fixed64,580,opt,name=oneof20_fixed64,json=oneof20Fixed64,proto3,oneof"`
}

type Model1_Oneof20Sfixed32 struct {
	Oneof20Sfixed32 int32 `protobuf:"fixed32,581,opt,name=oneof20_sfixed32,json=oneof20Sfixed32,proto3,oneof"`
}

type Model1_Oneof20Sfixed64 struct {
	Oneof20Sfixed64 int64 `protobuf:"fixed64,582,opt,name=oneof20_sfixed64,json=oneof20Sfixed64,proto3,oneof"`
}

type Model1_Oneof20Bool struct {
	Oneof20Bool bool `protobuf:"varint,583,opt,name=oneof20_bool,json=oneof20Bool,proto3,oneof"`
}

type Model1_Oneof20String struct {
	Oneof20String string `protobuf:"bytes,584,opt,name=oneof20_string,json=oneof20String,proto3,oneof"`
}

type Model1_Oneof20Bytes struct {
	Oneof20Bytes []byte `protobuf:"bytes,585,opt,name=oneof20_bytes,json=oneof20Bytes,proto3,oneof"`
}

type Model1_Oneof20EmbedMessage struct {
	Oneof20EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,586,opt,name=oneof20_embed_message,json=oneof20EmbedMessage,proto3,oneof"`
}

type Model1_Oneof20StandMessage struct {
	Oneof20StandMessage *StandMessage1 `protobuf:"bytes,587,opt,name=oneof20_stand_message,json=oneof20StandMessage,proto3,oneof"`
}

type Model1_Oneof20ExternalMessage struct {
	Oneof20ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,588,opt,name=oneof20_external_message,json=oneof20ExternalMessage,proto3,oneof"`
}

type Model1_Oneof20EmbedEnum struct {
	Oneof20EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,589,opt,name=oneof20_embed_enum,json=oneof20EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof20StandEnum struct {
	Oneof20StandEnum StandEnum1 `protobuf:"varint,590,opt,name=oneof20_stand_enum,json=oneof20StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof20ExternalEnum struct {
	Oneof20ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,591,opt,name=oneof20_external_enum,json=oneof20ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof20Double) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Float) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Int32) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Int64) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Uint32) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Uint64) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Sint32) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Sint64) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Fixed32) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Fixed64) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Sfixed32) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Sfixed64) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Bool) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20String) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20Bytes) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20EmbedMessage) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20StandMessage) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20ExternalMessage) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20EmbedEnum) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20StandEnum) isModel1_Oneof_Type20() {}

func (*Model1_Oneof20ExternalEnum) isModel1_Oneof_Type20() {}

type isModel1_Oneof_Type21 interface {
	isModel1_Oneof_Type21()
}

type Model1_Oneof21Double struct {
	Oneof21Double float64 `protobuf:"fixed64,601,opt,name=oneof21_double,json=oneof21Double,proto3,oneof"`
}

type Model1_Oneof21Float struct {
	Oneof21Float float32 `protobuf:"fixed32,602,opt,name=oneof21_float,json=oneof21Float,proto3,oneof"`
}

type Model1_Oneof21Int32 struct {
	Oneof21Int32 int32 `protobuf:"varint,603,opt,name=oneof21_int32,json=oneof21Int32,proto3,oneof"`
}

type Model1_Oneof21Int64 struct {
	Oneof21Int64 int64 `protobuf:"varint,604,opt,name=oneof21_int64,json=oneof21Int64,proto3,oneof"`
}

type Model1_Oneof21Uint32 struct {
	Oneof21Uint32 uint32 `protobuf:"varint,605,opt,name=oneof21_uint32,json=oneof21Uint32,proto3,oneof"`
}

type Model1_Oneof21Uint64 struct {
	Oneof21Uint64 uint64 `protobuf:"varint,606,opt,name=oneof21_uint64,json=oneof21Uint64,proto3,oneof"`
}

type Model1_Oneof21Sint32 struct {
	Oneof21Sint32 int32 `protobuf:"zigzag32,607,opt,name=oneof21_sint32,json=oneof21Sint32,proto3,oneof"`
}

type Model1_Oneof21Sint64 struct {
	Oneof21Sint64 int64 `protobuf:"zigzag64,608,opt,name=oneof21_sint64,json=oneof21Sint64,proto3,oneof"`
}

type Model1_Oneof21Fixed32 struct {
	Oneof21Fixed32 uint32 `protobuf:"fixed32,609,opt,name=oneof21_fixed32,json=oneof21Fixed32,proto3,oneof"`
}

type Model1_Oneof21Fixed64 struct {
	Oneof21Fixed64 uint64 `protobuf:"fixed64,610,opt,name=oneof21_fixed64,json=oneof21Fixed64,proto3,oneof"`
}

type Model1_Oneof21Sfixed32 struct {
	Oneof21Sfixed32 int32 `protobuf:"fixed32,611,opt,name=oneof21_sfixed32,json=oneof21Sfixed32,proto3,oneof"`
}

type Model1_Oneof21Sfixed64 struct {
	Oneof21Sfixed64 int64 `protobuf:"fixed64,612,opt,name=oneof21_sfixed64,json=oneof21Sfixed64,proto3,oneof"`
}

type Model1_Oneof21Bool struct {
	Oneof21Bool bool `protobuf:"varint,613,opt,name=oneof21_bool,json=oneof21Bool,proto3,oneof"`
}

type Model1_Oneof21String struct {
	Oneof21String string `protobuf:"bytes,614,opt,name=oneof21_string,json=oneof21String,proto3,oneof"`
}

type Model1_Oneof21Bytes struct {
	Oneof21Bytes []byte `protobuf:"bytes,615,opt,name=oneof21_bytes,json=oneof21Bytes,proto3,oneof"`
}

type Model1_Oneof21EmbedMessage struct {
	Oneof21EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,616,opt,name=oneof21_embed_message,json=oneof21EmbedMessage,proto3,oneof"`
}

type Model1_Oneof21StandMessage struct {
	Oneof21StandMessage *StandMessage1 `protobuf:"bytes,617,opt,name=oneof21_stand_message,json=oneof21StandMessage,proto3,oneof"`
}

type Model1_Oneof21ExternalMessage struct {
	Oneof21ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,618,opt,name=oneof21_external_message,json=oneof21ExternalMessage,proto3,oneof"`
}

type Model1_Oneof21EmbedEnum struct {
	Oneof21EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,619,opt,name=oneof21_embed_enum,json=oneof21EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof21StandEnum struct {
	Oneof21StandEnum StandEnum1 `protobuf:"varint,620,opt,name=oneof21_stand_enum,json=oneof21StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof21ExternalEnum struct {
	Oneof21ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,621,opt,name=oneof21_external_enum,json=oneof21ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof21Double) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Float) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Int32) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Int64) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Uint32) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Uint64) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Sint32) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Sint64) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Fixed32) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Fixed64) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Sfixed32) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Sfixed64) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Bool) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21String) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21Bytes) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21EmbedMessage) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21StandMessage) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21ExternalMessage) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21EmbedEnum) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21StandEnum) isModel1_Oneof_Type21() {}

func (*Model1_Oneof21ExternalEnum) isModel1_Oneof_Type21() {}

type isModel1_Oneof_Type22Null interface {
	isModel1_Oneof_Type22Null()
}

type Model1_Oneof22Double struct {
	Oneof22Double float64 `protobuf:"fixed64,631,opt,name=oneof22_double,json=oneof22Double,proto3,oneof"`
}

type Model1_Oneof22Float struct {
	Oneof22Float float32 `protobuf:"fixed32,632,opt,name=oneof22_float,json=oneof22Float,proto3,oneof"`
}

type Model1_Oneof22Int32 struct {
	Oneof22Int32 int32 `protobuf:"varint,633,opt,name=oneof22_int32,json=oneof22Int32,proto3,oneof"`
}

type Model1_Oneof22Int64 struct {
	Oneof22Int64 int64 `protobuf:"varint,634,opt,name=oneof22_int64,json=oneof22Int64,proto3,oneof"`
}

type Model1_Oneof22Uint32 struct {
	Oneof22Uint32 uint32 `protobuf:"varint,635,opt,name=oneof22_uint32,json=oneof22Uint32,proto3,oneof"`
}

type Model1_Oneof22Uint64 struct {
	Oneof22Uint64 uint64 `protobuf:"varint,636,opt,name=oneof22_uint64,json=oneof22Uint64,proto3,oneof"`
}

type Model1_Oneof22Sint32 struct {
	Oneof22Sint32 int32 `protobuf:"zigzag32,637,opt,name=oneof22_sint32,json=oneof22Sint32,proto3,oneof"`
}

type Model1_Oneof22Sint64 struct {
	Oneof22Sint64 int64 `protobuf:"zigzag64,638,opt,name=oneof22_sint64,json=oneof22Sint64,proto3,oneof"`
}

type Model1_Oneof22Fixed32 struct {
	Oneof22Fixed32 uint32 `protobuf:"fixed32,639,opt,name=oneof22_fixed32,json=oneof22Fixed32,proto3,oneof"`
}

type Model1_Oneof22Fixed64 struct {
	Oneof22Fixed64 uint64 `protobuf:"fixed64,640,opt,name=oneof22_fixed64,json=oneof22Fixed64,proto3,oneof"`
}

type Model1_Oneof22Sfixed32 struct {
	Oneof22Sfixed32 int32 `protobuf:"fixed32,641,opt,name=oneof22_sfixed32,json=oneof22Sfixed32,proto3,oneof"`
}

type Model1_Oneof22Sfixed64 struct {
	Oneof22Sfixed64 int64 `protobuf:"fixed64,642,opt,name=oneof22_sfixed64,json=oneof22Sfixed64,proto3,oneof"`
}

type Model1_Oneof22Bool struct {
	Oneof22Bool bool `protobuf:"varint,643,opt,name=oneof22_bool,json=oneof22Bool,proto3,oneof"`
}

type Model1_Oneof22String struct {
	Oneof22String string `protobuf:"bytes,644,opt,name=oneof22_string,json=oneof22String,proto3,oneof"`
}

type Model1_Oneof22Bytes struct {
	Oneof22Bytes []byte `protobuf:"bytes,645,opt,name=oneof22_bytes,json=oneof22Bytes,proto3,oneof"`
}

type Model1_Oneof22EmbedMessage struct {
	Oneof22EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,646,opt,name=oneof22_embed_message,json=oneof22EmbedMessage,proto3,oneof"`
}

type Model1_Oneof22StandMessage struct {
	Oneof22StandMessage *StandMessage1 `protobuf:"bytes,647,opt,name=oneof22_stand_message,json=oneof22StandMessage,proto3,oneof"`
}

type Model1_Oneof22ExternalMessage struct {
	Oneof22ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,648,opt,name=oneof22_external_message,json=oneof22ExternalMessage,proto3,oneof"`
}

type Model1_Oneof22EmbedEnum struct {
	Oneof22EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,649,opt,name=oneof22_embed_enum,json=oneof22EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof22StandEnum struct {
	Oneof22StandEnum StandEnum1 `protobuf:"varint,650,opt,name=oneof22_stand_enum,json=oneof22StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof22ExternalEnum struct {
	Oneof22ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,651,opt,name=oneof22_external_enum,json=oneof22ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof22Double) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Float) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Int32) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Int64) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Uint32) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Uint64) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Sint32) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Sint64) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Fixed32) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Fixed64) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Sfixed32) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Sfixed64) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Bool) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22String) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22Bytes) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22EmbedMessage) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22StandMessage) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22ExternalMessage) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22EmbedEnum) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22StandEnum) isModel1_Oneof_Type22Null() {}

func (*Model1_Oneof22ExternalEnum) isModel1_Oneof_Type22Null() {}

type isModel1_Oneof_Type23Null interface {
	isModel1_Oneof_Type23Null()
}

type Model1_Oneof23Double struct {
	Oneof23Double float64 `protobuf:"fixed64,661,opt,name=oneof23_double,json=oneof23Double,proto3,oneof"`
}

type Model1_Oneof23Float struct {
	Oneof23Float float32 `protobuf:"fixed32,662,opt,name=oneof23_float,json=oneof23Float,proto3,oneof"`
}

type Model1_Oneof23Int32 struct {
	Oneof23Int32 int32 `protobuf:"varint,663,opt,name=oneof23_int32,json=oneof23Int32,proto3,oneof"`
}

type Model1_Oneof23Int64 struct {
	Oneof23Int64 int64 `protobuf:"varint,664,opt,name=oneof23_int64,json=oneof23Int64,proto3,oneof"`
}

type Model1_Oneof23Uint32 struct {
	Oneof23Uint32 uint32 `protobuf:"varint,665,opt,name=oneof23_uint32,json=oneof23Uint32,proto3,oneof"`
}

type Model1_Oneof23Uint64 struct {
	Oneof23Uint64 uint64 `protobuf:"varint,666,opt,name=oneof23_uint64,json=oneof23Uint64,proto3,oneof"`
}

type Model1_Oneof23Sint32 struct {
	Oneof23Sint32 int32 `protobuf:"zigzag32,667,opt,name=oneof23_sint32,json=oneof23Sint32,proto3,oneof"`
}

type Model1_Oneof23Sint64 struct {
	Oneof23Sint64 int64 `protobuf:"zigzag64,668,opt,name=oneof23_sint64,json=oneof23Sint64,proto3,oneof"`
}

type Model1_Oneof23Fixed32 struct {
	Oneof23Fixed32 uint32 `protobuf:"fixed32,669,opt,name=oneof23_fixed32,json=oneof23Fixed32,proto3,oneof"`
}

type Model1_Oneof23Fixed64 struct {
	Oneof23Fixed64 uint64 `protobuf:"fixed64,670,opt,name=oneof23_fixed64,json=oneof23Fixed64,proto3,oneof"`
}

type Model1_Oneof23Sfixed32 struct {
	Oneof23Sfixed32 int32 `protobuf:"fixed32,671,opt,name=oneof23_sfixed32,json=oneof23Sfixed32,proto3,oneof"`
}

type Model1_Oneof23Sfixed64 struct {
	Oneof23Sfixed64 int64 `protobuf:"fixed64,672,opt,name=oneof23_sfixed64,json=oneof23Sfixed64,proto3,oneof"`
}

type Model1_Oneof23Bool struct {
	Oneof23Bool bool `protobuf:"varint,673,opt,name=oneof23_bool,json=oneof23Bool,proto3,oneof"`
}

type Model1_Oneof23String struct {
	Oneof23String string `protobuf:"bytes,674,opt,name=oneof23_string,json=oneof23String,proto3,oneof"`
}

type Model1_Oneof23Bytes struct {
	Oneof23Bytes []byte `protobuf:"bytes,675,opt,name=oneof23_bytes,json=oneof23Bytes,proto3,oneof"`
}

type Model1_Oneof23EmbedMessage struct {
	Oneof23EmbedMessage *Model1_EmbedMessage1 `protobuf:"bytes,676,opt,name=oneof23_embed_message,json=oneof23EmbedMessage,proto3,oneof"`
}

type Model1_Oneof23StandMessage struct {
	Oneof23StandMessage *StandMessage1 `protobuf:"bytes,677,opt,name=oneof23_stand_message,json=oneof23StandMessage,proto3,oneof"`
}

type Model1_Oneof23ExternalMessage struct {
	Oneof23ExternalMessage *gojsonexternal.ExternalMessage1 `protobuf:"bytes,678,opt,name=oneof23_external_message,json=oneof23ExternalMessage,proto3,oneof"`
}

type Model1_Oneof23EmbedEnum struct {
	Oneof23EmbedEnum Model1_EmbedEnum1 `protobuf:"varint,679,opt,name=oneof23_embed_enum,json=oneof23EmbedEnum,proto3,enum=gojsontest.Model1_EmbedEnum1,oneof"`
}

type Model1_Oneof23StandEnum struct {
	Oneof23StandEnum StandEnum1 `protobuf:"varint,680,opt,name=oneof23_stand_enum,json=oneof23StandEnum,proto3,enum=gojsontest.StandEnum1,oneof"`
}

type Model1_Oneof23ExternalEnum struct {
	Oneof23ExternalEnum gojsonexternal.ExternalEnum1 `protobuf:"varint,681,opt,name=oneof23_external_enum,json=oneof23ExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1,oneof"`
}

func (*Model1_Oneof23Double) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Float) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Int32) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Int64) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Uint32) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Uint64) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Sint32) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Sint64) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Fixed32) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Fixed64) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Sfixed32) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Sfixed64) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Bool) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23String) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23Bytes) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23EmbedMessage) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23StandMessage) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23ExternalMessage) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23EmbedEnum) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23StandEnum) isModel1_Oneof_Type23Null() {}

func (*Model1_Oneof23ExternalEnum) isModel1_Oneof_Type23Null() {}

type Model2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeDouble1              float64                                     `protobuf:"fixed64,1201,opt,name=type_double1,json=typeDouble1,proto3" json:"type_double1,omitempty"`
	TypeDouble2              float64                                     `protobuf:"fixed64,1202,opt,name=type_double2,json=typeDouble2,proto3" json:"type_double2,omitempty"`
	TypeDouble3              float64                                     `protobuf:"fixed64,1203,opt,name=type_double3,json=typeDouble3,proto3" json:"type_double3,omitempty"`
	TypeDouble4              float64                                     `protobuf:"fixed64,1204,opt,name=type_double4,json=typeDouble4,proto3" json:"type_double4,omitempty"`
	TypeDouble5              float64                                     `protobuf:"fixed64,1205,opt,name=type_double5,json=typeDouble5,proto3" json:"type_double5,omitempty"`
	TypeFloat                float32                                     `protobuf:"fixed32,1211,opt,name=type_float,json=typeFloat,proto3" json:"type_float,omitempty"`
	TypeInt32                int32                                       `protobuf:"varint,1212,opt,name=type_int32,json=typeInt32,proto3" json:"type_int32,omitempty"`
	TypeInt64                int64                                       `protobuf:"varint,1213,opt,name=type_int64,json=typeInt64,proto3" json:"type_int64,omitempty"`
	TypeUint32               uint32                                      `protobuf:"varint,1214,opt,name=type_uint32,json=typeUint32,proto3" json:"type_uint32,omitempty"`
	TypeUint64               uint64                                      `protobuf:"varint,1215,opt,name=type_uint64,json=typeUint64,proto3" json:"type_uint64,omitempty"`
	TypeSint32               int32                                       `protobuf:"zigzag32,1216,opt,name=type_sint32,json=typeSint32,proto3" json:"type_sint32,omitempty"`
	TypeSint64               int64                                       `protobuf:"zigzag64,1217,opt,name=type_sint64,json=typeSint64,proto3" json:"type_sint64,omitempty"`
	TypeFixed32              uint32                                      `protobuf:"fixed32,1218,opt,name=type_fixed32,json=typeFixed32,proto3" json:"type_fixed32,omitempty"`
	TypeFixed64              uint64                                      `protobuf:"fixed64,1219,opt,name=type_fixed64,json=typeFixed64,proto3" json:"type_fixed64,omitempty"`
	TypeSfixed32             int32                                       `protobuf:"fixed32,1220,opt,name=type_sfixed32,json=typeSfixed32,proto3" json:"type_sfixed32,omitempty"`
	TypeSfixed64             int64                                       `protobuf:"fixed64,1221,opt,name=type_sfixed64,json=typeSfixed64,proto3" json:"type_sfixed64,omitempty"`
	TypeBool1                bool                                        `protobuf:"varint,1222,opt,name=type_bool1,json=typeBool1,proto3" json:"type_bool1,omitempty"`
	TypeBool2                bool                                        `protobuf:"varint,1223,opt,name=type_bool2,json=typeBool2,proto3" json:"type_bool2,omitempty"`
	TypeString1              string                                      `protobuf:"bytes,1224,opt,name=type_string1,json=typeString1,proto3" json:"type_string1,omitempty"`
	TypeString2              string                                      `protobuf:"bytes,1225,opt,name=type_string2,json=typeString2,proto3" json:"type_string2,omitempty"`
	TypeString3              string                                      `protobuf:"bytes,1226,opt,name=type_string3,json=typeString3,proto3" json:"type_string3,omitempty"`
	TypeString4              string                                      `protobuf:"bytes,1227,opt,name=type_string4,json=typeString4,proto3" json:"type_string4,omitempty"`
	TypeString5              string                                      `protobuf:"bytes,1228,opt,name=type_string5,json=typeString5,proto3" json:"type_string5,omitempty"`
	TypeBytes                []byte                                      `protobuf:"bytes,1229,opt,name=type_bytes,json=typeBytes,proto3" json:"type_bytes,omitempty"`
	TypeEmbedMessage         *Model2_EmbedMessage1                       `protobuf:"bytes,1241,opt,name=type_embed_message,json=typeEmbedMessage,proto3" json:"type_embed_message,omitempty"`
	TypeStandMessage         *StandMessage1                              `protobuf:"bytes,1243,opt,name=type_stand_message,json=typeStandMessage,proto3" json:"type_stand_message,omitempty"`
	TypeEmbedEnum            Model2_EmbedEnum1                           `protobuf:"varint,1244,opt,name=type_embed_enum,json=typeEmbedEnum,proto3,enum=gojsontest.Model2_EmbedEnum1" json:"type_embed_enum,omitempty"`
	TypeStandEnum            StandEnum1                                  `protobuf:"varint,1245,opt,name=type_stand_enum,json=typeStandEnum,proto3,enum=gojsontest.StandEnum1" json:"type_stand_enum,omitempty"`
	TypeExternalEnum         gojsonexternal.ExternalEnum1                `protobuf:"varint,1246,opt,name=type_external_enum,json=typeExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1" json:"type_external_enum,omitempty"`
	TypeExternalMessage      *gojsonexternal.ExternalMessage1            `protobuf:"bytes,1247,opt,name=type_external_message,json=typeExternalMessage,proto3" json:"type_external_message,omitempty"`
	ArrayDouble              []float64                                   `protobuf:"fixed64,1301,rep,packed,name=array_double,json=arrayDouble,proto3" json:"array_double,omitempty"`
	ArrayFloat               []float32                                   `protobuf:"fixed32,1302,rep,packed,name=array_float,json=arrayFloat,proto3" json:"array_float,omitempty"`
	ArrayInt32               []int32                                     `protobuf:"varint,1303,rep,packed,name=array_int32,json=arrayInt32,proto3" json:"array_int32,omitempty"`
	ArrayInt64               []int64                                     `protobuf:"varint,1304,rep,packed,name=array_int64,json=arrayInt64,proto3" json:"array_int64,omitempty"`
	ArrayUint32              []uint32                                    `protobuf:"varint,1305,rep,packed,name=array_uint32,json=arrayUint32,proto3" json:"array_uint32,omitempty"`
	ArrayUint64              []uint64                                    `protobuf:"varint,1306,rep,packed,name=array_uint64,json=arrayUint64,proto3" json:"array_uint64,omitempty"`
	ArraySint32              []int32                                     `protobuf:"zigzag32,1307,rep,packed,name=array_sint32,json=arraySint32,proto3" json:"array_sint32,omitempty"`
	ArraySint64              []int64                                     `protobuf:"zigzag64,1308,rep,packed,name=array_sint64,json=arraySint64,proto3" json:"array_sint64,omitempty"`
	ArrayFixed32             []uint32                                    `protobuf:"fixed32,1309,rep,packed,name=array_fixed32,json=arrayFixed32,proto3" json:"array_fixed32,omitempty"`
	ArrayFixed64             []uint64                                    `protobuf:"fixed64,1310,rep,packed,name=array_fixed64,json=arrayFixed64,proto3" json:"array_fixed64,omitempty"`
	ArraySfixed32            []int32                                     `protobuf:"fixed32,1311,rep,packed,name=array_sfixed32,json=arraySfixed32,proto3" json:"array_sfixed32,omitempty"`
	ArraySfixed64            []int64                                     `protobuf:"fixed64,1312,rep,packed,name=array_sfixed64,json=arraySfixed64,proto3" json:"array_sfixed64,omitempty"`
	ArrayBool                []bool                                      `protobuf:"varint,1313,rep,packed,name=array_bool,json=arrayBool,proto3" json:"array_bool,omitempty"`
	ArrayString              []string                                    `protobuf:"bytes,1314,rep,name=array_string,json=arrayString,proto3" json:"array_string,omitempty"`
	ArrayBytes               [][]byte                                    `protobuf:"bytes,1315,rep,name=array_bytes,json=arrayBytes,proto3" json:"array_bytes,omitempty"`
	ArrayEmbedMessage        []*Model2_EmbedMessage1                     `protobuf:"bytes,1316,rep,name=array_embed_message,json=arrayEmbedMessage,proto3" json:"array_embed_message,omitempty"`
	ArrayStandMessage        []*StandMessage1                            `protobuf:"bytes,1317,rep,name=array_stand_message,json=arrayStandMessage,proto3" json:"array_stand_message,omitempty"`
	ArrayExternalMessage     []*gojsonexternal.ExternalMessage1          `protobuf:"bytes,1318,rep,name=array_external_message,json=arrayExternalMessage,proto3" json:"array_external_message,omitempty"`
	ArrayEmbedEnum           []Model2_EmbedEnum1                         `protobuf:"varint,1319,rep,packed,name=array_embed_enum,json=arrayEmbedEnum,proto3,enum=gojsontest.Model2_EmbedEnum1" json:"array_embed_enum,omitempty"`
	ArrayStandEnum           []StandEnum1                                `protobuf:"varint,1320,rep,packed,name=array_stand_enum,json=arrayStandEnum,proto3,enum=gojsontest.StandEnum1" json:"array_stand_enum,omitempty"`
	ArrayExternalEnum        []gojsonexternal.ExternalEnum1              `protobuf:"varint,1321,rep,packed,name=array_external_enum,json=arrayExternalEnum,proto3,enum=gojsonexternal.ExternalEnum1" json:"array_external_enum,omitempty"`
	MapInt32Double           map[int32]float64                           `protobuf:"bytes,1402,rep,name=map_int32_double,json=mapInt32Double,proto3" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Float            map[int32]float32                           `protobuf:"bytes,1403,rep,name=map_int32_float,json=mapInt32Float,proto3" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Int32            map[int32]int32                             `protobuf:"bytes,1404,rep,name=map_int32_int32,json=mapInt32Int32,proto3" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Int64            map[int32]int64                             `protobuf:"bytes,1405,rep,name=map_int32_int64,json=mapInt32Int64,proto3" json:"map_int32_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint32           map[int32]uint32                            `protobuf:"bytes,1406,rep,name=map_int32_uint32,json=mapInt32Uint32,proto3" json:"map_int32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint64           map[int32]uint64                            `protobuf:"bytes,1407,rep,name=map_int32_uint64,json=mapInt32Uint64,proto3" json:"map_int32_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Sint32           map[int32]int32                             `protobuf:"bytes,1408,rep,name=map_int32_sint32,json=mapInt32Sint32,proto3" json:"map_int32_sint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapInt32Sint64           map[int32]int64                             `protobuf:"bytes,1409,rep,name=map_int32_sint64,json=mapInt32Sint64,proto3" json:"map_int32_sint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapInt32Fixed32          map[int32]uint32                            `protobuf:"bytes,1410,rep,name=map_int32_fixed32,json=mapInt32Fixed32,proto3" json:"map_int32_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Fixed64          map[int32]uint64                            `protobuf:"bytes,1411,rep,name=map_int32_fixed64,json=mapInt32Fixed64,proto3" json:"map_int32_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Sfixed32         map[int32]int32                             `protobuf:"bytes,1412,rep,name=map_int32_sfixed32,json=mapInt32Sfixed32,proto3" json:"map_int32_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Sfixed64         map[int32]int64                             `protobuf:"bytes,1413,rep,name=map_int32_sfixed64,json=mapInt32Sfixed64,proto3" json:"map_int32_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Bool             map[int32]bool                              `protobuf:"bytes,1414,rep,name=map_int32_bool,json=mapInt32Bool,proto3" json:"map_int32_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32String           map[int32]string                            `protobuf:"bytes,1415,rep,name=map_int32_string,json=mapInt32String,proto3" json:"map_int32_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Bytes            map[int32][]byte                            `protobuf:"bytes,1416,rep,name=map_int32_bytes,json=mapInt32Bytes,proto3" json:"map_int32_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32EmbedMessage     map[int32]*Model2_EmbedMessage1             `protobuf:"bytes,1417,rep,name=map_int32_embed_message,json=mapInt32EmbedMessage,proto3" json:"map_int32_embed_message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32StandMessage     map[int32]*StandMessage1                    `protobuf:"bytes,1418,rep,name=map_int32_stand_message,json=mapInt32StandMessage,proto3" json:"map_int32_stand_message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32EmbedEnum        map[int32]Model2_EmbedEnum1                 `protobuf:"bytes,1419,rep,name=map_int32_embed_enum,json=mapInt32EmbedEnum,proto3" json:"map_int32_embed_enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.Model2_EmbedEnum1"`
	MapInt32StandEnum        map[int32]StandEnum1                        `protobuf:"bytes,1420,rep,name=map_int32_stand_enum,json=mapInt32StandEnum,proto3" json:"map_int32_stand_enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.StandEnum1"`
	MapInt64Int32            map[int64]int32                             `protobuf:"bytes,1451,rep,name=map_int64_int32,json=mapInt64Int32,proto3" json:"map_int64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Int32           map[uint32]int32                            `protobuf:"bytes,1452,rep,name=map_uint32_int32,json=mapUint32Int32,proto3" json:"map_uint32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Int32           map[uint64]int32                            `protobuf:"bytes,1453,rep,name=map_uint64_int32,json=mapUint64Int32,proto3" json:"map_uint64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint32Int32           map[int32]int32                             `protobuf:"bytes,1454,rep,name=map_sint32_int32,json=mapSint32Int32,proto3" json:"map_sint32_int32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint64Int32           map[int64]int32                             `protobuf:"bytes,1455,rep,name=map_sint64_int32,json=mapSint64Int32,proto3" json:"map_sint64_int32,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed32Int32          map[uint32]int32                            `protobuf:"bytes,1456,rep,name=map_fixed32_int32,json=mapFixed32Int32,proto3" json:"map_fixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed64Int32          map[uint64]int32                            `protobuf:"bytes,1457,rep,name=map_fixed64_int32,json=mapFixed64Int32,proto3" json:"map_fixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed32Int32         map[int32]int32                             `protobuf:"bytes,1458,rep,name=map_sfixed32_int32,json=mapSfixed32Int32,proto3" json:"map_sfixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed64Int32         map[int64]int32                             `protobuf:"bytes,1459,rep,name=map_sfixed64_int32,json=mapSfixed64Int32,proto3" json:"map_sfixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringInt32           map[string]int32                            `protobuf:"bytes,1460,rep,name=map_string_int32,json=mapStringInt32,proto3" json:"map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringString          map[string]string                           `protobuf:"bytes,1462,rep,name=map_string_string,json=mapStringString,proto3" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringEmbedMessage    map[string]*Model2_EmbedMessage1            `protobuf:"bytes,1463,rep,name=map_string_embed_message,json=mapStringEmbedMessage,proto3" json:"map_string_embed_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringStandMessage    map[string]*StandMessage1                   `protobuf:"bytes,1464,rep,name=map_string_stand_message,json=mapStringStandMessage,proto3" json:"map_string_stand_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringExternalMessage map[string]*gojsonexternal.ExternalMessage1 `protobuf:"bytes,1465,rep,name=map_string_external_message,json=mapStringExternalMessage,proto3" json:"map_string_external_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringEmbedEnum       map[string]Model2_EmbedEnum1                `protobuf:"bytes,1466,rep,name=map_string_embed_enum,json=mapStringEmbedEnum,proto3" json:"map_string_embed_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.Model2_EmbedEnum1"`
	MapStringStandEnum       map[string]StandEnum1                       `protobuf:"bytes,1467,rep,name=map_string_stand_enum,json=mapStringStandEnum,proto3" json:"map_string_stand_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.StandEnum1"`
	MapStringExternalEnum    map[string]gojsonexternal.ExternalEnum1     `protobuf:"bytes,1468,rep,name=map_string_external_enum,json=mapStringExternalEnum,proto3" json:"map_string_external_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsonexternal.ExternalEnum1"`
}

func (x *Model2) Reset() {
	*x = Model2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model2) ProtoMessage() {}

func (x *Model2) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model2.ProtoReflect.Descriptor instead.
func (*Model2) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{3}
}

func (x *Model2) GetTypeDouble1() float64 {
	if x != nil {
		return x.TypeDouble1
	}
	return 0
}

func (x *Model2) GetTypeDouble2() float64 {
	if x != nil {
		return x.TypeDouble2
	}
	return 0
}

func (x *Model2) GetTypeDouble3() float64 {
	if x != nil {
		return x.TypeDouble3
	}
	return 0
}

func (x *Model2) GetTypeDouble4() float64 {
	if x != nil {
		return x.TypeDouble4
	}
	return 0
}

func (x *Model2) GetTypeDouble5() float64 {
	if x != nil {
		return x.TypeDouble5
	}
	return 0
}

func (x *Model2) GetTypeFloat() float32 {
	if x != nil {
		return x.TypeFloat
	}
	return 0
}

func (x *Model2) GetTypeInt32() int32 {
	if x != nil {
		return x.TypeInt32
	}
	return 0
}

func (x *Model2) GetTypeInt64() int64 {
	if x != nil {
		return x.TypeInt64
	}
	return 0
}

func (x *Model2) GetTypeUint32() uint32 {
	if x != nil {
		return x.TypeUint32
	}
	return 0
}

func (x *Model2) GetTypeUint64() uint64 {
	if x != nil {
		return x.TypeUint64
	}
	return 0
}

func (x *Model2) GetTypeSint32() int32 {
	if x != nil {
		return x.TypeSint32
	}
	return 0
}

func (x *Model2) GetTypeSint64() int64 {
	if x != nil {
		return x.TypeSint64
	}
	return 0
}

func (x *Model2) GetTypeFixed32() uint32 {
	if x != nil {
		return x.TypeFixed32
	}
	return 0
}

func (x *Model2) GetTypeFixed64() uint64 {
	if x != nil {
		return x.TypeFixed64
	}
	return 0
}

func (x *Model2) GetTypeSfixed32() int32 {
	if x != nil {
		return x.TypeSfixed32
	}
	return 0
}

func (x *Model2) GetTypeSfixed64() int64 {
	if x != nil {
		return x.TypeSfixed64
	}
	return 0
}

func (x *Model2) GetTypeBool1() bool {
	if x != nil {
		return x.TypeBool1
	}
	return false
}

func (x *Model2) GetTypeBool2() bool {
	if x != nil {
		return x.TypeBool2
	}
	return false
}

func (x *Model2) GetTypeString1() string {
	if x != nil {
		return x.TypeString1
	}
	return ""
}

func (x *Model2) GetTypeString2() string {
	if x != nil {
		return x.TypeString2
	}
	return ""
}

func (x *Model2) GetTypeString3() string {
	if x != nil {
		return x.TypeString3
	}
	return ""
}

func (x *Model2) GetTypeString4() string {
	if x != nil {
		return x.TypeString4
	}
	return ""
}

func (x *Model2) GetTypeString5() string {
	if x != nil {
		return x.TypeString5
	}
	return ""
}

func (x *Model2) GetTypeBytes() []byte {
	if x != nil {
		return x.TypeBytes
	}
	return nil
}

func (x *Model2) GetTypeEmbedMessage() *Model2_EmbedMessage1 {
	if x != nil {
		return x.TypeEmbedMessage
	}
	return nil
}

func (x *Model2) GetTypeStandMessage() *StandMessage1 {
	if x != nil {
		return x.TypeStandMessage
	}
	return nil
}

func (x *Model2) GetTypeEmbedEnum() Model2_EmbedEnum1 {
	if x != nil {
		return x.TypeEmbedEnum
	}
	return Model2_july
}

func (x *Model2) GetTypeStandEnum() StandEnum1 {
	if x != nil {
		return x.TypeStandEnum
	}
	return StandEnum1_January
}

func (x *Model2) GetTypeExternalEnum() gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.TypeExternalEnum
	}
	return gojsonexternal.ExternalEnum1(0)
}

func (x *Model2) GetTypeExternalMessage() *gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.TypeExternalMessage
	}
	return nil
}

func (x *Model2) GetArrayDouble() []float64 {
	if x != nil {
		return x.ArrayDouble
	}
	return nil
}

func (x *Model2) GetArrayFloat() []float32 {
	if x != nil {
		return x.ArrayFloat
	}
	return nil
}

func (x *Model2) GetArrayInt32() []int32 {
	if x != nil {
		return x.ArrayInt32
	}
	return nil
}

func (x *Model2) GetArrayInt64() []int64 {
	if x != nil {
		return x.ArrayInt64
	}
	return nil
}

func (x *Model2) GetArrayUint32() []uint32 {
	if x != nil {
		return x.ArrayUint32
	}
	return nil
}

func (x *Model2) GetArrayUint64() []uint64 {
	if x != nil {
		return x.ArrayUint64
	}
	return nil
}

func (x *Model2) GetArraySint32() []int32 {
	if x != nil {
		return x.ArraySint32
	}
	return nil
}

func (x *Model2) GetArraySint64() []int64 {
	if x != nil {
		return x.ArraySint64
	}
	return nil
}

func (x *Model2) GetArrayFixed32() []uint32 {
	if x != nil {
		return x.ArrayFixed32
	}
	return nil
}

func (x *Model2) GetArrayFixed64() []uint64 {
	if x != nil {
		return x.ArrayFixed64
	}
	return nil
}

func (x *Model2) GetArraySfixed32() []int32 {
	if x != nil {
		return x.ArraySfixed32
	}
	return nil
}

func (x *Model2) GetArraySfixed64() []int64 {
	if x != nil {
		return x.ArraySfixed64
	}
	return nil
}

func (x *Model2) GetArrayBool() []bool {
	if x != nil {
		return x.ArrayBool
	}
	return nil
}

func (x *Model2) GetArrayString() []string {
	if x != nil {
		return x.ArrayString
	}
	return nil
}

func (x *Model2) GetArrayBytes() [][]byte {
	if x != nil {
		return x.ArrayBytes
	}
	return nil
}

func (x *Model2) GetArrayEmbedMessage() []*Model2_EmbedMessage1 {
	if x != nil {
		return x.ArrayEmbedMessage
	}
	return nil
}

func (x *Model2) GetArrayStandMessage() []*StandMessage1 {
	if x != nil {
		return x.ArrayStandMessage
	}
	return nil
}

func (x *Model2) GetArrayExternalMessage() []*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.ArrayExternalMessage
	}
	return nil
}

func (x *Model2) GetArrayEmbedEnum() []Model2_EmbedEnum1 {
	if x != nil {
		return x.ArrayEmbedEnum
	}
	return nil
}

func (x *Model2) GetArrayStandEnum() []StandEnum1 {
	if x != nil {
		return x.ArrayStandEnum
	}
	return nil
}

func (x *Model2) GetArrayExternalEnum() []gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.ArrayExternalEnum
	}
	return nil
}

func (x *Model2) GetMapInt32Double() map[int32]float64 {
	if x != nil {
		return x.MapInt32Double
	}
	return nil
}

func (x *Model2) GetMapInt32Float() map[int32]float32 {
	if x != nil {
		return x.MapInt32Float
	}
	return nil
}

func (x *Model2) GetMapInt32Int32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Int32
	}
	return nil
}

func (x *Model2) GetMapInt32Int64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Int64
	}
	return nil
}

func (x *Model2) GetMapInt32Uint32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Uint32
	}
	return nil
}

func (x *Model2) GetMapInt32Uint64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Uint64
	}
	return nil
}

func (x *Model2) GetMapInt32Sint32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sint32
	}
	return nil
}

func (x *Model2) GetMapInt32Sint64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sint64
	}
	return nil
}

func (x *Model2) GetMapInt32Fixed32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Fixed32
	}
	return nil
}

func (x *Model2) GetMapInt32Fixed64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Fixed64
	}
	return nil
}

func (x *Model2) GetMapInt32Sfixed32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sfixed32
	}
	return nil
}

func (x *Model2) GetMapInt32Sfixed64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sfixed64
	}
	return nil
}

func (x *Model2) GetMapInt32Bool() map[int32]bool {
	if x != nil {
		return x.MapInt32Bool
	}
	return nil
}

func (x *Model2) GetMapInt32String() map[int32]string {
	if x != nil {
		return x.MapInt32String
	}
	return nil
}

func (x *Model2) GetMapInt32Bytes() map[int32][]byte {
	if x != nil {
		return x.MapInt32Bytes
	}
	return nil
}

func (x *Model2) GetMapInt32EmbedMessage() map[int32]*Model2_EmbedMessage1 {
	if x != nil {
		return x.MapInt32EmbedMessage
	}
	return nil
}

func (x *Model2) GetMapInt32StandMessage() map[int32]*StandMessage1 {
	if x != nil {
		return x.MapInt32StandMessage
	}
	return nil
}

func (x *Model2) GetMapInt32EmbedEnum() map[int32]Model2_EmbedEnum1 {
	if x != nil {
		return x.MapInt32EmbedEnum
	}
	return nil
}

func (x *Model2) GetMapInt32StandEnum() map[int32]StandEnum1 {
	if x != nil {
		return x.MapInt32StandEnum
	}
	return nil
}

func (x *Model2) GetMapInt64Int32() map[int64]int32 {
	if x != nil {
		return x.MapInt64Int32
	}
	return nil
}

func (x *Model2) GetMapUint32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapUint32Int32
	}
	return nil
}

func (x *Model2) GetMapUint64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapUint64Int32
	}
	return nil
}

func (x *Model2) GetMapSint32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSint32Int32
	}
	return nil
}

func (x *Model2) GetMapSint64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSint64Int32
	}
	return nil
}

func (x *Model2) GetMapFixed32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapFixed32Int32
	}
	return nil
}

func (x *Model2) GetMapFixed64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapFixed64Int32
	}
	return nil
}

func (x *Model2) GetMapSfixed32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSfixed32Int32
	}
	return nil
}

func (x *Model2) GetMapSfixed64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSfixed64Int32
	}
	return nil
}

func (x *Model2) GetMapStringInt32() map[string]int32 {
	if x != nil {
		return x.MapStringInt32
	}
	return nil
}

func (x *Model2) GetMapStringString() map[string]string {
	if x != nil {
		return x.MapStringString
	}
	return nil
}

func (x *Model2) GetMapStringEmbedMessage() map[string]*Model2_EmbedMessage1 {
	if x != nil {
		return x.MapStringEmbedMessage
	}
	return nil
}

func (x *Model2) GetMapStringStandMessage() map[string]*StandMessage1 {
	if x != nil {
		return x.MapStringStandMessage
	}
	return nil
}

func (x *Model2) GetMapStringExternalMessage() map[string]*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.MapStringExternalMessage
	}
	return nil
}

func (x *Model2) GetMapStringEmbedEnum() map[string]Model2_EmbedEnum1 {
	if x != nil {
		return x.MapStringEmbedEnum
	}
	return nil
}

func (x *Model2) GetMapStringStandEnum() map[string]StandEnum1 {
	if x != nil {
		return x.MapStringStandEnum
	}
	return nil
}

func (x *Model2) GetMapStringExternalEnum() map[string]gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.MapStringExternalEnum
	}
	return nil
}

// Used to benchmark.
type Model3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1  string  `protobuf:"bytes,101,opt,name=t_string1,json=tString1,proto3" json:"t_string1,omitempty"`
	TString2  string  `protobuf:"bytes,102,opt,name=t_string2,json=tString2,proto3" json:"t_string2,omitempty"`
	TString3  string  `protobuf:"bytes,103,opt,name=t_string3,json=tString3,proto3" json:"t_string3,omitempty"`
	TString4  string  `protobuf:"bytes,104,opt,name=t_string4,json=tString4,proto3" json:"t_string4,omitempty"`
	TString5  string  `protobuf:"bytes,105,opt,name=t_string5,json=tString5,proto3" json:"t_string5,omitempty"`
	TString6  string  `protobuf:"bytes,106,opt,name=t_string6,json=tString6,proto3" json:"t_string6,omitempty"`
	TString7  string  `protobuf:"bytes,107,opt,name=t_string7,json=tString7,proto3" json:"t_string7,omitempty"`
	TString8  string  `protobuf:"bytes,108,opt,name=t_string8,json=tString8,proto3" json:"t_string8,omitempty"`
	TString9  string  `protobuf:"bytes,109,opt,name=t_string9,json=tString9,proto3" json:"t_string9,omitempty"`
	TString10 string  `protobuf:"bytes,110,opt,name=t_string10,json=tString10,proto3" json:"t_string10,omitempty"`
	TInt32    int32   `protobuf:"varint,2,opt,name=t_int32,json=tInt32,proto3" json:"t_int32,omitempty"`
	TInt64    int64   `protobuf:"varint,3,opt,name=t_int64,json=tInt64,proto3" json:"t_int64,omitempty"`
	TUint32   uint32  `protobuf:"varint,4,opt,name=t_uint32,json=tUint32,proto3" json:"t_uint32,omitempty"`
	TUint64   uint64  `protobuf:"varint,5,opt,name=t_uint64,json=tUint64,proto3" json:"t_uint64,omitempty"`
	TSint32   int32   `protobuf:"zigzag32,6,opt,name=t_sint32,json=tSint32,proto3" json:"t_sint32,omitempty"`
	TSint64   int64   `protobuf:"zigzag64,7,opt,name=t_sint64,json=tSint64,proto3" json:"t_sint64,omitempty"`
	TSfixed32 int32   `protobuf:"fixed32,8,opt,name=t_sfixed32,json=tSfixed32,proto3" json:"t_sfixed32,omitempty"`
	TSfixed64 int64   `protobuf:"fixed64,9,opt,name=t_sfixed64,json=tSfixed64,proto3" json:"t_sfixed64,omitempty"`
	TFixed32  uint32  `protobuf:"fixed32,10,opt,name=t_fixed32,json=tFixed32,proto3" json:"t_fixed32,omitempty"`
	TFixed64  uint64  `protobuf:"fixed64,11,opt,name=t_fixed64,json=tFixed64,proto3" json:"t_fixed64,omitempty"`
	TFloat    float32 `protobuf:"fixed32,12,opt,name=t_float,json=tFloat,proto3" json:"t_float,omitempty"`
	TDouble   float64 `protobuf:"fixed64,13,opt,name=t_double,json=tDouble,proto3" json:"t_double,omitempty"`
	TBool     bool    `protobuf:"varint,14,opt,name=t_bool,json=tBool,proto3" json:"t_bool,omitempty"`
}

func (x *Model3) Reset() {
	*x = Model3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model3) ProtoMessage() {}

func (x *Model3) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model3.ProtoReflect.Descriptor instead.
func (*Model3) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{4}
}

func (x *Model3) GetTString1() string {
	if x != nil {
		return x.TString1
	}
	return ""
}

func (x *Model3) GetTString2() string {
	if x != nil {
		return x.TString2
	}
	return ""
}

func (x *Model3) GetTString3() string {
	if x != nil {
		return x.TString3
	}
	return ""
}

func (x *Model3) GetTString4() string {
	if x != nil {
		return x.TString4
	}
	return ""
}

func (x *Model3) GetTString5() string {
	if x != nil {
		return x.TString5
	}
	return ""
}

func (x *Model3) GetTString6() string {
	if x != nil {
		return x.TString6
	}
	return ""
}

func (x *Model3) GetTString7() string {
	if x != nil {
		return x.TString7
	}
	return ""
}

func (x *Model3) GetTString8() string {
	if x != nil {
		return x.TString8
	}
	return ""
}

func (x *Model3) GetTString9() string {
	if x != nil {
		return x.TString9
	}
	return ""
}

func (x *Model3) GetTString10() string {
	if x != nil {
		return x.TString10
	}
	return ""
}

func (x *Model3) GetTInt32() int32 {
	if x != nil {
		return x.TInt32
	}
	return 0
}

func (x *Model3) GetTInt64() int64 {
	if x != nil {
		return x.TInt64
	}
	return 0
}

func (x *Model3) GetTUint32() uint32 {
	if x != nil {
		return x.TUint32
	}
	return 0
}

func (x *Model3) GetTUint64() uint64 {
	if x != nil {
		return x.TUint64
	}
	return 0
}

func (x *Model3) GetTSint32() int32 {
	if x != nil {
		return x.TSint32
	}
	return 0
}

func (x *Model3) GetTSint64() int64 {
	if x != nil {
		return x.TSint64
	}
	return 0
}

func (x *Model3) GetTSfixed32() int32 {
	if x != nil {
		return x.TSfixed32
	}
	return 0
}

func (x *Model3) GetTSfixed64() int64 {
	if x != nil {
		return x.TSfixed64
	}
	return 0
}

func (x *Model3) GetTFixed32() uint32 {
	if x != nil {
		return x.TFixed32
	}
	return 0
}

func (x *Model3) GetTFixed64() uint64 {
	if x != nil {
		return x.TFixed64
	}
	return 0
}

func (x *Model3) GetTFloat() float32 {
	if x != nil {
		return x.TFloat
	}
	return 0
}

func (x *Model3) GetTDouble() float64 {
	if x != nil {
		return x.TDouble
	}
	return 0
}

func (x *Model3) GetTBool() bool {
	if x != nil {
		return x.TBool
	}
	return false
}

type NameStyleTextName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameStyle1   int32 `protobuf:"varint,1,opt,name=name_style1,json=nameStyle1,proto3" json:"name_style1,omitempty"`
	Names_Style2 int32 `protobuf:"varint,2,opt,name=names_Style2,json=namesStyle2,proto3" json:"names_Style2,omitempty"`
	Name_Style3  int32 `protobuf:"varint,3,opt,name=Name_Style3,json=NameStyle3,proto3" json:"Name_Style3,omitempty"`
	NameStyle4   int32 `protobuf:"varint,4,opt,name=Name_style4,json=NameStyle4,proto3" json:"Name_style4,omitempty"`
	Namestyle5   int32 `protobuf:"varint,5,opt,name=namestyle5,proto3" json:"namestyle5,omitempty"`
	NameStyle6   int32 `protobuf:"varint,6,opt,name=nameStyle6,proto3" json:"nameStyle6,omitempty"`
	NameStyle7   int32 `protobuf:"varint,7,opt,name=NameStyle7,proto3" json:"NameStyle7,omitempty"`
	Namestyle8   int32 `protobuf:"varint,8,opt,name=Namestyle8,proto3" json:"Namestyle8,omitempty"`
	// Types that are assignable to DataType1:
	//	*NameStyleTextName_Integer1
	//	*NameStyleTextName_Float1
	DataType1 isNameStyleTextName_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to Data_Type2:
	//	*NameStyleTextName_Integer2
	//	*NameStyleTextName_Float2
	Data_Type2 isNameStyleTextName_Data_Type2 `protobuf_oneof:"data_Type2"`
	// Types that are assignable to Data_Type3:
	//	*NameStyleTextName_Integer3
	//	*NameStyleTextName_Float3
	Data_Type3 isNameStyleTextName_Data_Type3 `protobuf_oneof:"Data_Type3"`
	// Types that are assignable to DataType4:
	//	*NameStyleTextName_Integer4
	//	*NameStyleTextName_Float4
	DataType4 isNameStyleTextName_DataType4 `protobuf_oneof:"Data_type4"`
	// Types that are assignable to Datatype5:
	//	*NameStyleTextName_Integer5
	//	*NameStyleTextName_Float5
	Datatype5 isNameStyleTextName_Datatype5 `protobuf_oneof:"datatype5"`
	// Types that are assignable to DataType6:
	//	*NameStyleTextName_Integer6
	//	*NameStyleTextName_Float6
	DataType6 isNameStyleTextName_DataType6 `protobuf_oneof:"dataType6"`
	// Types that are assignable to DataType7:
	//	*NameStyleTextName_Integer7
	//	*NameStyleTextName_Float7
	DataType7 isNameStyleTextName_DataType7 `protobuf_oneof:"DataType7"`
	// Types that are assignable to Datatype8:
	//	*NameStyleTextName_Integer8
	//	*NameStyleTextName_Float8
	Datatype8 isNameStyleTextName_Datatype8 `protobuf_oneof:"Datatype8"`
}

func (x *NameStyleTextName) Reset() {
	*x = NameStyleTextName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameStyleTextName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameStyleTextName) ProtoMessage() {}

func (x *NameStyleTextName) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameStyleTextName.ProtoReflect.Descriptor instead.
func (*NameStyleTextName) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{5}
}

func (x *NameStyleTextName) GetNameStyle1() int32 {
	if x != nil {
		return x.NameStyle1
	}
	return 0
}

func (x *NameStyleTextName) GetNames_Style2() int32 {
	if x != nil {
		return x.Names_Style2
	}
	return 0
}

func (x *NameStyleTextName) GetName_Style3() int32 {
	if x != nil {
		return x.Name_Style3
	}
	return 0
}

func (x *NameStyleTextName) GetNameStyle4() int32 {
	if x != nil {
		return x.NameStyle4
	}
	return 0
}

func (x *NameStyleTextName) GetNamestyle5() int32 {
	if x != nil {
		return x.Namestyle5
	}
	return 0
}

func (x *NameStyleTextName) GetNameStyle6() int32 {
	if x != nil {
		return x.NameStyle6
	}
	return 0
}

func (x *NameStyleTextName) GetNameStyle7() int32 {
	if x != nil {
		return x.NameStyle7
	}
	return 0
}

func (x *NameStyleTextName) GetNamestyle8() int32 {
	if x != nil {
		return x.Namestyle8
	}
	return 0
}

func (m *NameStyleTextName) GetDataType1() isNameStyleTextName_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *NameStyleTextName) GetInteger1() string {
	if x, ok := x.GetDataType1().(*NameStyleTextName_Integer1); ok {
		return x.Integer1
	}
	return ""
}

func (x *NameStyleTextName) GetFloat1() string {
	if x, ok := x.GetDataType1().(*NameStyleTextName_Float1); ok {
		return x.Float1
	}
	return ""
}

func (m *NameStyleTextName) GetData_Type2() isNameStyleTextName_Data_Type2 {
	if m != nil {
		return m.Data_Type2
	}
	return nil
}

func (x *NameStyleTextName) GetInteger2() string {
	if x, ok := x.GetData_Type2().(*NameStyleTextName_Integer2); ok {
		return x.Integer2
	}
	return ""
}

func (x *NameStyleTextName) GetFloat2() string {
	if x, ok := x.GetData_Type2().(*NameStyleTextName_Float2); ok {
		return x.Float2
	}
	return ""
}

func (m *NameStyleTextName) GetData_Type3() isNameStyleTextName_Data_Type3 {
	if m != nil {
		return m.Data_Type3
	}
	return nil
}

func (x *NameStyleTextName) GetInteger3() string {
	if x, ok := x.GetData_Type3().(*NameStyleTextName_Integer3); ok {
		return x.Integer3
	}
	return ""
}

func (x *NameStyleTextName) GetFloat3() string {
	if x, ok := x.GetData_Type3().(*NameStyleTextName_Float3); ok {
		return x.Float3
	}
	return ""
}

func (m *NameStyleTextName) GetDataType4() isNameStyleTextName_DataType4 {
	if m != nil {
		return m.DataType4
	}
	return nil
}

func (x *NameStyleTextName) GetInteger4() string {
	if x, ok := x.GetDataType4().(*NameStyleTextName_Integer4); ok {
		return x.Integer4
	}
	return ""
}

func (x *NameStyleTextName) GetFloat4() string {
	if x, ok := x.GetDataType4().(*NameStyleTextName_Float4); ok {
		return x.Float4
	}
	return ""
}

func (m *NameStyleTextName) GetDatatype5() isNameStyleTextName_Datatype5 {
	if m != nil {
		return m.Datatype5
	}
	return nil
}

func (x *NameStyleTextName) GetInteger5() string {
	if x, ok := x.GetDatatype5().(*NameStyleTextName_Integer5); ok {
		return x.Integer5
	}
	return ""
}

func (x *NameStyleTextName) GetFloat5() string {
	if x, ok := x.GetDatatype5().(*NameStyleTextName_Float5); ok {
		return x.Float5
	}
	return ""
}

func (m *NameStyleTextName) GetDataType6() isNameStyleTextName_DataType6 {
	if m != nil {
		return m.DataType6
	}
	return nil
}

func (x *NameStyleTextName) GetInteger6() string {
	if x, ok := x.GetDataType6().(*NameStyleTextName_Integer6); ok {
		return x.Integer6
	}
	return ""
}

func (x *NameStyleTextName) GetFloat6() string {
	if x, ok := x.GetDataType6().(*NameStyleTextName_Float6); ok {
		return x.Float6
	}
	return ""
}

func (m *NameStyleTextName) GetDataType7() isNameStyleTextName_DataType7 {
	if m != nil {
		return m.DataType7
	}
	return nil
}

func (x *NameStyleTextName) GetInteger7() string {
	if x, ok := x.GetDataType7().(*NameStyleTextName_Integer7); ok {
		return x.Integer7
	}
	return ""
}

func (x *NameStyleTextName) GetFloat7() string {
	if x, ok := x.GetDataType7().(*NameStyleTextName_Float7); ok {
		return x.Float7
	}
	return ""
}

func (m *NameStyleTextName) GetDatatype8() isNameStyleTextName_Datatype8 {
	if m != nil {
		return m.Datatype8
	}
	return nil
}

func (x *NameStyleTextName) GetInteger8() string {
	if x, ok := x.GetDatatype8().(*NameStyleTextName_Integer8); ok {
		return x.Integer8
	}
	return ""
}

func (x *NameStyleTextName) GetFloat8() string {
	if x, ok := x.GetDatatype8().(*NameStyleTextName_Float8); ok {
		return x.Float8
	}
	return ""
}

type isNameStyleTextName_DataType1 interface {
	isNameStyleTextName_DataType1()
}

type NameStyleTextName_Integer1 struct {
	Integer1 string `protobuf:"bytes,10,opt,name=integer1,proto3,oneof"`
}

type NameStyleTextName_Float1 struct {
	Float1 string `protobuf:"bytes,11,opt,name=float1,proto3,oneof"`
}

func (*NameStyleTextName_Integer1) isNameStyleTextName_DataType1() {}

func (*NameStyleTextName_Float1) isNameStyleTextName_DataType1() {}

type isNameStyleTextName_Data_Type2 interface {
	isNameStyleTextName_Data_Type2()
}

type NameStyleTextName_Integer2 struct {
	Integer2 string `protobuf:"bytes,20,opt,name=integer2,proto3,oneof"`
}

type NameStyleTextName_Float2 struct {
	Float2 string `protobuf:"bytes,21,opt,name=float2,proto3,oneof"`
}

func (*NameStyleTextName_Integer2) isNameStyleTextName_Data_Type2() {}

func (*NameStyleTextName_Float2) isNameStyleTextName_Data_Type2() {}

type isNameStyleTextName_Data_Type3 interface {
	isNameStyleTextName_Data_Type3()
}

type NameStyleTextName_Integer3 struct {
	Integer3 string `protobuf:"bytes,30,opt,name=integer3,proto3,oneof"`
}

type NameStyleTextName_Float3 struct {
	Float3 string `protobuf:"bytes,31,opt,name=float3,proto3,oneof"`
}

func (*NameStyleTextName_Integer3) isNameStyleTextName_Data_Type3() {}

func (*NameStyleTextName_Float3) isNameStyleTextName_Data_Type3() {}

type isNameStyleTextName_DataType4 interface {
	isNameStyleTextName_DataType4()
}

type NameStyleTextName_Integer4 struct {
	Integer4 string `protobuf:"bytes,40,opt,name=integer4,proto3,oneof"`
}

type NameStyleTextName_Float4 struct {
	Float4 string `protobuf:"bytes,41,opt,name=float4,proto3,oneof"`
}

func (*NameStyleTextName_Integer4) isNameStyleTextName_DataType4() {}

func (*NameStyleTextName_Float4) isNameStyleTextName_DataType4() {}

type isNameStyleTextName_Datatype5 interface {
	isNameStyleTextName_Datatype5()
}

type NameStyleTextName_Integer5 struct {
	Integer5 string `protobuf:"bytes,50,opt,name=integer5,proto3,oneof"`
}

type NameStyleTextName_Float5 struct {
	Float5 string `protobuf:"bytes,51,opt,name=float5,proto3,oneof"`
}

func (*NameStyleTextName_Integer5) isNameStyleTextName_Datatype5() {}

func (*NameStyleTextName_Float5) isNameStyleTextName_Datatype5() {}

type isNameStyleTextName_DataType6 interface {
	isNameStyleTextName_DataType6()
}

type NameStyleTextName_Integer6 struct {
	Integer6 string `protobuf:"bytes,60,opt,name=integer6,proto3,oneof"`
}

type NameStyleTextName_Float6 struct {
	Float6 string `protobuf:"bytes,61,opt,name=float6,proto3,oneof"`
}

func (*NameStyleTextName_Integer6) isNameStyleTextName_DataType6() {}

func (*NameStyleTextName_Float6) isNameStyleTextName_DataType6() {}

type isNameStyleTextName_DataType7 interface {
	isNameStyleTextName_DataType7()
}

type NameStyleTextName_Integer7 struct {
	Integer7 string `protobuf:"bytes,70,opt,name=integer7,proto3,oneof"`
}

type NameStyleTextName_Float7 struct {
	Float7 string `protobuf:"bytes,71,opt,name=float7,proto3,oneof"`
}

func (*NameStyleTextName_Integer7) isNameStyleTextName_DataType7() {}

func (*NameStyleTextName_Float7) isNameStyleTextName_DataType7() {}

type isNameStyleTextName_Datatype8 interface {
	isNameStyleTextName_Datatype8()
}

type NameStyleTextName_Integer8 struct {
	Integer8 string `protobuf:"bytes,80,opt,name=integer8,proto3,oneof"`
}

type NameStyleTextName_Float8 struct {
	Float8 string `protobuf:"bytes,81,opt,name=float8,proto3,oneof"`
}

func (*NameStyleTextName_Integer8) isNameStyleTextName_Datatype8() {}

func (*NameStyleTextName_Float8) isNameStyleTextName_Datatype8() {}

type NameStyleGoName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameStyle1   int32 `protobuf:"varint,1,opt,name=name_style1,json=nameStyle1,proto3" json:"name_style1,omitempty"`
	Names_Style2 int32 `protobuf:"varint,2,opt,name=names_Style2,json=namesStyle2,proto3" json:"names_Style2,omitempty"`
	Name_Style3  int32 `protobuf:"varint,3,opt,name=Name_Style3,json=NameStyle3,proto3" json:"Name_Style3,omitempty"`
	NameStyle4   int32 `protobuf:"varint,4,opt,name=Name_style4,json=NameStyle4,proto3" json:"Name_style4,omitempty"`
	Namestyle5   int32 `protobuf:"varint,5,opt,name=namestyle5,proto3" json:"namestyle5,omitempty"`
	NameStyle6   int32 `protobuf:"varint,6,opt,name=nameStyle6,proto3" json:"nameStyle6,omitempty"`
	NameStyle7   int32 `protobuf:"varint,7,opt,name=NameStyle7,proto3" json:"NameStyle7,omitempty"`
	Namestyle8   int32 `protobuf:"varint,8,opt,name=Namestyle8,proto3" json:"Namestyle8,omitempty"`
	// Types that are assignable to DataType1:
	//	*NameStyleGoName_Integer1
	//	*NameStyleGoName_Float1
	DataType1 isNameStyleGoName_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to Data_Type2:
	//	*NameStyleGoName_Integer2
	//	*NameStyleGoName_Float2
	Data_Type2 isNameStyleGoName_Data_Type2 `protobuf_oneof:"data_Type2"`
	// Types that are assignable to Data_Type3:
	//	*NameStyleGoName_Integer3
	//	*NameStyleGoName_Float3
	Data_Type3 isNameStyleGoName_Data_Type3 `protobuf_oneof:"Data_Type3"`
	// Types that are assignable to DataType4:
	//	*NameStyleGoName_Integer4
	//	*NameStyleGoName_Float4
	DataType4 isNameStyleGoName_DataType4 `protobuf_oneof:"Data_type4"`
	// Types that are assignable to Datatype5:
	//	*NameStyleGoName_Integer5
	//	*NameStyleGoName_Float5
	Datatype5 isNameStyleGoName_Datatype5 `protobuf_oneof:"datatype5"`
	// Types that are assignable to DataType6:
	//	*NameStyleGoName_Integer6
	//	*NameStyleGoName_Float6
	DataType6 isNameStyleGoName_DataType6 `protobuf_oneof:"dataType6"`
	// Types that are assignable to DataType7:
	//	*NameStyleGoName_Integer7
	//	*NameStyleGoName_Float7
	DataType7 isNameStyleGoName_DataType7 `protobuf_oneof:"DataType7"`
	// Types that are assignable to Datatype8:
	//	*NameStyleGoName_Integer8
	//	*NameStyleGoName_Float8
	Datatype8 isNameStyleGoName_Datatype8 `protobuf_oneof:"Datatype8"`
}

func (x *NameStyleGoName) Reset() {
	*x = NameStyleGoName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameStyleGoName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameStyleGoName) ProtoMessage() {}

func (x *NameStyleGoName) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameStyleGoName.ProtoReflect.Descriptor instead.
func (*NameStyleGoName) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{6}
}

func (x *NameStyleGoName) GetNameStyle1() int32 {
	if x != nil {
		return x.NameStyle1
	}
	return 0
}

func (x *NameStyleGoName) GetNames_Style2() int32 {
	if x != nil {
		return x.Names_Style2
	}
	return 0
}

func (x *NameStyleGoName) GetName_Style3() int32 {
	if x != nil {
		return x.Name_Style3
	}
	return 0
}

func (x *NameStyleGoName) GetNameStyle4() int32 {
	if x != nil {
		return x.NameStyle4
	}
	return 0
}

func (x *NameStyleGoName) GetNamestyle5() int32 {
	if x != nil {
		return x.Namestyle5
	}
	return 0
}

func (x *NameStyleGoName) GetNameStyle6() int32 {
	if x != nil {
		return x.NameStyle6
	}
	return 0
}

func (x *NameStyleGoName) GetNameStyle7() int32 {
	if x != nil {
		return x.NameStyle7
	}
	return 0
}

func (x *NameStyleGoName) GetNamestyle8() int32 {
	if x != nil {
		return x.Namestyle8
	}
	return 0
}

func (m *NameStyleGoName) GetDataType1() isNameStyleGoName_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *NameStyleGoName) GetInteger1() string {
	if x, ok := x.GetDataType1().(*NameStyleGoName_Integer1); ok {
		return x.Integer1
	}
	return ""
}

func (x *NameStyleGoName) GetFloat1() string {
	if x, ok := x.GetDataType1().(*NameStyleGoName_Float1); ok {
		return x.Float1
	}
	return ""
}

func (m *NameStyleGoName) GetData_Type2() isNameStyleGoName_Data_Type2 {
	if m != nil {
		return m.Data_Type2
	}
	return nil
}

func (x *NameStyleGoName) GetInteger2() string {
	if x, ok := x.GetData_Type2().(*NameStyleGoName_Integer2); ok {
		return x.Integer2
	}
	return ""
}

func (x *NameStyleGoName) GetFloat2() string {
	if x, ok := x.GetData_Type2().(*NameStyleGoName_Float2); ok {
		return x.Float2
	}
	return ""
}

func (m *NameStyleGoName) GetData_Type3() isNameStyleGoName_Data_Type3 {
	if m != nil {
		return m.Data_Type3
	}
	return nil
}

func (x *NameStyleGoName) GetInteger3() string {
	if x, ok := x.GetData_Type3().(*NameStyleGoName_Integer3); ok {
		return x.Integer3
	}
	return ""
}

func (x *NameStyleGoName) GetFloat3() string {
	if x, ok := x.GetData_Type3().(*NameStyleGoName_Float3); ok {
		return x.Float3
	}
	return ""
}

func (m *NameStyleGoName) GetDataType4() isNameStyleGoName_DataType4 {
	if m != nil {
		return m.DataType4
	}
	return nil
}

func (x *NameStyleGoName) GetInteger4() string {
	if x, ok := x.GetDataType4().(*NameStyleGoName_Integer4); ok {
		return x.Integer4
	}
	return ""
}

func (x *NameStyleGoName) GetFloat4() string {
	if x, ok := x.GetDataType4().(*NameStyleGoName_Float4); ok {
		return x.Float4
	}
	return ""
}

func (m *NameStyleGoName) GetDatatype5() isNameStyleGoName_Datatype5 {
	if m != nil {
		return m.Datatype5
	}
	return nil
}

func (x *NameStyleGoName) GetInteger5() string {
	if x, ok := x.GetDatatype5().(*NameStyleGoName_Integer5); ok {
		return x.Integer5
	}
	return ""
}

func (x *NameStyleGoName) GetFloat5() string {
	if x, ok := x.GetDatatype5().(*NameStyleGoName_Float5); ok {
		return x.Float5
	}
	return ""
}

func (m *NameStyleGoName) GetDataType6() isNameStyleGoName_DataType6 {
	if m != nil {
		return m.DataType6
	}
	return nil
}

func (x *NameStyleGoName) GetInteger6() string {
	if x, ok := x.GetDataType6().(*NameStyleGoName_Integer6); ok {
		return x.Integer6
	}
	return ""
}

func (x *NameStyleGoName) GetFloat6() string {
	if x, ok := x.GetDataType6().(*NameStyleGoName_Float6); ok {
		return x.Float6
	}
	return ""
}

func (m *NameStyleGoName) GetDataType7() isNameStyleGoName_DataType7 {
	if m != nil {
		return m.DataType7
	}
	return nil
}

func (x *NameStyleGoName) GetInteger7() string {
	if x, ok := x.GetDataType7().(*NameStyleGoName_Integer7); ok {
		return x.Integer7
	}
	return ""
}

func (x *NameStyleGoName) GetFloat7() string {
	if x, ok := x.GetDataType7().(*NameStyleGoName_Float7); ok {
		return x.Float7
	}
	return ""
}

func (m *NameStyleGoName) GetDatatype8() isNameStyleGoName_Datatype8 {
	if m != nil {
		return m.Datatype8
	}
	return nil
}

func (x *NameStyleGoName) GetInteger8() string {
	if x, ok := x.GetDatatype8().(*NameStyleGoName_Integer8); ok {
		return x.Integer8
	}
	return ""
}

func (x *NameStyleGoName) GetFloat8() string {
	if x, ok := x.GetDatatype8().(*NameStyleGoName_Float8); ok {
		return x.Float8
	}
	return ""
}

type isNameStyleGoName_DataType1 interface {
	isNameStyleGoName_DataType1()
}

type NameStyleGoName_Integer1 struct {
	Integer1 string `protobuf:"bytes,10,opt,name=integer1,proto3,oneof"`
}

type NameStyleGoName_Float1 struct {
	Float1 string `protobuf:"bytes,11,opt,name=float1,proto3,oneof"`
}

func (*NameStyleGoName_Integer1) isNameStyleGoName_DataType1() {}

func (*NameStyleGoName_Float1) isNameStyleGoName_DataType1() {}

type isNameStyleGoName_Data_Type2 interface {
	isNameStyleGoName_Data_Type2()
}

type NameStyleGoName_Integer2 struct {
	Integer2 string `protobuf:"bytes,20,opt,name=integer2,proto3,oneof"`
}

type NameStyleGoName_Float2 struct {
	Float2 string `protobuf:"bytes,21,opt,name=float2,proto3,oneof"`
}

func (*NameStyleGoName_Integer2) isNameStyleGoName_Data_Type2() {}

func (*NameStyleGoName_Float2) isNameStyleGoName_Data_Type2() {}

type isNameStyleGoName_Data_Type3 interface {
	isNameStyleGoName_Data_Type3()
}

type NameStyleGoName_Integer3 struct {
	Integer3 string `protobuf:"bytes,30,opt,name=integer3,proto3,oneof"`
}

type NameStyleGoName_Float3 struct {
	Float3 string `protobuf:"bytes,31,opt,name=float3,proto3,oneof"`
}

func (*NameStyleGoName_Integer3) isNameStyleGoName_Data_Type3() {}

func (*NameStyleGoName_Float3) isNameStyleGoName_Data_Type3() {}

type isNameStyleGoName_DataType4 interface {
	isNameStyleGoName_DataType4()
}

type NameStyleGoName_Integer4 struct {
	Integer4 string `protobuf:"bytes,40,opt,name=integer4,proto3,oneof"`
}

type NameStyleGoName_Float4 struct {
	Float4 string `protobuf:"bytes,41,opt,name=float4,proto3,oneof"`
}

func (*NameStyleGoName_Integer4) isNameStyleGoName_DataType4() {}

func (*NameStyleGoName_Float4) isNameStyleGoName_DataType4() {}

type isNameStyleGoName_Datatype5 interface {
	isNameStyleGoName_Datatype5()
}

type NameStyleGoName_Integer5 struct {
	Integer5 string `protobuf:"bytes,50,opt,name=integer5,proto3,oneof"`
}

type NameStyleGoName_Float5 struct {
	Float5 string `protobuf:"bytes,51,opt,name=float5,proto3,oneof"`
}

func (*NameStyleGoName_Integer5) isNameStyleGoName_Datatype5() {}

func (*NameStyleGoName_Float5) isNameStyleGoName_Datatype5() {}

type isNameStyleGoName_DataType6 interface {
	isNameStyleGoName_DataType6()
}

type NameStyleGoName_Integer6 struct {
	Integer6 string `protobuf:"bytes,60,opt,name=integer6,proto3,oneof"`
}

type NameStyleGoName_Float6 struct {
	Float6 string `protobuf:"bytes,61,opt,name=float6,proto3,oneof"`
}

func (*NameStyleGoName_Integer6) isNameStyleGoName_DataType6() {}

func (*NameStyleGoName_Float6) isNameStyleGoName_DataType6() {}

type isNameStyleGoName_DataType7 interface {
	isNameStyleGoName_DataType7()
}

type NameStyleGoName_Integer7 struct {
	Integer7 string `protobuf:"bytes,70,opt,name=integer7,proto3,oneof"`
}

type NameStyleGoName_Float7 struct {
	Float7 string `protobuf:"bytes,71,opt,name=float7,proto3,oneof"`
}

func (*NameStyleGoName_Integer7) isNameStyleGoName_DataType7() {}

func (*NameStyleGoName_Float7) isNameStyleGoName_DataType7() {}

type isNameStyleGoName_Datatype8 interface {
	isNameStyleGoName_Datatype8()
}

type NameStyleGoName_Integer8 struct {
	Integer8 string `protobuf:"bytes,80,opt,name=integer8,proto3,oneof"`
}

type NameStyleGoName_Float8 struct {
	Float8 string `protobuf:"bytes,81,opt,name=float8,proto3,oneof"`
}

func (*NameStyleGoName_Integer8) isNameStyleGoName_Datatype8() {}

func (*NameStyleGoName_Float8) isNameStyleGoName_Datatype8() {}

type NameStyleJSONName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameStyle1   int32 `protobuf:"varint,1,opt,name=name_style1,json=nameStyle1,proto3" json:"name_style1,omitempty"`
	Names_Style2 int32 `protobuf:"varint,2,opt,name=names_Style2,json=namesStyle2,proto3" json:"names_Style2,omitempty"`
	Name_Style3  int32 `protobuf:"varint,3,opt,name=Name_Style3,json=NameStyle3,proto3" json:"Name_Style3,omitempty"`
	NameStyle4   int32 `protobuf:"varint,4,opt,name=Name_style4,json=NameStyle4,proto3" json:"Name_style4,omitempty"`
	Namestyle5   int32 `protobuf:"varint,5,opt,name=namestyle5,proto3" json:"namestyle5,omitempty"`
	NameStyle6   int32 `protobuf:"varint,6,opt,name=nameStyle6,proto3" json:"nameStyle6,omitempty"`
	NameStyle7   int32 `protobuf:"varint,7,opt,name=NameStyle7,proto3" json:"NameStyle7,omitempty"`
	Namestyle8   int32 `protobuf:"varint,8,opt,name=Namestyle8,proto3" json:"Namestyle8,omitempty"`
	// Types that are assignable to DataType1:
	//	*NameStyleJSONName_Integer1
	//	*NameStyleJSONName_Float1
	DataType1 isNameStyleJSONName_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to Data_Type2:
	//	*NameStyleJSONName_Integer2
	//	*NameStyleJSONName_Float2
	Data_Type2 isNameStyleJSONName_Data_Type2 `protobuf_oneof:"data_Type2"`
	// Types that are assignable to Data_Type3:
	//	*NameStyleJSONName_Integer3
	//	*NameStyleJSONName_Float3
	Data_Type3 isNameStyleJSONName_Data_Type3 `protobuf_oneof:"Data_Type3"`
	// Types that are assignable to DataType4:
	//	*NameStyleJSONName_Integer4
	//	*NameStyleJSONName_Float4
	DataType4 isNameStyleJSONName_DataType4 `protobuf_oneof:"Data_type4"`
	// Types that are assignable to Datatype5:
	//	*NameStyleJSONName_Integer5
	//	*NameStyleJSONName_Float5
	Datatype5 isNameStyleJSONName_Datatype5 `protobuf_oneof:"datatype5"`
	// Types that are assignable to DataType6:
	//	*NameStyleJSONName_Integer6
	//	*NameStyleJSONName_Float6
	DataType6 isNameStyleJSONName_DataType6 `protobuf_oneof:"dataType6"`
	// Types that are assignable to DataType7:
	//	*NameStyleJSONName_Integer7
	//	*NameStyleJSONName_Float7
	DataType7 isNameStyleJSONName_DataType7 `protobuf_oneof:"DataType7"`
	// Types that are assignable to Datatype8:
	//	*NameStyleJSONName_Integer8
	//	*NameStyleJSONName_Float8
	Datatype8 isNameStyleJSONName_Datatype8 `protobuf_oneof:"Datatype8"`
}

func (x *NameStyleJSONName) Reset() {
	*x = NameStyleJSONName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameStyleJSONName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameStyleJSONName) ProtoMessage() {}

func (x *NameStyleJSONName) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameStyleJSONName.ProtoReflect.Descriptor instead.
func (*NameStyleJSONName) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{7}
}

func (x *NameStyleJSONName) GetNameStyle1() int32 {
	if x != nil {
		return x.NameStyle1
	}
	return 0
}

func (x *NameStyleJSONName) GetNames_Style2() int32 {
	if x != nil {
		return x.Names_Style2
	}
	return 0
}

func (x *NameStyleJSONName) GetName_Style3() int32 {
	if x != nil {
		return x.Name_Style3
	}
	return 0
}

func (x *NameStyleJSONName) GetNameStyle4() int32 {
	if x != nil {
		return x.NameStyle4
	}
	return 0
}

func (x *NameStyleJSONName) GetNamestyle5() int32 {
	if x != nil {
		return x.Namestyle5
	}
	return 0
}

func (x *NameStyleJSONName) GetNameStyle6() int32 {
	if x != nil {
		return x.NameStyle6
	}
	return 0
}

func (x *NameStyleJSONName) GetNameStyle7() int32 {
	if x != nil {
		return x.NameStyle7
	}
	return 0
}

func (x *NameStyleJSONName) GetNamestyle8() int32 {
	if x != nil {
		return x.Namestyle8
	}
	return 0
}

func (m *NameStyleJSONName) GetDataType1() isNameStyleJSONName_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *NameStyleJSONName) GetInteger1() string {
	if x, ok := x.GetDataType1().(*NameStyleJSONName_Integer1); ok {
		return x.Integer1
	}
	return ""
}

func (x *NameStyleJSONName) GetFloat1() string {
	if x, ok := x.GetDataType1().(*NameStyleJSONName_Float1); ok {
		return x.Float1
	}
	return ""
}

func (m *NameStyleJSONName) GetData_Type2() isNameStyleJSONName_Data_Type2 {
	if m != nil {
		return m.Data_Type2
	}
	return nil
}

func (x *NameStyleJSONName) GetInteger2() string {
	if x, ok := x.GetData_Type2().(*NameStyleJSONName_Integer2); ok {
		return x.Integer2
	}
	return ""
}

func (x *NameStyleJSONName) GetFloat2() string {
	if x, ok := x.GetData_Type2().(*NameStyleJSONName_Float2); ok {
		return x.Float2
	}
	return ""
}

func (m *NameStyleJSONName) GetData_Type3() isNameStyleJSONName_Data_Type3 {
	if m != nil {
		return m.Data_Type3
	}
	return nil
}

func (x *NameStyleJSONName) GetInteger3() string {
	if x, ok := x.GetData_Type3().(*NameStyleJSONName_Integer3); ok {
		return x.Integer3
	}
	return ""
}

func (x *NameStyleJSONName) GetFloat3() string {
	if x, ok := x.GetData_Type3().(*NameStyleJSONName_Float3); ok {
		return x.Float3
	}
	return ""
}

func (m *NameStyleJSONName) GetDataType4() isNameStyleJSONName_DataType4 {
	if m != nil {
		return m.DataType4
	}
	return nil
}

func (x *NameStyleJSONName) GetInteger4() string {
	if x, ok := x.GetDataType4().(*NameStyleJSONName_Integer4); ok {
		return x.Integer4
	}
	return ""
}

func (x *NameStyleJSONName) GetFloat4() string {
	if x, ok := x.GetDataType4().(*NameStyleJSONName_Float4); ok {
		return x.Float4
	}
	return ""
}

func (m *NameStyleJSONName) GetDatatype5() isNameStyleJSONName_Datatype5 {
	if m != nil {
		return m.Datatype5
	}
	return nil
}

func (x *NameStyleJSONName) GetInteger5() string {
	if x, ok := x.GetDatatype5().(*NameStyleJSONName_Integer5); ok {
		return x.Integer5
	}
	return ""
}

func (x *NameStyleJSONName) GetFloat5() string {
	if x, ok := x.GetDatatype5().(*NameStyleJSONName_Float5); ok {
		return x.Float5
	}
	return ""
}

func (m *NameStyleJSONName) GetDataType6() isNameStyleJSONName_DataType6 {
	if m != nil {
		return m.DataType6
	}
	return nil
}

func (x *NameStyleJSONName) GetInteger6() string {
	if x, ok := x.GetDataType6().(*NameStyleJSONName_Integer6); ok {
		return x.Integer6
	}
	return ""
}

func (x *NameStyleJSONName) GetFloat6() string {
	if x, ok := x.GetDataType6().(*NameStyleJSONName_Float6); ok {
		return x.Float6
	}
	return ""
}

func (m *NameStyleJSONName) GetDataType7() isNameStyleJSONName_DataType7 {
	if m != nil {
		return m.DataType7
	}
	return nil
}

func (x *NameStyleJSONName) GetInteger7() string {
	if x, ok := x.GetDataType7().(*NameStyleJSONName_Integer7); ok {
		return x.Integer7
	}
	return ""
}

func (x *NameStyleJSONName) GetFloat7() string {
	if x, ok := x.GetDataType7().(*NameStyleJSONName_Float7); ok {
		return x.Float7
	}
	return ""
}

func (m *NameStyleJSONName) GetDatatype8() isNameStyleJSONName_Datatype8 {
	if m != nil {
		return m.Datatype8
	}
	return nil
}

func (x *NameStyleJSONName) GetInteger8() string {
	if x, ok := x.GetDatatype8().(*NameStyleJSONName_Integer8); ok {
		return x.Integer8
	}
	return ""
}

func (x *NameStyleJSONName) GetFloat8() string {
	if x, ok := x.GetDatatype8().(*NameStyleJSONName_Float8); ok {
		return x.Float8
	}
	return ""
}

type isNameStyleJSONName_DataType1 interface {
	isNameStyleJSONName_DataType1()
}

type NameStyleJSONName_Integer1 struct {
	Integer1 string `protobuf:"bytes,10,opt,name=integer1,proto3,oneof"`
}

type NameStyleJSONName_Float1 struct {
	Float1 string `protobuf:"bytes,11,opt,name=float1,proto3,oneof"`
}

func (*NameStyleJSONName_Integer1) isNameStyleJSONName_DataType1() {}

func (*NameStyleJSONName_Float1) isNameStyleJSONName_DataType1() {}

type isNameStyleJSONName_Data_Type2 interface {
	isNameStyleJSONName_Data_Type2()
}

type NameStyleJSONName_Integer2 struct {
	Integer2 string `protobuf:"bytes,20,opt,name=integer2,proto3,oneof"`
}

type NameStyleJSONName_Float2 struct {
	Float2 string `protobuf:"bytes,21,opt,name=float2,proto3,oneof"`
}

func (*NameStyleJSONName_Integer2) isNameStyleJSONName_Data_Type2() {}

func (*NameStyleJSONName_Float2) isNameStyleJSONName_Data_Type2() {}

type isNameStyleJSONName_Data_Type3 interface {
	isNameStyleJSONName_Data_Type3()
}

type NameStyleJSONName_Integer3 struct {
	Integer3 string `protobuf:"bytes,30,opt,name=integer3,proto3,oneof"`
}

type NameStyleJSONName_Float3 struct {
	Float3 string `protobuf:"bytes,31,opt,name=float3,proto3,oneof"`
}

func (*NameStyleJSONName_Integer3) isNameStyleJSONName_Data_Type3() {}

func (*NameStyleJSONName_Float3) isNameStyleJSONName_Data_Type3() {}

type isNameStyleJSONName_DataType4 interface {
	isNameStyleJSONName_DataType4()
}

type NameStyleJSONName_Integer4 struct {
	Integer4 string `protobuf:"bytes,40,opt,name=integer4,proto3,oneof"`
}

type NameStyleJSONName_Float4 struct {
	Float4 string `protobuf:"bytes,41,opt,name=float4,proto3,oneof"`
}

func (*NameStyleJSONName_Integer4) isNameStyleJSONName_DataType4() {}

func (*NameStyleJSONName_Float4) isNameStyleJSONName_DataType4() {}

type isNameStyleJSONName_Datatype5 interface {
	isNameStyleJSONName_Datatype5()
}

type NameStyleJSONName_Integer5 struct {
	Integer5 string `protobuf:"bytes,50,opt,name=integer5,proto3,oneof"`
}

type NameStyleJSONName_Float5 struct {
	Float5 string `protobuf:"bytes,51,opt,name=float5,proto3,oneof"`
}

func (*NameStyleJSONName_Integer5) isNameStyleJSONName_Datatype5() {}

func (*NameStyleJSONName_Float5) isNameStyleJSONName_Datatype5() {}

type isNameStyleJSONName_DataType6 interface {
	isNameStyleJSONName_DataType6()
}

type NameStyleJSONName_Integer6 struct {
	Integer6 string `protobuf:"bytes,60,opt,name=integer6,proto3,oneof"`
}

type NameStyleJSONName_Float6 struct {
	Float6 string `protobuf:"bytes,61,opt,name=float6,proto3,oneof"`
}

func (*NameStyleJSONName_Integer6) isNameStyleJSONName_DataType6() {}

func (*NameStyleJSONName_Float6) isNameStyleJSONName_DataType6() {}

type isNameStyleJSONName_DataType7 interface {
	isNameStyleJSONName_DataType7()
}

type NameStyleJSONName_Integer7 struct {
	Integer7 string `protobuf:"bytes,70,opt,name=integer7,proto3,oneof"`
}

type NameStyleJSONName_Float7 struct {
	Float7 string `protobuf:"bytes,71,opt,name=float7,proto3,oneof"`
}

func (*NameStyleJSONName_Integer7) isNameStyleJSONName_DataType7() {}

func (*NameStyleJSONName_Float7) isNameStyleJSONName_DataType7() {}

type isNameStyleJSONName_Datatype8 interface {
	isNameStyleJSONName_Datatype8()
}

type NameStyleJSONName_Integer8 struct {
	Integer8 string `protobuf:"bytes,80,opt,name=integer8,proto3,oneof"`
}

type NameStyleJSONName_Float8 struct {
	Float8 string `protobuf:"bytes,81,opt,name=float8,proto3,oneof"`
}

func (*NameStyleJSONName_Integer8) isNameStyleJSONName_Datatype8() {}

func (*NameStyleJSONName_Float8) isNameStyleJSONName_Datatype8() {}

type FieldCustomName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString          string                             `protobuf:"bytes,1,opt,name=t_string,json=tString,proto3" json:"t_string,omitempty"`
	TInt32           int32                              `protobuf:"varint,2,opt,name=t_int32,json=tInt32,proto3" json:"t_int32,omitempty"`
	TInt64           int64                              `protobuf:"varint,3,opt,name=t_int64,json=tInt64,proto3" json:"t_int64,omitempty"`
	TUint32          uint32                             `protobuf:"varint,4,opt,name=t_uint32,json=tUint32,proto3" json:"t_uint32,omitempty"`
	TUint64          uint64                             `protobuf:"varint,5,opt,name=t_uint64,json=tUint64,proto3" json:"t_uint64,omitempty"`
	TSint32          int32                              `protobuf:"zigzag32,6,opt,name=t_sint32,json=tSint32,proto3" json:"t_sint32,omitempty"`
	TSint64          int64                              `protobuf:"zigzag64,7,opt,name=t_sint64,json=tSint64,proto3" json:"t_sint64,omitempty"`
	TSfixed32        int32                              `protobuf:"fixed32,8,opt,name=t_sfixed32,json=tSfixed32,proto3" json:"t_sfixed32,omitempty"`
	TSfixed64        int64                              `protobuf:"fixed64,9,opt,name=t_sfixed64,json=tSfixed64,proto3" json:"t_sfixed64,omitempty"`
	TFixed32         uint32                             `protobuf:"fixed32,10,opt,name=t_fixed32,json=tFixed32,proto3" json:"t_fixed32,omitempty"`
	TFixed64         uint64                             `protobuf:"fixed64,11,opt,name=t_fixed64,json=tFixed64,proto3" json:"t_fixed64,omitempty"`
	TFloat           float32                            `protobuf:"fixed32,12,opt,name=t_float,json=tFloat,proto3" json:"t_float,omitempty"`
	TDouble          float64                            `protobuf:"fixed64,13,opt,name=t_double,json=tDouble,proto3" json:"t_double,omitempty"`
	TBool            bool                               `protobuf:"varint,14,opt,name=t_bool,json=tBool,proto3" json:"t_bool,omitempty"`
	TEnum1           FieldCustomName_Enum               `protobuf:"varint,15,opt,name=t_enum1,json=tEnum1,proto3,enum=gojsontest.FieldCustomName_Enum" json:"t_enum1,omitempty"`
	TEnum2           FieldCustomName_Enum               `protobuf:"varint,16,opt,name=t_enum2,json=tEnum2,proto3,enum=gojsontest.FieldCustomName_Enum" json:"t_enum2,omitempty"`
	TBytes           []byte                             `protobuf:"bytes,17,opt,name=t_bytes,json=tBytes,proto3" json:"t_bytes,omitempty"`
	TAliases         *FieldCustomName_Aliases           `protobuf:"bytes,18,opt,name=t_aliases,json=tAliases,proto3" json:"t_aliases,omitempty"`
	TConfig          *FieldCustomName_Config            `protobuf:"bytes,19,opt,name=t_config,json=tConfig,proto3" json:"t_config,omitempty"`
	ArrayDouble      []float64                          `protobuf:"fixed64,101,rep,packed,name=array_double,json=arrayDouble,proto3" json:"array_double,omitempty"`
	ArrayFloat       []float32                          `protobuf:"fixed32,102,rep,packed,name=array_float,json=arrayFloat,proto3" json:"array_float,omitempty"`
	ArrayInt32       []int32                            `protobuf:"varint,103,rep,packed,name=array_int32,json=arrayInt32,proto3" json:"array_int32,omitempty"`
	ArrayInt64       []int64                            `protobuf:"varint,104,rep,packed,name=array_int64,json=arrayInt64,proto3" json:"array_int64,omitempty"`
	ArrayUint32      []uint32                           `protobuf:"varint,105,rep,packed,name=array_uint32,json=arrayUint32,proto3" json:"array_uint32,omitempty"`
	ArrayUint64      []uint64                           `protobuf:"varint,106,rep,packed,name=array_uint64,json=arrayUint64,proto3" json:"array_uint64,omitempty"`
	ArraySint32      []int32                            `protobuf:"zigzag32,107,rep,packed,name=array_sint32,json=arraySint32,proto3" json:"array_sint32,omitempty"`
	ArraySint64      []int64                            `protobuf:"zigzag64,108,rep,packed,name=array_sint64,json=arraySint64,proto3" json:"array_sint64,omitempty"`
	ArraySfixed32    []int32                            `protobuf:"fixed32,109,rep,packed,name=array_sfixed32,json=arraySfixed32,proto3" json:"array_sfixed32,omitempty"`
	ArraySfixed64    []int64                            `protobuf:"fixed64,110,rep,packed,name=array_sfixed64,json=arraySfixed64,proto3" json:"array_sfixed64,omitempty"`
	ArrayFixed32     []uint32                           `protobuf:"fixed32,111,rep,packed,name=array_fixed32,json=arrayFixed32,proto3" json:"array_fixed32,omitempty"`
	ArrayFixed64     []uint64                           `protobuf:"fixed64,112,rep,packed,name=array_fixed64,json=arrayFixed64,proto3" json:"array_fixed64,omitempty"`
	ArrayBool        []bool                             `protobuf:"varint,113,rep,packed,name=array_bool,json=arrayBool,proto3" json:"array_bool,omitempty"`
	ArrayString      []string                           `protobuf:"bytes,114,rep,name=array_string,json=arrayString,proto3" json:"array_string,omitempty"`
	ArrayBytes       [][]byte                           `protobuf:"bytes,115,rep,name=array_bytes,json=arrayBytes,proto3" json:"array_bytes,omitempty"`
	ArrayEnum1       []FieldCustomName_Enum             `protobuf:"varint,116,rep,packed,name=array_enum1,json=arrayEnum1,proto3,enum=gojsontest.FieldCustomName_Enum" json:"array_enum1,omitempty"`
	ArrayEnum2       []FieldCustomName_Enum             `protobuf:"varint,117,rep,packed,name=array_enum2,json=arrayEnum2,proto3,enum=gojsontest.FieldCustomName_Enum" json:"array_enum2,omitempty"`
	ArrayAliases     []*FieldCustomName_Aliases         `protobuf:"bytes,118,rep,name=array_aliases,json=arrayAliases,proto3" json:"array_aliases,omitempty"`
	ArrayConfig      []*FieldCustomName_Config          `protobuf:"bytes,119,rep,name=array_config,json=arrayConfig,proto3" json:"array_config,omitempty"`
	MapInt32Double   map[int32]float64                  `protobuf:"bytes,202,rep,name=map_int32_double,json=mapInt32Double,proto3" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Float    map[int32]float32                  `protobuf:"bytes,203,rep,name=map_int32_float,json=mapInt32Float,proto3" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Int32    map[int32]int32                    `protobuf:"bytes,204,rep,name=map_int32_int32,json=mapInt32Int32,proto3" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Int64    map[int32]int64                    `protobuf:"bytes,205,rep,name=map_int32_int64,json=mapInt32Int64,proto3" json:"map_int32_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint32   map[int32]uint32                   `protobuf:"bytes,206,rep,name=map_int32_uint32,json=mapInt32Uint32,proto3" json:"map_int32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint64   map[int32]uint64                   `protobuf:"bytes,207,rep,name=map_int32_uint64,json=mapInt32Uint64,proto3" json:"map_int32_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Sint32   map[int32]int32                    `protobuf:"bytes,208,rep,name=map_int32_sint32,json=mapInt32Sint32,proto3" json:"map_int32_sint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapInt32Sint64   map[int32]int64                    `protobuf:"bytes,209,rep,name=map_int32_sint64,json=mapInt32Sint64,proto3" json:"map_int32_sint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapInt32Sfixed32 map[int32]int32                    `protobuf:"bytes,210,rep,name=map_int32_sfixed32,json=mapInt32Sfixed32,proto3" json:"map_int32_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Sfixed64 map[int32]int64                    `protobuf:"bytes,211,rep,name=map_int32_sfixed64,json=mapInt32Sfixed64,proto3" json:"map_int32_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Fixed32  map[int32]uint32                   `protobuf:"bytes,212,rep,name=map_int32_fixed32,json=mapInt32Fixed32,proto3" json:"map_int32_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Fixed64  map[int32]uint64                   `protobuf:"bytes,213,rep,name=map_int32_fixed64,json=mapInt32Fixed64,proto3" json:"map_int32_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Bool     map[int32]bool                     `protobuf:"bytes,214,rep,name=map_int32_bool,json=mapInt32Bool,proto3" json:"map_int32_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32String   map[int32]string                   `protobuf:"bytes,215,rep,name=map_int32_string,json=mapInt32String,proto3" json:"map_int32_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Bytes    map[int32][]byte                   `protobuf:"bytes,216,rep,name=map_int32_bytes,json=mapInt32Bytes,proto3" json:"map_int32_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Enum1    map[int32]FieldCustomName_Enum     `protobuf:"bytes,217,rep,name=map_int32_enum1,json=mapInt32Enum1,proto3" json:"map_int32_enum1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.FieldCustomName_Enum"`
	MapInt32Enum2    map[int32]FieldCustomName_Enum     `protobuf:"bytes,218,rep,name=map_int32_enum2,json=mapInt32Enum2,proto3" json:"map_int32_enum2,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.FieldCustomName_Enum"`
	MapInt32Aliases  map[int32]*FieldCustomName_Aliases `protobuf:"bytes,219,rep,name=map_int32_aliases,json=mapInt32Aliases,proto3" json:"map_int32_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Config   map[int32]*FieldCustomName_Config  `protobuf:"bytes,220,rep,name=map_int32_config,json=mapInt32Config,proto3" json:"map_int32_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Int32    map[int64]int32                    `protobuf:"bytes,301,rep,name=map_int64_int32,json=mapInt64Int32,proto3" json:"map_int64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Int32   map[uint32]int32                   `protobuf:"bytes,302,rep,name=map_uint32_int32,json=mapUint32Int32,proto3" json:"map_uint32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Int32   map[uint64]int32                   `protobuf:"bytes,304,rep,name=map_uint64_int32,json=mapUint64Int32,proto3" json:"map_uint64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint32Int32   map[int32]int32                    `protobuf:"bytes,305,rep,name=map_sint32_int32,json=mapSint32Int32,proto3" json:"map_sint32_int32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint64Int32   map[int64]int32                    `protobuf:"bytes,306,rep,name=map_sint64_int32,json=mapSint64Int32,proto3" json:"map_sint64_int32,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed32Int32  map[uint32]int32                   `protobuf:"bytes,307,rep,name=map_fixed32_int32,json=mapFixed32Int32,proto3" json:"map_fixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed64Int32  map[uint64]int32                   `protobuf:"bytes,308,rep,name=map_fixed64_int32,json=mapFixed64Int32,proto3" json:"map_fixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed32Int32 map[int32]int32                    `protobuf:"bytes,309,rep,name=map_sfixed32_int32,json=mapSfixed32Int32,proto3" json:"map_sfixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed64Int32 map[int64]int32                    `protobuf:"bytes,310,rep,name=map_sfixed64_int32,json=mapSfixed64Int32,proto3" json:"map_sfixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringInt32   map[string]int32                   `protobuf:"bytes,311,rep,name=map_string_int32,json=mapStringInt32,proto3" json:"map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Types that are assignable to DataType1:
	//	*FieldCustomName_One1TString
	//	*FieldCustomName_One1TInt32
	//	*FieldCustomName_One1TInt64
	//	*FieldCustomName_One1TUint32
	//	*FieldCustomName_One1TUint64
	//	*FieldCustomName_One1TSint32
	//	*FieldCustomName_One1TSint64
	//	*FieldCustomName_One1TSfixed32
	//	*FieldCustomName_One1TSfixed64
	//	*FieldCustomName_One1TFixed32
	//	*FieldCustomName_One1TFixed64
	//	*FieldCustomName_One1TFloat
	//	*FieldCustomName_One1TDouble
	//	*FieldCustomName_One1TBool
	//	*FieldCustomName_One1TEnum1
	//	*FieldCustomName_One1TEnum2
	//	*FieldCustomName_One1TBytes
	//	*FieldCustomName_One1TAliases
	//	*FieldCustomName_One1TConfig
	DataType1 isFieldCustomName_DataType1 `protobuf_oneof:"DataType1"`
	// Types that are assignable to DataType2:
	//	*FieldCustomName_One2TString
	//	*FieldCustomName_One2TInt32
	//	*FieldCustomName_One2TInt64
	//	*FieldCustomName_One2TUint32
	//	*FieldCustomName_One2TUint64
	//	*FieldCustomName_One2TSint32
	//	*FieldCustomName_One2TSint64
	//	*FieldCustomName_One2TSfixed32
	//	*FieldCustomName_One2TSfixed64
	//	*FieldCustomName_One2TFixed32
	//	*FieldCustomName_One2TFixed64
	//	*FieldCustomName_One2TFloat
	//	*FieldCustomName_One2TDouble
	//	*FieldCustomName_One2TBool
	//	*FieldCustomName_One2TEnum1
	//	*FieldCustomName_One2TEnum2
	//	*FieldCustomName_One2TBytes
	//	*FieldCustomName_One2TAliases
	//	*FieldCustomName_One2TConfig
	DataType2 isFieldCustomName_DataType2 `protobuf_oneof:"DataType2"`
}

func (x *FieldCustomName) Reset() {
	*x = FieldCustomName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldCustomName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldCustomName) ProtoMessage() {}

func (x *FieldCustomName) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldCustomName.ProtoReflect.Descriptor instead.
func (*FieldCustomName) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{8}
}

func (x *FieldCustomName) GetTString() string {
	if x != nil {
		return x.TString
	}
	return ""
}

func (x *FieldCustomName) GetTInt32() int32 {
	if x != nil {
		return x.TInt32
	}
	return 0
}

func (x *FieldCustomName) GetTInt64() int64 {
	if x != nil {
		return x.TInt64
	}
	return 0
}

func (x *FieldCustomName) GetTUint32() uint32 {
	if x != nil {
		return x.TUint32
	}
	return 0
}

func (x *FieldCustomName) GetTUint64() uint64 {
	if x != nil {
		return x.TUint64
	}
	return 0
}

func (x *FieldCustomName) GetTSint32() int32 {
	if x != nil {
		return x.TSint32
	}
	return 0
}

func (x *FieldCustomName) GetTSint64() int64 {
	if x != nil {
		return x.TSint64
	}
	return 0
}

func (x *FieldCustomName) GetTSfixed32() int32 {
	if x != nil {
		return x.TSfixed32
	}
	return 0
}

func (x *FieldCustomName) GetTSfixed64() int64 {
	if x != nil {
		return x.TSfixed64
	}
	return 0
}

func (x *FieldCustomName) GetTFixed32() uint32 {
	if x != nil {
		return x.TFixed32
	}
	return 0
}

func (x *FieldCustomName) GetTFixed64() uint64 {
	if x != nil {
		return x.TFixed64
	}
	return 0
}

func (x *FieldCustomName) GetTFloat() float32 {
	if x != nil {
		return x.TFloat
	}
	return 0
}

func (x *FieldCustomName) GetTDouble() float64 {
	if x != nil {
		return x.TDouble
	}
	return 0
}

func (x *FieldCustomName) GetTBool() bool {
	if x != nil {
		return x.TBool
	}
	return false
}

func (x *FieldCustomName) GetTEnum1() FieldCustomName_Enum {
	if x != nil {
		return x.TEnum1
	}
	return FieldCustomName_running
}

func (x *FieldCustomName) GetTEnum2() FieldCustomName_Enum {
	if x != nil {
		return x.TEnum2
	}
	return FieldCustomName_running
}

func (x *FieldCustomName) GetTBytes() []byte {
	if x != nil {
		return x.TBytes
	}
	return nil
}

func (x *FieldCustomName) GetTAliases() *FieldCustomName_Aliases {
	if x != nil {
		return x.TAliases
	}
	return nil
}

func (x *FieldCustomName) GetTConfig() *FieldCustomName_Config {
	if x != nil {
		return x.TConfig
	}
	return nil
}

func (x *FieldCustomName) GetArrayDouble() []float64 {
	if x != nil {
		return x.ArrayDouble
	}
	return nil
}

func (x *FieldCustomName) GetArrayFloat() []float32 {
	if x != nil {
		return x.ArrayFloat
	}
	return nil
}

func (x *FieldCustomName) GetArrayInt32() []int32 {
	if x != nil {
		return x.ArrayInt32
	}
	return nil
}

func (x *FieldCustomName) GetArrayInt64() []int64 {
	if x != nil {
		return x.ArrayInt64
	}
	return nil
}

func (x *FieldCustomName) GetArrayUint32() []uint32 {
	if x != nil {
		return x.ArrayUint32
	}
	return nil
}

func (x *FieldCustomName) GetArrayUint64() []uint64 {
	if x != nil {
		return x.ArrayUint64
	}
	return nil
}

func (x *FieldCustomName) GetArraySint32() []int32 {
	if x != nil {
		return x.ArraySint32
	}
	return nil
}

func (x *FieldCustomName) GetArraySint64() []int64 {
	if x != nil {
		return x.ArraySint64
	}
	return nil
}

func (x *FieldCustomName) GetArraySfixed32() []int32 {
	if x != nil {
		return x.ArraySfixed32
	}
	return nil
}

func (x *FieldCustomName) GetArraySfixed64() []int64 {
	if x != nil {
		return x.ArraySfixed64
	}
	return nil
}

func (x *FieldCustomName) GetArrayFixed32() []uint32 {
	if x != nil {
		return x.ArrayFixed32
	}
	return nil
}

func (x *FieldCustomName) GetArrayFixed64() []uint64 {
	if x != nil {
		return x.ArrayFixed64
	}
	return nil
}

func (x *FieldCustomName) GetArrayBool() []bool {
	if x != nil {
		return x.ArrayBool
	}
	return nil
}

func (x *FieldCustomName) GetArrayString() []string {
	if x != nil {
		return x.ArrayString
	}
	return nil
}

func (x *FieldCustomName) GetArrayBytes() [][]byte {
	if x != nil {
		return x.ArrayBytes
	}
	return nil
}

func (x *FieldCustomName) GetArrayEnum1() []FieldCustomName_Enum {
	if x != nil {
		return x.ArrayEnum1
	}
	return nil
}

func (x *FieldCustomName) GetArrayEnum2() []FieldCustomName_Enum {
	if x != nil {
		return x.ArrayEnum2
	}
	return nil
}

func (x *FieldCustomName) GetArrayAliases() []*FieldCustomName_Aliases {
	if x != nil {
		return x.ArrayAliases
	}
	return nil
}

func (x *FieldCustomName) GetArrayConfig() []*FieldCustomName_Config {
	if x != nil {
		return x.ArrayConfig
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Double() map[int32]float64 {
	if x != nil {
		return x.MapInt32Double
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Float() map[int32]float32 {
	if x != nil {
		return x.MapInt32Float
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Int32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Int64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Int64
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Uint32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Uint32
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Uint64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Uint64
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Sint32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sint32
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Sint64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sint64
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Sfixed32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sfixed32
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Sfixed64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sfixed64
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Fixed32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Fixed32
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Fixed64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Fixed64
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Bool() map[int32]bool {
	if x != nil {
		return x.MapInt32Bool
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32String() map[int32]string {
	if x != nil {
		return x.MapInt32String
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Bytes() map[int32][]byte {
	if x != nil {
		return x.MapInt32Bytes
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Enum1() map[int32]FieldCustomName_Enum {
	if x != nil {
		return x.MapInt32Enum1
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Enum2() map[int32]FieldCustomName_Enum {
	if x != nil {
		return x.MapInt32Enum2
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Aliases() map[int32]*FieldCustomName_Aliases {
	if x != nil {
		return x.MapInt32Aliases
	}
	return nil
}

func (x *FieldCustomName) GetMapInt32Config() map[int32]*FieldCustomName_Config {
	if x != nil {
		return x.MapInt32Config
	}
	return nil
}

func (x *FieldCustomName) GetMapInt64Int32() map[int64]int32 {
	if x != nil {
		return x.MapInt64Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapUint32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapUint32Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapUint64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapUint64Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapSint32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSint32Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapSint64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSint64Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapFixed32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapFixed32Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapFixed64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapFixed64Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapSfixed32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSfixed32Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapSfixed64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSfixed64Int32
	}
	return nil
}

func (x *FieldCustomName) GetMapStringInt32() map[string]int32 {
	if x != nil {
		return x.MapStringInt32
	}
	return nil
}

func (m *FieldCustomName) GetDataType1() isFieldCustomName_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *FieldCustomName) GetOne1TString() string {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TString); ok {
		return x.One1TString
	}
	return ""
}

func (x *FieldCustomName) GetOne1TInt32() int32 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TInt32); ok {
		return x.One1TInt32
	}
	return 0
}

func (x *FieldCustomName) GetOne1TInt64() int64 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TInt64); ok {
		return x.One1TInt64
	}
	return 0
}

func (x *FieldCustomName) GetOne1TUint32() uint32 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TUint32); ok {
		return x.One1TUint32
	}
	return 0
}

func (x *FieldCustomName) GetOne1TUint64() uint64 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TUint64); ok {
		return x.One1TUint64
	}
	return 0
}

func (x *FieldCustomName) GetOne1TSint32() int32 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TSint32); ok {
		return x.One1TSint32
	}
	return 0
}

func (x *FieldCustomName) GetOne1TSint64() int64 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TSint64); ok {
		return x.One1TSint64
	}
	return 0
}

func (x *FieldCustomName) GetOne1TSfixed32() int32 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TSfixed32); ok {
		return x.One1TSfixed32
	}
	return 0
}

func (x *FieldCustomName) GetOne1TSfixed64() int64 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TSfixed64); ok {
		return x.One1TSfixed64
	}
	return 0
}

func (x *FieldCustomName) GetOne1TFixed32() uint32 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TFixed32); ok {
		return x.One1TFixed32
	}
	return 0
}

func (x *FieldCustomName) GetOne1TFixed64() uint64 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TFixed64); ok {
		return x.One1TFixed64
	}
	return 0
}

func (x *FieldCustomName) GetOne1TFloat() float32 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TFloat); ok {
		return x.One1TFloat
	}
	return 0
}

func (x *FieldCustomName) GetOne1TDouble() float64 {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TDouble); ok {
		return x.One1TDouble
	}
	return 0
}

func (x *FieldCustomName) GetOne1TBool() bool {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TBool); ok {
		return x.One1TBool
	}
	return false
}

func (x *FieldCustomName) GetOne1TEnum1() FieldCustomName_Enum {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TEnum1); ok {
		return x.One1TEnum1
	}
	return FieldCustomName_running
}

func (x *FieldCustomName) GetOne1TEnum2() FieldCustomName_Enum {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TEnum2); ok {
		return x.One1TEnum2
	}
	return FieldCustomName_running
}

func (x *FieldCustomName) GetOne1TBytes() []byte {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TBytes); ok {
		return x.One1TBytes
	}
	return nil
}

func (x *FieldCustomName) GetOne1TAliases() *FieldCustomName_Aliases {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TAliases); ok {
		return x.One1TAliases
	}
	return nil
}

func (x *FieldCustomName) GetOne1TConfig() *FieldCustomName_Config {
	if x, ok := x.GetDataType1().(*FieldCustomName_One1TConfig); ok {
		return x.One1TConfig
	}
	return nil
}

func (m *FieldCustomName) GetDataType2() isFieldCustomName_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *FieldCustomName) GetOne2TString() string {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TString); ok {
		return x.One2TString
	}
	return ""
}

func (x *FieldCustomName) GetOne2TInt32() int32 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TInt32); ok {
		return x.One2TInt32
	}
	return 0
}

func (x *FieldCustomName) GetOne2TInt64() int64 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TInt64); ok {
		return x.One2TInt64
	}
	return 0
}

func (x *FieldCustomName) GetOne2TUint32() uint32 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TUint32); ok {
		return x.One2TUint32
	}
	return 0
}

func (x *FieldCustomName) GetOne2TUint64() uint64 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TUint64); ok {
		return x.One2TUint64
	}
	return 0
}

func (x *FieldCustomName) GetOne2TSint32() int32 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TSint32); ok {
		return x.One2TSint32
	}
	return 0
}

func (x *FieldCustomName) GetOne2TSint64() int64 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TSint64); ok {
		return x.One2TSint64
	}
	return 0
}

func (x *FieldCustomName) GetOne2TSfixed32() int32 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TSfixed32); ok {
		return x.One2TSfixed32
	}
	return 0
}

func (x *FieldCustomName) GetOne2TSfixed64() int64 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TSfixed64); ok {
		return x.One2TSfixed64
	}
	return 0
}

func (x *FieldCustomName) GetOne2TFixed32() uint32 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TFixed32); ok {
		return x.One2TFixed32
	}
	return 0
}

func (x *FieldCustomName) GetOne2TFixed64() uint64 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TFixed64); ok {
		return x.One2TFixed64
	}
	return 0
}

func (x *FieldCustomName) GetOne2TFloat() float32 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TFloat); ok {
		return x.One2TFloat
	}
	return 0
}

func (x *FieldCustomName) GetOne2TDouble() float64 {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TDouble); ok {
		return x.One2TDouble
	}
	return 0
}

func (x *FieldCustomName) GetOne2TBool() bool {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TBool); ok {
		return x.One2TBool
	}
	return false
}

func (x *FieldCustomName) GetOne2TEnum1() FieldCustomName_Enum {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TEnum1); ok {
		return x.One2TEnum1
	}
	return FieldCustomName_running
}

func (x *FieldCustomName) GetOne2TEnum2() FieldCustomName_Enum {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TEnum2); ok {
		return x.One2TEnum2
	}
	return FieldCustomName_running
}

func (x *FieldCustomName) GetOne2TBytes() []byte {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TBytes); ok {
		return x.One2TBytes
	}
	return nil
}

func (x *FieldCustomName) GetOne2TAliases() *FieldCustomName_Aliases {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TAliases); ok {
		return x.One2TAliases
	}
	return nil
}

func (x *FieldCustomName) GetOne2TConfig() *FieldCustomName_Config {
	if x, ok := x.GetDataType2().(*FieldCustomName_One2TConfig); ok {
		return x.One2TConfig
	}
	return nil
}

type isFieldCustomName_DataType1 interface {
	isFieldCustomName_DataType1()
}

type FieldCustomName_One1TString struct {
	One1TString string `protobuf:"bytes,401,opt,name=one1_t_string,json=one1TString,proto3,oneof"`
}

type FieldCustomName_One1TInt32 struct {
	One1TInt32 int32 `protobuf:"varint,402,opt,name=one1_t_int32,json=one1TInt32,proto3,oneof"`
}

type FieldCustomName_One1TInt64 struct {
	One1TInt64 int64 `protobuf:"varint,403,opt,name=one1_t_int64,json=one1TInt64,proto3,oneof"`
}

type FieldCustomName_One1TUint32 struct {
	One1TUint32 uint32 `protobuf:"varint,404,opt,name=one1_t_uint32,json=one1TUint32,proto3,oneof"`
}

type FieldCustomName_One1TUint64 struct {
	One1TUint64 uint64 `protobuf:"varint,405,opt,name=one1_t_uint64,json=one1TUint64,proto3,oneof"`
}

type FieldCustomName_One1TSint32 struct {
	One1TSint32 int32 `protobuf:"zigzag32,406,opt,name=one1_t_sint32,json=one1TSint32,proto3,oneof"`
}

type FieldCustomName_One1TSint64 struct {
	One1TSint64 int64 `protobuf:"zigzag64,407,opt,name=one1_t_sint64,json=one1TSint64,proto3,oneof"`
}

type FieldCustomName_One1TSfixed32 struct {
	One1TSfixed32 int32 `protobuf:"fixed32,408,opt,name=one1_t_sfixed32,json=one1TSfixed32,proto3,oneof"`
}

type FieldCustomName_One1TSfixed64 struct {
	One1TSfixed64 int64 `protobuf:"fixed64,409,opt,name=one1_t_sfixed64,json=one1TSfixed64,proto3,oneof"`
}

type FieldCustomName_One1TFixed32 struct {
	One1TFixed32 uint32 `protobuf:"fixed32,410,opt,name=one1_t_fixed32,json=one1TFixed32,proto3,oneof"`
}

type FieldCustomName_One1TFixed64 struct {
	One1TFixed64 uint64 `protobuf:"fixed64,411,opt,name=one1_t_fixed64,json=one1TFixed64,proto3,oneof"`
}

type FieldCustomName_One1TFloat struct {
	One1TFloat float32 `protobuf:"fixed32,412,opt,name=one1_t_float,json=one1TFloat,proto3,oneof"`
}

type FieldCustomName_One1TDouble struct {
	One1TDouble float64 `protobuf:"fixed64,413,opt,name=one1_t_double,json=one1TDouble,proto3,oneof"`
}

type FieldCustomName_One1TBool struct {
	One1TBool bool `protobuf:"varint,414,opt,name=one1_t_bool,json=one1TBool,proto3,oneof"`
}

type FieldCustomName_One1TEnum1 struct {
	One1TEnum1 FieldCustomName_Enum `protobuf:"varint,415,opt,name=one1_t_enum1,json=one1TEnum1,proto3,enum=gojsontest.FieldCustomName_Enum,oneof"`
}

type FieldCustomName_One1TEnum2 struct {
	One1TEnum2 FieldCustomName_Enum `protobuf:"varint,416,opt,name=one1_t_enum2,json=one1TEnum2,proto3,enum=gojsontest.FieldCustomName_Enum,oneof"`
}

type FieldCustomName_One1TBytes struct {
	One1TBytes []byte `protobuf:"bytes,417,opt,name=one1_t_bytes,json=one1TBytes,proto3,oneof"`
}

type FieldCustomName_One1TAliases struct {
	One1TAliases *FieldCustomName_Aliases `protobuf:"bytes,418,opt,name=one1_t_aliases,json=one1TAliases,proto3,oneof"`
}

type FieldCustomName_One1TConfig struct {
	One1TConfig *FieldCustomName_Config `protobuf:"bytes,419,opt,name=one1_t_config,json=one1TConfig,proto3,oneof"`
}

func (*FieldCustomName_One1TString) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TInt32) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TInt64) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TUint32) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TUint64) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TSint32) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TSint64) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TSfixed32) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TSfixed64) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TFixed32) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TFixed64) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TFloat) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TDouble) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TBool) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TEnum1) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TEnum2) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TBytes) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TAliases) isFieldCustomName_DataType1() {}

func (*FieldCustomName_One1TConfig) isFieldCustomName_DataType1() {}

type isFieldCustomName_DataType2 interface {
	isFieldCustomName_DataType2()
}

type FieldCustomName_One2TString struct {
	One2TString string `protobuf:"bytes,501,opt,name=one2_t_string,json=one2TString,proto3,oneof"`
}

type FieldCustomName_One2TInt32 struct {
	One2TInt32 int32 `protobuf:"varint,502,opt,name=one2_t_int32,json=one2TInt32,proto3,oneof"`
}

type FieldCustomName_One2TInt64 struct {
	One2TInt64 int64 `protobuf:"varint,503,opt,name=one2_t_int64,json=one2TInt64,proto3,oneof"`
}

type FieldCustomName_One2TUint32 struct {
	One2TUint32 uint32 `protobuf:"varint,504,opt,name=one2_t_uint32,json=one2TUint32,proto3,oneof"`
}

type FieldCustomName_One2TUint64 struct {
	One2TUint64 uint64 `protobuf:"varint,505,opt,name=one2_t_uint64,json=one2TUint64,proto3,oneof"`
}

type FieldCustomName_One2TSint32 struct {
	One2TSint32 int32 `protobuf:"zigzag32,506,opt,name=one2_t_sint32,json=one2TSint32,proto3,oneof"`
}

type FieldCustomName_One2TSint64 struct {
	One2TSint64 int64 `protobuf:"zigzag64,507,opt,name=one2_t_sint64,json=one2TSint64,proto3,oneof"`
}

type FieldCustomName_One2TSfixed32 struct {
	One2TSfixed32 int32 `protobuf:"fixed32,508,opt,name=one2_t_sfixed32,json=one2TSfixed32,proto3,oneof"`
}

type FieldCustomName_One2TSfixed64 struct {
	One2TSfixed64 int64 `protobuf:"fixed64,509,opt,name=one2_t_sfixed64,json=one2TSfixed64,proto3,oneof"`
}

type FieldCustomName_One2TFixed32 struct {
	One2TFixed32 uint32 `protobuf:"fixed32,510,opt,name=one2_t_fixed32,json=one2TFixed32,proto3,oneof"`
}

type FieldCustomName_One2TFixed64 struct {
	One2TFixed64 uint64 `protobuf:"fixed64,511,opt,name=one2_t_fixed64,json=one2TFixed64,proto3,oneof"`
}

type FieldCustomName_One2TFloat struct {
	One2TFloat float32 `protobuf:"fixed32,512,opt,name=one2_t_float,json=one2TFloat,proto3,oneof"`
}

type FieldCustomName_One2TDouble struct {
	One2TDouble float64 `protobuf:"fixed64,513,opt,name=one2_t_double,json=one2TDouble,proto3,oneof"`
}

type FieldCustomName_One2TBool struct {
	One2TBool bool `protobuf:"varint,514,opt,name=one2_t_bool,json=one2TBool,proto3,oneof"`
}

type FieldCustomName_One2TEnum1 struct {
	One2TEnum1 FieldCustomName_Enum `protobuf:"varint,515,opt,name=one2_t_enum1,json=one2TEnum1,proto3,enum=gojsontest.FieldCustomName_Enum,oneof"`
}

type FieldCustomName_One2TEnum2 struct {
	One2TEnum2 FieldCustomName_Enum `protobuf:"varint,516,opt,name=one2_t_enum2,json=one2TEnum2,proto3,enum=gojsontest.FieldCustomName_Enum,oneof"`
}

type FieldCustomName_One2TBytes struct {
	One2TBytes []byte `protobuf:"bytes,517,opt,name=one2_t_bytes,json=one2TBytes,proto3,oneof"`
}

type FieldCustomName_One2TAliases struct {
	One2TAliases *FieldCustomName_Aliases `protobuf:"bytes,518,opt,name=one2_t_aliases,json=one2TAliases,proto3,oneof"`
}

type FieldCustomName_One2TConfig struct {
	One2TConfig *FieldCustomName_Config `protobuf:"bytes,519,opt,name=one2_t_config,json=one2TConfig,proto3,oneof"`
}

func (*FieldCustomName_One2TString) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TInt32) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TInt64) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TUint32) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TUint64) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TSint32) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TSint64) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TSfixed32) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TSfixed64) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TFixed32) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TFixed64) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TFloat) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TDouble) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TBool) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TEnum1) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TEnum2) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TBytes) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TAliases) isFieldCustomName_DataType2() {}

func (*FieldCustomName_One2TConfig) isFieldCustomName_DataType2() {}

type OneofHide1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataType1:
	//	*OneofHide1_One1String1
	//	*OneofHide1_One1String2
	DataType1 isOneofHide1_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*OneofHide1_One2String1
	//	*OneofHide1_One2String2
	DataType2 isOneofHide1_DataType2 `protobuf_oneof:"data_type2"`
}

func (x *OneofHide1) Reset() {
	*x = OneofHide1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofHide1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofHide1) ProtoMessage() {}

func (x *OneofHide1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofHide1.ProtoReflect.Descriptor instead.
func (*OneofHide1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{9}
}

func (m *OneofHide1) GetDataType1() isOneofHide1_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *OneofHide1) GetOne1String1() string {
	if x, ok := x.GetDataType1().(*OneofHide1_One1String1); ok {
		return x.One1String1
	}
	return ""
}

func (x *OneofHide1) GetOne1String2() string {
	if x, ok := x.GetDataType1().(*OneofHide1_One1String2); ok {
		return x.One1String2
	}
	return ""
}

func (m *OneofHide1) GetDataType2() isOneofHide1_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *OneofHide1) GetOne2String1() string {
	if x, ok := x.GetDataType2().(*OneofHide1_One2String1); ok {
		return x.One2String1
	}
	return ""
}

func (x *OneofHide1) GetOne2String2() string {
	if x, ok := x.GetDataType2().(*OneofHide1_One2String2); ok {
		return x.One2String2
	}
	return ""
}

type isOneofHide1_DataType1 interface {
	isOneofHide1_DataType1()
}

type OneofHide1_One1String1 struct {
	One1String1 string `protobuf:"bytes,10,opt,name=one1_string1,json=one1String1,proto3,oneof"`
}

type OneofHide1_One1String2 struct {
	One1String2 string `protobuf:"bytes,11,opt,name=one1_string2,json=one1String2,proto3,oneof"`
}

func (*OneofHide1_One1String1) isOneofHide1_DataType1() {}

func (*OneofHide1_One1String2) isOneofHide1_DataType1() {}

type isOneofHide1_DataType2 interface {
	isOneofHide1_DataType2()
}

type OneofHide1_One2String1 struct {
	One2String1 string `protobuf:"bytes,20,opt,name=one2_string1,json=one2String1,proto3,oneof"`
}

type OneofHide1_One2String2 struct {
	One2String2 string `protobuf:"bytes,21,opt,name=one2_string2,json=one2String2,proto3,oneof"`
}

func (*OneofHide1_One2String1) isOneofHide1_DataType2() {}

func (*OneofHide1_One2String2) isOneofHide1_DataType2() {}

type OneofHide2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataType1:
	//	*OneofHide2_One1String1
	//	*OneofHide2_One1String2
	DataType1 isOneofHide2_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*OneofHide2_One2String1
	//	*OneofHide2_One2String2
	DataType2 isOneofHide2_DataType2 `protobuf_oneof:"data_type2"`
}

func (x *OneofHide2) Reset() {
	*x = OneofHide2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofHide2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofHide2) ProtoMessage() {}

func (x *OneofHide2) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofHide2.ProtoReflect.Descriptor instead.
func (*OneofHide2) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{10}
}

func (m *OneofHide2) GetDataType1() isOneofHide2_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *OneofHide2) GetOne1String1() string {
	if x, ok := x.GetDataType1().(*OneofHide2_One1String1); ok {
		return x.One1String1
	}
	return ""
}

func (x *OneofHide2) GetOne1String2() string {
	if x, ok := x.GetDataType1().(*OneofHide2_One1String2); ok {
		return x.One1String2
	}
	return ""
}

func (m *OneofHide2) GetDataType2() isOneofHide2_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *OneofHide2) GetOne2String1() string {
	if x, ok := x.GetDataType2().(*OneofHide2_One2String1); ok {
		return x.One2String1
	}
	return ""
}

func (x *OneofHide2) GetOne2String2() string {
	if x, ok := x.GetDataType2().(*OneofHide2_One2String2); ok {
		return x.One2String2
	}
	return ""
}

type isOneofHide2_DataType1 interface {
	isOneofHide2_DataType1()
}

type OneofHide2_One1String1 struct {
	One1String1 string `protobuf:"bytes,10,opt,name=one1_string1,json=one1String1,proto3,oneof"`
}

type OneofHide2_One1String2 struct {
	One1String2 string `protobuf:"bytes,11,opt,name=one1_string2,json=one1String2,proto3,oneof"`
}

func (*OneofHide2_One1String1) isOneofHide2_DataType1() {}

func (*OneofHide2_One1String2) isOneofHide2_DataType1() {}

type isOneofHide2_DataType2 interface {
	isOneofHide2_DataType2()
}

type OneofHide2_One2String1 struct {
	One2String1 string `protobuf:"bytes,20,opt,name=one2_string1,json=one2String1,proto3,oneof"`
}

type OneofHide2_One2String2 struct {
	One2String2 string `protobuf:"bytes,21,opt,name=one2_string2,json=one2String2,proto3,oneof"`
}

func (*OneofHide2_One2String1) isOneofHide2_DataType2() {}

func (*OneofHide2_One2String2) isOneofHide2_DataType2() {}

type OneofHide3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataType1:
	//	*OneofHide3_One1String1
	//	*OneofHide3_One1String2
	DataType1 isOneofHide3_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*OneofHide3_One2String1
	//	*OneofHide3_One2String2
	DataType2 isOneofHide3_DataType2 `protobuf_oneof:"data_type2"`
}

func (x *OneofHide3) Reset() {
	*x = OneofHide3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofHide3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofHide3) ProtoMessage() {}

func (x *OneofHide3) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofHide3.ProtoReflect.Descriptor instead.
func (*OneofHide3) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{11}
}

func (m *OneofHide3) GetDataType1() isOneofHide3_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *OneofHide3) GetOne1String1() string {
	if x, ok := x.GetDataType1().(*OneofHide3_One1String1); ok {
		return x.One1String1
	}
	return ""
}

func (x *OneofHide3) GetOne1String2() string {
	if x, ok := x.GetDataType1().(*OneofHide3_One1String2); ok {
		return x.One1String2
	}
	return ""
}

func (m *OneofHide3) GetDataType2() isOneofHide3_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *OneofHide3) GetOne2String1() string {
	if x, ok := x.GetDataType2().(*OneofHide3_One2String1); ok {
		return x.One2String1
	}
	return ""
}

func (x *OneofHide3) GetOne2String2() string {
	if x, ok := x.GetDataType2().(*OneofHide3_One2String2); ok {
		return x.One2String2
	}
	return ""
}

type isOneofHide3_DataType1 interface {
	isOneofHide3_DataType1()
}

type OneofHide3_One1String1 struct {
	One1String1 string `protobuf:"bytes,10,opt,name=one1_string1,json=one1String1,proto3,oneof"`
}

type OneofHide3_One1String2 struct {
	One1String2 string `protobuf:"bytes,11,opt,name=one1_string2,json=one1String2,proto3,oneof"`
}

func (*OneofHide3_One1String1) isOneofHide3_DataType1() {}

func (*OneofHide3_One1String2) isOneofHide3_DataType1() {}

type isOneofHide3_DataType2 interface {
	isOneofHide3_DataType2()
}

type OneofHide3_One2String1 struct {
	One2String1 string `protobuf:"bytes,20,opt,name=one2_string1,json=one2String1,proto3,oneof"`
}

type OneofHide3_One2String2 struct {
	One2String2 string `protobuf:"bytes,21,opt,name=one2_string2,json=one2String2,proto3,oneof"`
}

func (*OneofHide3_One2String1) isOneofHide3_DataType2() {}

func (*OneofHide3_One2String2) isOneofHide3_DataType2() {}

type OneofHide4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DataType1:
	//	*OneofHide4_One1String1
	//	*OneofHide4_One1String2
	DataType1 isOneofHide4_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*OneofHide4_One2String1
	//	*OneofHide4_One2String2
	DataType2 isOneofHide4_DataType2 `protobuf_oneof:"data_type2"`
}

func (x *OneofHide4) Reset() {
	*x = OneofHide4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofHide4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofHide4) ProtoMessage() {}

func (x *OneofHide4) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofHide4.ProtoReflect.Descriptor instead.
func (*OneofHide4) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{12}
}

func (m *OneofHide4) GetDataType1() isOneofHide4_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *OneofHide4) GetOne1String1() string {
	if x, ok := x.GetDataType1().(*OneofHide4_One1String1); ok {
		return x.One1String1
	}
	return ""
}

func (x *OneofHide4) GetOne1String2() string {
	if x, ok := x.GetDataType1().(*OneofHide4_One1String2); ok {
		return x.One1String2
	}
	return ""
}

func (m *OneofHide4) GetDataType2() isOneofHide4_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *OneofHide4) GetOne2String1() string {
	if x, ok := x.GetDataType2().(*OneofHide4_One2String1); ok {
		return x.One2String1
	}
	return ""
}

func (x *OneofHide4) GetOne2String2() string {
	if x, ok := x.GetDataType2().(*OneofHide4_One2String2); ok {
		return x.One2String2
	}
	return ""
}

type isOneofHide4_DataType1 interface {
	isOneofHide4_DataType1()
}

type OneofHide4_One1String1 struct {
	One1String1 string `protobuf:"bytes,10,opt,name=one1_string1,json=one1String1,proto3,oneof"`
}

type OneofHide4_One1String2 struct {
	One1String2 string `protobuf:"bytes,11,opt,name=one1_string2,json=one1String2,proto3,oneof"`
}

func (*OneofHide4_One1String1) isOneofHide4_DataType1() {}

func (*OneofHide4_One1String2) isOneofHide4_DataType1() {}

type isOneofHide4_DataType2 interface {
	isOneofHide4_DataType2()
}

type OneofHide4_One2String1 struct {
	One2String1 string `protobuf:"bytes,20,opt,name=one2_string1,json=one2String1,proto3,oneof"`
}

type OneofHide4_One2String2 struct {
	One2String2 string `protobuf:"bytes,21,opt,name=one2_string2,json=one2String2,proto3,oneof"`
}

func (*OneofHide4_One2String1) isOneofHide4_DataType2() {}

func (*OneofHide4_One2String2) isOneofHide4_DataType2() {}

type FieldOmitempty1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1 string `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3" json:"t_string1,omitempty"`
	TString2 string `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3" json:"t_string2,omitempty"`
	// Types that are assignable to DataType1:
	//	*FieldOmitempty1_One1Int32
	DataType1 isFieldOmitempty1_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*FieldOmitempty1_One2Int64
	DataType2 isFieldOmitempty1_DataType2 `protobuf_oneof:"data_type2"`
	// Types that are assignable to DataType3:
	//	*FieldOmitempty1_One3Uint32
	DataType3 isFieldOmitempty1_DataType3 `protobuf_oneof:"data_type3"`
}

func (x *FieldOmitempty1) Reset() {
	*x = FieldOmitempty1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOmitempty1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOmitempty1) ProtoMessage() {}

func (x *FieldOmitempty1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOmitempty1.ProtoReflect.Descriptor instead.
func (*FieldOmitempty1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{13}
}

func (x *FieldOmitempty1) GetTString1() string {
	if x != nil {
		return x.TString1
	}
	return ""
}

func (x *FieldOmitempty1) GetTString2() string {
	if x != nil {
		return x.TString2
	}
	return ""
}

func (m *FieldOmitempty1) GetDataType1() isFieldOmitempty1_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *FieldOmitempty1) GetOne1Int32() int32 {
	if x, ok := x.GetDataType1().(*FieldOmitempty1_One1Int32); ok {
		return x.One1Int32
	}
	return 0
}

func (m *FieldOmitempty1) GetDataType2() isFieldOmitempty1_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *FieldOmitempty1) GetOne2Int64() int64 {
	if x, ok := x.GetDataType2().(*FieldOmitempty1_One2Int64); ok {
		return x.One2Int64
	}
	return 0
}

func (m *FieldOmitempty1) GetDataType3() isFieldOmitempty1_DataType3 {
	if m != nil {
		return m.DataType3
	}
	return nil
}

func (x *FieldOmitempty1) GetOne3Uint32() uint32 {
	if x, ok := x.GetDataType3().(*FieldOmitempty1_One3Uint32); ok {
		return x.One3Uint32
	}
	return 0
}

type isFieldOmitempty1_DataType1 interface {
	isFieldOmitempty1_DataType1()
}

type FieldOmitempty1_One1Int32 struct {
	One1Int32 int32 `protobuf:"varint,10,opt,name=one1_int32,json=one1Int32,proto3,oneof"`
}

func (*FieldOmitempty1_One1Int32) isFieldOmitempty1_DataType1() {}

type isFieldOmitempty1_DataType2 interface {
	isFieldOmitempty1_DataType2()
}

type FieldOmitempty1_One2Int64 struct {
	One2Int64 int64 `protobuf:"varint,20,opt,name=one2_int64,json=one2Int64,proto3,oneof"`
}

func (*FieldOmitempty1_One2Int64) isFieldOmitempty1_DataType2() {}

type isFieldOmitempty1_DataType3 interface {
	isFieldOmitempty1_DataType3()
}

type FieldOmitempty1_One3Uint32 struct {
	One3Uint32 uint32 `protobuf:"varint,30,opt,name=one3_uint32,json=one3Uint32,proto3,oneof"`
}

func (*FieldOmitempty1_One3Uint32) isFieldOmitempty1_DataType3() {}

type FieldOmitempty2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1 string `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3" json:"t_string1,omitempty"`
	TString2 string `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3" json:"t_string2,omitempty"`
	TString3 string `protobuf:"bytes,3,opt,name=t_string3,json=tString3,proto3" json:"t_string3,omitempty"`
	TString4 string `protobuf:"bytes,4,opt,name=t_string4,json=tString4,proto3" json:"t_string4,omitempty"`
	// Types that are assignable to DataType1:
	//	*FieldOmitempty2_One1Int32
	DataType1 isFieldOmitempty2_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*FieldOmitempty2_One2Int64
	DataType2 isFieldOmitempty2_DataType2 `protobuf_oneof:"data_type2"`
	// Types that are assignable to DataType3:
	//	*FieldOmitempty2_One3Uint32
	DataType3 isFieldOmitempty2_DataType3 `protobuf_oneof:"data_type3"`
	// Types that are assignable to DataType4:
	//	*FieldOmitempty2_One4Uint64
	DataType4 isFieldOmitempty2_DataType4 `protobuf_oneof:"data_type4"`
	// Types that are assignable to DataType5:
	//	*FieldOmitempty2_One5String1
	DataType5 isFieldOmitempty2_DataType5 `protobuf_oneof:"data_type5"`
	// Types that are assignable to DataType6:
	//	*FieldOmitempty2_One6Sint32
	//	*FieldOmitempty2_One6Sint64
	DataType6 isFieldOmitempty2_DataType6 `protobuf_oneof:"data_type6"`
	// Types that are assignable to DataType7:
	//	*FieldOmitempty2_One7Bool1
	//	*FieldOmitempty2_One7Bool2
	DataType7 isFieldOmitempty2_DataType7 `protobuf_oneof:"data_type7"`
}

func (x *FieldOmitempty2) Reset() {
	*x = FieldOmitempty2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOmitempty2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOmitempty2) ProtoMessage() {}

func (x *FieldOmitempty2) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOmitempty2.ProtoReflect.Descriptor instead.
func (*FieldOmitempty2) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{14}
}

func (x *FieldOmitempty2) GetTString1() string {
	if x != nil {
		return x.TString1
	}
	return ""
}

func (x *FieldOmitempty2) GetTString2() string {
	if x != nil {
		return x.TString2
	}
	return ""
}

func (x *FieldOmitempty2) GetTString3() string {
	if x != nil {
		return x.TString3
	}
	return ""
}

func (x *FieldOmitempty2) GetTString4() string {
	if x != nil {
		return x.TString4
	}
	return ""
}

func (m *FieldOmitempty2) GetDataType1() isFieldOmitempty2_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *FieldOmitempty2) GetOne1Int32() int32 {
	if x, ok := x.GetDataType1().(*FieldOmitempty2_One1Int32); ok {
		return x.One1Int32
	}
	return 0
}

func (m *FieldOmitempty2) GetDataType2() isFieldOmitempty2_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *FieldOmitempty2) GetOne2Int64() int64 {
	if x, ok := x.GetDataType2().(*FieldOmitempty2_One2Int64); ok {
		return x.One2Int64
	}
	return 0
}

func (m *FieldOmitempty2) GetDataType3() isFieldOmitempty2_DataType3 {
	if m != nil {
		return m.DataType3
	}
	return nil
}

func (x *FieldOmitempty2) GetOne3Uint32() uint32 {
	if x, ok := x.GetDataType3().(*FieldOmitempty2_One3Uint32); ok {
		return x.One3Uint32
	}
	return 0
}

func (m *FieldOmitempty2) GetDataType4() isFieldOmitempty2_DataType4 {
	if m != nil {
		return m.DataType4
	}
	return nil
}

func (x *FieldOmitempty2) GetOne4Uint64() uint64 {
	if x, ok := x.GetDataType4().(*FieldOmitempty2_One4Uint64); ok {
		return x.One4Uint64
	}
	return 0
}

func (m *FieldOmitempty2) GetDataType5() isFieldOmitempty2_DataType5 {
	if m != nil {
		return m.DataType5
	}
	return nil
}

func (x *FieldOmitempty2) GetOne5String1() string {
	if x, ok := x.GetDataType5().(*FieldOmitempty2_One5String1); ok {
		return x.One5String1
	}
	return ""
}

func (m *FieldOmitempty2) GetDataType6() isFieldOmitempty2_DataType6 {
	if m != nil {
		return m.DataType6
	}
	return nil
}

func (x *FieldOmitempty2) GetOne6Sint32() int32 {
	if x, ok := x.GetDataType6().(*FieldOmitempty2_One6Sint32); ok {
		return x.One6Sint32
	}
	return 0
}

func (x *FieldOmitempty2) GetOne6Sint64() int64 {
	if x, ok := x.GetDataType6().(*FieldOmitempty2_One6Sint64); ok {
		return x.One6Sint64
	}
	return 0
}

func (m *FieldOmitempty2) GetDataType7() isFieldOmitempty2_DataType7 {
	if m != nil {
		return m.DataType7
	}
	return nil
}

func (x *FieldOmitempty2) GetOne7Bool1() bool {
	if x, ok := x.GetDataType7().(*FieldOmitempty2_One7Bool1); ok {
		return x.One7Bool1
	}
	return false
}

func (x *FieldOmitempty2) GetOne7Bool2() bool {
	if x, ok := x.GetDataType7().(*FieldOmitempty2_One7Bool2); ok {
		return x.One7Bool2
	}
	return false
}

type isFieldOmitempty2_DataType1 interface {
	isFieldOmitempty2_DataType1()
}

type FieldOmitempty2_One1Int32 struct {
	One1Int32 int32 `protobuf:"varint,10,opt,name=one1_int32,json=one1Int32,proto3,oneof"`
}

func (*FieldOmitempty2_One1Int32) isFieldOmitempty2_DataType1() {}

type isFieldOmitempty2_DataType2 interface {
	isFieldOmitempty2_DataType2()
}

type FieldOmitempty2_One2Int64 struct {
	One2Int64 int64 `protobuf:"varint,20,opt,name=one2_int64,json=one2Int64,proto3,oneof"`
}

func (*FieldOmitempty2_One2Int64) isFieldOmitempty2_DataType2() {}

type isFieldOmitempty2_DataType3 interface {
	isFieldOmitempty2_DataType3()
}

type FieldOmitempty2_One3Uint32 struct {
	One3Uint32 uint32 `protobuf:"varint,30,opt,name=one3_uint32,json=one3Uint32,proto3,oneof"`
}

func (*FieldOmitempty2_One3Uint32) isFieldOmitempty2_DataType3() {}

type isFieldOmitempty2_DataType4 interface {
	isFieldOmitempty2_DataType4()
}

type FieldOmitempty2_One4Uint64 struct {
	One4Uint64 uint64 `protobuf:"varint,40,opt,name=one4_uint64,json=one4Uint64,proto3,oneof"`
}

func (*FieldOmitempty2_One4Uint64) isFieldOmitempty2_DataType4() {}

type isFieldOmitempty2_DataType5 interface {
	isFieldOmitempty2_DataType5()
}

type FieldOmitempty2_One5String1 struct {
	One5String1 string `protobuf:"bytes,50,opt,name=one5_string1,json=one5String1,proto3,oneof"`
}

func (*FieldOmitempty2_One5String1) isFieldOmitempty2_DataType5() {}

type isFieldOmitempty2_DataType6 interface {
	isFieldOmitempty2_DataType6()
}

type FieldOmitempty2_One6Sint32 struct {
	One6Sint32 int32 `protobuf:"zigzag32,60,opt,name=one6_sint32,json=one6Sint32,proto3,oneof"`
}

type FieldOmitempty2_One6Sint64 struct {
	One6Sint64 int64 `protobuf:"zigzag64,61,opt,name=one6_sint64,json=one6Sint64,proto3,oneof"`
}

func (*FieldOmitempty2_One6Sint32) isFieldOmitempty2_DataType6() {}

func (*FieldOmitempty2_One6Sint64) isFieldOmitempty2_DataType6() {}

type isFieldOmitempty2_DataType7 interface {
	isFieldOmitempty2_DataType7()
}

type FieldOmitempty2_One7Bool1 struct {
	One7Bool1 bool `protobuf:"varint,70,opt,name=one7_bool1,json=one7Bool1,proto3,oneof"`
}

type FieldOmitempty2_One7Bool2 struct {
	One7Bool2 bool `protobuf:"varint,71,opt,name=one7_bool2,json=one7Bool2,proto3,oneof"`
}

func (*FieldOmitempty2_One7Bool1) isFieldOmitempty2_DataType7() {}

func (*FieldOmitempty2_One7Bool2) isFieldOmitempty2_DataType7() {}

type FieldOmitempty3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1 string `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3" json:"t_string1,omitempty"`
	TString2 string `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3" json:"t_string2,omitempty"`
	TString3 string `protobuf:"bytes,3,opt,name=t_string3,json=tString3,proto3" json:"t_string3,omitempty"`
	TString4 string `protobuf:"bytes,4,opt,name=t_string4,json=tString4,proto3" json:"t_string4,omitempty"`
	TString5 string `protobuf:"bytes,5,opt,name=t_string5,json=tString5,proto3" json:"t_string5,omitempty"`
	// Types that are assignable to DataType1:
	//	*FieldOmitempty3_One1Int32
	DataType1 isFieldOmitempty3_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*FieldOmitempty3_One2Int64
	DataType2 isFieldOmitempty3_DataType2 `protobuf_oneof:"data_type2"`
	// Types that are assignable to DataType3:
	//	*FieldOmitempty3_One3Uint32
	DataType3 isFieldOmitempty3_DataType3 `protobuf_oneof:"data_type3"`
	// Types that are assignable to DataType4:
	//	*FieldOmitempty3_One4Uint64
	DataType4 isFieldOmitempty3_DataType4 `protobuf_oneof:"data_type4"`
	// Types that are assignable to DataType5:
	//	*FieldOmitempty3_One5String1
	//	*FieldOmitempty3_One5String2
	DataType5 isFieldOmitempty3_DataType5 `protobuf_oneof:"data_type5"`
	// Types that are assignable to DataType6:
	//	*FieldOmitempty3_One6Sint32
	//	*FieldOmitempty3_One6Sint64
	DataType6 isFieldOmitempty3_DataType6 `protobuf_oneof:"data_type6"`
	// Types that are assignable to DataType7:
	//	*FieldOmitempty3_One7Bool1
	//	*FieldOmitempty3_One7Bool2
	DataType7 isFieldOmitempty3_DataType7 `protobuf_oneof:"data_type7"`
	// Types that are assignable to DataType8:
	//	*FieldOmitempty3_One8Bool1
	//	*FieldOmitempty3_One8Bool2
	DataType8 isFieldOmitempty3_DataType8 `protobuf_oneof:"data_type8"`
}

func (x *FieldOmitempty3) Reset() {
	*x = FieldOmitempty3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOmitempty3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOmitempty3) ProtoMessage() {}

func (x *FieldOmitempty3) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOmitempty3.ProtoReflect.Descriptor instead.
func (*FieldOmitempty3) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{15}
}

func (x *FieldOmitempty3) GetTString1() string {
	if x != nil {
		return x.TString1
	}
	return ""
}

func (x *FieldOmitempty3) GetTString2() string {
	if x != nil {
		return x.TString2
	}
	return ""
}

func (x *FieldOmitempty3) GetTString3() string {
	if x != nil {
		return x.TString3
	}
	return ""
}

func (x *FieldOmitempty3) GetTString4() string {
	if x != nil {
		return x.TString4
	}
	return ""
}

func (x *FieldOmitempty3) GetTString5() string {
	if x != nil {
		return x.TString5
	}
	return ""
}

func (m *FieldOmitempty3) GetDataType1() isFieldOmitempty3_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *FieldOmitempty3) GetOne1Int32() int32 {
	if x, ok := x.GetDataType1().(*FieldOmitempty3_One1Int32); ok {
		return x.One1Int32
	}
	return 0
}

func (m *FieldOmitempty3) GetDataType2() isFieldOmitempty3_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *FieldOmitempty3) GetOne2Int64() int64 {
	if x, ok := x.GetDataType2().(*FieldOmitempty3_One2Int64); ok {
		return x.One2Int64
	}
	return 0
}

func (m *FieldOmitempty3) GetDataType3() isFieldOmitempty3_DataType3 {
	if m != nil {
		return m.DataType3
	}
	return nil
}

func (x *FieldOmitempty3) GetOne3Uint32() uint32 {
	if x, ok := x.GetDataType3().(*FieldOmitempty3_One3Uint32); ok {
		return x.One3Uint32
	}
	return 0
}

func (m *FieldOmitempty3) GetDataType4() isFieldOmitempty3_DataType4 {
	if m != nil {
		return m.DataType4
	}
	return nil
}

func (x *FieldOmitempty3) GetOne4Uint64() uint64 {
	if x, ok := x.GetDataType4().(*FieldOmitempty3_One4Uint64); ok {
		return x.One4Uint64
	}
	return 0
}

func (m *FieldOmitempty3) GetDataType5() isFieldOmitempty3_DataType5 {
	if m != nil {
		return m.DataType5
	}
	return nil
}

func (x *FieldOmitempty3) GetOne5String1() string {
	if x, ok := x.GetDataType5().(*FieldOmitempty3_One5String1); ok {
		return x.One5String1
	}
	return ""
}

func (x *FieldOmitempty3) GetOne5String2() string {
	if x, ok := x.GetDataType5().(*FieldOmitempty3_One5String2); ok {
		return x.One5String2
	}
	return ""
}

func (m *FieldOmitempty3) GetDataType6() isFieldOmitempty3_DataType6 {
	if m != nil {
		return m.DataType6
	}
	return nil
}

func (x *FieldOmitempty3) GetOne6Sint32() int32 {
	if x, ok := x.GetDataType6().(*FieldOmitempty3_One6Sint32); ok {
		return x.One6Sint32
	}
	return 0
}

func (x *FieldOmitempty3) GetOne6Sint64() int64 {
	if x, ok := x.GetDataType6().(*FieldOmitempty3_One6Sint64); ok {
		return x.One6Sint64
	}
	return 0
}

func (m *FieldOmitempty3) GetDataType7() isFieldOmitempty3_DataType7 {
	if m != nil {
		return m.DataType7
	}
	return nil
}

func (x *FieldOmitempty3) GetOne7Bool1() bool {
	if x, ok := x.GetDataType7().(*FieldOmitempty3_One7Bool1); ok {
		return x.One7Bool1
	}
	return false
}

func (x *FieldOmitempty3) GetOne7Bool2() bool {
	if x, ok := x.GetDataType7().(*FieldOmitempty3_One7Bool2); ok {
		return x.One7Bool2
	}
	return false
}

func (m *FieldOmitempty3) GetDataType8() isFieldOmitempty3_DataType8 {
	if m != nil {
		return m.DataType8
	}
	return nil
}

func (x *FieldOmitempty3) GetOne8Bool1() bool {
	if x, ok := x.GetDataType8().(*FieldOmitempty3_One8Bool1); ok {
		return x.One8Bool1
	}
	return false
}

func (x *FieldOmitempty3) GetOne8Bool2() bool {
	if x, ok := x.GetDataType8().(*FieldOmitempty3_One8Bool2); ok {
		return x.One8Bool2
	}
	return false
}

type isFieldOmitempty3_DataType1 interface {
	isFieldOmitempty3_DataType1()
}

type FieldOmitempty3_One1Int32 struct {
	One1Int32 int32 `protobuf:"varint,10,opt,name=one1_int32,json=one1Int32,proto3,oneof"`
}

func (*FieldOmitempty3_One1Int32) isFieldOmitempty3_DataType1() {}

type isFieldOmitempty3_DataType2 interface {
	isFieldOmitempty3_DataType2()
}

type FieldOmitempty3_One2Int64 struct {
	One2Int64 int64 `protobuf:"varint,20,opt,name=one2_int64,json=one2Int64,proto3,oneof"`
}

func (*FieldOmitempty3_One2Int64) isFieldOmitempty3_DataType2() {}

type isFieldOmitempty3_DataType3 interface {
	isFieldOmitempty3_DataType3()
}

type FieldOmitempty3_One3Uint32 struct {
	One3Uint32 uint32 `protobuf:"varint,30,opt,name=one3_uint32,json=one3Uint32,proto3,oneof"`
}

func (*FieldOmitempty3_One3Uint32) isFieldOmitempty3_DataType3() {}

type isFieldOmitempty3_DataType4 interface {
	isFieldOmitempty3_DataType4()
}

type FieldOmitempty3_One4Uint64 struct {
	One4Uint64 uint64 `protobuf:"varint,40,opt,name=one4_uint64,json=one4Uint64,proto3,oneof"`
}

func (*FieldOmitempty3_One4Uint64) isFieldOmitempty3_DataType4() {}

type isFieldOmitempty3_DataType5 interface {
	isFieldOmitempty3_DataType5()
}

type FieldOmitempty3_One5String1 struct {
	One5String1 string `protobuf:"bytes,50,opt,name=one5_string1,json=one5String1,proto3,oneof"`
}

type FieldOmitempty3_One5String2 struct {
	One5String2 string `protobuf:"bytes,51,opt,name=one5_string2,json=one5String2,proto3,oneof"`
}

func (*FieldOmitempty3_One5String1) isFieldOmitempty3_DataType5() {}

func (*FieldOmitempty3_One5String2) isFieldOmitempty3_DataType5() {}

type isFieldOmitempty3_DataType6 interface {
	isFieldOmitempty3_DataType6()
}

type FieldOmitempty3_One6Sint32 struct {
	One6Sint32 int32 `protobuf:"zigzag32,60,opt,name=one6_sint32,json=one6Sint32,proto3,oneof"`
}

type FieldOmitempty3_One6Sint64 struct {
	One6Sint64 int64 `protobuf:"zigzag64,61,opt,name=one6_sint64,json=one6Sint64,proto3,oneof"`
}

func (*FieldOmitempty3_One6Sint32) isFieldOmitempty3_DataType6() {}

func (*FieldOmitempty3_One6Sint64) isFieldOmitempty3_DataType6() {}

type isFieldOmitempty3_DataType7 interface {
	isFieldOmitempty3_DataType7()
}

type FieldOmitempty3_One7Bool1 struct {
	One7Bool1 bool `protobuf:"varint,70,opt,name=one7_bool1,json=one7Bool1,proto3,oneof"`
}

type FieldOmitempty3_One7Bool2 struct {
	One7Bool2 bool `protobuf:"varint,71,opt,name=one7_bool2,json=one7Bool2,proto3,oneof"`
}

func (*FieldOmitempty3_One7Bool1) isFieldOmitempty3_DataType7() {}

func (*FieldOmitempty3_One7Bool2) isFieldOmitempty3_DataType7() {}

type isFieldOmitempty3_DataType8 interface {
	isFieldOmitempty3_DataType8()
}

type FieldOmitempty3_One8Bool1 struct {
	One8Bool1 bool `protobuf:"varint,80,opt,name=one8_bool1,json=one8Bool1,proto3,oneof"`
}

type FieldOmitempty3_One8Bool2 struct {
	One8Bool2 bool `protobuf:"varint,81,opt,name=one8_bool2,json=one8Bool2,proto3,oneof"`
}

func (*FieldOmitempty3_One8Bool1) isFieldOmitempty3_DataType8() {}

func (*FieldOmitempty3_One8Bool2) isFieldOmitempty3_DataType8() {}

type FieldOmitempty4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1 string `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3" json:"t_string1,omitempty"`
	TString2 string `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3" json:"t_string2,omitempty"`
	TString3 string `protobuf:"bytes,3,opt,name=t_string3,json=tString3,proto3" json:"t_string3,omitempty"`
	TString4 string `protobuf:"bytes,4,opt,name=t_string4,json=tString4,proto3" json:"t_string4,omitempty"`
	// Types that are assignable to DataType1:
	//	*FieldOmitempty4_One1Int32
	DataType1 isFieldOmitempty4_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*FieldOmitempty4_One2Int64
	DataType2 isFieldOmitempty4_DataType2 `protobuf_oneof:"data_type2"`
	// Types that are assignable to DataType3:
	//	*FieldOmitempty4_One3Uint32
	DataType3 isFieldOmitempty4_DataType3 `protobuf_oneof:"data_type3"`
	// Types that are assignable to DataType4:
	//	*FieldOmitempty4_One4Uint64
	DataType4 isFieldOmitempty4_DataType4 `protobuf_oneof:"data_type4"`
	// Types that are assignable to DataType5:
	//	*FieldOmitempty4_One5String1
	DataType5 isFieldOmitempty4_DataType5 `protobuf_oneof:"data_type5"`
	// Types that are assignable to DataType6:
	//	*FieldOmitempty4_One6Sint32
	//	*FieldOmitempty4_One6Sint64
	DataType6 isFieldOmitempty4_DataType6 `protobuf_oneof:"data_type6"`
	// Types that are assignable to DataType7:
	//	*FieldOmitempty4_One7Bool1
	//	*FieldOmitempty4_One7Bool2
	DataType7 isFieldOmitempty4_DataType7 `protobuf_oneof:"data_type7"`
}

func (x *FieldOmitempty4) Reset() {
	*x = FieldOmitempty4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOmitempty4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOmitempty4) ProtoMessage() {}

func (x *FieldOmitempty4) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOmitempty4.ProtoReflect.Descriptor instead.
func (*FieldOmitempty4) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{16}
}

func (x *FieldOmitempty4) GetTString1() string {
	if x != nil {
		return x.TString1
	}
	return ""
}

func (x *FieldOmitempty4) GetTString2() string {
	if x != nil {
		return x.TString2
	}
	return ""
}

func (x *FieldOmitempty4) GetTString3() string {
	if x != nil {
		return x.TString3
	}
	return ""
}

func (x *FieldOmitempty4) GetTString4() string {
	if x != nil {
		return x.TString4
	}
	return ""
}

func (m *FieldOmitempty4) GetDataType1() isFieldOmitempty4_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *FieldOmitempty4) GetOne1Int32() int32 {
	if x, ok := x.GetDataType1().(*FieldOmitempty4_One1Int32); ok {
		return x.One1Int32
	}
	return 0
}

func (m *FieldOmitempty4) GetDataType2() isFieldOmitempty4_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *FieldOmitempty4) GetOne2Int64() int64 {
	if x, ok := x.GetDataType2().(*FieldOmitempty4_One2Int64); ok {
		return x.One2Int64
	}
	return 0
}

func (m *FieldOmitempty4) GetDataType3() isFieldOmitempty4_DataType3 {
	if m != nil {
		return m.DataType3
	}
	return nil
}

func (x *FieldOmitempty4) GetOne3Uint32() uint32 {
	if x, ok := x.GetDataType3().(*FieldOmitempty4_One3Uint32); ok {
		return x.One3Uint32
	}
	return 0
}

func (m *FieldOmitempty4) GetDataType4() isFieldOmitempty4_DataType4 {
	if m != nil {
		return m.DataType4
	}
	return nil
}

func (x *FieldOmitempty4) GetOne4Uint64() uint64 {
	if x, ok := x.GetDataType4().(*FieldOmitempty4_One4Uint64); ok {
		return x.One4Uint64
	}
	return 0
}

func (m *FieldOmitempty4) GetDataType5() isFieldOmitempty4_DataType5 {
	if m != nil {
		return m.DataType5
	}
	return nil
}

func (x *FieldOmitempty4) GetOne5String1() string {
	if x, ok := x.GetDataType5().(*FieldOmitempty4_One5String1); ok {
		return x.One5String1
	}
	return ""
}

func (m *FieldOmitempty4) GetDataType6() isFieldOmitempty4_DataType6 {
	if m != nil {
		return m.DataType6
	}
	return nil
}

func (x *FieldOmitempty4) GetOne6Sint32() int32 {
	if x, ok := x.GetDataType6().(*FieldOmitempty4_One6Sint32); ok {
		return x.One6Sint32
	}
	return 0
}

func (x *FieldOmitempty4) GetOne6Sint64() int64 {
	if x, ok := x.GetDataType6().(*FieldOmitempty4_One6Sint64); ok {
		return x.One6Sint64
	}
	return 0
}

func (m *FieldOmitempty4) GetDataType7() isFieldOmitempty4_DataType7 {
	if m != nil {
		return m.DataType7
	}
	return nil
}

func (x *FieldOmitempty4) GetOne7Bool1() bool {
	if x, ok := x.GetDataType7().(*FieldOmitempty4_One7Bool1); ok {
		return x.One7Bool1
	}
	return false
}

func (x *FieldOmitempty4) GetOne7Bool2() bool {
	if x, ok := x.GetDataType7().(*FieldOmitempty4_One7Bool2); ok {
		return x.One7Bool2
	}
	return false
}

type isFieldOmitempty4_DataType1 interface {
	isFieldOmitempty4_DataType1()
}

type FieldOmitempty4_One1Int32 struct {
	One1Int32 int32 `protobuf:"varint,10,opt,name=one1_int32,json=one1Int32,proto3,oneof"`
}

func (*FieldOmitempty4_One1Int32) isFieldOmitempty4_DataType1() {}

type isFieldOmitempty4_DataType2 interface {
	isFieldOmitempty4_DataType2()
}

type FieldOmitempty4_One2Int64 struct {
	One2Int64 int64 `protobuf:"varint,20,opt,name=one2_int64,json=one2Int64,proto3,oneof"`
}

func (*FieldOmitempty4_One2Int64) isFieldOmitempty4_DataType2() {}

type isFieldOmitempty4_DataType3 interface {
	isFieldOmitempty4_DataType3()
}

type FieldOmitempty4_One3Uint32 struct {
	One3Uint32 uint32 `protobuf:"varint,30,opt,name=one3_uint32,json=one3Uint32,proto3,oneof"`
}

func (*FieldOmitempty4_One3Uint32) isFieldOmitempty4_DataType3() {}

type isFieldOmitempty4_DataType4 interface {
	isFieldOmitempty4_DataType4()
}

type FieldOmitempty4_One4Uint64 struct {
	One4Uint64 uint64 `protobuf:"varint,40,opt,name=one4_uint64,json=one4Uint64,proto3,oneof"`
}

func (*FieldOmitempty4_One4Uint64) isFieldOmitempty4_DataType4() {}

type isFieldOmitempty4_DataType5 interface {
	isFieldOmitempty4_DataType5()
}

type FieldOmitempty4_One5String1 struct {
	One5String1 string `protobuf:"bytes,50,opt,name=one5_string1,json=one5String1,proto3,oneof"`
}

func (*FieldOmitempty4_One5String1) isFieldOmitempty4_DataType5() {}

type isFieldOmitempty4_DataType6 interface {
	isFieldOmitempty4_DataType6()
}

type FieldOmitempty4_One6Sint32 struct {
	One6Sint32 int32 `protobuf:"zigzag32,60,opt,name=one6_sint32,json=one6Sint32,proto3,oneof"`
}

type FieldOmitempty4_One6Sint64 struct {
	One6Sint64 int64 `protobuf:"zigzag64,61,opt,name=one6_sint64,json=one6Sint64,proto3,oneof"`
}

func (*FieldOmitempty4_One6Sint32) isFieldOmitempty4_DataType6() {}

func (*FieldOmitempty4_One6Sint64) isFieldOmitempty4_DataType6() {}

type isFieldOmitempty4_DataType7 interface {
	isFieldOmitempty4_DataType7()
}

type FieldOmitempty4_One7Bool1 struct {
	One7Bool1 bool `protobuf:"varint,70,opt,name=one7_bool1,json=one7Bool1,proto3,oneof"`
}

type FieldOmitempty4_One7Bool2 struct {
	One7Bool2 bool `protobuf:"varint,71,opt,name=one7_bool2,json=one7Bool2,proto3,oneof"`
}

func (*FieldOmitempty4_One7Bool1) isFieldOmitempty4_DataType7() {}

func (*FieldOmitempty4_One7Bool2) isFieldOmitempty4_DataType7() {}

type FieldIgnore1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1 string `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3" json:"t_string1,omitempty"`
	TString2 string `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3" json:"t_string2,omitempty"`
	// Types that are assignable to DataType1:
	//	*FieldIgnore1_One1Int32
	DataType1 isFieldIgnore1_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*FieldIgnore1_One2Int64
	DataType2 isFieldIgnore1_DataType2 `protobuf_oneof:"data_type2"`
}

func (x *FieldIgnore1) Reset() {
	*x = FieldIgnore1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldIgnore1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldIgnore1) ProtoMessage() {}

func (x *FieldIgnore1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldIgnore1.ProtoReflect.Descriptor instead.
func (*FieldIgnore1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{17}
}

func (x *FieldIgnore1) GetTString1() string {
	if x != nil {
		return x.TString1
	}
	return ""
}

func (x *FieldIgnore1) GetTString2() string {
	if x != nil {
		return x.TString2
	}
	return ""
}

func (m *FieldIgnore1) GetDataType1() isFieldIgnore1_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *FieldIgnore1) GetOne1Int32() int32 {
	if x, ok := x.GetDataType1().(*FieldIgnore1_One1Int32); ok {
		return x.One1Int32
	}
	return 0
}

func (m *FieldIgnore1) GetDataType2() isFieldIgnore1_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *FieldIgnore1) GetOne2Int64() int64 {
	if x, ok := x.GetDataType2().(*FieldIgnore1_One2Int64); ok {
		return x.One2Int64
	}
	return 0
}

type isFieldIgnore1_DataType1 interface {
	isFieldIgnore1_DataType1()
}

type FieldIgnore1_One1Int32 struct {
	One1Int32 int32 `protobuf:"varint,10,opt,name=one1_int32,json=one1Int32,proto3,oneof"`
}

func (*FieldIgnore1_One1Int32) isFieldIgnore1_DataType1() {}

type isFieldIgnore1_DataType2 interface {
	isFieldIgnore1_DataType2()
}

type FieldIgnore1_One2Int64 struct {
	One2Int64 int64 `protobuf:"varint,20,opt,name=one2_int64,json=one2Int64,proto3,oneof"`
}

func (*FieldIgnore1_One2Int64) isFieldIgnore1_DataType2() {}

type FieldIgnore2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameStyle1   int32 `protobuf:"varint,1,opt,name=name_style1,json=nameStyle1,proto3" json:"name_style1,omitempty"`
	Names_Style2 int32 `protobuf:"varint,2,opt,name=names_Style2,json=namesStyle2,proto3" json:"names_Style2,omitempty"`
	Name_Style3  int32 `protobuf:"varint,3,opt,name=Name_Style3,json=NameStyle3,proto3" json:"Name_Style3,omitempty"`
	NameStyle4   int32 `protobuf:"varint,4,opt,name=nameStyle4,proto3" json:"nameStyle4,omitempty"`
	NameStyle5   int32 `protobuf:"varint,5,opt,name=NameStyle5,proto3" json:"NameStyle5,omitempty"`
	// Types that are assignable to DataType1:
	//	*FieldIgnore2_Integer1
	DataType1 isFieldIgnore2_DataType1 `protobuf_oneof:"data_type1"`
	// Types that are assignable to DataType2:
	//	*FieldIgnore2_Integer2
	DataType2 isFieldIgnore2_DataType2 `protobuf_oneof:"data_type2"`
	// Types that are assignable to DataType3:
	//	*FieldIgnore2_Integer3
	DataType3 isFieldIgnore2_DataType3 `protobuf_oneof:"data_type3"`
	// Types that are assignable to DataType4:
	//	*FieldIgnore2_Integer4
	DataType4 isFieldIgnore2_DataType4 `protobuf_oneof:"data_type4"`
	// Types that are assignable to DataType5:
	//	*FieldIgnore2_Integer5
	//	*FieldIgnore2_Float5
	DataType5 isFieldIgnore2_DataType5 `protobuf_oneof:"data_type5"`
	// Types that are assignable to DataType6:
	//	*FieldIgnore2_Integer6
	//	*FieldIgnore2_Float6
	DataType6 isFieldIgnore2_DataType6 `protobuf_oneof:"data_type6"`
	// Types that are assignable to DataType7:
	//	*FieldIgnore2_Integer7
	//	*FieldIgnore2_Float7
	DataType7 isFieldIgnore2_DataType7 `protobuf_oneof:"data_type7"`
	// Types that are assignable to DataType8:
	//	*FieldIgnore2_Integer8
	//	*FieldIgnore2_Float8
	DataType8 isFieldIgnore2_DataType8 `protobuf_oneof:"data_type8"`
}

func (x *FieldIgnore2) Reset() {
	*x = FieldIgnore2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldIgnore2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldIgnore2) ProtoMessage() {}

func (x *FieldIgnore2) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldIgnore2.ProtoReflect.Descriptor instead.
func (*FieldIgnore2) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{18}
}

func (x *FieldIgnore2) GetNameStyle1() int32 {
	if x != nil {
		return x.NameStyle1
	}
	return 0
}

func (x *FieldIgnore2) GetNames_Style2() int32 {
	if x != nil {
		return x.Names_Style2
	}
	return 0
}

func (x *FieldIgnore2) GetName_Style3() int32 {
	if x != nil {
		return x.Name_Style3
	}
	return 0
}

func (x *FieldIgnore2) GetNameStyle4() int32 {
	if x != nil {
		return x.NameStyle4
	}
	return 0
}

func (x *FieldIgnore2) GetNameStyle5() int32 {
	if x != nil {
		return x.NameStyle5
	}
	return 0
}

func (m *FieldIgnore2) GetDataType1() isFieldIgnore2_DataType1 {
	if m != nil {
		return m.DataType1
	}
	return nil
}

func (x *FieldIgnore2) GetInteger1() string {
	if x, ok := x.GetDataType1().(*FieldIgnore2_Integer1); ok {
		return x.Integer1
	}
	return ""
}

func (m *FieldIgnore2) GetDataType2() isFieldIgnore2_DataType2 {
	if m != nil {
		return m.DataType2
	}
	return nil
}

func (x *FieldIgnore2) GetInteger2() string {
	if x, ok := x.GetDataType2().(*FieldIgnore2_Integer2); ok {
		return x.Integer2
	}
	return ""
}

func (m *FieldIgnore2) GetDataType3() isFieldIgnore2_DataType3 {
	if m != nil {
		return m.DataType3
	}
	return nil
}

func (x *FieldIgnore2) GetInteger3() string {
	if x, ok := x.GetDataType3().(*FieldIgnore2_Integer3); ok {
		return x.Integer3
	}
	return ""
}

func (m *FieldIgnore2) GetDataType4() isFieldIgnore2_DataType4 {
	if m != nil {
		return m.DataType4
	}
	return nil
}

func (x *FieldIgnore2) GetInteger4() string {
	if x, ok := x.GetDataType4().(*FieldIgnore2_Integer4); ok {
		return x.Integer4
	}
	return ""
}

func (m *FieldIgnore2) GetDataType5() isFieldIgnore2_DataType5 {
	if m != nil {
		return m.DataType5
	}
	return nil
}

func (x *FieldIgnore2) GetInteger5() string {
	if x, ok := x.GetDataType5().(*FieldIgnore2_Integer5); ok {
		return x.Integer5
	}
	return ""
}

func (x *FieldIgnore2) GetFloat5() string {
	if x, ok := x.GetDataType5().(*FieldIgnore2_Float5); ok {
		return x.Float5
	}
	return ""
}

func (m *FieldIgnore2) GetDataType6() isFieldIgnore2_DataType6 {
	if m != nil {
		return m.DataType6
	}
	return nil
}

func (x *FieldIgnore2) GetInteger6() string {
	if x, ok := x.GetDataType6().(*FieldIgnore2_Integer6); ok {
		return x.Integer6
	}
	return ""
}

func (x *FieldIgnore2) GetFloat6() string {
	if x, ok := x.GetDataType6().(*FieldIgnore2_Float6); ok {
		return x.Float6
	}
	return ""
}

func (m *FieldIgnore2) GetDataType7() isFieldIgnore2_DataType7 {
	if m != nil {
		return m.DataType7
	}
	return nil
}

func (x *FieldIgnore2) GetInteger7() string {
	if x, ok := x.GetDataType7().(*FieldIgnore2_Integer7); ok {
		return x.Integer7
	}
	return ""
}

func (x *FieldIgnore2) GetFloat7() string {
	if x, ok := x.GetDataType7().(*FieldIgnore2_Float7); ok {
		return x.Float7
	}
	return ""
}

func (m *FieldIgnore2) GetDataType8() isFieldIgnore2_DataType8 {
	if m != nil {
		return m.DataType8
	}
	return nil
}

func (x *FieldIgnore2) GetInteger8() string {
	if x, ok := x.GetDataType8().(*FieldIgnore2_Integer8); ok {
		return x.Integer8
	}
	return ""
}

func (x *FieldIgnore2) GetFloat8() string {
	if x, ok := x.GetDataType8().(*FieldIgnore2_Float8); ok {
		return x.Float8
	}
	return ""
}

type isFieldIgnore2_DataType1 interface {
	isFieldIgnore2_DataType1()
}

type FieldIgnore2_Integer1 struct {
	Integer1 string `protobuf:"bytes,10,opt,name=integer1,proto3,oneof"`
}

func (*FieldIgnore2_Integer1) isFieldIgnore2_DataType1() {}

type isFieldIgnore2_DataType2 interface {
	isFieldIgnore2_DataType2()
}

type FieldIgnore2_Integer2 struct {
	Integer2 string `protobuf:"bytes,20,opt,name=integer2,proto3,oneof"`
}

func (*FieldIgnore2_Integer2) isFieldIgnore2_DataType2() {}

type isFieldIgnore2_DataType3 interface {
	isFieldIgnore2_DataType3()
}

type FieldIgnore2_Integer3 struct {
	Integer3 string `protobuf:"bytes,30,opt,name=integer3,proto3,oneof"`
}

func (*FieldIgnore2_Integer3) isFieldIgnore2_DataType3() {}

type isFieldIgnore2_DataType4 interface {
	isFieldIgnore2_DataType4()
}

type FieldIgnore2_Integer4 struct {
	Integer4 string `protobuf:"bytes,40,opt,name=integer4,proto3,oneof"`
}

func (*FieldIgnore2_Integer4) isFieldIgnore2_DataType4() {}

type isFieldIgnore2_DataType5 interface {
	isFieldIgnore2_DataType5()
}

type FieldIgnore2_Integer5 struct {
	Integer5 string `protobuf:"bytes,50,opt,name=integer5,proto3,oneof"`
}

type FieldIgnore2_Float5 struct {
	Float5 string `protobuf:"bytes,51,opt,name=float5,proto3,oneof"`
}

func (*FieldIgnore2_Integer5) isFieldIgnore2_DataType5() {}

func (*FieldIgnore2_Float5) isFieldIgnore2_DataType5() {}

type isFieldIgnore2_DataType6 interface {
	isFieldIgnore2_DataType6()
}

type FieldIgnore2_Integer6 struct {
	Integer6 string `protobuf:"bytes,60,opt,name=integer6,proto3,oneof"`
}

type FieldIgnore2_Float6 struct {
	Float6 string `protobuf:"bytes,61,opt,name=float6,proto3,oneof"`
}

func (*FieldIgnore2_Integer6) isFieldIgnore2_DataType6() {}

func (*FieldIgnore2_Float6) isFieldIgnore2_DataType6() {}

type isFieldIgnore2_DataType7 interface {
	isFieldIgnore2_DataType7()
}

type FieldIgnore2_Integer7 struct {
	Integer7 string `protobuf:"bytes,70,opt,name=integer7,proto3,oneof"`
}

type FieldIgnore2_Float7 struct {
	Float7 string `protobuf:"bytes,71,opt,name=float7,proto3,oneof"`
}

func (*FieldIgnore2_Integer7) isFieldIgnore2_DataType7() {}

func (*FieldIgnore2_Float7) isFieldIgnore2_DataType7() {}

type isFieldIgnore2_DataType8 interface {
	isFieldIgnore2_DataType8()
}

type FieldIgnore2_Integer8 struct {
	Integer8 string `protobuf:"bytes,80,opt,name=integer8,proto3,oneof"`
}

type FieldIgnore2_Float8 struct {
	Float8 string `protobuf:"bytes,81,opt,name=float8,proto3,oneof"`
}

func (*FieldIgnore2_Integer8) isFieldIgnore2_DataType8() {}

func (*FieldIgnore2_Float8) isFieldIgnore2_DataType8() {}

type FieldDisallowUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameStyle1 int32 `protobuf:"varint,1,opt,name=name_style1,json=nameStyle1,proto3" json:"name_style1,omitempty"`
	// Types that are assignable to Oneof1:
	//	*FieldDisallowUnknown_TString1
	//	*FieldDisallowUnknown_TString2
	Oneof1 isFieldDisallowUnknown_Oneof1 `protobuf_oneof:"Oneof1"`
	// Types that are assignable to Oneof2:
	//	*FieldDisallowUnknown_TInt1
	//	*FieldDisallowUnknown_TInt2
	Oneof2 isFieldDisallowUnknown_Oneof2 `protobuf_oneof:"Oneof2"`
}

func (x *FieldDisallowUnknown) Reset() {
	*x = FieldDisallowUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDisallowUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDisallowUnknown) ProtoMessage() {}

func (x *FieldDisallowUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDisallowUnknown.ProtoReflect.Descriptor instead.
func (*FieldDisallowUnknown) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{19}
}

func (x *FieldDisallowUnknown) GetNameStyle1() int32 {
	if x != nil {
		return x.NameStyle1
	}
	return 0
}

func (m *FieldDisallowUnknown) GetOneof1() isFieldDisallowUnknown_Oneof1 {
	if m != nil {
		return m.Oneof1
	}
	return nil
}

func (x *FieldDisallowUnknown) GetTString1() string {
	if x, ok := x.GetOneof1().(*FieldDisallowUnknown_TString1); ok {
		return x.TString1
	}
	return ""
}

func (x *FieldDisallowUnknown) GetTString2() string {
	if x, ok := x.GetOneof1().(*FieldDisallowUnknown_TString2); ok {
		return x.TString2
	}
	return ""
}

func (m *FieldDisallowUnknown) GetOneof2() isFieldDisallowUnknown_Oneof2 {
	if m != nil {
		return m.Oneof2
	}
	return nil
}

func (x *FieldDisallowUnknown) GetTInt1() int32 {
	if x, ok := x.GetOneof2().(*FieldDisallowUnknown_TInt1); ok {
		return x.TInt1
	}
	return 0
}

func (x *FieldDisallowUnknown) GetTInt2() int32 {
	if x, ok := x.GetOneof2().(*FieldDisallowUnknown_TInt2); ok {
		return x.TInt2
	}
	return 0
}

type isFieldDisallowUnknown_Oneof1 interface {
	isFieldDisallowUnknown_Oneof1()
}

type FieldDisallowUnknown_TString1 struct {
	TString1 string `protobuf:"bytes,2,opt,name=t_string1,json=tString1,proto3,oneof"`
}

type FieldDisallowUnknown_TString2 struct {
	TString2 string `protobuf:"bytes,3,opt,name=t_string2,json=tString2,proto3,oneof"`
}

func (*FieldDisallowUnknown_TString1) isFieldDisallowUnknown_Oneof1() {}

func (*FieldDisallowUnknown_TString2) isFieldDisallowUnknown_Oneof1() {}

type isFieldDisallowUnknown_Oneof2 interface {
	isFieldDisallowUnknown_Oneof2()
}

type FieldDisallowUnknown_TInt1 struct {
	TInt1 int32 `protobuf:"varint,4,opt,name=t_int1,json=tInt1,proto3,oneof"`
}

type FieldDisallowUnknown_TInt2 struct {
	TInt2 int32 `protobuf:"varint,5,opt,name=t_int2,json=tInt2,proto3,oneof"`
}

func (*FieldDisallowUnknown_TInt1) isFieldDisallowUnknown_Oneof2() {}

func (*FieldDisallowUnknown_TInt2) isFieldDisallowUnknown_Oneof2() {}

type FieldAllowUnknown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameStyle1 int32 `protobuf:"varint,1,opt,name=name_style1,json=nameStyle1,proto3" json:"name_style1,omitempty"`
	// Types that are assignable to Oneof1:
	//	*FieldAllowUnknown_TString1
	//	*FieldAllowUnknown_TString2
	Oneof1 isFieldAllowUnknown_Oneof1 `protobuf_oneof:"Oneof1"`
	// Types that are assignable to Oneof2:
	//	*FieldAllowUnknown_TInt1
	//	*FieldAllowUnknown_TInt2
	Oneof2 isFieldAllowUnknown_Oneof2 `protobuf_oneof:"Oneof2"`
}

func (x *FieldAllowUnknown) Reset() {
	*x = FieldAllowUnknown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldAllowUnknown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldAllowUnknown) ProtoMessage() {}

func (x *FieldAllowUnknown) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldAllowUnknown.ProtoReflect.Descriptor instead.
func (*FieldAllowUnknown) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{20}
}

func (x *FieldAllowUnknown) GetNameStyle1() int32 {
	if x != nil {
		return x.NameStyle1
	}
	return 0
}

func (m *FieldAllowUnknown) GetOneof1() isFieldAllowUnknown_Oneof1 {
	if m != nil {
		return m.Oneof1
	}
	return nil
}

func (x *FieldAllowUnknown) GetTString1() string {
	if x, ok := x.GetOneof1().(*FieldAllowUnknown_TString1); ok {
		return x.TString1
	}
	return ""
}

func (x *FieldAllowUnknown) GetTString2() string {
	if x, ok := x.GetOneof1().(*FieldAllowUnknown_TString2); ok {
		return x.TString2
	}
	return ""
}

func (m *FieldAllowUnknown) GetOneof2() isFieldAllowUnknown_Oneof2 {
	if m != nil {
		return m.Oneof2
	}
	return nil
}

func (x *FieldAllowUnknown) GetTInt1() int32 {
	if x, ok := x.GetOneof2().(*FieldAllowUnknown_TInt1); ok {
		return x.TInt1
	}
	return 0
}

func (x *FieldAllowUnknown) GetTInt2() int32 {
	if x, ok := x.GetOneof2().(*FieldAllowUnknown_TInt2); ok {
		return x.TInt2
	}
	return 0
}

type isFieldAllowUnknown_Oneof1 interface {
	isFieldAllowUnknown_Oneof1()
}

type FieldAllowUnknown_TString1 struct {
	TString1 string `protobuf:"bytes,2,opt,name=t_string1,json=tString1,proto3,oneof"`
}

type FieldAllowUnknown_TString2 struct {
	TString2 string `protobuf:"bytes,3,opt,name=t_string2,json=tString2,proto3,oneof"`
}

func (*FieldAllowUnknown_TString1) isFieldAllowUnknown_Oneof1() {}

func (*FieldAllowUnknown_TString2) isFieldAllowUnknown_Oneof1() {}

type isFieldAllowUnknown_Oneof2 interface {
	isFieldAllowUnknown_Oneof2()
}

type FieldAllowUnknown_TInt1 struct {
	TInt1 int32 `protobuf:"varint,4,opt,name=t_int1,json=tInt1,proto3,oneof"`
}

type FieldAllowUnknown_TInt2 struct {
	TInt2 int32 `protobuf:"varint,5,opt,name=t_int2,json=tInt2,proto3,oneof"`
}

func (*FieldAllowUnknown_TInt1) isFieldAllowUnknown_Oneof2() {}

func (*FieldAllowUnknown_TInt2) isFieldAllowUnknown_Oneof2() {}

type EnumUseString1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TStatus1 EnumUseString1_Status1            `protobuf:"varint,1,opt,name=t_status1,json=tStatus1,proto3,enum=gojsontest.EnumUseString1_Status1" json:"t_status1,omitempty"`
	TStatus2 EnumUseString1_Status2            `protobuf:"varint,2,opt,name=t_status2,json=tStatus2,proto3,enum=gojsontest.EnumUseString1_Status2" json:"t_status2,omitempty"`
	AStatus1 []EnumUseString1_Status1          `protobuf:"varint,21,rep,packed,name=a_status1,json=aStatus1,proto3,enum=gojsontest.EnumUseString1_Status1" json:"a_status1,omitempty"`
	AStatus2 []EnumUseString1_Status2          `protobuf:"varint,22,rep,packed,name=a_status2,json=aStatus2,proto3,enum=gojsontest.EnumUseString1_Status2" json:"a_status2,omitempty"`
	AStatus3 []EnumUseString1_Status1          `protobuf:"varint,23,rep,packed,name=a_status3,json=aStatus3,proto3,enum=gojsontest.EnumUseString1_Status1" json:"a_status3,omitempty"`
	MStatus1 map[string]EnumUseString1_Status1 `protobuf:"bytes,31,rep,name=m_status1,json=mStatus1,proto3" json:"m_status1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString1_Status1"`
	MStatus2 map[string]EnumUseString1_Status2 `protobuf:"bytes,32,rep,name=m_status2,json=mStatus2,proto3" json:"m_status2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString1_Status2"`
	MStatus3 map[string]EnumUseString1_Status1 `protobuf:"bytes,33,rep,name=m_status3,json=mStatus3,proto3" json:"m_status3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString1_Status1"`
}

func (x *EnumUseString1) Reset() {
	*x = EnumUseString1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumUseString1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumUseString1) ProtoMessage() {}

func (x *EnumUseString1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumUseString1.ProtoReflect.Descriptor instead.
func (*EnumUseString1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{21}
}

func (x *EnumUseString1) GetTStatus1() EnumUseString1_Status1 {
	if x != nil {
		return x.TStatus1
	}
	return EnumUseString1_enabled
}

func (x *EnumUseString1) GetTStatus2() EnumUseString1_Status2 {
	if x != nil {
		return x.TStatus2
	}
	return EnumUseString1_success
}

func (x *EnumUseString1) GetAStatus1() []EnumUseString1_Status1 {
	if x != nil {
		return x.AStatus1
	}
	return nil
}

func (x *EnumUseString1) GetAStatus2() []EnumUseString1_Status2 {
	if x != nil {
		return x.AStatus2
	}
	return nil
}

func (x *EnumUseString1) GetAStatus3() []EnumUseString1_Status1 {
	if x != nil {
		return x.AStatus3
	}
	return nil
}

func (x *EnumUseString1) GetMStatus1() map[string]EnumUseString1_Status1 {
	if x != nil {
		return x.MStatus1
	}
	return nil
}

func (x *EnumUseString1) GetMStatus2() map[string]EnumUseString1_Status2 {
	if x != nil {
		return x.MStatus2
	}
	return nil
}

func (x *EnumUseString1) GetMStatus3() map[string]EnumUseString1_Status1 {
	if x != nil {
		return x.MStatus3
	}
	return nil
}

type EnumUseString2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TStatus1 EnumUseString2_Status1            `protobuf:"varint,1,opt,name=t_status1,json=tStatus1,proto3,enum=gojsontest.EnumUseString2_Status1" json:"t_status1,omitempty"`
	TStatus2 EnumUseString2_Status2            `protobuf:"varint,2,opt,name=t_status2,json=tStatus2,proto3,enum=gojsontest.EnumUseString2_Status2" json:"t_status2,omitempty"`
	AStatus1 []EnumUseString2_Status1          `protobuf:"varint,21,rep,packed,name=a_status1,json=aStatus1,proto3,enum=gojsontest.EnumUseString2_Status1" json:"a_status1,omitempty"`
	AStatus2 []EnumUseString2_Status2          `protobuf:"varint,22,rep,packed,name=a_status2,json=aStatus2,proto3,enum=gojsontest.EnumUseString2_Status2" json:"a_status2,omitempty"`
	AStatus3 []EnumUseString2_Status1          `protobuf:"varint,23,rep,packed,name=a_status3,json=aStatus3,proto3,enum=gojsontest.EnumUseString2_Status1" json:"a_status3,omitempty"`
	MStatus1 map[string]EnumUseString2_Status1 `protobuf:"bytes,31,rep,name=m_status1,json=mStatus1,proto3" json:"m_status1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString2_Status1"`
	MStatus2 map[string]EnumUseString2_Status2 `protobuf:"bytes,32,rep,name=m_status2,json=mStatus2,proto3" json:"m_status2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString2_Status2"`
	MStatus3 map[string]EnumUseString2_Status1 `protobuf:"bytes,33,rep,name=m_status3,json=mStatus3,proto3" json:"m_status3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString2_Status1"`
}

func (x *EnumUseString2) Reset() {
	*x = EnumUseString2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumUseString2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumUseString2) ProtoMessage() {}

func (x *EnumUseString2) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumUseString2.ProtoReflect.Descriptor instead.
func (*EnumUseString2) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{22}
}

func (x *EnumUseString2) GetTStatus1() EnumUseString2_Status1 {
	if x != nil {
		return x.TStatus1
	}
	return EnumUseString2_enabled
}

func (x *EnumUseString2) GetTStatus2() EnumUseString2_Status2 {
	if x != nil {
		return x.TStatus2
	}
	return EnumUseString2_success
}

func (x *EnumUseString2) GetAStatus1() []EnumUseString2_Status1 {
	if x != nil {
		return x.AStatus1
	}
	return nil
}

func (x *EnumUseString2) GetAStatus2() []EnumUseString2_Status2 {
	if x != nil {
		return x.AStatus2
	}
	return nil
}

func (x *EnumUseString2) GetAStatus3() []EnumUseString2_Status1 {
	if x != nil {
		return x.AStatus3
	}
	return nil
}

func (x *EnumUseString2) GetMStatus1() map[string]EnumUseString2_Status1 {
	if x != nil {
		return x.MStatus1
	}
	return nil
}

func (x *EnumUseString2) GetMStatus2() map[string]EnumUseString2_Status2 {
	if x != nil {
		return x.MStatus2
	}
	return nil
}

func (x *EnumUseString2) GetMStatus3() map[string]EnumUseString2_Status1 {
	if x != nil {
		return x.MStatus3
	}
	return nil
}

type EnumUseString3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TStatus1 EnumUseString3_Status1            `protobuf:"varint,1,opt,name=t_status1,json=tStatus1,proto3,enum=gojsontest.EnumUseString3_Status1" json:"t_status1,omitempty"`
	TStatus2 EnumUseString3_Status2            `protobuf:"varint,2,opt,name=t_status2,json=tStatus2,proto3,enum=gojsontest.EnumUseString3_Status2" json:"t_status2,omitempty"`
	AStatus1 []EnumUseString3_Status1          `protobuf:"varint,21,rep,packed,name=a_status1,json=aStatus1,proto3,enum=gojsontest.EnumUseString3_Status1" json:"a_status1,omitempty"`
	AStatus2 []EnumUseString3_Status2          `protobuf:"varint,22,rep,packed,name=a_status2,json=aStatus2,proto3,enum=gojsontest.EnumUseString3_Status2" json:"a_status2,omitempty"`
	AStatus3 []EnumUseString3_Status1          `protobuf:"varint,23,rep,packed,name=a_status3,json=aStatus3,proto3,enum=gojsontest.EnumUseString3_Status1" json:"a_status3,omitempty"`
	MStatus1 map[string]EnumUseString3_Status1 `protobuf:"bytes,31,rep,name=m_status1,json=mStatus1,proto3" json:"m_status1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString3_Status1"`
	MStatus2 map[string]EnumUseString3_Status2 `protobuf:"bytes,32,rep,name=m_status2,json=mStatus2,proto3" json:"m_status2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString3_Status2"`
	MStatus3 map[string]EnumUseString3_Status1 `protobuf:"bytes,33,rep,name=m_status3,json=mStatus3,proto3" json:"m_status3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString3_Status1"`
}

func (x *EnumUseString3) Reset() {
	*x = EnumUseString3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumUseString3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumUseString3) ProtoMessage() {}

func (x *EnumUseString3) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumUseString3.ProtoReflect.Descriptor instead.
func (*EnumUseString3) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{23}
}

func (x *EnumUseString3) GetTStatus1() EnumUseString3_Status1 {
	if x != nil {
		return x.TStatus1
	}
	return EnumUseString3_enabled
}

func (x *EnumUseString3) GetTStatus2() EnumUseString3_Status2 {
	if x != nil {
		return x.TStatus2
	}
	return EnumUseString3_success
}

func (x *EnumUseString3) GetAStatus1() []EnumUseString3_Status1 {
	if x != nil {
		return x.AStatus1
	}
	return nil
}

func (x *EnumUseString3) GetAStatus2() []EnumUseString3_Status2 {
	if x != nil {
		return x.AStatus2
	}
	return nil
}

func (x *EnumUseString3) GetAStatus3() []EnumUseString3_Status1 {
	if x != nil {
		return x.AStatus3
	}
	return nil
}

func (x *EnumUseString3) GetMStatus1() map[string]EnumUseString3_Status1 {
	if x != nil {
		return x.MStatus1
	}
	return nil
}

func (x *EnumUseString3) GetMStatus2() map[string]EnumUseString3_Status2 {
	if x != nil {
		return x.MStatus2
	}
	return nil
}

func (x *EnumUseString3) GetMStatus3() map[string]EnumUseString3_Status1 {
	if x != nil {
		return x.MStatus3
	}
	return nil
}

type EnumUseString4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TStatus1 EnumUseString4_Status            `protobuf:"varint,1,opt,name=t_status1,json=tStatus1,proto3,enum=gojsontest.EnumUseString4_Status" json:"t_status1,omitempty"`
	TStatus2 EnumUseString4_Status            `protobuf:"varint,2,opt,name=t_status2,json=tStatus2,proto3,enum=gojsontest.EnumUseString4_Status" json:"t_status2,omitempty"`
	AStatus1 []EnumUseString4_Status          `protobuf:"varint,21,rep,packed,name=a_status1,json=aStatus1,proto3,enum=gojsontest.EnumUseString4_Status" json:"a_status1,omitempty"`
	AStatus2 []EnumUseString4_Status          `protobuf:"varint,22,rep,packed,name=a_status2,json=aStatus2,proto3,enum=gojsontest.EnumUseString4_Status" json:"a_status2,omitempty"`
	AStatus3 []EnumUseString4_Status          `protobuf:"varint,23,rep,packed,name=a_status3,json=aStatus3,proto3,enum=gojsontest.EnumUseString4_Status" json:"a_status3,omitempty"`
	MStatus1 map[string]EnumUseString4_Status `protobuf:"bytes,31,rep,name=m_status1,json=mStatus1,proto3" json:"m_status1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString4_Status"`
	MStatus2 map[string]EnumUseString4_Status `protobuf:"bytes,32,rep,name=m_status2,json=mStatus2,proto3" json:"m_status2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString4_Status"`
	MStatus3 map[string]EnumUseString4_Status `protobuf:"bytes,33,rep,name=m_status3,json=mStatus3,proto3" json:"m_status3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString4_Status"`
}

func (x *EnumUseString4) Reset() {
	*x = EnumUseString4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumUseString4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumUseString4) ProtoMessage() {}

func (x *EnumUseString4) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumUseString4.ProtoReflect.Descriptor instead.
func (*EnumUseString4) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{24}
}

func (x *EnumUseString4) GetTStatus1() EnumUseString4_Status {
	if x != nil {
		return x.TStatus1
	}
	return EnumUseString4__
}

func (x *EnumUseString4) GetTStatus2() EnumUseString4_Status {
	if x != nil {
		return x.TStatus2
	}
	return EnumUseString4__
}

func (x *EnumUseString4) GetAStatus1() []EnumUseString4_Status {
	if x != nil {
		return x.AStatus1
	}
	return nil
}

func (x *EnumUseString4) GetAStatus2() []EnumUseString4_Status {
	if x != nil {
		return x.AStatus2
	}
	return nil
}

func (x *EnumUseString4) GetAStatus3() []EnumUseString4_Status {
	if x != nil {
		return x.AStatus3
	}
	return nil
}

func (x *EnumUseString4) GetMStatus1() map[string]EnumUseString4_Status {
	if x != nil {
		return x.MStatus1
	}
	return nil
}

func (x *EnumUseString4) GetMStatus2() map[string]EnumUseString4_Status {
	if x != nil {
		return x.MStatus2
	}
	return nil
}

func (x *EnumUseString4) GetMStatus3() map[string]EnumUseString4_Status {
	if x != nil {
		return x.MStatus3
	}
	return nil
}

type EnumUseString5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TStatus EnumUseString5_Status            `protobuf:"varint,1,opt,name=t_status,json=tStatus,proto3,enum=gojsontest.EnumUseString5_Status" json:"t_status,omitempty"`
	AStatus []EnumUseString5_Status          `protobuf:"varint,2,rep,packed,name=a_status,json=aStatus,proto3,enum=gojsontest.EnumUseString5_Status" json:"a_status,omitempty"`
	MStatus map[string]EnumUseString5_Status `protobuf:"bytes,3,rep,name=m_status,json=mStatus,proto3" json:"m_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.EnumUseString5_Status"`
}

func (x *EnumUseString5) Reset() {
	*x = EnumUseString5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumUseString5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumUseString5) ProtoMessage() {}

func (x *EnumUseString5) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumUseString5.ProtoReflect.Descriptor instead.
func (*EnumUseString5) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{25}
}

func (x *EnumUseString5) GetTStatus() EnumUseString5_Status {
	if x != nil {
		return x.TStatus
	}
	return EnumUseString5__
}

func (x *EnumUseString5) GetAStatus() []EnumUseString5_Status {
	if x != nil {
		return x.AStatus
	}
	return nil
}

func (x *EnumUseString5) GetMStatus() map[string]EnumUseString5_Status {
	if x != nil {
		return x.MStatus
	}
	return nil
}

type SerializeBytes1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes1      []byte            `protobuf:"bytes,1,opt,name=bytes1,proto3" json:"bytes1,omitempty"`
	Bytes2      []byte            `protobuf:"bytes,2,opt,name=bytes2,proto3" json:"bytes2,omitempty"`
	Bytes3      []byte            `protobuf:"bytes,3,opt,name=bytes3,proto3" json:"bytes3,omitempty"`
	ArrayBytes1 [][]byte          `protobuf:"bytes,11,rep,name=array_bytes1,json=arrayBytes1,proto3" json:"array_bytes1,omitempty"`
	ArrayBytes2 [][]byte          `protobuf:"bytes,12,rep,name=array_bytes2,json=arrayBytes2,proto3" json:"array_bytes2,omitempty"`
	ArrayBytes3 [][]byte          `protobuf:"bytes,13,rep,name=array_bytes3,json=arrayBytes3,proto3" json:"array_bytes3,omitempty"`
	MapBytes1   map[string][]byte `protobuf:"bytes,21,rep,name=map_bytes1,json=mapBytes1,proto3" json:"map_bytes1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBytes2   map[string][]byte `protobuf:"bytes,22,rep,name=map_bytes2,json=mapBytes2,proto3" json:"map_bytes2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBytes3   map[string][]byte `protobuf:"bytes,23,rep,name=map_bytes3,json=mapBytes3,proto3" json:"map_bytes3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBytes4   map[string][]byte `protobuf:"bytes,24,rep,name=map_bytes4,json=mapBytes4,proto3" json:"map_bytes4,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SerializeBytes1) Reset() {
	*x = SerializeBytes1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializeBytes1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeBytes1) ProtoMessage() {}

func (x *SerializeBytes1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeBytes1.ProtoReflect.Descriptor instead.
func (*SerializeBytes1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{26}
}

func (x *SerializeBytes1) GetBytes1() []byte {
	if x != nil {
		return x.Bytes1
	}
	return nil
}

func (x *SerializeBytes1) GetBytes2() []byte {
	if x != nil {
		return x.Bytes2
	}
	return nil
}

func (x *SerializeBytes1) GetBytes3() []byte {
	if x != nil {
		return x.Bytes3
	}
	return nil
}

func (x *SerializeBytes1) GetArrayBytes1() [][]byte {
	if x != nil {
		return x.ArrayBytes1
	}
	return nil
}

func (x *SerializeBytes1) GetArrayBytes2() [][]byte {
	if x != nil {
		return x.ArrayBytes2
	}
	return nil
}

func (x *SerializeBytes1) GetArrayBytes3() [][]byte {
	if x != nil {
		return x.ArrayBytes3
	}
	return nil
}

func (x *SerializeBytes1) GetMapBytes1() map[string][]byte {
	if x != nil {
		return x.MapBytes1
	}
	return nil
}

func (x *SerializeBytes1) GetMapBytes2() map[string][]byte {
	if x != nil {
		return x.MapBytes2
	}
	return nil
}

func (x *SerializeBytes1) GetMapBytes3() map[string][]byte {
	if x != nil {
		return x.MapBytes3
	}
	return nil
}

func (x *SerializeBytes1) GetMapBytes4() map[string][]byte {
	if x != nil {
		return x.MapBytes4
	}
	return nil
}

type SerializeBytes2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bytes1      []byte            `protobuf:"bytes,1,opt,name=bytes1,proto3" json:"bytes1,omitempty"`
	Bytes2      []byte            `protobuf:"bytes,2,opt,name=bytes2,proto3" json:"bytes2,omitempty"`
	Bytes3      []byte            `protobuf:"bytes,3,opt,name=bytes3,proto3" json:"bytes3,omitempty"`
	ArrayBytes1 [][]byte          `protobuf:"bytes,11,rep,name=array_bytes1,json=arrayBytes1,proto3" json:"array_bytes1,omitempty"`
	ArrayBytes2 [][]byte          `protobuf:"bytes,12,rep,name=array_bytes2,json=arrayBytes2,proto3" json:"array_bytes2,omitempty"`
	ArrayBytes3 [][]byte          `protobuf:"bytes,13,rep,name=array_bytes3,json=arrayBytes3,proto3" json:"array_bytes3,omitempty"`
	MapBytes1   map[string][]byte `protobuf:"bytes,21,rep,name=map_bytes1,json=mapBytes1,proto3" json:"map_bytes1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBytes2   map[string][]byte `protobuf:"bytes,22,rep,name=map_bytes2,json=mapBytes2,proto3" json:"map_bytes2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBytes3   map[string][]byte `protobuf:"bytes,23,rep,name=map_bytes3,json=mapBytes3,proto3" json:"map_bytes3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBytes4   map[string][]byte `protobuf:"bytes,24,rep,name=map_bytes4,json=mapBytes4,proto3" json:"map_bytes4,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SerializeBytes2) Reset() {
	*x = SerializeBytes2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializeBytes2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeBytes2) ProtoMessage() {}

func (x *SerializeBytes2) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeBytes2.ProtoReflect.Descriptor instead.
func (*SerializeBytes2) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{27}
}

func (x *SerializeBytes2) GetBytes1() []byte {
	if x != nil {
		return x.Bytes1
	}
	return nil
}

func (x *SerializeBytes2) GetBytes2() []byte {
	if x != nil {
		return x.Bytes2
	}
	return nil
}

func (x *SerializeBytes2) GetBytes3() []byte {
	if x != nil {
		return x.Bytes3
	}
	return nil
}

func (x *SerializeBytes2) GetArrayBytes1() [][]byte {
	if x != nil {
		return x.ArrayBytes1
	}
	return nil
}

func (x *SerializeBytes2) GetArrayBytes2() [][]byte {
	if x != nil {
		return x.ArrayBytes2
	}
	return nil
}

func (x *SerializeBytes2) GetArrayBytes3() [][]byte {
	if x != nil {
		return x.ArrayBytes3
	}
	return nil
}

func (x *SerializeBytes2) GetMapBytes1() map[string][]byte {
	if x != nil {
		return x.MapBytes1
	}
	return nil
}

func (x *SerializeBytes2) GetMapBytes2() map[string][]byte {
	if x != nil {
		return x.MapBytes2
	}
	return nil
}

func (x *SerializeBytes2) GetMapBytes3() map[string][]byte {
	if x != nil {
		return x.MapBytes3
	}
	return nil
}

func (x *SerializeBytes2) GetMapBytes4() map[string][]byte {
	if x != nil {
		return x.MapBytes4
	}
	return nil
}

type SerializeOmitempty1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String1       string                                      `protobuf:"bytes,11,opt,name=string1,proto3" json:"string1,omitempty"`
	String2       string                                      `protobuf:"bytes,12,opt,name=string2,proto3" json:"string2,omitempty"`
	Bytes1        []byte                                      `protobuf:"bytes,21,opt,name=bytes1,proto3" json:"bytes1,omitempty"`
	Bytes2        []byte                                      `protobuf:"bytes,22,opt,name=bytes2,proto3" json:"bytes2,omitempty"`
	Bytes3        []byte                                      `protobuf:"bytes,23,opt,name=bytes3,proto3" json:"bytes3,omitempty"`
	ArrayString1  []string                                    `protobuf:"bytes,31,rep,name=array_string1,json=arrayString1,proto3" json:"array_string1,omitempty"`
	ArrayString2  []string                                    `protobuf:"bytes,32,rep,name=array_string2,json=arrayString2,proto3" json:"array_string2,omitempty"`
	ArrayString3  []string                                    `protobuf:"bytes,33,rep,name=array_string3,json=arrayString3,proto3" json:"array_string3,omitempty"`
	ArrayMessage1 []*gojsonexternal.ExternalMessage1          `protobuf:"bytes,41,rep,name=array_message1,json=arrayMessage1,proto3" json:"array_message1,omitempty"`
	ArrayMessage2 []*gojsonexternal.ExternalMessage1          `protobuf:"bytes,42,rep,name=array_message2,json=arrayMessage2,proto3" json:"array_message2,omitempty"`
	ArrayMessage3 []*gojsonexternal.ExternalMessage1          `protobuf:"bytes,43,rep,name=array_message3,json=arrayMessage3,proto3" json:"array_message3,omitempty"`
	ArrayEnum1    []gojsonexternal.ExternalEnum1              `protobuf:"varint,51,rep,packed,name=array_enum1,json=arrayEnum1,proto3,enum=gojsonexternal.ExternalEnum1" json:"array_enum1,omitempty"`
	ArrayEnum2    []gojsonexternal.ExternalEnum1              `protobuf:"varint,52,rep,packed,name=array_enum2,json=arrayEnum2,proto3,enum=gojsonexternal.ExternalEnum1" json:"array_enum2,omitempty"`
	ArrayEnum3    []gojsonexternal.ExternalEnum1              `protobuf:"varint,53,rep,packed,name=array_enum3,json=arrayEnum3,proto3,enum=gojsonexternal.ExternalEnum1" json:"array_enum3,omitempty"`
	MapString1    map[string]string                           `protobuf:"bytes,111,rep,name=map_string1,json=mapString1,proto3" json:"map_string1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapString2    map[string]string                           `protobuf:"bytes,112,rep,name=map_string2,json=mapString2,proto3" json:"map_string2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapString3    map[string]string                           `protobuf:"bytes,113,rep,name=map_string3,json=mapString3,proto3" json:"map_string3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapMessage1   map[string]*gojsonexternal.ExternalMessage1 `protobuf:"bytes,121,rep,name=map_message1,json=mapMessage1,proto3" json:"map_message1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapMessage2   map[string]*gojsonexternal.ExternalMessage1 `protobuf:"bytes,122,rep,name=map_message2,json=mapMessage2,proto3" json:"map_message2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapMessage3   map[string]*gojsonexternal.ExternalMessage1 `protobuf:"bytes,123,rep,name=map_message3,json=mapMessage3,proto3" json:"map_message3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapEnum1      map[string]gojsonexternal.ExternalEnum1     `protobuf:"bytes,131,rep,name=map_enum1,json=mapEnum1,proto3" json:"map_enum1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsonexternal.ExternalEnum1"`
	MapEnum2      map[string]gojsonexternal.ExternalEnum1     `protobuf:"bytes,132,rep,name=map_enum2,json=mapEnum2,proto3" json:"map_enum2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsonexternal.ExternalEnum1"`
	MapEnum3      map[string]gojsonexternal.ExternalEnum1     `protobuf:"bytes,133,rep,name=map_enum3,json=mapEnum3,proto3" json:"map_enum3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsonexternal.ExternalEnum1"`
}

func (x *SerializeOmitempty1) Reset() {
	*x = SerializeOmitempty1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializeOmitempty1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeOmitempty1) ProtoMessage() {}

func (x *SerializeOmitempty1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeOmitempty1.ProtoReflect.Descriptor instead.
func (*SerializeOmitempty1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{28}
}

func (x *SerializeOmitempty1) GetString1() string {
	if x != nil {
		return x.String1
	}
	return ""
}

func (x *SerializeOmitempty1) GetString2() string {
	if x != nil {
		return x.String2
	}
	return ""
}

func (x *SerializeOmitempty1) GetBytes1() []byte {
	if x != nil {
		return x.Bytes1
	}
	return nil
}

func (x *SerializeOmitempty1) GetBytes2() []byte {
	if x != nil {
		return x.Bytes2
	}
	return nil
}

func (x *SerializeOmitempty1) GetBytes3() []byte {
	if x != nil {
		return x.Bytes3
	}
	return nil
}

func (x *SerializeOmitempty1) GetArrayString1() []string {
	if x != nil {
		return x.ArrayString1
	}
	return nil
}

func (x *SerializeOmitempty1) GetArrayString2() []string {
	if x != nil {
		return x.ArrayString2
	}
	return nil
}

func (x *SerializeOmitempty1) GetArrayString3() []string {
	if x != nil {
		return x.ArrayString3
	}
	return nil
}

func (x *SerializeOmitempty1) GetArrayMessage1() []*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.ArrayMessage1
	}
	return nil
}

func (x *SerializeOmitempty1) GetArrayMessage2() []*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.ArrayMessage2
	}
	return nil
}

func (x *SerializeOmitempty1) GetArrayMessage3() []*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.ArrayMessage3
	}
	return nil
}

func (x *SerializeOmitempty1) GetArrayEnum1() []gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.ArrayEnum1
	}
	return nil
}

func (x *SerializeOmitempty1) GetArrayEnum2() []gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.ArrayEnum2
	}
	return nil
}

func (x *SerializeOmitempty1) GetArrayEnum3() []gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.ArrayEnum3
	}
	return nil
}

func (x *SerializeOmitempty1) GetMapString1() map[string]string {
	if x != nil {
		return x.MapString1
	}
	return nil
}

func (x *SerializeOmitempty1) GetMapString2() map[string]string {
	if x != nil {
		return x.MapString2
	}
	return nil
}

func (x *SerializeOmitempty1) GetMapString3() map[string]string {
	if x != nil {
		return x.MapString3
	}
	return nil
}

func (x *SerializeOmitempty1) GetMapMessage1() map[string]*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.MapMessage1
	}
	return nil
}

func (x *SerializeOmitempty1) GetMapMessage2() map[string]*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.MapMessage2
	}
	return nil
}

func (x *SerializeOmitempty1) GetMapMessage3() map[string]*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.MapMessage3
	}
	return nil
}

func (x *SerializeOmitempty1) GetMapEnum1() map[string]gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.MapEnum1
	}
	return nil
}

func (x *SerializeOmitempty1) GetMapEnum2() map[string]gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.MapEnum2
	}
	return nil
}

func (x *SerializeOmitempty1) GetMapEnum3() map[string]gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.MapEnum3
	}
	return nil
}

type SerializeOmitempty2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String1       string                                      `protobuf:"bytes,11,opt,name=string1,proto3" json:"string1,omitempty"`
	String2       string                                      `protobuf:"bytes,12,opt,name=string2,proto3" json:"string2,omitempty"`
	Bytes1        []byte                                      `protobuf:"bytes,21,opt,name=bytes1,proto3" json:"bytes1,omitempty"`
	Bytes2        []byte                                      `protobuf:"bytes,22,opt,name=bytes2,proto3" json:"bytes2,omitempty"`
	Bytes3        []byte                                      `protobuf:"bytes,23,opt,name=bytes3,proto3" json:"bytes3,omitempty"`
	ArrayString1  []string                                    `protobuf:"bytes,31,rep,name=array_string1,json=arrayString1,proto3" json:"array_string1,omitempty"`
	ArrayString2  []string                                    `protobuf:"bytes,32,rep,name=array_string2,json=arrayString2,proto3" json:"array_string2,omitempty"`
	ArrayString3  []string                                    `protobuf:"bytes,33,rep,name=array_string3,json=arrayString3,proto3" json:"array_string3,omitempty"`
	ArrayMessage1 []*gojsonexternal.ExternalMessage1          `protobuf:"bytes,41,rep,name=array_message1,json=arrayMessage1,proto3" json:"array_message1,omitempty"`
	ArrayMessage2 []*gojsonexternal.ExternalMessage1          `protobuf:"bytes,42,rep,name=array_message2,json=arrayMessage2,proto3" json:"array_message2,omitempty"`
	ArrayMessage3 []*gojsonexternal.ExternalMessage1          `protobuf:"bytes,43,rep,name=array_message3,json=arrayMessage3,proto3" json:"array_message3,omitempty"`
	ArrayEnum1    []gojsonexternal.ExternalEnum1              `protobuf:"varint,51,rep,packed,name=array_enum1,json=arrayEnum1,proto3,enum=gojsonexternal.ExternalEnum1" json:"array_enum1,omitempty"`
	ArrayEnum2    []gojsonexternal.ExternalEnum1              `protobuf:"varint,52,rep,packed,name=array_enum2,json=arrayEnum2,proto3,enum=gojsonexternal.ExternalEnum1" json:"array_enum2,omitempty"`
	ArrayEnum3    []gojsonexternal.ExternalEnum1              `protobuf:"varint,53,rep,packed,name=array_enum3,json=arrayEnum3,proto3,enum=gojsonexternal.ExternalEnum1" json:"array_enum3,omitempty"`
	MapString1    map[string]string                           `protobuf:"bytes,111,rep,name=map_string1,json=mapString1,proto3" json:"map_string1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapString2    map[string]string                           `protobuf:"bytes,112,rep,name=map_string2,json=mapString2,proto3" json:"map_string2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapString3    map[string]string                           `protobuf:"bytes,113,rep,name=map_string3,json=mapString3,proto3" json:"map_string3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapMessage1   map[string]*gojsonexternal.ExternalMessage1 `protobuf:"bytes,121,rep,name=map_message1,json=mapMessage1,proto3" json:"map_message1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapMessage2   map[string]*gojsonexternal.ExternalMessage1 `protobuf:"bytes,122,rep,name=map_message2,json=mapMessage2,proto3" json:"map_message2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapMessage3   map[string]*gojsonexternal.ExternalMessage1 `protobuf:"bytes,123,rep,name=map_message3,json=mapMessage3,proto3" json:"map_message3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapEnum1      map[string]gojsonexternal.ExternalEnum1     `protobuf:"bytes,131,rep,name=map_enum1,json=mapEnum1,proto3" json:"map_enum1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsonexternal.ExternalEnum1"`
	MapEnum2      map[string]gojsonexternal.ExternalEnum1     `protobuf:"bytes,132,rep,name=map_enum2,json=mapEnum2,proto3" json:"map_enum2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsonexternal.ExternalEnum1"`
	MapEnum3      map[string]gojsonexternal.ExternalEnum1     `protobuf:"bytes,133,rep,name=map_enum3,json=mapEnum3,proto3" json:"map_enum3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsonexternal.ExternalEnum1"`
}

func (x *SerializeOmitempty2) Reset() {
	*x = SerializeOmitempty2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializeOmitempty2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializeOmitempty2) ProtoMessage() {}

func (x *SerializeOmitempty2) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializeOmitempty2.ProtoReflect.Descriptor instead.
func (*SerializeOmitempty2) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{29}
}

func (x *SerializeOmitempty2) GetString1() string {
	if x != nil {
		return x.String1
	}
	return ""
}

func (x *SerializeOmitempty2) GetString2() string {
	if x != nil {
		return x.String2
	}
	return ""
}

func (x *SerializeOmitempty2) GetBytes1() []byte {
	if x != nil {
		return x.Bytes1
	}
	return nil
}

func (x *SerializeOmitempty2) GetBytes2() []byte {
	if x != nil {
		return x.Bytes2
	}
	return nil
}

func (x *SerializeOmitempty2) GetBytes3() []byte {
	if x != nil {
		return x.Bytes3
	}
	return nil
}

func (x *SerializeOmitempty2) GetArrayString1() []string {
	if x != nil {
		return x.ArrayString1
	}
	return nil
}

func (x *SerializeOmitempty2) GetArrayString2() []string {
	if x != nil {
		return x.ArrayString2
	}
	return nil
}

func (x *SerializeOmitempty2) GetArrayString3() []string {
	if x != nil {
		return x.ArrayString3
	}
	return nil
}

func (x *SerializeOmitempty2) GetArrayMessage1() []*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.ArrayMessage1
	}
	return nil
}

func (x *SerializeOmitempty2) GetArrayMessage2() []*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.ArrayMessage2
	}
	return nil
}

func (x *SerializeOmitempty2) GetArrayMessage3() []*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.ArrayMessage3
	}
	return nil
}

func (x *SerializeOmitempty2) GetArrayEnum1() []gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.ArrayEnum1
	}
	return nil
}

func (x *SerializeOmitempty2) GetArrayEnum2() []gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.ArrayEnum2
	}
	return nil
}

func (x *SerializeOmitempty2) GetArrayEnum3() []gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.ArrayEnum3
	}
	return nil
}

func (x *SerializeOmitempty2) GetMapString1() map[string]string {
	if x != nil {
		return x.MapString1
	}
	return nil
}

func (x *SerializeOmitempty2) GetMapString2() map[string]string {
	if x != nil {
		return x.MapString2
	}
	return nil
}

func (x *SerializeOmitempty2) GetMapString3() map[string]string {
	if x != nil {
		return x.MapString3
	}
	return nil
}

func (x *SerializeOmitempty2) GetMapMessage1() map[string]*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.MapMessage1
	}
	return nil
}

func (x *SerializeOmitempty2) GetMapMessage2() map[string]*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.MapMessage2
	}
	return nil
}

func (x *SerializeOmitempty2) GetMapMessage3() map[string]*gojsonexternal.ExternalMessage1 {
	if x != nil {
		return x.MapMessage3
	}
	return nil
}

func (x *SerializeOmitempty2) GetMapEnum1() map[string]gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.MapEnum1
	}
	return nil
}

func (x *SerializeOmitempty2) GetMapEnum2() map[string]gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.MapEnum2
	}
	return nil
}

func (x *SerializeOmitempty2) GetMapEnum3() map[string]gojsonexternal.ExternalEnum1 {
	if x != nil {
		return x.MapEnum3
	}
	return nil
}

type UnmarshalData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString          string                           `protobuf:"bytes,1,opt,name=t_string,json=tString,proto3" json:"t_string,omitempty"`
	TInt32           int32                            `protobuf:"varint,2,opt,name=t_int32,json=tInt32,proto3" json:"t_int32,omitempty"`
	TInt64           int64                            `protobuf:"varint,3,opt,name=t_int64,json=tInt64,proto3" json:"t_int64,omitempty"`
	TUint32          uint32                           `protobuf:"varint,4,opt,name=t_uint32,json=tUint32,proto3" json:"t_uint32,omitempty"`
	TUint64          uint64                           `protobuf:"varint,5,opt,name=t_uint64,json=tUint64,proto3" json:"t_uint64,omitempty"`
	TSint32          int32                            `protobuf:"zigzag32,6,opt,name=t_sint32,json=tSint32,proto3" json:"t_sint32,omitempty"`
	TSint64          int64                            `protobuf:"zigzag64,7,opt,name=t_sint64,json=tSint64,proto3" json:"t_sint64,omitempty"`
	TSfixed32        int32                            `protobuf:"fixed32,8,opt,name=t_sfixed32,json=tSfixed32,proto3" json:"t_sfixed32,omitempty"`
	TSfixed64        int64                            `protobuf:"fixed64,9,opt,name=t_sfixed64,json=tSfixed64,proto3" json:"t_sfixed64,omitempty"`
	TFixed32         uint32                           `protobuf:"fixed32,10,opt,name=t_fixed32,json=tFixed32,proto3" json:"t_fixed32,omitempty"`
	TFixed64         uint64                           `protobuf:"fixed64,11,opt,name=t_fixed64,json=tFixed64,proto3" json:"t_fixed64,omitempty"`
	TFloat           float32                          `protobuf:"fixed32,12,opt,name=t_float,json=tFloat,proto3" json:"t_float,omitempty"`
	TDouble          float64                          `protobuf:"fixed64,13,opt,name=t_double,json=tDouble,proto3" json:"t_double,omitempty"`
	TBool            bool                             `protobuf:"varint,14,opt,name=t_bool,json=tBool,proto3" json:"t_bool,omitempty"`
	TEnum1           UnmarshalData_Enum               `protobuf:"varint,15,opt,name=t_enum1,json=tEnum1,proto3,enum=gojsontest.UnmarshalData_Enum" json:"t_enum1,omitempty"`
	TEnum2           UnmarshalData_Enum               `protobuf:"varint,16,opt,name=t_enum2,json=tEnum2,proto3,enum=gojsontest.UnmarshalData_Enum" json:"t_enum2,omitempty"`
	TBytes           []byte                           `protobuf:"bytes,17,opt,name=t_bytes,json=tBytes,proto3" json:"t_bytes,omitempty"`
	TAliases         *UnmarshalData_Aliases           `protobuf:"bytes,18,opt,name=t_aliases,json=tAliases,proto3" json:"t_aliases,omitempty"`
	TConfig          *UnmarshalData_Config            `protobuf:"bytes,19,opt,name=t_config,json=tConfig,proto3" json:"t_config,omitempty"`
	ArrayDouble      []float64                        `protobuf:"fixed64,101,rep,packed,name=array_double,json=arrayDouble,proto3" json:"array_double,omitempty"`
	ArrayFloat       []float32                        `protobuf:"fixed32,102,rep,packed,name=array_float,json=arrayFloat,proto3" json:"array_float,omitempty"`
	ArrayInt32       []int32                          `protobuf:"varint,103,rep,packed,name=array_int32,json=arrayInt32,proto3" json:"array_int32,omitempty"`
	ArrayInt64       []int64                          `protobuf:"varint,104,rep,packed,name=array_int64,json=arrayInt64,proto3" json:"array_int64,omitempty"`
	ArrayUint32      []uint32                         `protobuf:"varint,105,rep,packed,name=array_uint32,json=arrayUint32,proto3" json:"array_uint32,omitempty"`
	ArrayUint64      []uint64                         `protobuf:"varint,106,rep,packed,name=array_uint64,json=arrayUint64,proto3" json:"array_uint64,omitempty"`
	ArraySint32      []int32                          `protobuf:"zigzag32,107,rep,packed,name=array_sint32,json=arraySint32,proto3" json:"array_sint32,omitempty"`
	ArraySint64      []int64                          `protobuf:"zigzag64,108,rep,packed,name=array_sint64,json=arraySint64,proto3" json:"array_sint64,omitempty"`
	ArraySfixed32    []int32                          `protobuf:"fixed32,109,rep,packed,name=array_sfixed32,json=arraySfixed32,proto3" json:"array_sfixed32,omitempty"`
	ArraySfixed64    []int64                          `protobuf:"fixed64,110,rep,packed,name=array_sfixed64,json=arraySfixed64,proto3" json:"array_sfixed64,omitempty"`
	ArrayFixed32     []uint32                         `protobuf:"fixed32,111,rep,packed,name=array_fixed32,json=arrayFixed32,proto3" json:"array_fixed32,omitempty"`
	ArrayFixed64     []uint64                         `protobuf:"fixed64,112,rep,packed,name=array_fixed64,json=arrayFixed64,proto3" json:"array_fixed64,omitempty"`
	ArrayBool        []bool                           `protobuf:"varint,113,rep,packed,name=array_bool,json=arrayBool,proto3" json:"array_bool,omitempty"`
	ArrayString      []string                         `protobuf:"bytes,114,rep,name=array_string,json=arrayString,proto3" json:"array_string,omitempty"`
	ArrayBytes       [][]byte                         `protobuf:"bytes,115,rep,name=array_bytes,json=arrayBytes,proto3" json:"array_bytes,omitempty"`
	ArrayEnum1       []UnmarshalData_Enum             `protobuf:"varint,116,rep,packed,name=array_enum1,json=arrayEnum1,proto3,enum=gojsontest.UnmarshalData_Enum" json:"array_enum1,omitempty"`
	ArrayEnum2       []UnmarshalData_Enum             `protobuf:"varint,117,rep,packed,name=array_enum2,json=arrayEnum2,proto3,enum=gojsontest.UnmarshalData_Enum" json:"array_enum2,omitempty"`
	ArrayAliases     []*UnmarshalData_Aliases         `protobuf:"bytes,118,rep,name=array_aliases,json=arrayAliases,proto3" json:"array_aliases,omitempty"`
	ArrayConfig      []*UnmarshalData_Config          `protobuf:"bytes,119,rep,name=array_config,json=arrayConfig,proto3" json:"array_config,omitempty"`
	MapInt32Double   map[int32]float64                `protobuf:"bytes,202,rep,name=map_int32_double,json=mapInt32Double,proto3" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Float    map[int32]float32                `protobuf:"bytes,203,rep,name=map_int32_float,json=mapInt32Float,proto3" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Int32    map[int32]int32                  `protobuf:"bytes,204,rep,name=map_int32_int32,json=mapInt32Int32,proto3" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Int64    map[int32]int64                  `protobuf:"bytes,205,rep,name=map_int32_int64,json=mapInt32Int64,proto3" json:"map_int32_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint32   map[int32]uint32                 `protobuf:"bytes,206,rep,name=map_int32_uint32,json=mapInt32Uint32,proto3" json:"map_int32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint64   map[int32]uint64                 `protobuf:"bytes,207,rep,name=map_int32_uint64,json=mapInt32Uint64,proto3" json:"map_int32_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Sint32   map[int32]int32                  `protobuf:"bytes,208,rep,name=map_int32_sint32,json=mapInt32Sint32,proto3" json:"map_int32_sint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapInt32Sint64   map[int32]int64                  `protobuf:"bytes,209,rep,name=map_int32_sint64,json=mapInt32Sint64,proto3" json:"map_int32_sint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapInt32Sfixed32 map[int32]int32                  `protobuf:"bytes,210,rep,name=map_int32_sfixed32,json=mapInt32Sfixed32,proto3" json:"map_int32_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Sfixed64 map[int32]int64                  `protobuf:"bytes,211,rep,name=map_int32_sfixed64,json=mapInt32Sfixed64,proto3" json:"map_int32_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Fixed32  map[int32]uint32                 `protobuf:"bytes,212,rep,name=map_int32_fixed32,json=mapInt32Fixed32,proto3" json:"map_int32_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Fixed64  map[int32]uint64                 `protobuf:"bytes,213,rep,name=map_int32_fixed64,json=mapInt32Fixed64,proto3" json:"map_int32_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Bool     map[int32]bool                   `protobuf:"bytes,214,rep,name=map_int32_bool,json=mapInt32Bool,proto3" json:"map_int32_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32String   map[int32]string                 `protobuf:"bytes,215,rep,name=map_int32_string,json=mapInt32String,proto3" json:"map_int32_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Bytes    map[int32][]byte                 `protobuf:"bytes,216,rep,name=map_int32_bytes,json=mapInt32Bytes,proto3" json:"map_int32_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Enum1    map[int32]UnmarshalData_Enum     `protobuf:"bytes,217,rep,name=map_int32_enum1,json=mapInt32Enum1,proto3" json:"map_int32_enum1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.UnmarshalData_Enum"`
	MapInt32Enum2    map[int32]UnmarshalData_Enum     `protobuf:"bytes,218,rep,name=map_int32_enum2,json=mapInt32Enum2,proto3" json:"map_int32_enum2,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=gojsontest.UnmarshalData_Enum"`
	MapInt32Aliases  map[int32]*UnmarshalData_Aliases `protobuf:"bytes,219,rep,name=map_int32_aliases,json=mapInt32Aliases,proto3" json:"map_int32_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Config   map[int32]*UnmarshalData_Config  `protobuf:"bytes,220,rep,name=map_int32_config,json=mapInt32Config,proto3" json:"map_int32_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Int32    map[int64]int32                  `protobuf:"bytes,301,rep,name=map_int64_int32,json=mapInt64Int32,proto3" json:"map_int64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Int32   map[uint32]int32                 `protobuf:"bytes,302,rep,name=map_uint32_int32,json=mapUint32Int32,proto3" json:"map_uint32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Int32   map[uint64]int32                 `protobuf:"bytes,304,rep,name=map_uint64_int32,json=mapUint64Int32,proto3" json:"map_uint64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint32Int32   map[int32]int32                  `protobuf:"bytes,305,rep,name=map_sint32_int32,json=mapSint32Int32,proto3" json:"map_sint32_int32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint64Int32   map[int64]int32                  `protobuf:"bytes,306,rep,name=map_sint64_int32,json=mapSint64Int32,proto3" json:"map_sint64_int32,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed32Int32  map[uint32]int32                 `protobuf:"bytes,307,rep,name=map_fixed32_int32,json=mapFixed32Int32,proto3" json:"map_fixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed64Int32  map[uint64]int32                 `protobuf:"bytes,308,rep,name=map_fixed64_int32,json=mapFixed64Int32,proto3" json:"map_fixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed32Int32 map[int32]int32                  `protobuf:"bytes,309,rep,name=map_sfixed32_int32,json=mapSfixed32Int32,proto3" json:"map_sfixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed64Int32 map[int64]int32                  `protobuf:"bytes,310,rep,name=map_sfixed64_int32,json=mapSfixed64Int32,proto3" json:"map_sfixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringInt32   map[string]int32                 `protobuf:"bytes,311,rep,name=map_string_int32,json=mapStringInt32,proto3" json:"map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UnmarshalData) Reset() {
	*x = UnmarshalData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalData) ProtoMessage() {}

func (x *UnmarshalData) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalData.ProtoReflect.Descriptor instead.
func (*UnmarshalData) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{30}
}

func (x *UnmarshalData) GetTString() string {
	if x != nil {
		return x.TString
	}
	return ""
}

func (x *UnmarshalData) GetTInt32() int32 {
	if x != nil {
		return x.TInt32
	}
	return 0
}

func (x *UnmarshalData) GetTInt64() int64 {
	if x != nil {
		return x.TInt64
	}
	return 0
}

func (x *UnmarshalData) GetTUint32() uint32 {
	if x != nil {
		return x.TUint32
	}
	return 0
}

func (x *UnmarshalData) GetTUint64() uint64 {
	if x != nil {
		return x.TUint64
	}
	return 0
}

func (x *UnmarshalData) GetTSint32() int32 {
	if x != nil {
		return x.TSint32
	}
	return 0
}

func (x *UnmarshalData) GetTSint64() int64 {
	if x != nil {
		return x.TSint64
	}
	return 0
}

func (x *UnmarshalData) GetTSfixed32() int32 {
	if x != nil {
		return x.TSfixed32
	}
	return 0
}

func (x *UnmarshalData) GetTSfixed64() int64 {
	if x != nil {
		return x.TSfixed64
	}
	return 0
}

func (x *UnmarshalData) GetTFixed32() uint32 {
	if x != nil {
		return x.TFixed32
	}
	return 0
}

func (x *UnmarshalData) GetTFixed64() uint64 {
	if x != nil {
		return x.TFixed64
	}
	return 0
}

func (x *UnmarshalData) GetTFloat() float32 {
	if x != nil {
		return x.TFloat
	}
	return 0
}

func (x *UnmarshalData) GetTDouble() float64 {
	if x != nil {
		return x.TDouble
	}
	return 0
}

func (x *UnmarshalData) GetTBool() bool {
	if x != nil {
		return x.TBool
	}
	return false
}

func (x *UnmarshalData) GetTEnum1() UnmarshalData_Enum {
	if x != nil {
		return x.TEnum1
	}
	return UnmarshalData_running
}

func (x *UnmarshalData) GetTEnum2() UnmarshalData_Enum {
	if x != nil {
		return x.TEnum2
	}
	return UnmarshalData_running
}

func (x *UnmarshalData) GetTBytes() []byte {
	if x != nil {
		return x.TBytes
	}
	return nil
}

func (x *UnmarshalData) GetTAliases() *UnmarshalData_Aliases {
	if x != nil {
		return x.TAliases
	}
	return nil
}

func (x *UnmarshalData) GetTConfig() *UnmarshalData_Config {
	if x != nil {
		return x.TConfig
	}
	return nil
}

func (x *UnmarshalData) GetArrayDouble() []float64 {
	if x != nil {
		return x.ArrayDouble
	}
	return nil
}

func (x *UnmarshalData) GetArrayFloat() []float32 {
	if x != nil {
		return x.ArrayFloat
	}
	return nil
}

func (x *UnmarshalData) GetArrayInt32() []int32 {
	if x != nil {
		return x.ArrayInt32
	}
	return nil
}

func (x *UnmarshalData) GetArrayInt64() []int64 {
	if x != nil {
		return x.ArrayInt64
	}
	return nil
}

func (x *UnmarshalData) GetArrayUint32() []uint32 {
	if x != nil {
		return x.ArrayUint32
	}
	return nil
}

func (x *UnmarshalData) GetArrayUint64() []uint64 {
	if x != nil {
		return x.ArrayUint64
	}
	return nil
}

func (x *UnmarshalData) GetArraySint32() []int32 {
	if x != nil {
		return x.ArraySint32
	}
	return nil
}

func (x *UnmarshalData) GetArraySint64() []int64 {
	if x != nil {
		return x.ArraySint64
	}
	return nil
}

func (x *UnmarshalData) GetArraySfixed32() []int32 {
	if x != nil {
		return x.ArraySfixed32
	}
	return nil
}

func (x *UnmarshalData) GetArraySfixed64() []int64 {
	if x != nil {
		return x.ArraySfixed64
	}
	return nil
}

func (x *UnmarshalData) GetArrayFixed32() []uint32 {
	if x != nil {
		return x.ArrayFixed32
	}
	return nil
}

func (x *UnmarshalData) GetArrayFixed64() []uint64 {
	if x != nil {
		return x.ArrayFixed64
	}
	return nil
}

func (x *UnmarshalData) GetArrayBool() []bool {
	if x != nil {
		return x.ArrayBool
	}
	return nil
}

func (x *UnmarshalData) GetArrayString() []string {
	if x != nil {
		return x.ArrayString
	}
	return nil
}

func (x *UnmarshalData) GetArrayBytes() [][]byte {
	if x != nil {
		return x.ArrayBytes
	}
	return nil
}

func (x *UnmarshalData) GetArrayEnum1() []UnmarshalData_Enum {
	if x != nil {
		return x.ArrayEnum1
	}
	return nil
}

func (x *UnmarshalData) GetArrayEnum2() []UnmarshalData_Enum {
	if x != nil {
		return x.ArrayEnum2
	}
	return nil
}

func (x *UnmarshalData) GetArrayAliases() []*UnmarshalData_Aliases {
	if x != nil {
		return x.ArrayAliases
	}
	return nil
}

func (x *UnmarshalData) GetArrayConfig() []*UnmarshalData_Config {
	if x != nil {
		return x.ArrayConfig
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Double() map[int32]float64 {
	if x != nil {
		return x.MapInt32Double
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Float() map[int32]float32 {
	if x != nil {
		return x.MapInt32Float
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Int32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Int64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Int64
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Uint32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Uint32
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Uint64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Uint64
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Sint32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sint32
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Sint64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sint64
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Sfixed32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sfixed32
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Sfixed64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sfixed64
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Fixed32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Fixed32
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Fixed64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Fixed64
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Bool() map[int32]bool {
	if x != nil {
		return x.MapInt32Bool
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32String() map[int32]string {
	if x != nil {
		return x.MapInt32String
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Bytes() map[int32][]byte {
	if x != nil {
		return x.MapInt32Bytes
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Enum1() map[int32]UnmarshalData_Enum {
	if x != nil {
		return x.MapInt32Enum1
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Enum2() map[int32]UnmarshalData_Enum {
	if x != nil {
		return x.MapInt32Enum2
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Aliases() map[int32]*UnmarshalData_Aliases {
	if x != nil {
		return x.MapInt32Aliases
	}
	return nil
}

func (x *UnmarshalData) GetMapInt32Config() map[int32]*UnmarshalData_Config {
	if x != nil {
		return x.MapInt32Config
	}
	return nil
}

func (x *UnmarshalData) GetMapInt64Int32() map[int64]int32 {
	if x != nil {
		return x.MapInt64Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapUint32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapUint32Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapUint64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapUint64Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapSint32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSint32Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapSint64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSint64Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapFixed32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapFixed32Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapFixed64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapFixed64Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapSfixed32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSfixed32Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapSfixed64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSfixed64Int32
	}
	return nil
}

func (x *UnmarshalData) GetMapStringInt32() map[string]int32 {
	if x != nil {
		return x.MapStringInt32
	}
	return nil
}

type UnmarshalOneofNotHide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*UnmarshalOneofNotHide_TString
	//	*UnmarshalOneofNotHide_TInt32
	//	*UnmarshalOneofNotHide_TInt64
	//	*UnmarshalOneofNotHide_TUint32
	//	*UnmarshalOneofNotHide_TUint64
	//	*UnmarshalOneofNotHide_TSint32
	//	*UnmarshalOneofNotHide_TSint64
	//	*UnmarshalOneofNotHide_TSfixed32
	//	*UnmarshalOneofNotHide_TSfixed64
	//	*UnmarshalOneofNotHide_TFixed32
	//	*UnmarshalOneofNotHide_TFixed64
	//	*UnmarshalOneofNotHide_TFloat
	//	*UnmarshalOneofNotHide_TDouble
	//	*UnmarshalOneofNotHide_TBool
	//	*UnmarshalOneofNotHide_TEnum1
	//	*UnmarshalOneofNotHide_TEnum2
	//	*UnmarshalOneofNotHide_TBytes
	//	*UnmarshalOneofNotHide_TAliases
	//	*UnmarshalOneofNotHide_TConfig
	Type  isUnmarshalOneofNotHide_Type `protobuf_oneof:"Type"`
	TSeat string                       `protobuf:"bytes,100,opt,name=t_seat,json=tSeat,proto3" json:"t_seat,omitempty"`
}

func (x *UnmarshalOneofNotHide) Reset() {
	*x = UnmarshalOneofNotHide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalOneofNotHide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalOneofNotHide) ProtoMessage() {}

func (x *UnmarshalOneofNotHide) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalOneofNotHide.ProtoReflect.Descriptor instead.
func (*UnmarshalOneofNotHide) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{31}
}

func (m *UnmarshalOneofNotHide) GetType() isUnmarshalOneofNotHide_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *UnmarshalOneofNotHide) GetTString() string {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TString); ok {
		return x.TString
	}
	return ""
}

func (x *UnmarshalOneofNotHide) GetTInt32() int32 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TInt32); ok {
		return x.TInt32
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTInt64() int64 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TInt64); ok {
		return x.TInt64
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTUint32() uint32 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TUint32); ok {
		return x.TUint32
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTUint64() uint64 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TUint64); ok {
		return x.TUint64
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTSint32() int32 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TSint32); ok {
		return x.TSint32
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTSint64() int64 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TSint64); ok {
		return x.TSint64
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTSfixed32() int32 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TSfixed32); ok {
		return x.TSfixed32
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTSfixed64() int64 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TSfixed64); ok {
		return x.TSfixed64
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTFixed32() uint32 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TFixed32); ok {
		return x.TFixed32
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTFixed64() uint64 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TFixed64); ok {
		return x.TFixed64
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTFloat() float32 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TFloat); ok {
		return x.TFloat
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTDouble() float64 {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TDouble); ok {
		return x.TDouble
	}
	return 0
}

func (x *UnmarshalOneofNotHide) GetTBool() bool {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TBool); ok {
		return x.TBool
	}
	return false
}

func (x *UnmarshalOneofNotHide) GetTEnum1() UnmarshalOneofNotHide_Enum {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TEnum1); ok {
		return x.TEnum1
	}
	return UnmarshalOneofNotHide_running
}

func (x *UnmarshalOneofNotHide) GetTEnum2() UnmarshalOneofNotHide_Enum {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TEnum2); ok {
		return x.TEnum2
	}
	return UnmarshalOneofNotHide_running
}

func (x *UnmarshalOneofNotHide) GetTBytes() []byte {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TBytes); ok {
		return x.TBytes
	}
	return nil
}

func (x *UnmarshalOneofNotHide) GetTAliases() *UnmarshalOneofNotHide_Aliases {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TAliases); ok {
		return x.TAliases
	}
	return nil
}

func (x *UnmarshalOneofNotHide) GetTConfig() *UnmarshalOneofNotHide_Config {
	if x, ok := x.GetType().(*UnmarshalOneofNotHide_TConfig); ok {
		return x.TConfig
	}
	return nil
}

func (x *UnmarshalOneofNotHide) GetTSeat() string {
	if x != nil {
		return x.TSeat
	}
	return ""
}

type isUnmarshalOneofNotHide_Type interface {
	isUnmarshalOneofNotHide_Type()
}

type UnmarshalOneofNotHide_TString struct {
	TString string `protobuf:"bytes,1,opt,name=t_string,json=tString,proto3,oneof"`
}

type UnmarshalOneofNotHide_TInt32 struct {
	TInt32 int32 `protobuf:"varint,2,opt,name=t_int32,json=tInt32,proto3,oneof"`
}

type UnmarshalOneofNotHide_TInt64 struct {
	TInt64 int64 `protobuf:"varint,3,opt,name=t_int64,json=tInt64,proto3,oneof"`
}

type UnmarshalOneofNotHide_TUint32 struct {
	TUint32 uint32 `protobuf:"varint,4,opt,name=t_uint32,json=tUint32,proto3,oneof"`
}

type UnmarshalOneofNotHide_TUint64 struct {
	TUint64 uint64 `protobuf:"varint,5,opt,name=t_uint64,json=tUint64,proto3,oneof"`
}

type UnmarshalOneofNotHide_TSint32 struct {
	TSint32 int32 `protobuf:"zigzag32,6,opt,name=t_sint32,json=tSint32,proto3,oneof"`
}

type UnmarshalOneofNotHide_TSint64 struct {
	TSint64 int64 `protobuf:"zigzag64,7,opt,name=t_sint64,json=tSint64,proto3,oneof"`
}

type UnmarshalOneofNotHide_TSfixed32 struct {
	TSfixed32 int32 `protobuf:"fixed32,8,opt,name=t_sfixed32,json=tSfixed32,proto3,oneof"`
}

type UnmarshalOneofNotHide_TSfixed64 struct {
	TSfixed64 int64 `protobuf:"fixed64,9,opt,name=t_sfixed64,json=tSfixed64,proto3,oneof"`
}

type UnmarshalOneofNotHide_TFixed32 struct {
	TFixed32 uint32 `protobuf:"fixed32,10,opt,name=t_fixed32,json=tFixed32,proto3,oneof"`
}

type UnmarshalOneofNotHide_TFixed64 struct {
	TFixed64 uint64 `protobuf:"fixed64,11,opt,name=t_fixed64,json=tFixed64,proto3,oneof"`
}

type UnmarshalOneofNotHide_TFloat struct {
	TFloat float32 `protobuf:"fixed32,12,opt,name=t_float,json=tFloat,proto3,oneof"`
}

type UnmarshalOneofNotHide_TDouble struct {
	TDouble float64 `protobuf:"fixed64,13,opt,name=t_double,json=tDouble,proto3,oneof"`
}

type UnmarshalOneofNotHide_TBool struct {
	TBool bool `protobuf:"varint,14,opt,name=t_bool,json=tBool,proto3,oneof"`
}

type UnmarshalOneofNotHide_TEnum1 struct {
	TEnum1 UnmarshalOneofNotHide_Enum `protobuf:"varint,15,opt,name=t_enum1,json=tEnum1,proto3,enum=gojsontest.UnmarshalOneofNotHide_Enum,oneof"`
}

type UnmarshalOneofNotHide_TEnum2 struct {
	TEnum2 UnmarshalOneofNotHide_Enum `protobuf:"varint,16,opt,name=t_enum2,json=tEnum2,proto3,enum=gojsontest.UnmarshalOneofNotHide_Enum,oneof"`
}

type UnmarshalOneofNotHide_TBytes struct {
	TBytes []byte `protobuf:"bytes,17,opt,name=t_bytes,json=tBytes,proto3,oneof"`
}

type UnmarshalOneofNotHide_TAliases struct {
	TAliases *UnmarshalOneofNotHide_Aliases `protobuf:"bytes,18,opt,name=t_aliases,json=tAliases,proto3,oneof"`
}

type UnmarshalOneofNotHide_TConfig struct {
	TConfig *UnmarshalOneofNotHide_Config `protobuf:"bytes,19,opt,name=t_config,json=tConfig,proto3,oneof"`
}

func (*UnmarshalOneofNotHide_TString) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TInt32) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TInt64) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TUint32) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TUint64) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TSint32) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TSint64) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TSfixed32) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TSfixed64) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TFixed32) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TFixed64) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TFloat) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TDouble) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TBool) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TEnum1) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TEnum2) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TBytes) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TAliases) isUnmarshalOneofNotHide_Type() {}

func (*UnmarshalOneofNotHide_TConfig) isUnmarshalOneofNotHide_Type() {}

type UnmarshalOneofHide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*UnmarshalOneofHide_TString
	//	*UnmarshalOneofHide_TInt32
	//	*UnmarshalOneofHide_TInt64
	//	*UnmarshalOneofHide_TUint32
	//	*UnmarshalOneofHide_TUint64
	//	*UnmarshalOneofHide_TSint32
	//	*UnmarshalOneofHide_TSint64
	//	*UnmarshalOneofHide_TSfixed32
	//	*UnmarshalOneofHide_TSfixed64
	//	*UnmarshalOneofHide_TFixed32
	//	*UnmarshalOneofHide_TFixed64
	//	*UnmarshalOneofHide_TFloat
	//	*UnmarshalOneofHide_TDouble
	//	*UnmarshalOneofHide_TBool
	//	*UnmarshalOneofHide_TEnum1
	//	*UnmarshalOneofHide_TEnum2
	//	*UnmarshalOneofHide_TBytes
	//	*UnmarshalOneofHide_TAliases
	//	*UnmarshalOneofHide_TConfig
	Type  isUnmarshalOneofHide_Type `protobuf_oneof:"Type"`
	TSeat string                    `protobuf:"bytes,100,opt,name=t_seat,json=tSeat,proto3" json:"t_seat,omitempty"`
}

func (x *UnmarshalOneofHide) Reset() {
	*x = UnmarshalOneofHide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalOneofHide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalOneofHide) ProtoMessage() {}

func (x *UnmarshalOneofHide) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalOneofHide.ProtoReflect.Descriptor instead.
func (*UnmarshalOneofHide) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{32}
}

func (m *UnmarshalOneofHide) GetType() isUnmarshalOneofHide_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *UnmarshalOneofHide) GetTString() string {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TString); ok {
		return x.TString
	}
	return ""
}

func (x *UnmarshalOneofHide) GetTInt32() int32 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TInt32); ok {
		return x.TInt32
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTInt64() int64 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TInt64); ok {
		return x.TInt64
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTUint32() uint32 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TUint32); ok {
		return x.TUint32
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTUint64() uint64 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TUint64); ok {
		return x.TUint64
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTSint32() int32 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TSint32); ok {
		return x.TSint32
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTSint64() int64 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TSint64); ok {
		return x.TSint64
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTSfixed32() int32 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TSfixed32); ok {
		return x.TSfixed32
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTSfixed64() int64 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TSfixed64); ok {
		return x.TSfixed64
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTFixed32() uint32 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TFixed32); ok {
		return x.TFixed32
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTFixed64() uint64 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TFixed64); ok {
		return x.TFixed64
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTFloat() float32 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TFloat); ok {
		return x.TFloat
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTDouble() float64 {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TDouble); ok {
		return x.TDouble
	}
	return 0
}

func (x *UnmarshalOneofHide) GetTBool() bool {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TBool); ok {
		return x.TBool
	}
	return false
}

func (x *UnmarshalOneofHide) GetTEnum1() UnmarshalOneofHide_Enum {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TEnum1); ok {
		return x.TEnum1
	}
	return UnmarshalOneofHide_running
}

func (x *UnmarshalOneofHide) GetTEnum2() UnmarshalOneofHide_Enum {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TEnum2); ok {
		return x.TEnum2
	}
	return UnmarshalOneofHide_running
}

func (x *UnmarshalOneofHide) GetTBytes() []byte {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TBytes); ok {
		return x.TBytes
	}
	return nil
}

func (x *UnmarshalOneofHide) GetTAliases() *UnmarshalOneofHide_Aliases {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TAliases); ok {
		return x.TAliases
	}
	return nil
}

func (x *UnmarshalOneofHide) GetTConfig() *UnmarshalOneofHide_Config {
	if x, ok := x.GetType().(*UnmarshalOneofHide_TConfig); ok {
		return x.TConfig
	}
	return nil
}

func (x *UnmarshalOneofHide) GetTSeat() string {
	if x != nil {
		return x.TSeat
	}
	return ""
}

type isUnmarshalOneofHide_Type interface {
	isUnmarshalOneofHide_Type()
}

type UnmarshalOneofHide_TString struct {
	TString string `protobuf:"bytes,1,opt,name=t_string,json=tString,proto3,oneof"`
}

type UnmarshalOneofHide_TInt32 struct {
	TInt32 int32 `protobuf:"varint,2,opt,name=t_int32,json=tInt32,proto3,oneof"`
}

type UnmarshalOneofHide_TInt64 struct {
	TInt64 int64 `protobuf:"varint,3,opt,name=t_int64,json=tInt64,proto3,oneof"`
}

type UnmarshalOneofHide_TUint32 struct {
	TUint32 uint32 `protobuf:"varint,4,opt,name=t_uint32,json=tUint32,proto3,oneof"`
}

type UnmarshalOneofHide_TUint64 struct {
	TUint64 uint64 `protobuf:"varint,5,opt,name=t_uint64,json=tUint64,proto3,oneof"`
}

type UnmarshalOneofHide_TSint32 struct {
	TSint32 int32 `protobuf:"zigzag32,6,opt,name=t_sint32,json=tSint32,proto3,oneof"`
}

type UnmarshalOneofHide_TSint64 struct {
	TSint64 int64 `protobuf:"zigzag64,7,opt,name=t_sint64,json=tSint64,proto3,oneof"`
}

type UnmarshalOneofHide_TSfixed32 struct {
	TSfixed32 int32 `protobuf:"fixed32,8,opt,name=t_sfixed32,json=tSfixed32,proto3,oneof"`
}

type UnmarshalOneofHide_TSfixed64 struct {
	TSfixed64 int64 `protobuf:"fixed64,9,opt,name=t_sfixed64,json=tSfixed64,proto3,oneof"`
}

type UnmarshalOneofHide_TFixed32 struct {
	TFixed32 uint32 `protobuf:"fixed32,10,opt,name=t_fixed32,json=tFixed32,proto3,oneof"`
}

type UnmarshalOneofHide_TFixed64 struct {
	TFixed64 uint64 `protobuf:"fixed64,11,opt,name=t_fixed64,json=tFixed64,proto3,oneof"`
}

type UnmarshalOneofHide_TFloat struct {
	TFloat float32 `protobuf:"fixed32,12,opt,name=t_float,json=tFloat,proto3,oneof"`
}

type UnmarshalOneofHide_TDouble struct {
	TDouble float64 `protobuf:"fixed64,13,opt,name=t_double,json=tDouble,proto3,oneof"`
}

type UnmarshalOneofHide_TBool struct {
	TBool bool `protobuf:"varint,14,opt,name=t_bool,json=tBool,proto3,oneof"`
}

type UnmarshalOneofHide_TEnum1 struct {
	TEnum1 UnmarshalOneofHide_Enum `protobuf:"varint,15,opt,name=t_enum1,json=tEnum1,proto3,enum=gojsontest.UnmarshalOneofHide_Enum,oneof"`
}

type UnmarshalOneofHide_TEnum2 struct {
	TEnum2 UnmarshalOneofHide_Enum `protobuf:"varint,16,opt,name=t_enum2,json=tEnum2,proto3,enum=gojsontest.UnmarshalOneofHide_Enum,oneof"`
}

type UnmarshalOneofHide_TBytes struct {
	TBytes []byte `protobuf:"bytes,17,opt,name=t_bytes,json=tBytes,proto3,oneof"`
}

type UnmarshalOneofHide_TAliases struct {
	TAliases *UnmarshalOneofHide_Aliases `protobuf:"bytes,18,opt,name=t_aliases,json=tAliases,proto3,oneof"`
}

type UnmarshalOneofHide_TConfig struct {
	TConfig *UnmarshalOneofHide_Config `protobuf:"bytes,19,opt,name=t_config,json=tConfig,proto3,oneof"`
}

func (*UnmarshalOneofHide_TString) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TInt32) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TInt64) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TUint32) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TUint64) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TSint32) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TSint64) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TSfixed32) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TSfixed64) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TFixed32) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TFixed64) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TFloat) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TDouble) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TBool) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TEnum1) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TEnum2) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TBytes) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TAliases) isUnmarshalOneofHide_Type() {}

func (*UnmarshalOneofHide_TConfig) isUnmarshalOneofHide_Type() {}

type OptionalModel1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString   *string                 `protobuf:"bytes,1,opt,name=t_string,json=tString,proto3,oneof" json:"t_string,omitempty"`
	TInt32    *int32                  `protobuf:"varint,2,opt,name=t_int32,json=tInt32,proto3,oneof" json:"t_int32,omitempty"`
	TInt64    *int64                  `protobuf:"varint,3,opt,name=t_int64,json=tInt64,proto3,oneof" json:"t_int64,omitempty"`
	TUint32   *uint32                 `protobuf:"varint,4,opt,name=t_uint32,json=tUint32,proto3,oneof" json:"t_uint32,omitempty"`
	TUint64   *uint64                 `protobuf:"varint,5,opt,name=t_uint64,json=tUint64,proto3,oneof" json:"t_uint64,omitempty"`
	TSint32   *int32                  `protobuf:"zigzag32,6,opt,name=t_sint32,json=tSint32,proto3,oneof" json:"t_sint32,omitempty"`
	TSint64   *int64                  `protobuf:"zigzag64,7,opt,name=t_sint64,json=tSint64,proto3,oneof" json:"t_sint64,omitempty"`
	TSfixed32 *int32                  `protobuf:"fixed32,8,opt,name=t_sfixed32,json=tSfixed32,proto3,oneof" json:"t_sfixed32,omitempty"`
	TSfixed64 *int64                  `protobuf:"fixed64,9,opt,name=t_sfixed64,json=tSfixed64,proto3,oneof" json:"t_sfixed64,omitempty"`
	TFixed32  *uint32                 `protobuf:"fixed32,10,opt,name=t_fixed32,json=tFixed32,proto3,oneof" json:"t_fixed32,omitempty"`
	TFixed64  *uint64                 `protobuf:"fixed64,11,opt,name=t_fixed64,json=tFixed64,proto3,oneof" json:"t_fixed64,omitempty"`
	TFloat    *float32                `protobuf:"fixed32,12,opt,name=t_float,json=tFloat,proto3,oneof" json:"t_float,omitempty"`
	TDouble   *float64                `protobuf:"fixed64,13,opt,name=t_double,json=tDouble,proto3,oneof" json:"t_double,omitempty"`
	TBool     *bool                   `protobuf:"varint,14,opt,name=t_bool,json=tBool,proto3,oneof" json:"t_bool,omitempty"`
	TEnum1    *OptionalModel1_Enum    `protobuf:"varint,15,opt,name=t_enum1,json=tEnum1,proto3,enum=gojsontest.OptionalModel1_Enum,oneof" json:"t_enum1,omitempty"`
	TEnum2    *OptionalModel1_Enum    `protobuf:"varint,16,opt,name=t_enum2,json=tEnum2,proto3,enum=gojsontest.OptionalModel1_Enum,oneof" json:"t_enum2,omitempty"`
	TBytes    []byte                  `protobuf:"bytes,17,opt,name=t_bytes,json=tBytes,proto3,oneof" json:"t_bytes,omitempty"`
	TAliases  *OptionalModel1_Aliases `protobuf:"bytes,18,opt,name=t_aliases,json=tAliases,proto3,oneof" json:"t_aliases,omitempty"`
	TConfig   *OptionalModel1_Config  `protobuf:"bytes,19,opt,name=t_config,json=tConfig,proto3,oneof" json:"t_config,omitempty"`
}

func (x *OptionalModel1) Reset() {
	*x = OptionalModel1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalModel1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalModel1) ProtoMessage() {}

func (x *OptionalModel1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalModel1.ProtoReflect.Descriptor instead.
func (*OptionalModel1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{33}
}

func (x *OptionalModel1) GetTString() string {
	if x != nil && x.TString != nil {
		return *x.TString
	}
	return ""
}

func (x *OptionalModel1) GetTInt32() int32 {
	if x != nil && x.TInt32 != nil {
		return *x.TInt32
	}
	return 0
}

func (x *OptionalModel1) GetTInt64() int64 {
	if x != nil && x.TInt64 != nil {
		return *x.TInt64
	}
	return 0
}

func (x *OptionalModel1) GetTUint32() uint32 {
	if x != nil && x.TUint32 != nil {
		return *x.TUint32
	}
	return 0
}

func (x *OptionalModel1) GetTUint64() uint64 {
	if x != nil && x.TUint64 != nil {
		return *x.TUint64
	}
	return 0
}

func (x *OptionalModel1) GetTSint32() int32 {
	if x != nil && x.TSint32 != nil {
		return *x.TSint32
	}
	return 0
}

func (x *OptionalModel1) GetTSint64() int64 {
	if x != nil && x.TSint64 != nil {
		return *x.TSint64
	}
	return 0
}

func (x *OptionalModel1) GetTSfixed32() int32 {
	if x != nil && x.TSfixed32 != nil {
		return *x.TSfixed32
	}
	return 0
}

func (x *OptionalModel1) GetTSfixed64() int64 {
	if x != nil && x.TSfixed64 != nil {
		return *x.TSfixed64
	}
	return 0
}

func (x *OptionalModel1) GetTFixed32() uint32 {
	if x != nil && x.TFixed32 != nil {
		return *x.TFixed32
	}
	return 0
}

func (x *OptionalModel1) GetTFixed64() uint64 {
	if x != nil && x.TFixed64 != nil {
		return *x.TFixed64
	}
	return 0
}

func (x *OptionalModel1) GetTFloat() float32 {
	if x != nil && x.TFloat != nil {
		return *x.TFloat
	}
	return 0
}

func (x *OptionalModel1) GetTDouble() float64 {
	if x != nil && x.TDouble != nil {
		return *x.TDouble
	}
	return 0
}

func (x *OptionalModel1) GetTBool() bool {
	if x != nil && x.TBool != nil {
		return *x.TBool
	}
	return false
}

func (x *OptionalModel1) GetTEnum1() OptionalModel1_Enum {
	if x != nil && x.TEnum1 != nil {
		return *x.TEnum1
	}
	return OptionalModel1_running
}

func (x *OptionalModel1) GetTEnum2() OptionalModel1_Enum {
	if x != nil && x.TEnum2 != nil {
		return *x.TEnum2
	}
	return OptionalModel1_running
}

func (x *OptionalModel1) GetTBytes() []byte {
	if x != nil {
		return x.TBytes
	}
	return nil
}

func (x *OptionalModel1) GetTAliases() *OptionalModel1_Aliases {
	if x != nil {
		return x.TAliases
	}
	return nil
}

func (x *OptionalModel1) GetTConfig() *OptionalModel1_Config {
	if x != nil {
		return x.TConfig
	}
	return nil
}

type OptionalModel2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString   *string                 `protobuf:"bytes,1,opt,name=t_string,json=tString,proto3,oneof" json:"t_string,omitempty"`
	TInt32    *int32                  `protobuf:"varint,2,opt,name=t_int32,json=tInt32,proto3,oneof" json:"t_int32,omitempty"`
	TInt64    *int64                  `protobuf:"varint,3,opt,name=t_int64,json=tInt64,proto3,oneof" json:"t_int64,omitempty"`
	TUint32   *uint32                 `protobuf:"varint,4,opt,name=t_uint32,json=tUint32,proto3,oneof" json:"t_uint32,omitempty"`
	TUint64   *uint64                 `protobuf:"varint,5,opt,name=t_uint64,json=tUint64,proto3,oneof" json:"t_uint64,omitempty"`
	TSint32   *int32                  `protobuf:"zigzag32,6,opt,name=t_sint32,json=tSint32,proto3,oneof" json:"t_sint32,omitempty"`
	TSint64   *int64                  `protobuf:"zigzag64,7,opt,name=t_sint64,json=tSint64,proto3,oneof" json:"t_sint64,omitempty"`
	TSfixed32 *int32                  `protobuf:"fixed32,8,opt,name=t_sfixed32,json=tSfixed32,proto3,oneof" json:"t_sfixed32,omitempty"`
	TSfixed64 *int64                  `protobuf:"fixed64,9,opt,name=t_sfixed64,json=tSfixed64,proto3,oneof" json:"t_sfixed64,omitempty"`
	TFixed32  *uint32                 `protobuf:"fixed32,10,opt,name=t_fixed32,json=tFixed32,proto3,oneof" json:"t_fixed32,omitempty"`
	TFixed64  *uint64                 `protobuf:"fixed64,11,opt,name=t_fixed64,json=tFixed64,proto3,oneof" json:"t_fixed64,omitempty"`
	TFloat    *float32                `protobuf:"fixed32,12,opt,name=t_float,json=tFloat,proto3,oneof" json:"t_float,omitempty"`
	TDouble   *float64                `protobuf:"fixed64,13,opt,name=t_double,json=tDouble,proto3,oneof" json:"t_double,omitempty"`
	TBool     *bool                   `protobuf:"varint,14,opt,name=t_bool,json=tBool,proto3,oneof" json:"t_bool,omitempty"`
	TEnum1    *OptionalModel2_Enum    `protobuf:"varint,15,opt,name=t_enum1,json=tEnum1,proto3,enum=gojsontest.OptionalModel2_Enum,oneof" json:"t_enum1,omitempty"`
	TEnum2    *OptionalModel2_Enum    `protobuf:"varint,16,opt,name=t_enum2,json=tEnum2,proto3,enum=gojsontest.OptionalModel2_Enum,oneof" json:"t_enum2,omitempty"`
	TBytes    []byte                  `protobuf:"bytes,17,opt,name=t_bytes,json=tBytes,proto3,oneof" json:"t_bytes,omitempty"`
	TAliases  *OptionalModel2_Aliases `protobuf:"bytes,18,opt,name=t_aliases,json=tAliases,proto3,oneof" json:"t_aliases,omitempty"`
	TConfig   *OptionalModel2_Config  `protobuf:"bytes,19,opt,name=t_config,json=tConfig,proto3,oneof" json:"t_config,omitempty"`
}

func (x *OptionalModel2) Reset() {
	*x = OptionalModel2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalModel2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalModel2) ProtoMessage() {}

func (x *OptionalModel2) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalModel2.ProtoReflect.Descriptor instead.
func (*OptionalModel2) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{34}
}

func (x *OptionalModel2) GetTString() string {
	if x != nil && x.TString != nil {
		return *x.TString
	}
	return ""
}

func (x *OptionalModel2) GetTInt32() int32 {
	if x != nil && x.TInt32 != nil {
		return *x.TInt32
	}
	return 0
}

func (x *OptionalModel2) GetTInt64() int64 {
	if x != nil && x.TInt64 != nil {
		return *x.TInt64
	}
	return 0
}

func (x *OptionalModel2) GetTUint32() uint32 {
	if x != nil && x.TUint32 != nil {
		return *x.TUint32
	}
	return 0
}

func (x *OptionalModel2) GetTUint64() uint64 {
	if x != nil && x.TUint64 != nil {
		return *x.TUint64
	}
	return 0
}

func (x *OptionalModel2) GetTSint32() int32 {
	if x != nil && x.TSint32 != nil {
		return *x.TSint32
	}
	return 0
}

func (x *OptionalModel2) GetTSint64() int64 {
	if x != nil && x.TSint64 != nil {
		return *x.TSint64
	}
	return 0
}

func (x *OptionalModel2) GetTSfixed32() int32 {
	if x != nil && x.TSfixed32 != nil {
		return *x.TSfixed32
	}
	return 0
}

func (x *OptionalModel2) GetTSfixed64() int64 {
	if x != nil && x.TSfixed64 != nil {
		return *x.TSfixed64
	}
	return 0
}

func (x *OptionalModel2) GetTFixed32() uint32 {
	if x != nil && x.TFixed32 != nil {
		return *x.TFixed32
	}
	return 0
}

func (x *OptionalModel2) GetTFixed64() uint64 {
	if x != nil && x.TFixed64 != nil {
		return *x.TFixed64
	}
	return 0
}

func (x *OptionalModel2) GetTFloat() float32 {
	if x != nil && x.TFloat != nil {
		return *x.TFloat
	}
	return 0
}

func (x *OptionalModel2) GetTDouble() float64 {
	if x != nil && x.TDouble != nil {
		return *x.TDouble
	}
	return 0
}

func (x *OptionalModel2) GetTBool() bool {
	if x != nil && x.TBool != nil {
		return *x.TBool
	}
	return false
}

func (x *OptionalModel2) GetTEnum1() OptionalModel2_Enum {
	if x != nil && x.TEnum1 != nil {
		return *x.TEnum1
	}
	return OptionalModel2_running
}

func (x *OptionalModel2) GetTEnum2() OptionalModel2_Enum {
	if x != nil && x.TEnum2 != nil {
		return *x.TEnum2
	}
	return OptionalModel2_running
}

func (x *OptionalModel2) GetTBytes() []byte {
	if x != nil {
		return x.TBytes
	}
	return nil
}

func (x *OptionalModel2) GetTAliases() *OptionalModel2_Aliases {
	if x != nil {
		return x.TAliases
	}
	return nil
}

func (x *OptionalModel2) GetTConfig() *OptionalModel2_Config {
	if x != nil {
		return x.TConfig
	}
	return nil
}

type Model1_EmbedMessage1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Age1 string `protobuf:"bytes,1,opt,name=age1,proto3" json:"age1,omitempty"`
	Age2 string `protobuf:"bytes,2,opt,name=age2,proto3" json:"age2,omitempty"`
	Age3 string `protobuf:"bytes,3,opt,name=age3,proto3" json:"age3,omitempty"`
}

func (x *Model1_EmbedMessage1) Reset() {
	*x = Model1_EmbedMessage1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model1_EmbedMessage1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model1_EmbedMessage1) ProtoMessage() {}

func (x *Model1_EmbedMessage1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model1_EmbedMessage1.ProtoReflect.Descriptor instead.
func (*Model1_EmbedMessage1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Model1_EmbedMessage1) GetAge1() string {
	if x != nil {
		return x.Age1
	}
	return ""
}

func (x *Model1_EmbedMessage1) GetAge2() string {
	if x != nil {
		return x.Age2
	}
	return ""
}

func (x *Model1_EmbedMessage1) GetAge3() string {
	if x != nil {
		return x.Age3
	}
	return ""
}

type Model2_EmbedMessage1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Age1 string `protobuf:"bytes,1,opt,name=age1,proto3" json:"age1,omitempty"`
	Age2 string `protobuf:"bytes,2,opt,name=age2,proto3" json:"age2,omitempty"`
	Age3 string `protobuf:"bytes,3,opt,name=age3,proto3" json:"age3,omitempty"`
}

func (x *Model2_EmbedMessage1) Reset() {
	*x = Model2_EmbedMessage1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Model2_EmbedMessage1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model2_EmbedMessage1) ProtoMessage() {}

func (x *Model2_EmbedMessage1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model2_EmbedMessage1.ProtoReflect.Descriptor instead.
func (*Model2_EmbedMessage1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Model2_EmbedMessage1) GetAge1() string {
	if x != nil {
		return x.Age1
	}
	return ""
}

func (x *Model2_EmbedMessage1) GetAge2() string {
	if x != nil {
		return x.Age2
	}
	return ""
}

func (x *Model2_EmbedMessage1) GetAge3() string {
	if x != nil {
		return x.Age3
	}
	return ""
}

type FieldCustomName_Aliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FieldCustomName_Aliases) Reset() {
	*x = FieldCustomName_Aliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldCustomName_Aliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldCustomName_Aliases) ProtoMessage() {}

func (x *FieldCustomName_Aliases) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldCustomName_Aliases.ProtoReflect.Descriptor instead.
func (*FieldCustomName_Aliases) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{8, 0}
}

type FieldCustomName_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *FieldCustomName_Config) Reset() {
	*x = FieldCustomName_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldCustomName_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldCustomName_Config) ProtoMessage() {}

func (x *FieldCustomName_Config) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldCustomName_Config.ProtoReflect.Descriptor instead.
func (*FieldCustomName_Config) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{8, 1}
}

func (x *FieldCustomName_Config) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *FieldCustomName_Config) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type UnmarshalData_Aliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnmarshalData_Aliases) Reset() {
	*x = UnmarshalData_Aliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalData_Aliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalData_Aliases) ProtoMessage() {}

func (x *UnmarshalData_Aliases) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalData_Aliases.ProtoReflect.Descriptor instead.
func (*UnmarshalData_Aliases) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{30, 0}
}

type UnmarshalData_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *UnmarshalData_Config) Reset() {
	*x = UnmarshalData_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalData_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalData_Config) ProtoMessage() {}

func (x *UnmarshalData_Config) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalData_Config.ProtoReflect.Descriptor instead.
func (*UnmarshalData_Config) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{30, 1}
}

func (x *UnmarshalData_Config) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UnmarshalData_Config) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type UnmarshalOneofNotHide_Aliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnmarshalOneofNotHide_Aliases) Reset() {
	*x = UnmarshalOneofNotHide_Aliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalOneofNotHide_Aliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalOneofNotHide_Aliases) ProtoMessage() {}

func (x *UnmarshalOneofNotHide_Aliases) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalOneofNotHide_Aliases.ProtoReflect.Descriptor instead.
func (*UnmarshalOneofNotHide_Aliases) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{31, 0}
}

type UnmarshalOneofNotHide_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *UnmarshalOneofNotHide_Config) Reset() {
	*x = UnmarshalOneofNotHide_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalOneofNotHide_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalOneofNotHide_Config) ProtoMessage() {}

func (x *UnmarshalOneofNotHide_Config) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalOneofNotHide_Config.ProtoReflect.Descriptor instead.
func (*UnmarshalOneofNotHide_Config) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{31, 1}
}

func (x *UnmarshalOneofNotHide_Config) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UnmarshalOneofNotHide_Config) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type UnmarshalOneofHide_Aliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnmarshalOneofHide_Aliases) Reset() {
	*x = UnmarshalOneofHide_Aliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalOneofHide_Aliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalOneofHide_Aliases) ProtoMessage() {}

func (x *UnmarshalOneofHide_Aliases) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalOneofHide_Aliases.ProtoReflect.Descriptor instead.
func (*UnmarshalOneofHide_Aliases) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{32, 0}
}

type UnmarshalOneofHide_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *UnmarshalOneofHide_Config) Reset() {
	*x = UnmarshalOneofHide_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnmarshalOneofHide_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnmarshalOneofHide_Config) ProtoMessage() {}

func (x *UnmarshalOneofHide_Config) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnmarshalOneofHide_Config.ProtoReflect.Descriptor instead.
func (*UnmarshalOneofHide_Config) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{32, 1}
}

func (x *UnmarshalOneofHide_Config) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UnmarshalOneofHide_Config) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type OptionalModel1_Aliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OptionalModel1_Aliases) Reset() {
	*x = OptionalModel1_Aliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalModel1_Aliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalModel1_Aliases) ProtoMessage() {}

func (x *OptionalModel1_Aliases) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalModel1_Aliases.ProtoReflect.Descriptor instead.
func (*OptionalModel1_Aliases) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{33, 0}
}

type OptionalModel1_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *string `protobuf:"bytes,1,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	Port *int32  `protobuf:"varint,2,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *OptionalModel1_Config) Reset() {
	*x = OptionalModel1_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalModel1_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalModel1_Config) ProtoMessage() {}

func (x *OptionalModel1_Config) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalModel1_Config.ProtoReflect.Descriptor instead.
func (*OptionalModel1_Config) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{33, 1}
}

func (x *OptionalModel1_Config) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *OptionalModel1_Config) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type OptionalModel2_Aliases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OptionalModel2_Aliases) Reset() {
	*x = OptionalModel2_Aliases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalModel2_Aliases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalModel2_Aliases) ProtoMessage() {}

func (x *OptionalModel2_Aliases) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalModel2_Aliases.ProtoReflect.Descriptor instead.
func (*OptionalModel2_Aliases) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{34, 0}
}

type OptionalModel2_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   *string `protobuf:"bytes,1,opt,name=ip,proto3,oneof" json:"ip,omitempty"`
	Port *int32  `protobuf:"varint,2,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *OptionalModel2_Config) Reset() {
	*x = OptionalModel2_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalModel2_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalModel2_Config) ProtoMessage() {}

func (x *OptionalModel2_Config) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalModel2_Config.ProtoReflect.Descriptor instead.
func (*OptionalModel2_Config) Descriptor() ([]byte, []int) {
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP(), []int{34, 1}
}

func (x *OptionalModel2_Config) GetIp() string {
	if x != nil && x.Ip != nil {
		return *x.Ip
	}
	return ""
}

func (x *OptionalModel2_Config) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

var File_xgo_tests_gojsontest_gojson_test_proto protoreflect.FileDescriptor

var file_xgo_tests_gojsontest_gojson_test_proto_rawDesc = []byte{
	0x0a, 0x26, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x32, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x33, 0x22, 0xda, 0x91, 0x02, 0x0a, 0x06, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x31, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x25,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x27, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x48, 0x00, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x27,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0f,
	0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x29, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x21, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x14,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x00, 0x52, 0x12,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x00, 0x52, 0x12, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x5a, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a,
	0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x11, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x00, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x51, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x00, 0x52,
	0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x25, 0x20, 0x01, 0x28, 0x11, 0x48, 0x01,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x25,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x12, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x27, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x27, 0x20, 0x01, 0x28, 0x07, 0x48, 0x01, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x27,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x06, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0f,
	0x48, 0x01, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x29, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x10, 0x48, 0x01, 0x52, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x21, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x14,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x01, 0x52, 0x12,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x01, 0x52, 0x12, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x5a, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x01, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a,
	0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x01, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x11, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x01, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x51, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x01, 0x52,
	0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x33, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x33, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x02, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x40, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x33, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x02, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x42, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x33, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x33, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x43, 0x20, 0x01, 0x28, 0x11, 0x48, 0x02,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x25,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x12, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x27, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x45, 0x20, 0x01, 0x28, 0x07, 0x48, 0x02, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x27,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x06, 0x48, 0x02, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x33, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0f,
	0x48, 0x02, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x29, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x48, 0x20, 0x01, 0x28, 0x10, 0x48, 0x02, 0x52, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x33, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x21, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x49, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x33, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x33, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x02, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x14,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x02, 0x52, 0x12,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x02, 0x52, 0x12, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x33, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x5a, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x4e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x02, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a,
	0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x02, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x33, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x11, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x33, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x02, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x51, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x02, 0x52,
	0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x01, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x03, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x5d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x34, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x03, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x60, 0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x34, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x34, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x61, 0x20, 0x01, 0x28, 0x11, 0x48, 0x03,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x25,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x12, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x27, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x63, 0x20, 0x01, 0x28, 0x07, 0x48, 0x03, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x27,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x06, 0x48, 0x03, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x29, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x34, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0f,
	0x48, 0x03, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x29, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x66, 0x20, 0x01, 0x28, 0x10, 0x48, 0x03, 0x52, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x21, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x14,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x03, 0x52, 0x12,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x03, 0x52, 0x12, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x34, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x5a, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x03, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a,
	0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x03, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x34, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x44, 0x0a, 0x11, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x03, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x51, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x03, 0x52,
	0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x79, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x35, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x35, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x7b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x35, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x35, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x04, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x35, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x35, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x11, 0x48, 0x04,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x80, 0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x04, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x07, 0x48,
	0x04, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x06, 0x48, 0x04, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x35, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x35, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x83, 0x01,
	0x20, 0x01, 0x28, 0x0f, 0x48, 0x04, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x10,
	0x48, 0x04, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x22, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x35, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24,
	0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x87,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x88, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x04, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48,
	0x04, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x35, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x8b, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x48, 0x04, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35,
	0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x04, 0x52, 0x0f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x35, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x52, 0x0a,
	0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x04, 0x52, 0x12, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x35, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x0c, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x36, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x99, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x0b,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x9b, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x36, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x9d, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x05, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x05, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x36, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x9f, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x48, 0x05, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x06, 0x48, 0x05,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x05, 0x52, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x36, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xa2,
	0x01, 0x20, 0x01, 0x28, 0x10, 0x48, 0x05, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x36, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52,
	0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xa4, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x36, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x36, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x05, 0x52, 0x12, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x36, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4e, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x05, 0x52, 0x12, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x36, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x5b, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xa8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x05, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a,
	0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x05, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x36, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x11, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48,
	0x05, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x48, 0x05, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x36, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x06,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xb6,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0b, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x37, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x37, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x06, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x37, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x37, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x06, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x06, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x37, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x37, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x48, 0x06, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x07, 0x48, 0x06, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x37, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x37, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xbe, 0x01, 0x20,
	0x01, 0x28, 0x06, 0x48, 0x06, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x06,
	0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x10, 0x48, 0x06, 0x52, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x37, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0b,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xc1, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x06, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x37, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x37, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x06, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x55,
	0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48,
	0x06, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xc5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48,
	0x06, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x06, 0x52, 0x15, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x37, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x06, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x45, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x48, 0x06, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x37, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0xc9, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x06, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x37, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x26, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xd3, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x07, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x07, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x38, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x38, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x07, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xd6, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x07, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xd8,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x07, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48, 0x07, 0x52,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xda,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x07, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x07, 0x48, 0x07,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x06, 0x48, 0x07, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x38, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x38, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xdd, 0x01, 0x20,
	0x01, 0x28, 0x0f, 0x48, 0x07, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x10, 0x48,
	0x07, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x12, 0x22, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0xdf, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x38, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xe1, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x07, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xe2, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x07, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x38, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x07, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x17, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x38, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x07,
	0x52, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x38, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xe5, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x48, 0x07, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x11, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x07, 0x52, 0x0f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x38, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x52, 0x0a, 0x14,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x38, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x07, 0x52, 0x12, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x38, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0xf1, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x39, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x39, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x24,
	0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xf3,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x0b, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x39, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x39, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xf5, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0xf6, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x08, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x39, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x39, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xf7, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x08, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x39, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x39, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xf9, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x48, 0x08, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x06, 0x48, 0x08, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2a,
	0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x08, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x39, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x39, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xfc, 0x01,
	0x20, 0x01, 0x28, 0x10, 0x48, 0x08, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x0a,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x39, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xfe, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x39, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x39, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x80, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x08, 0x52, 0x12, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x39, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4e, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x81, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x08, 0x52, 0x12, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x39, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x5b, 0x0a, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x82, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x48, 0x08, 0x52, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x11,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0x83, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x08, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x39, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x11, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x39, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x84, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x08,
	0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x52, 0x0a, 0x14, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x85, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48,
	0x08, 0x52, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x39, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x8f, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x09,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x90, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x30, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x30, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x91, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x92, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x30, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x30, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x93, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x09, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x94, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x09, 0x52, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x30, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x95, 0x02,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x09, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x96, 0x02, 0x20, 0x01, 0x28, 0x12, 0x48, 0x09,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x97, 0x02, 0x20, 0x01, 0x28, 0x07, 0x48, 0x09, 0x52, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x30, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x98,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x48, 0x09, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x30, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x99, 0x02, 0x20, 0x01,
	0x28, 0x0f, 0x48, 0x09, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x9a, 0x02, 0x20, 0x01, 0x28, 0x10,
	0x48, 0x09, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x9b, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x30, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x30, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x9c, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x09, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x9d, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x09, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x9e, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x09, 0x52,
	0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x9f, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48,
	0x09, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x30, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xa0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x09, 0x52, 0x16, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30,
	0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa1, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x31, 0x48, 0x09, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30,
	0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa2, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x09, 0x52, 0x10, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x30, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54,
	0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa3, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x09, 0x52,
	0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x30, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0a, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0xae, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x31, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xb0, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x31, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x31, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb1, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x0a, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xb2, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0a, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x31, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb3, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x0a, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xb4, 0x02, 0x20, 0x01, 0x28, 0x12, 0x48, 0x0a, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a,
	0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0xb5, 0x02, 0x20, 0x01, 0x28, 0x07, 0x48, 0x0a, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x31, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xb6, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x48, 0x0a, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x31, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xb7, 0x02, 0x20, 0x01, 0x28,
	0x0f, 0x48, 0x0a, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xb8, 0x02, 0x20, 0x01, 0x28, 0x10, 0x48,
	0x0a, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0xb9, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x31, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xba, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0a, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0xbb, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0a, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x31, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xbc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0a, 0x52, 0x13,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xbd, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0a,
	0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xbe, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0a, 0x52, 0x16, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x31, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xbf, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x48, 0x0a, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0a, 0x52, 0x10, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x31, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a,
	0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xc1, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0a, 0x52, 0x13,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x31, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xcb, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0b, 0x52, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xcc,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0b, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xcd, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xce,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x0b, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0xd0, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0b, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xd1, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x0b, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xd2, 0x02, 0x20, 0x01, 0x28, 0x12, 0x48, 0x0b, 0x52, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0xd3, 0x02, 0x20, 0x01, 0x28, 0x07, 0x48, 0x0b, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xd4, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x48, 0x0b, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xd5, 0x02, 0x20, 0x01, 0x28, 0x0f,
	0x48, 0x0b, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xd6, 0x02, 0x20, 0x01, 0x28, 0x10, 0x48, 0x0b,
	0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0xd7, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xd8, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0b, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0xd9, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0b, 0x52, 0x0c, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x32, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xda, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0b, 0x52, 0x13, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xdb, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0b, 0x52,
	0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xdc, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0b, 0x52, 0x16, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x32, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xdd, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48,
	0x0b, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0b, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xdf, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0b, 0x52, 0x13, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x32, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0xe9, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xea, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x0c, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xeb, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x0c,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xec, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xed, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0xee, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0c, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x33, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x33, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xef, 0x02, 0x20, 0x01, 0x28,
	0x11, 0x48, 0x0c, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0xf0, 0x02, 0x20, 0x01, 0x28, 0x12, 0x48, 0x0c, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0xf1, 0x02, 0x20, 0x01, 0x28, 0x07, 0x48, 0x0c, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x33, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x33, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xf2, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x48, 0x0c, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xf3, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x48,
	0x0c, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xf4, 0x02, 0x20, 0x01, 0x28, 0x10, 0x48, 0x0c, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0xf5, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x33, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x33, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xf6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0xf7, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0c, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x33, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x33, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xf8, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0c, 0x52, 0x13, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x33, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xf9, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0c, 0x52, 0x13,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0xfa, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0c, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x33, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xfb, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0c,
	0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0c, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x33, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x33, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0xfd, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0c, 0x52, 0x13, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x33, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x87, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0d, 0x52, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x88, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x0d, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x89, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x8a, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x0d, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x8b, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x8c, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0d, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x34, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x34, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x8d, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x48, 0x0d, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x8e, 0x03, 0x20, 0x01, 0x28, 0x12, 0x48, 0x0d, 0x52, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x34, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x8f,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x48, 0x0d, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x34, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28,
	0x06, 0x48, 0x0d, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x0d,
	0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x10, 0x48, 0x0d, 0x52, 0x0f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x93, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x94, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x95, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0d, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x34, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0d, 0x52, 0x13, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x34, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x97, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0d, 0x52, 0x13, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x98,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0d, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x34, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0d, 0x52,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0d, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x34, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x34, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x9b, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0d, 0x52, 0x13, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x34, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0xa5, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0e, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x35, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xa6, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x0e, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xa7, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x35, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xa8, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x0e, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0xa9, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xaa,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x0e, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x35, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xab, 0x03, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x0e, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xac, 0x03, 0x20, 0x01, 0x28, 0x12, 0x48, 0x0e, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x35, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xad, 0x03,
	0x20, 0x01, 0x28, 0x07, 0x48, 0x0e, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x35, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x06,
	0x48, 0x0e, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x0e, 0x52,
	0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x18, 0xb0, 0x03, 0x20, 0x01, 0x28, 0x10, 0x48, 0x0e, 0x52, 0x0f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24,
	0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xb1,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xb2, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0xb3, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0e, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x35, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x35, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0xb4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0e, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x35, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x50, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xb5, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0e, 0x52, 0x13, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x35, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xb6, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0e, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x35, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xb7, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0e, 0x52, 0x10,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x47, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35, 0x5f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0e, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x35,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x35, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0xb9, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0e, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x35, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0xc3, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0f, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x36, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x36, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xc4, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x0f, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0xc5, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0c, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x36, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x36, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xc6, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x0f, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xc7, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x36, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xc8, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x0f, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xc9, 0x03, 0x20, 0x01, 0x28, 0x11, 0x48, 0x0f,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0xca, 0x03, 0x20, 0x01, 0x28, 0x12, 0x48, 0x0f, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x36, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x36, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xcb, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x48, 0x0f, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x06, 0x48,
	0x0f, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xcd, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x0f, 0x52, 0x0f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0xce, 0x03, 0x20, 0x01, 0x28, 0x10, 0x48, 0x0f, 0x52, 0x0f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x36, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xcf, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xd0, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xd1,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0f, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36,
	0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd2,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0f, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x36, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50,
	0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd3, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0f, 0x52, 0x13, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x36, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd4, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x0f, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xd5, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0f, 0x52, 0x10, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x47, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0f, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x36, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x36, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0xd7, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x0f, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x36, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0xe1, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x10, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x37, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x37, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xe2, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x10, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0xe3, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x37, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x37, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xe4, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x10, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0xe5, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x37, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xe6, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x10, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xe7, 0x03, 0x20, 0x01, 0x28, 0x11, 0x48, 0x10, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0xe8, 0x03, 0x20, 0x01, 0x28, 0x12, 0x48, 0x10, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x37, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x37, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xe9, 0x03, 0x20, 0x01,
	0x28, 0x07, 0x48, 0x10, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28, 0x06, 0x48, 0x10,
	0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0xeb, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x10, 0x52, 0x0f, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2c,
	0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0xec, 0x03, 0x20, 0x01, 0x28, 0x10, 0x48, 0x10, 0x52, 0x0f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x37, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0c,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xed, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xee, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xef, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x10, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xf0, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x10, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x37, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a,
	0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xf1, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x10, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x37, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x5d, 0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xf2, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x10, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e,
	0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0xf3, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x10, 0x52, 0x10, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x37, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47,
	0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x48, 0x10, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x37, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x37, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0xf5, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x10, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x37, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0xff, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x11, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x38, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x38, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x80, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x11, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x81, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x11, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x38, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x38, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x82, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x11, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x83, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x11, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x38, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x38, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x84, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x11, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x85, 0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x11, 0x52, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x86, 0x04, 0x20, 0x01, 0x28, 0x12, 0x48, 0x11, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x38, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x38, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x87, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x48, 0x11, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x06, 0x48, 0x11, 0x52,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x89, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x11, 0x52, 0x0f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x38, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x8a, 0x04, 0x20, 0x01, 0x28, 0x10, 0x48, 0x11, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x38, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x8b, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x11, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x8c, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x38, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x8d, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x11, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x65,
	0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x8e, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x11, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x15,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x8f, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x11, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x38, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d,
	0x0a, 0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x90, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x48, 0x11, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a,
	0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x91, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x11, 0x52, 0x10, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x38, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a,
	0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x92, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x48, 0x11, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x38, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x93, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x11, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x38,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x9d,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x12, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x39, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x9e, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x12,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x9f, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x12, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x39, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x39, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xa0, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x12,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0xa1, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x39, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x39, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xa2, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x12, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0xa3, 0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x12, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xa4,
	0x04, 0x20, 0x01, 0x28, 0x12, 0x48, 0x12, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x39, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xa5, 0x04, 0x20, 0x01, 0x28, 0x07,
	0x48, 0x12, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x06, 0x48, 0x12, 0x52, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c,
	0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0xa7, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x12, 0x52, 0x0f, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x39, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x10,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0xa8, 0x04, 0x20, 0x01, 0x28, 0x10, 0x48, 0x12, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x39, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xa9, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x12, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xaa, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x39, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xab, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x12, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xac, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x12, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0xad, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x12, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x39, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a,
	0x18, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xae, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x48, 0x12, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x12,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0xaf, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x12, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x39, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x31, 0x48, 0x12, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xb1,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x48, 0x12, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x39, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xbb, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x13, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xbc, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x13, 0x52,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xbd,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x13, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xbe, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x13, 0x52,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0xbf, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x13, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x30, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x30, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xc0, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x13, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xc1, 0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x13, 0x52, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x30, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xc2, 0x04,
	0x20, 0x01, 0x28, 0x12, 0x48, 0x13, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xc3, 0x04, 0x20, 0x01, 0x28, 0x07, 0x48,
	0x13, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x18, 0xc4, 0x04, 0x20, 0x01, 0x28, 0x06, 0x48, 0x13, 0x52, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0xc5, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x13, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x30, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x10, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0xc6, 0x04, 0x20, 0x01, 0x28, 0x10, 0x48, 0x13, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x30, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x30, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xc7, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x13, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xc8, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x30, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x30, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xc9, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x13, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xca, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x48, 0x13, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xcb, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x13, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xcc, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x31, 0x48, 0x13, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0xcd, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x13, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x30, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0xce, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x48, 0x13, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xcf, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x48, 0x13, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x30, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xd9, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x14, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xda, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x14, 0x52, 0x0c,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xdb, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x14, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xdc, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x14, 0x52, 0x0c,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xdd,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x14, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x31, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xde, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x14, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0xdf, 0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x14, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x31, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xe0, 0x04, 0x20,
	0x01, 0x28, 0x12, 0x48, 0x14, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xe1, 0x04, 0x20, 0x01, 0x28, 0x07, 0x48, 0x14,
	0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x06, 0x48, 0x14, 0x52, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x31, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x10,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0xe3, 0x04, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x14, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x31, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xe4,
	0x04, 0x20, 0x01, 0x28, 0x10, 0x48, 0x14, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x31, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xe5, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x14, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0xe6, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x31, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xe7, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x14, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xe8, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x48, 0x14, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x45, 0x6d, 0x62,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x31, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xe9, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x48, 0x14, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xea, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x48, 0x14, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0xeb, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x14, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x31, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0xec, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48,
	0x14, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xed, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x48, 0x14, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x31, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x32, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xf7, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x15, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0xf8, 0x04, 0x20, 0x01, 0x28, 0x02, 0x48, 0x15, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xf9, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x15, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0xfa, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x15, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xfb, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x15, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xfc, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x15,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0xfd, 0x04, 0x20, 0x01, 0x28, 0x11, 0x48, 0x15, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xfe, 0x04, 0x20, 0x01,
	0x28, 0x12, 0x48, 0x15, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xff, 0x04, 0x20, 0x01, 0x28, 0x07, 0x48, 0x15, 0x52,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x80, 0x05, 0x20, 0x01, 0x28, 0x06, 0x48, 0x15, 0x52, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x10, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x81, 0x05, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x15, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x82, 0x05,
	0x20, 0x01, 0x28, 0x10, 0x48, 0x15, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x83, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15,
	0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x84, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x85, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x15, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x57, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x86, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x31, 0x48, 0x15, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x87, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x48, 0x15, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x88, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48,
	0x15, 0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x32, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x89, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x15, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x8a, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x15,
	0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x8b, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d,
	0x31, 0x48, 0x15, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x32, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x33, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x95, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x16, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x18, 0x96, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x16, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x33, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x97, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x16, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x98, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x16, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x33, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x99, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x16, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x9a, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x16, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x9b, 0x05, 0x20, 0x01, 0x28, 0x11, 0x48, 0x16, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x33, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x33, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x9c, 0x05, 0x20, 0x01, 0x28,
	0x12, 0x48, 0x16, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x2a, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x9d, 0x05, 0x20, 0x01, 0x28, 0x07, 0x48, 0x16, 0x52, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a,
	0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x9e, 0x05, 0x20, 0x01, 0x28, 0x06, 0x48, 0x16, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x33, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x9f,
	0x05, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x16, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2c, 0x0a, 0x10, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x33, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xa0, 0x05, 0x20,
	0x01, 0x28, 0x10, 0x48, 0x16, 0x52, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x33, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xa1, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xa2,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x33, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xa3, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x16,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xa4, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x48, 0x16, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x50, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x33, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xa5, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x48, 0x16, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x33, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xa6, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x48, 0x16,
	0x52, 0x16, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x33, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa7,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x48, 0x16, 0x52, 0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x47, 0x0a, 0x12, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x33, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa8,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x16, 0x52,
	0x10, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x54, 0x0a, 0x15, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa9, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x48, 0x16, 0x52, 0x13, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x33, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x18, 0xb1, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x12, 0x35, 0x0a, 0x0b, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x18, 0xb2, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x32, 0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x32, 0x12, 0x21, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x33, 0x18, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x33, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x34, 0x18, 0xb4, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x79,
	0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x79, 0x70,
	0x65, 0x5f, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x35, 0x18, 0xb5, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x54, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x35, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xbb, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xbc, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xbd, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xbe, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xbf,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0xc0, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xc1, 0x09, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xc2, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0b, 0x74, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xc3, 0x09, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xc4,
	0x09, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x18, 0xc5, 0x09, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0c, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0xc6, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x18, 0xc7, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0xc8, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0xc9, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x33, 0x18, 0xca, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0xcb, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x18, 0xcc, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xcd, 0x09, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xd9, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x10, 0x74, 0x79,
	0x70, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48,
	0x0a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0xdb, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x10, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xdc, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x31, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x3f, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0xdd, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xde, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x10, 0x74,
	0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x55, 0x0a, 0x15, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xdf, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x31, 0x52, 0x13, 0x74, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0xed, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x12,
	0x58, 0x0a, 0x17, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0xee, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x52, 0x14, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x17, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x18, 0xef, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x14, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x5e, 0x0a, 0x1a,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0xf0, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x52, 0x17, 0x74, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x95, 0x0a, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x96, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x97, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x98, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x99, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x9a, 0x0a, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x9b,
	0x0a, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x9c, 0x0a, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x9d, 0x0a, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x24, 0x0a, 0x0d,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x9e, 0x0a,
	0x20, 0x03, 0x28, 0x06, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0x9f, 0x0a, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x0d, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xa0, 0x0a, 0x20,
	0x03, 0x28, 0x10, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0xa1, 0x0a, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xa2, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xa3, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0xa4, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xa5, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xa6, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x14, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x48, 0x0a, 0x10, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa7, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x0e, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x10, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa8,
	0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x0e, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x4e, 0x0a,
	0x13, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa9, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x4a, 0x0a,
	0x15, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0xaa, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x12, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xfa, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x0f,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0xfb, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x4e, 0x0a, 0x0f,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0xfc, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x4e, 0x0a, 0x0f,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0xfd, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x51, 0x0a, 0x10,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0xfe, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0xff, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x80, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x81, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x54, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x82, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x54,
	0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x83, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x57, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x84, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x57, 0x0a,
	0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x85, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x4b, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x86, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x87, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x88, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x89, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x64, 0x0a, 0x17,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x8a, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x8b, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x5b, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x8c, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x4e, 0x0a, 0x0f,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0xab, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10,
	0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0xac, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xad, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xae, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xaf, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x54, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb0, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d,
	0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x54,
	0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xb1, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x57, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb2, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x57, 0x0a,
	0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xb3, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb4, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5e, 0x0a, 0x15, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x18, 0xb5, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x54, 0x0a, 0x11, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xb6,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f,
	0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x67, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d,
	0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xb7, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x15, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0xb8, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x70, 0x0a, 0x1b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xb9, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x6d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xba, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x5e, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xbb, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x12, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x67, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0xbc, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x1a, 0x4b, 0x0a, 0x0d,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x67, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x67, 0x65,
	0x31, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x67, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x67, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x67, 0x65, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x67, 0x65, 0x33, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40,
	0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x62, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x16, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61,
	0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43,
	0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x75, 0x6c,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x63, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6d, 0x0a, 0x1d, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x17,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e,
	0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67, 0x0a, 0x1a, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x0a, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x6a, 0x75, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x61, 0x75, 0x67, 0x75, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x65, 0x70, 0x74,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62,
	0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x05,
	0x42, 0x23, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x15,
	0xca, 0xb5, 0x03, 0x11, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x31, 0x18, 0x00, 0x20, 0x00, 0x42, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x54, 0x79,
	0x70, 0x65, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x33, 0x42, 0x0d, 0x0a, 0x0b, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x34,
	0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x35, 0x42,
	0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x36, 0x42, 0x0d,
	0x0a, 0x0b, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x37, 0x42, 0x0d, 0x0a,
	0x0b, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x38, 0x42, 0x0d, 0x0a, 0x0b,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x39, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x30, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x33, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x34, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x35, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x36, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x37, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x38, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x31, 0x39, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x32, 0x30, 0x42, 0x0e, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x32, 0x31, 0x42, 0x13, 0x0a, 0x11, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x32, 0x32, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x42, 0x13, 0x0a, 0x11, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x32, 0x33,
	0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x22, 0xf6, 0x41, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31,
	0x18, 0xb1, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x32, 0x18, 0xb2, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x79, 0x70,
	0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x33, 0x18, 0xb3, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x33, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x34, 0x18, 0xb4, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x34,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x35,
	0x18, 0xb5, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0xbb, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0xbc, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xbd, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xbe, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xbf, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xc0, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xc1, 0x09, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xc2, 0x09, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0xc3, 0x09, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xc4, 0x09, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0c, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xc5, 0x09, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0xc6,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x31,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x18, 0xc7,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x32,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x18, 0xc8, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x18, 0xc9, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0xca, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0xcb, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35,
	0x18, 0xcc, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0xcd, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd9, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x52, 0x10, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xdb, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x10, 0x74,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x46, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0xdc, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x3f, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xdd, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x4c, 0x0a, 0x12, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xde,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x52, 0x10, 0x74, 0x79, 0x70, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x55, 0x0a, 0x15, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0xdf, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x13, 0x74, 0x79, 0x70, 0x65, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x95, 0x0a,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x18, 0x96, 0x0a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x97, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x98, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x99, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x9a, 0x0a, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x9b, 0x0a, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x9c, 0x0a, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x9d, 0x0a, 0x20, 0x03, 0x28, 0x07, 0x52,
	0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x24, 0x0a,
	0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x9e,
	0x0a, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x9f, 0x0a, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x0d, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xa0, 0x0a,
	0x20, 0x03, 0x28, 0x10, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0xa1, 0x0a, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0xa2, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xa3, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xa4, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x13,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0xa5, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x16, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xa6, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x14, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x48, 0x0a, 0x10, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa7, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x0e, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x41, 0x0a, 0x10, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0xa8, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x0e,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x4e,
	0x0a, 0x13, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0xa9, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x11, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x51,
	0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0xfa, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0xfb, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0xfc, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0xfd, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xfe, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xff, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x80, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x81,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x54, 0x0a,
	0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x82, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x54, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x83, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x57, 0x0a, 0x12, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x84, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x57, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x85, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x4b, 0x0a, 0x0e, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x86, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x87, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x0f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x88,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x89, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x64, 0x0a, 0x17, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x8a, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x14, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x8b, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x11, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x5b, 0x0a, 0x14, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x8c, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0xab, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xac, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32,
	0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xad, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xae, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xaf,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d,
	0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x54, 0x0a,
	0x11, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0xb0, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61,
	0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x54, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb1, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x57, 0x0a, 0x12, 0x6d, 0x61, 0x70,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0xb2, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x57, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb3, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x51, 0x0a, 0x10, 0x6d,
	0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0xb4, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x54,
	0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0xb6, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x67, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xb7, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x67, 0x0a,
	0x18, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xb8, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x15, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x70, 0x0a, 0x1b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xb9, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18,
	0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0xba, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x5e, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x18, 0xbb, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x67, 0x0a, 0x18, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0xbc, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15, 0x6d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75,
	0x6d, 0x1a, 0x4b, 0x0a, 0x0d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x67, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x67, 0x65, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x67, 0x65, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x67, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x67,
	0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x67, 0x65, 0x33, 0x1a, 0x41,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x69, 0x0a, 0x19, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x45, 0x6d,
	0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x19, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x16, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x5c, 0x0a, 0x16, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a,
	0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d,
	0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x63, 0x0a, 0x1a, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6d, 0x0a, 0x1d, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x17, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x32, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5d, 0x0a, 0x17, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x67, 0x0a, 0x1a, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5a, 0x0a, 0x0a, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x12, 0x08, 0x0a, 0x04, 0x6a, 0x75, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x75,
	0x67, 0x75, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x65, 0x70, 0x74, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x63, 0x74, 0x6f, 0x62, 0x65, 0x72,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x6e, 0x6f, 0x76, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x05, 0x22, 0x8d,
	0x05, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x33, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x36, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x36, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x37, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x37, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x38, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x38, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x30, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x30, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x10, 0x52, 0x09,
	0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x74, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0xcd,
	0x06, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x54, 0x65, 0x78, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65,
	0x5f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x33, 0x12, 0x1f, 0x0a, 0x0b, 0x4e, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x37, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x38, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x31, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x31, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x32, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x32,
	0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x33, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x34, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x34,
	0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x35, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x35, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x35, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x35, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36,
	0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x37, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x37, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x37, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x37, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x38, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x38,
	0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x38, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x38, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02,
	0x08, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31,
	0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x32, 0x42, 0x0c,
	0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x33, 0x42, 0x0c, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x36, 0x42, 0x0b, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x37, 0x42, 0x0b, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x38, 0x22, 0xcb,
	0x06, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x47, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x33, 0x12, 0x1f, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x37, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x38, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x31, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31,
	0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x32, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x32, 0x12, 0x18,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x33, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x34, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x34, 0x12, 0x18,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x35, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x35, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x35,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x35,
	0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x12, 0x18,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x37, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x37, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x37,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x37,
	0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x38, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x38, 0x12, 0x18,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x38, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x38, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x08, 0x02,
	0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x42, 0x0c,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x32, 0x42, 0x0c, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x36, 0x42, 0x0b, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x37, 0x42,
	0x0b, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x38, 0x22, 0xcd, 0x06, 0x0a,
	0x11, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x4a, 0x53, 0x4f, 0x4e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x53,
	0x74, 0x79, 0x6c, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x33, 0x12, 0x1f, 0x0a, 0x0b, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x37, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x38, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x31, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31,
	0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x32, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x32, 0x12, 0x18,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x33, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x34, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x34, 0x12, 0x18,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x35, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x35, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x35,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x35,
	0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x12, 0x18,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x37, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x37, 0x12, 0x18, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x37,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x37,
	0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x38, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x38, 0x12, 0x18,
	0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x38, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x38, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x08, 0x03,
	0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x42, 0x0c,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x32, 0x42, 0x0c, 0x0a, 0x0a,
	0x44, 0x61, 0x74, 0x61, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x44, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x74, 0x79, 0x70, 0x65, 0x35, 0x42, 0x0b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x36, 0x42, 0x0b, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x37, 0x42,
	0x0b, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x38, 0x22, 0xb5, 0x4a, 0x0a,
	0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a, 0x02, 0x74, 0x73, 0x52, 0x07, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x74, 0x69,
	0x33, 0x32, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x07, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0a, 0x8a, 0xf7, 0x02,
	0x06, 0x0a, 0x04, 0x74, 0x69, 0x36, 0x34, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x25, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x74, 0x75, 0x33, 0x32, 0x52, 0x07, 0x74,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x25, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04,
	0x74, 0x75, 0x36, 0x34, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x26, 0x0a,
	0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x42,
	0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x74, 0x73, 0x69, 0x33, 0x32, 0x52, 0x07, 0x74, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x74,
	0x73, 0x69, 0x36, 0x34, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2a, 0x0a,
	0x0a, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0f, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x74, 0x73, 0x66, 0x33, 0x32, 0x52, 0x09,
	0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0x8a,
	0xf7, 0x02, 0x07, 0x0a, 0x05, 0x74, 0x73, 0x66, 0x36, 0x34, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05,
	0x74, 0x66, 0x69, 0x33, 0x32, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x28, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x74, 0x66, 0x69, 0x36, 0x34, 0x52,
	0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x07, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05,
	0x0a, 0x03, 0x74, 0x66, 0x6c, 0x52, 0x06, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x24, 0x0a,
	0x08, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x74, 0x64, 0x6c, 0x52, 0x07, 0x74, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x74, 0x62, 0x6c, 0x52, 0x05,
	0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x44, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03,
	0x74, 0x65, 0x31, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x46, 0x0a, 0x07, 0x74,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0b,
	0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x03, 0x74, 0x65, 0x32, 0x20, 0x01, 0x52, 0x06, 0x74, 0x45, 0x6e,
	0x75, 0x6d, 0x32, 0x12, 0x22, 0x0a, 0x07, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x74, 0x62, 0x73, 0x52,
	0x06, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x74, 0x5f, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x42,
	0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a, 0x02, 0x74, 0x61, 0x52, 0x08, 0x74, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a,
	0x02, 0x74, 0x63, 0x52, 0x07, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x65, 0x20, 0x03,
	0x28, 0x01, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x61, 0x64, 0x6c, 0x52, 0x0b, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28, 0x02, 0x42,
	0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x61, 0x66, 0x6c, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x67, 0x20, 0x03, 0x28, 0x05, 0x42, 0x0a, 0x8a, 0xf7, 0x02,
	0x06, 0x0a, 0x04, 0x61, 0x69, 0x33, 0x32, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x2b, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x68, 0x20, 0x03, 0x28, 0x03, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04,
	0x61, 0x69, 0x36, 0x34, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x69, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x61, 0x75,
	0x33, 0x32, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x2d, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x6a, 0x20, 0x03, 0x28, 0x04, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x61, 0x75, 0x36,
	0x34, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2e,
	0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x6b,
	0x20, 0x03, 0x28, 0x11, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x61, 0x73, 0x69, 0x33,
	0x32, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2e,
	0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x6c,
	0x20, 0x03, 0x28, 0x12, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x61, 0x73, 0x69, 0x36,
	0x34, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x32,
	0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x6d, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x61, 0x73,
	0x66, 0x33, 0x32, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x32, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x10, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07,
	0x0a, 0x05, 0x61, 0x73, 0x66, 0x36, 0x34, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x30, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x07, 0x42, 0x0b, 0x8a,
	0xf7, 0x02, 0x07, 0x0a, 0x05, 0x61, 0x66, 0x69, 0x33, 0x32, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x70, 0x20, 0x03, 0x28, 0x06, 0x42,
	0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x61, 0x66, 0x69, 0x36, 0x34, 0x52, 0x0c, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0a, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x71, 0x20, 0x03, 0x28, 0x08, 0x42, 0x09,
	0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x61, 0x62, 0x6c, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x72, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04,
	0x0a, 0x02, 0x61, 0x73, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x2a, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x73, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x61, 0x62,
	0x73, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a,
	0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x74, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x61, 0x65, 0x31, 0x52,
	0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x4e, 0x0a, 0x0b, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x75, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x03, 0x61, 0x65, 0x32, 0x20, 0x01, 0x52,
	0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x52, 0x0a, 0x0d, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x76, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a, 0x02, 0x61,
	0x61, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x4f, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x77, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a,
	0x02, 0x61, 0x63, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x67, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0xca, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0x8a, 0xf7,
	0x02, 0x07, 0x0a, 0x05, 0x6d, 0x33, 0x32, 0x64, 0x6c, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xcb, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6d, 0x33, 0x32, 0x66, 0x6c,
	0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x65, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0xcc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a,
	0x06, 0x6d, 0x33, 0x32, 0x69, 0x33, 0x32, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x65, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcd, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6d, 0x33, 0x32, 0x69, 0x36, 0x34, 0x52, 0x0d,
	0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x68, 0x0a,
	0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0xce, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a,
	0x06, 0x6d, 0x33, 0x32, 0x75, 0x33, 0x32, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x68, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcf, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6d, 0x33, 0x32, 0x75, 0x36,
	0x34, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x69, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xd0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a,
	0xf7, 0x02, 0x09, 0x0a, 0x07, 0x6d, 0x33, 0x32, 0x73, 0x69, 0x33, 0x32, 0x52, 0x0e, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x69, 0x0a, 0x10,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0xd1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07,
	0x6d, 0x33, 0x32, 0x73, 0x69, 0x36, 0x34, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x6f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xd2, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07, 0x6d,
	0x33, 0x32, 0x73, 0x66, 0x33, 0x32, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x6f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xd3,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07,
	0x6d, 0x33, 0x32, 0x73, 0x66, 0x36, 0x34, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x6c, 0x0a, 0x11, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xd4,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07, 0x6d,
	0x33, 0x32, 0x66, 0x69, 0x33, 0x32, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x6c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xd5, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07, 0x6d, 0x33, 0x32,
	0x66, 0x69, 0x36, 0x34, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x61, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xd6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0x8a,
	0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6d, 0x33, 0x32, 0x62, 0x6c, 0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x66, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xd7, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6d, 0x33, 0x32, 0x73,
	0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x63, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0xd8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06,
	0x0a, 0x04, 0x6d, 0x33, 0x32, 0x62, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0xd9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6d, 0x33, 0x32, 0x65, 0x31, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x66, 0x0a, 0x0f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0xda,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x05, 0x6d, 0x33, 0x32,
	0x65, 0x32, 0x20, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x75, 0x6d, 0x32, 0x12, 0x69, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0xdb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6d, 0x33, 0x32, 0x61, 0x52, 0x0f, 0x6d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x66,
	0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xdc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06,
	0x0a, 0x04, 0x6d, 0x33, 0x32, 0x63, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x66, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xad, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07, 0x6d, 0x69, 0x36, 0x34, 0x69, 0x33, 0x32, 0x52,
	0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x69,
	0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0xae, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09,
	0x0a, 0x07, 0x6d, 0x75, 0x33, 0x32, 0x69, 0x33, 0x32, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x69, 0x0a, 0x10, 0x6d, 0x61, 0x70,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb0, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07, 0x6d, 0x75, 0x36,
	0x34, 0x69, 0x33, 0x32, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x69, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb1, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07, 0x6d, 0x73, 0x33, 0x32, 0x69, 0x33, 0x32, 0x52,
	0x0e, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x69, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xb2, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02,
	0x09, 0x0a, 0x07, 0x6d, 0x73, 0x36, 0x34, 0x69, 0x33, 0x32, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x6c, 0x0a, 0x11, 0x6d, 0x61,
	0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0xb3, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07,
	0x6d, 0x66, 0x33, 0x32, 0x69, 0x33, 0x32, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x6c, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb4, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0d, 0x8a, 0xf7, 0x02, 0x09, 0x0a, 0x07, 0x6d, 0x66,
	0x36, 0x34, 0x69, 0x33, 0x32, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x70, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb5, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x8a, 0xf7, 0x02, 0x0a, 0x0a, 0x08, 0x6d, 0x73,
	0x66, 0x33, 0x32, 0x69, 0x33, 0x32, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x70, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb6,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x8a, 0xf7, 0x02, 0x0a, 0x0a, 0x08,
	0x6d, 0x73, 0x66, 0x36, 0x34, 0x69, 0x33, 0x32, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x67, 0x0a, 0x10, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb7,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6d, 0x73,
	0x69, 0x33, 0x32, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x31, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xf7, 0x02,
	0x06, 0x0a, 0x04, 0x6f, 0x31, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x54,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x92, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0x8a,
	0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6f, 0x31, 0x69, 0x33, 0x32, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e,
	0x65, 0x31, 0x54, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31,
	0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x93, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6f, 0x31, 0x69, 0x36, 0x34, 0x48, 0x00, 0x52, 0x0a,
	0x6f, 0x6e, 0x65, 0x31, 0x54, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x32, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x31, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x94, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6f, 0x31, 0x75, 0x33, 0x32, 0x48,
	0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x32,
	0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x95, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6f, 0x31,
	0x75, 0x36, 0x34, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x96, 0x03, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08,
	0x0a, 0x06, 0x6f, 0x31, 0x73, 0x69, 0x33, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x31,
	0x54, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x31, 0x5f,
	0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x97, 0x03, 0x20, 0x01, 0x28, 0x12, 0x42,
	0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f, 0x31, 0x73, 0x69, 0x36, 0x34, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x37, 0x0a, 0x0f,
	0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x98, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f, 0x31,
	0x73, 0x66, 0x33, 0x32, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x37, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x99, 0x03, 0x20, 0x01, 0x28, 0x10, 0x42,
	0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f, 0x31, 0x73, 0x66, 0x36, 0x34, 0x48, 0x00, 0x52,
	0x0d, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x35,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f,
	0x31, 0x66, 0x69, 0x33, 0x32, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x9b, 0x03, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0c,
	0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f, 0x31, 0x66, 0x69, 0x36, 0x34, 0x48, 0x00, 0x52, 0x0c,
	0x6f, 0x6e, 0x65, 0x31, 0x54, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2f, 0x0a, 0x0c,
	0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x9c, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x31, 0x74, 0x66, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x31, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x9d,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x31, 0x64,
	0x66, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x2d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x9e, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x31,
	0x62, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x51, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18,
	0x9f, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04,
	0x6f, 0x31, 0x65, 0x31, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x12, 0x53, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x32, 0x18, 0xa0, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0c, 0x8a, 0xf7, 0x02,
	0x08, 0x0a, 0x04, 0x6f, 0x31, 0x65, 0x32, 0x20, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65,
	0x31, 0x54, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x2f, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xa1, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a,
	0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x31, 0x74, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e,
	0x65, 0x31, 0x54, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x31,
	0x5f, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0xa2, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x31,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x54, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0xa3, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a,
	0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x31, 0x74, 0x63, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e,
	0x65, 0x31, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x32, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xf5, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x32, 0x74, 0x73, 0x48, 0x01, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x0a, 0x0c,
	0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xf6, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6f, 0x32, 0x69, 0x33, 0x32,
	0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x30,
	0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xf7,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05, 0x6f, 0x32, 0x69,
	0x36, 0x34, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x32, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0xf8, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x05,
	0x6f, 0x32, 0x75, 0x33, 0x32, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x32, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xf9, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0x8a, 0xf7,
	0x02, 0x07, 0x0a, 0x05, 0x6f, 0x32, 0x75, 0x36, 0x34, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65,
	0x32, 0x54, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x32,
	0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xfa, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f, 0x32, 0x73, 0x69, 0x33, 0x32, 0x48, 0x01,
	0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x33, 0x0a,
	0x0d, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xfb,
	0x03, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f, 0x32, 0x73,
	0x69, 0x36, 0x34, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x37, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xfc, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0c, 0x8a, 0xf7,
	0x02, 0x08, 0x0a, 0x06, 0x6f, 0x32, 0x73, 0x66, 0x33, 0x32, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e,
	0x65, 0x32, 0x54, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x37, 0x0a, 0x0f, 0x6f,
	0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xfd,
	0x03, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f, 0x32, 0x73,
	0x66, 0x36, 0x34, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0c, 0x8a,
	0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f, 0x32, 0x66, 0x69, 0x33, 0x32, 0x48, 0x01, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x32, 0x54, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x35, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xff, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x06, 0x6f, 0x32, 0x66, 0x69,
	0x36, 0x34, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x2f, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x80, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a,
	0x04, 0x6f, 0x32, 0x74, 0x66, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x31, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x81, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0x8a, 0xf7, 0x02,
	0x06, 0x0a, 0x04, 0x6f, 0x32, 0x64, 0x66, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x54,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x82, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0a, 0x8a, 0xf7,
	0x02, 0x06, 0x0a, 0x04, 0x6f, 0x32, 0x62, 0x6c, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x32,
	0x54, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x51, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x83, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x0a,
	0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x32, 0x65, 0x31, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e,
	0x65, 0x32, 0x54, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x53, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32,
	0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x84, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x42, 0x0c, 0x8a, 0xf7, 0x02, 0x08, 0x0a, 0x04, 0x6f, 0x32, 0x65, 0x32, 0x20, 0x01, 0x48,
	0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x2f, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x85, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x32, 0x74, 0x62,
	0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x58,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x86, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x42, 0x0a, 0x8a, 0xf7,
	0x02, 0x06, 0x0a, 0x04, 0x6f, 0x32, 0x74, 0x61, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x32,
	0x54, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x32,
	0x5f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x87, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x04, 0x6f, 0x32, 0x74, 0x63,
	0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x54, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x09, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a, 0x02, 0x63, 0x66, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1c,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0x8a, 0xf7,
	0x02, 0x04, 0x0a, 0x02, 0x63, 0x70, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x41, 0x0a, 0x13,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a, 0x12, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x62, 0x0a,
	0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x67, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x13, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13,
	0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15,
	0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x6f,
	0x70, 0x70, 0x65, 0x64, 0x10, 0x01, 0x3a, 0x08, 0xca, 0xb8, 0x02, 0x04, 0x08, 0x01, 0x28, 0x01,
	0x42, 0x18, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x0b, 0xca,
	0xb5, 0x03, 0x07, 0x0a, 0x03, 0x64, 0x74, 0x31, 0x20, 0x00, 0x42, 0x18, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x32, 0x12, 0x0b, 0xca, 0xb5, 0x03, 0x07, 0x0a, 0x03, 0x64,
	0x74, 0x32, 0x20, 0x01, 0x22, 0x94, 0x02, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x48, 0x69,
	0x64, 0x65, 0x31, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x37, 0x0a, 0x0c,
	0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02,
	0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x48,
	0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x37,
	0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x20, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x42, 0x0c, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x22, 0xa4, 0x02, 0x0a, 0x0a,
	0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x48, 0x69, 0x64, 0x65, 0x32, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x48, 0x00, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x37, 0x0a, 0x0c,
	0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02,
	0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x48,
	0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x3a, 0x06,
	0xca, 0xb8, 0x02, 0x02, 0x20, 0x01, 0x42, 0x14, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x31, 0x12, 0x06, 0xca, 0xb5, 0x03, 0x02, 0x20, 0x01, 0x42, 0x14, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x06, 0xca, 0xb5, 0x03, 0x02,
	0x20, 0x00, 0x22, 0xa4, 0x02, 0x0a, 0x0a, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x48, 0x69, 0x64, 0x65,
	0x33, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f,
	0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x6e, 0x65, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x48, 0x01, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x37, 0x0a, 0x0c,
	0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x20, 0x00, 0x42, 0x14, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x12, 0x06, 0xca, 0xb5, 0x03,
	0x02, 0x20, 0x01, 0x42, 0x14, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x32, 0x12, 0x06, 0xca, 0xb5, 0x03, 0x02, 0x20, 0x00, 0x22, 0x94, 0x02, 0x0a, 0x0a, 0x4f, 0x6e,
	0x65, 0x6f, 0x66, 0x48, 0x69, 0x64, 0x65, 0x34, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f,
	0x6e, 0x65, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x6f,
	0x6e, 0x65, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e,
	0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x48, 0x01, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x3a, 0x06, 0xca, 0xb8,
	0x02, 0x02, 0x20, 0x00, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32,
	0x22, 0xa5, 0x02, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x31, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xf7, 0x02, 0x00, 0x52, 0x08, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xf7, 0x02, 0x00,
	0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e,
	0x65, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10,
	0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x31, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x31, 0x0a,
	0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x34, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x8a, 0xf7, 0x02, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65,
	0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x33,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x28, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x42, 0x0c, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x33, 0x22, 0x87, 0x06, 0x0a, 0x0f, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x12, 0x21, 0x0a, 0x09,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0x8a, 0xf7, 0x02, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12,
	0x21, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0x8a, 0xf7, 0x02, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x18, 0x00, 0x52, 0x08, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02,
	0x18, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12, 0x31, 0x0a, 0x0a,
	0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x31, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x31, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x32, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x34, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x8a, 0xf7, 0x02, 0x0d, 0x0a, 0x0b, 0x6f,
	0x6e, 0x65, 0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x6e,
	0x65, 0x33, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x34,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x42, 0x11, 0x8a,
	0xf7, 0x02, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x34, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x48, 0x03, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x37,
	0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x35, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x35,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x48, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x35,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x36, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x11, 0x42, 0x13, 0x8a, 0xf7,
	0x02, 0x0f, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x00, 0x48, 0x05, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x36, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x34, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x12, 0x42, 0x11, 0x8a, 0xf7, 0x02, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x05, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x36, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x37, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a,
	0x0a, 0x6f, 0x6e, 0x65, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0x00, 0x48, 0x06, 0x52,
	0x09, 0x6f, 0x6e, 0x65, 0x37, 0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e,
	0x65, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10,
	0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32,
	0x48, 0x06, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x37, 0x42, 0x6f, 0x6f, 0x6c, 0x32, 0x3a, 0x06, 0xca,
	0xb8, 0x02, 0x02, 0x28, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x33, 0x42,
	0x14, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x34, 0x12, 0x06, 0xca,
	0xb5, 0x03, 0x02, 0x18, 0x00, 0x42, 0x14, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x35, 0x12, 0x06, 0xca, 0xb5, 0x03, 0x02, 0x18, 0x00, 0x42, 0x0c, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x36, 0x42, 0x17, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x37, 0x12, 0x09, 0xca, 0xb5, 0x03, 0x05, 0x0a, 0x03, 0x64,
	0x74, 0x37, 0x22, 0x98, 0x08, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x33, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x18,
	0x01, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x21, 0x0a, 0x09, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0x8a, 0xf7, 0x02, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x21,
	0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0x8a, 0xf7, 0x02, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x33, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x18, 0x01, 0x52, 0x08, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xf7, 0x02, 0x00, 0x52,
	0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e, 0x65,
	0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x8a,
	0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48,
	0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x31, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x31, 0x0a, 0x0a,
	0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x34, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x8a, 0xf7, 0x02, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x33,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x02, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x33, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x34, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x28, 0x20, 0x01, 0x28, 0x04, 0x42, 0x11, 0x8a, 0xf7, 0x02, 0x0d,
	0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x34, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x03, 0x52,
	0x0a, 0x6f, 0x6e, 0x65, 0x34, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x39, 0x0a, 0x0c, 0x6f,
	0x6e, 0x65, 0x35, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x8a, 0xf7, 0x02, 0x10, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x35, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x48, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x35, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x35, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7,
	0x02, 0x0e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x35, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x48, 0x04, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x35, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12,
	0x36, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x11, 0x42, 0x13, 0x8a, 0xf7, 0x02, 0x0f, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x48, 0x05, 0x52, 0x0a, 0x6f, 0x6e, 0x65,
	0x36, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x12, 0x42, 0x11, 0x8a, 0xf7,
	0x02, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x48,
	0x05, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x36, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a,
	0x0a, 0x6f, 0x6e, 0x65, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x37, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x31, 0x18, 0x01, 0x48, 0x06, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x37, 0x42, 0x6f, 0x6f,
	0x6c, 0x31, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32,
	0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e,
	0x65, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x48, 0x06, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x37,
	0x42, 0x6f, 0x6f, 0x6c, 0x32, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x38, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x31, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a,
	0x0a, 0x6f, 0x6e, 0x65, 0x38, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0x00, 0x48, 0x07, 0x52,
	0x09, 0x6f, 0x6e, 0x65, 0x38, 0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e,
	0x65, 0x38, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10,
	0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x38, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32,
	0x48, 0x07, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x38, 0x42, 0x6f, 0x6f, 0x6c, 0x32, 0x42, 0x19, 0x0a,
	0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x12, 0x0b, 0xca, 0xb5, 0x03,
	0x07, 0x0a, 0x03, 0x64, 0x74, 0x31, 0x18, 0x01, 0x42, 0x19, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x0b, 0xca, 0xb5, 0x03, 0x07, 0x0a, 0x03, 0x64, 0x74,
	0x32, 0x18, 0x01, 0x42, 0x19, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x33, 0x12, 0x0b, 0xca, 0xb5, 0x03, 0x07, 0x0a, 0x03, 0x64, 0x74, 0x33, 0x18, 0x01, 0x42, 0x19,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x34, 0x12, 0x0b, 0xca, 0xb5,
	0x03, 0x07, 0x0a, 0x03, 0x64, 0x74, 0x34, 0x18, 0x00, 0x42, 0x17, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x35, 0x12, 0x09, 0xca, 0xb5, 0x03, 0x05, 0x0a, 0x03, 0x64,
	0x74, 0x35, 0x42, 0x17, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x36,
	0x12, 0x09, 0xca, 0xb5, 0x03, 0x05, 0x0a, 0x03, 0x64, 0x74, 0x36, 0x42, 0x17, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x37, 0x12, 0x09, 0xca, 0xb5, 0x03, 0x05, 0x0a,
	0x03, 0x64, 0x74, 0x37, 0x42, 0x17, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x38, 0x12, 0x09, 0xca, 0xb5, 0x03, 0x05, 0x0a, 0x03, 0x64, 0x74, 0x38, 0x22, 0xfc, 0x05,
	0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x34, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xf7, 0x02, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xf7, 0x02, 0x00, 0x52, 0x08, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02,
	0x18, 0x01, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x23, 0x0a, 0x09,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0x8a, 0xf7, 0x02, 0x02, 0x18, 0x01, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x34, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65,
	0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x31, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a,
	0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x6e,
	0x65, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x34, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x33, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0x8a, 0xf7,
	0x02, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x33, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48,
	0x02, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x33, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x34, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x11, 0x8a, 0xf7, 0x02, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x34, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x03, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x34, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x35, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xf7, 0x02, 0x0e, 0x0a,
	0x0c, 0x6f, 0x6e, 0x65, 0x35, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x48, 0x04, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x35, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x36, 0x0a, 0x0b,
	0x6f, 0x6e, 0x65, 0x36, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x11, 0x42, 0x13, 0x8a, 0xf7, 0x02, 0x0f, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x48, 0x05, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x36, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x36, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x12, 0x42, 0x11, 0x8a, 0xf7, 0x02, 0x0d, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x36, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x05, 0x52, 0x0a,
	0x6f, 0x6e, 0x65, 0x36, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x6e,
	0x65, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x42, 0x12,
	0x8a, 0xf7, 0x02, 0x0e, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x31,
	0x18, 0x01, 0x48, 0x06, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x37, 0x42, 0x6f, 0x6f, 0x6c, 0x31, 0x12,
	0x31, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x37, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x37, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x48, 0x06, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x37, 0x42, 0x6f, 0x6f,
	0x6c, 0x32, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x28, 0x00, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x33, 0x42, 0x14, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x34, 0x12, 0x06, 0xca, 0xb5, 0x03, 0x02, 0x18, 0x01, 0x42, 0x14, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x35, 0x12, 0x06, 0xca, 0xb5, 0x03, 0x02, 0x18, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x36, 0x42, 0x0c,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x37, 0x22, 0xde, 0x01, 0x0a,
	0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x31, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0x8a, 0xf7, 0x02, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x12, 0x21, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x04, 0x8a, 0xf7, 0x02, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c, 0x0a, 0x0a, 0x6f,
	0x6e, 0x65, 0x31, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65,
	0x31, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x42, 0x10, 0x8a, 0xf7, 0x02, 0x0c,
	0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x48, 0x01, 0x52, 0x09,
	0x6f, 0x6e, 0x65, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x10,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x42,
	0x0c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x22, 0x84, 0x07,
	0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x32, 0x12, 0x2a,
	0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x31, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x6e, 0x73, 0x31, 0x52, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x31, 0x12, 0x2e, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0b, 0x8a, 0xf7, 0x02, 0x07, 0x0a, 0x03, 0x6e, 0x73, 0x32, 0x10, 0x01, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x32, 0x12, 0x2a, 0x0a, 0x0b, 0x4e, 0x61,
	0x6d, 0x65, 0x5f, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x6e, 0x73, 0x33, 0x52, 0x0a, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x79, 0x6c, 0x65, 0x33, 0x12, 0x29, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05,
	0x0a, 0x03, 0x6e, 0x73, 0x34, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x34, 0x12, 0x27, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x35, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0x8a, 0xf7, 0x02, 0x03, 0x0a, 0x01, 0x2d, 0x52, 0x0a,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x35, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xf7,
	0x02, 0x04, 0x0a, 0x02, 0x69, 0x31, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x31, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x32, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a, 0x02, 0x69, 0x32, 0x48, 0x01,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x32, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xf7,
	0x02, 0x04, 0x0a, 0x02, 0x69, 0x33, 0x48, 0x02, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x33, 0x12, 0x26, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x34, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a, 0x02, 0x69, 0x34, 0x48, 0x03,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x34, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x35, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xf7,
	0x02, 0x06, 0x0a, 0x02, 0x69, 0x35, 0x10, 0x01, 0x48, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x35, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x35, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a, 0x02, 0x66, 0x35, 0x48, 0x04,
	0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x35, 0x12, 0x25, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x36, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0x8a, 0xf7, 0x02, 0x03,
	0x0a, 0x01, 0x2d, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x12,
	0x22, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a, 0x02, 0x66, 0x36, 0x48, 0x05, 0x52, 0x06, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x36, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x37, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xf7, 0x02, 0x06, 0x0a, 0x02, 0x69, 0x37, 0x10,
	0x01, 0x48, 0x06, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x37, 0x12, 0x22, 0x0a,
	0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x37, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a,
	0xf7, 0x02, 0x04, 0x0a, 0x02, 0x66, 0x37, 0x48, 0x06, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x37, 0x12, 0x25, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x38, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0x8a, 0xf7, 0x02, 0x03, 0x0a, 0x01, 0x2d, 0x48, 0x07, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x38, 0x12, 0x22, 0x0a, 0x06, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x38, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0x8a, 0xf7, 0x02, 0x04, 0x0a, 0x02,
	0x66, 0x38, 0x48, 0x07, 0x52, 0x06, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x38, 0x42, 0x19, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x12, 0x0b, 0xca, 0xb5, 0x03, 0x07,
	0x0a, 0x03, 0x64, 0x74, 0x31, 0x10, 0x01, 0x42, 0x15, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x07, 0xca, 0xb5, 0x03, 0x03, 0x0a, 0x01, 0x2d, 0x42, 0x17,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x33, 0x12, 0x09, 0xca, 0xb5,
	0x03, 0x05, 0x0a, 0x03, 0x64, 0x74, 0x33, 0x42, 0x17, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x34, 0x12, 0x09, 0xca, 0xb5, 0x03, 0x05, 0x0a, 0x03, 0x64, 0x74, 0x34,
	0x42, 0x17, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x35, 0x12, 0x09,
	0xca, 0xb5, 0x03, 0x05, 0x0a, 0x03, 0x64, 0x74, 0x35, 0x42, 0x17, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x36, 0x12, 0x09, 0xca, 0xb5, 0x03, 0x05, 0x0a, 0x03, 0x64,
	0x74, 0x36, 0x42, 0x17, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x37,
	0x12, 0x09, 0xca, 0xb5, 0x03, 0x05, 0x0a, 0x03, 0x64, 0x74, 0x37, 0x42, 0x17, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x38, 0x12, 0x09, 0xca, 0xb5, 0x03, 0x05, 0x0a,
	0x03, 0x64, 0x74, 0x38, 0x22, 0x9a, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x2a, 0x0a,
	0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x6e, 0x73, 0x31, 0x52, 0x0a, 0x6e,
	0x61, 0x6d, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x31, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xf7,
	0x02, 0x05, 0x0a, 0x03, 0x74, 0x73, 0x31, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x74, 0x73,
	0x32, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x22, 0x0a,
	0x06, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x8a,
	0xf7, 0x02, 0x05, 0x0a, 0x03, 0x74, 0x69, 0x31, 0x48, 0x01, 0x52, 0x05, 0x74, 0x49, 0x6e, 0x74,
	0x31, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x74, 0x69, 0x32, 0x48, 0x01, 0x52, 0x05,
	0x74, 0x49, 0x6e, 0x74, 0x32, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x30, 0x01, 0x42, 0x18, 0x0a,
	0x06, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x12, 0x0e, 0xca, 0xb5, 0x03, 0x0a, 0x0a, 0x06, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x20, 0x00, 0x42, 0x18, 0x0a, 0x06, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x12, 0x0e, 0xca, 0xb5, 0x03, 0x0a, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x20,
	0x01, 0x22, 0x97, 0x02, 0x0a, 0x11, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x2a, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x8a, 0xf7,
	0x02, 0x05, 0x0a, 0x03, 0x6e, 0x73, 0x31, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x31, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x74, 0x73,
	0x31, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x28, 0x0a,
	0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x74, 0x73, 0x32, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x22, 0x0a, 0x06, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x8a, 0xf7, 0x02, 0x05, 0x0a, 0x03, 0x74,
	0x69, 0x31, 0x48, 0x01, 0x52, 0x05, 0x74, 0x49, 0x6e, 0x74, 0x31, 0x12, 0x22, 0x0a, 0x06, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0x8a, 0xf7, 0x02,
	0x05, 0x0a, 0x03, 0x74, 0x69, 0x32, 0x48, 0x01, 0x52, 0x05, 0x74, 0x49, 0x6e, 0x74, 0x32, 0x3a,
	0x06, 0xca, 0xb8, 0x02, 0x02, 0x30, 0x00, 0x42, 0x18, 0x0a, 0x06, 0x4f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x12, 0x0e, 0xca, 0xb5, 0x03, 0x0a, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x20,
	0x00, 0x42, 0x18, 0x0a, 0x06, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x12, 0x0e, 0xca, 0xb5, 0x03,
	0x0a, 0x0a, 0x06, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x20, 0x01, 0x22, 0xa7, 0x07, 0x0a, 0x0e,
	0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x3f,
	0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x31, 0x52, 0x08, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12,
	0x3f, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x52, 0x08, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x12, 0x3f, 0x0a, 0x09, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x52, 0x08, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x31, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x52, 0x08, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x52, 0x08, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x33, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x1a, 0x5f, 0x0a, 0x0d, 0x4d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0d, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0d, 0x4d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x07, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10,
	0x01, 0x1a, 0x06, 0x8a, 0xf4, 0x03, 0x02, 0x08, 0x01, 0x22, 0x2a, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x06, 0x8a,
	0xf4, 0x03, 0x02, 0x08, 0x00, 0x22, 0xa7, 0x07, 0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x52,
	0x08, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73,
	0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x52, 0x08, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x31, 0x52, 0x08, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x3f, 0x0a, 0x09, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x52, 0x08, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0x3f, 0x0a, 0x09,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x31, 0x52, 0x08, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x12, 0x45, 0x0a,
	0x09, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x2e, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x31, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x32, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0x45, 0x0a, 0x09, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x33, 0x1a, 0x5f, 0x0a, 0x0d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x0d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31,
	0x12, 0x0b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x1a, 0x06, 0x8a, 0xf4, 0x03,
	0x02, 0x08, 0x01, 0x22, 0x22, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0x0b,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x18, 0x01, 0x22,
	0x9f, 0x07, 0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x33, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x52, 0x08, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x31, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x52, 0x08, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x31, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x52, 0x08, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x52, 0x08, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0x3f, 0x0a, 0x09, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x33, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x52, 0x08, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x31, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x45,
	0x0a, 0x09, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0x45, 0x0a, 0x09, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x33, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x33, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x1a, 0x5f, 0x0a, 0x0d,
	0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a,
	0x0d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f,
	0x0a, 0x0d, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x24, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x01, 0x22, 0x22, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32,
	0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x18,
	0x00, 0x22, 0xb9, 0x07, 0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x34, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02,
	0x20, 0x01, 0x52, 0x08, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x46, 0x0a, 0x09,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x31, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02,
	0x20, 0x01, 0x52, 0x08, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x46, 0x0a, 0x09,
	0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x00, 0x52, 0x08, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x32, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x33, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02,
	0x20, 0x01, 0x52, 0x08, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x12, 0x4d, 0x0a, 0x09,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x2e, 0x4d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20,
	0x01, 0x52, 0x08, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x12, 0x4d, 0x0a, 0x09, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x00,
	0x52, 0x08, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x12, 0x4d, 0x0a, 0x09, 0x6d, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55,
	0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x01, 0x52,
	0x08, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33, 0x1a, 0x5e, 0x0a, 0x0d, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x0d, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x0d, 0x4d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x02, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x18, 0x00, 0x22, 0xf3, 0x02,
	0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35,
	0x12, 0x44, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x01, 0x52, 0x07, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x08, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x35, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x06, 0x8a, 0xf7, 0x02,
	0x02, 0x20, 0x01, 0x52, 0x07, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x08,
	0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x55, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x2e, 0x4d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x01, 0x52,
	0x07, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x5d, 0x0a, 0x0c, 0x4d, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x55, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x35, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x10, 0x02, 0x22, 0xee, 0x05, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x33, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x32, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x33, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x31, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x12, 0x49,
	0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x33, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x2e,
	0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09,
	0x6d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x61, 0x70,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x34, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x34, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c,
	0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0xca, 0xb8,
	0x02, 0x02, 0x28, 0x01, 0x22, 0xee, 0x05, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x33,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x32, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x33, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x61, 0x70,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x31, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x12,
	0x49, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x33, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32,
	0x2e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x12, 0x49, 0x0a, 0x0a, 0x6d, 0x61,
	0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x34, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x34, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3c, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0xca,
	0xb8, 0x02, 0x02, 0x28, 0x00, 0x22, 0xf6, 0x10, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x32, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x33, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18,
	0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x33, 0x18, 0x21, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x31, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x0d, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x18, 0x2b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x33, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x31, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x32, 0x18, 0x34, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x32, 0x12, 0x3e, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x33, 0x18, 0x35, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x33, 0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x18, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x71, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x53, 0x0a, 0x0c, 0x6d, 0x61, 0x70,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x53,
	0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x7a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0x53, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x33, 0x18, 0x7b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x83, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x32, 0x18, 0x84, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x75, 0x6d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x75,
	0x6d, 0x32, 0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x33, 0x18,
	0x85, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x33,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x1a,
	0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a,
	0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x10,
	0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60,
	0x0a, 0x10, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x60, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a,
	0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0d, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x06, 0xca, 0xb8, 0x02, 0x02, 0x28, 0x01, 0x22, 0xf6,
	0x10, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x33, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x23, 0x0a, 0x0d,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x21, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x33, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x0d, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x2a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x32, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x33, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x0d, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x12, 0x3e, 0x0a, 0x0b,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x33, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x3e, 0x0a, 0x0b,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x34, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x3e, 0x0a, 0x0b,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x33, 0x18, 0x35, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x12, 0x50, 0x0a, 0x0b,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x6f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x50,
	0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x70, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32,
	0x12, 0x50, 0x0a, 0x0b, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18,
	0x71, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x33, 0x12, 0x53, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x18, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x53, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x7a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x2e, 0x4d,
	0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0b, 0x6d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x53, 0x0a, 0x0c,
	0x6d, 0x61, 0x70, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x18, 0x7b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x33, 0x12, 0x4b, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x83,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x4b,
	0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x84, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x32, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x4b, 0x0a, 0x09, 0x6d,
	0x61, 0x70, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x33, 0x18, 0x85, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x32,
	0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x10, 0x4d, 0x61, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x10, 0x4d, 0x61, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0d, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x45, 0x6e,
	0x75, 0x6d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a,
	0x06, 0xca, 0xb8, 0x02, 0x02, 0x28, 0x00, 0x22, 0x80, 0x31, 0x0a, 0x0d, 0x55, 0x6e, 0x6d, 0x61,
	0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x17, 0x0a,
	0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07,
	0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x10, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x37, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x3f,
	0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d,
	0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42,
	0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x01, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12,
	0x17, 0x0a, 0x07, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x5f, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x08,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x65, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x67, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x68, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x69, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x6a,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x6c, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6d, 0x20, 0x03, 0x28, 0x0f, 0x52,
	0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x6e, 0x20, 0x03, 0x28, 0x10, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0c, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x70, 0x20, 0x03, 0x28,
	0x06, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x71, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x72,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x73, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x31, 0x18, 0x74, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x12, 0x47, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x32, 0x18, 0x75, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x01,
	0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x46, 0x0a, 0x0d,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x76, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x77, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a,
	0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xca, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xcb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x55, 0x0a, 0x0f, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xcc, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x55, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0xcd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xce, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x58, 0x0a, 0x10,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0xd0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xd1, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x5e, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x5e, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xd3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10,
	0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x5b, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xd4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x5b, 0x0a,
	0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0xd5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x52, 0x0a, 0x0e, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xd6, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x58,
	0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0xd7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xd8, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x55, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x31, 0x18, 0xd9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6a, 0x73,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x5d, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0xda, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e,
	0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06,
	0x8a, 0xf7, 0x02, 0x02, 0x20, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x5b, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0xdb, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xdc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x55, 0x0a, 0x0f,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0xad, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xae, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61,
	0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x58, 0x0a,
	0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0xb0, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb1, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb2, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6d, 0x61, 0x70,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5b, 0x0a, 0x11, 0x6d,
	0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0xb3, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5b, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb4, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5e, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb5, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x5e, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb6, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61,
	0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x58, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb7, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e,
	0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x1a,
	0x09, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a,
	0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a,
	0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61,
	0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x65, 0x0a, 0x14, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x63, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d,
	0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x0b, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x01, 0x22, 0xf3, 0x06, 0x0a, 0x15, 0x55,
	0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x6f, 0x74,
	0x48, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x19, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x19, 0x0a, 0x07,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x74, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b,
	0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0a, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0f, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0a,
	0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x10,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1d, 0x0a,
	0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x09,
	0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x19, 0x0a, 0x07, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x74, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x41, 0x0a, 0x07,
	0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72,
	0x73, 0x68, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x6f, 0x74, 0x48, 0x69, 0x64, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12,
	0x49, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e,
	0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x6f, 0x74, 0x48,
	0x69, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x01,
	0x48, 0x00, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x19, 0x0a, 0x07, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x6f, 0x74, 0x48, 0x69, 0x64, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x45, 0x0a, 0x08, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x6f, 0x74,
	0x48, 0x69, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x53, 0x65, 0x61, 0x74, 0x1a, 0x09, 0x0a,
	0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x20, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x01, 0x42, 0x16, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0xca, 0xb5, 0x03, 0x0a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x00, 0x20, 0x00,
	0x22, 0xe4, 0x06, 0x0a, 0x12, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x4f, 0x6e,
	0x65, 0x6f, 0x66, 0x48, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x19, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x74, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f,
	0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0f, 0x48, 0x00, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x1f, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x12, 0x1d, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x07, 0x48, 0x00, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x1d, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x06, 0x48, 0x00, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x19,
	0x0a, 0x07, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x06, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x07, 0x74,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x3e, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e,
	0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x48, 0x69, 0x64, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12,
	0x46, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e,
	0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x48, 0x69, 0x64, 0x65,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x19, 0x0a, 0x07, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x09, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x6f,
	0x66, 0x48, 0x69, 0x64, 0x65, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f,
	0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68,
	0x61, 0x6c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x48, 0x69, 0x64, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x1a, 0x09, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x1a,
	0x2c, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x20, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x01, 0x42,
	0x16, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0xca, 0xb5, 0x03, 0x0a, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x00, 0x20, 0x01, 0x22, 0xf2, 0x08, 0x0a, 0x0e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x74,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x06, 0x74, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x48, 0x05, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x48, 0x06, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x07, 0x52, 0x09, 0x74, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x10, 0x48, 0x08,
	0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x07, 0x48, 0x09, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x06, 0x48, 0x0a, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x0b, 0x52, 0x06, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x0c, 0x52, 0x07, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x06, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0d, 0x52, 0x05, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x07,
	0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x0e,
	0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x07, 0x74,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x06, 0x8a,
	0xf7, 0x02, 0x02, 0x20, 0x01, 0x48, 0x0f, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x10, 0x52, 0x06, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x09, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x31, 0x2e,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x48, 0x11, 0x52, 0x08, 0x74, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x12, 0x52, 0x07, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x1a, 0x09, 0x0a, 0x07, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x1a, 0x46, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x20, 0x0a, 0x04,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x01, 0x3a, 0x06,
	0xca, 0xb8, 0x02, 0x02, 0x28, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xea, 0x08, 0x0a,
	0x0e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x12,
	0x1e, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x01, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02,
	0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52,
	0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52,
	0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x48, 0x05, 0x52,
	0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x12, 0x48, 0x06, 0x52,
	0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0f, 0x48,
	0x07, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x10, 0x48, 0x08, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x48, 0x09, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x48, 0x0a, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0b, 0x52, 0x06, 0x74, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x07, 0x74, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x05, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x48, 0x0e, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x45, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x42, 0x06, 0x8a, 0xf7, 0x02, 0x02, 0x20, 0x01, 0x48, 0x0f, 0x52, 0x06, 0x74, 0x45,
	0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x10, 0x52, 0x06, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6a, 0x73, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x32, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x48, 0x11, 0x52, 0x08,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x12, 0x52, 0x07, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x1a, 0x09,
	0x0a, 0x07, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x46, 0x0a, 0x06, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x70, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x20, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x10, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2a, 0x50, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x61, 0x6e, 0x75, 0x61,
	0x72, 0x79, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x72, 0x63, 0x68, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x70, 0x72, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x79, 0x10,
	0x04, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x75, 0x6e, 0x65, 0x10, 0x05, 0x42, 0x16, 0x5a, 0x10, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6f, 0x6a, 0x73, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x8a,
	0xfa, 0x01, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_xgo_tests_gojsontest_gojson_test_proto_rawDescOnce sync.Once
	file_xgo_tests_gojsontest_gojson_test_proto_rawDescData = file_xgo_tests_gojsontest_gojson_test_proto_rawDesc
)

func file_xgo_tests_gojsontest_gojson_test_proto_rawDescGZIP() []byte {
	file_xgo_tests_gojsontest_gojson_test_proto_rawDescOnce.Do(func() {
		file_xgo_tests_gojsontest_gojson_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_xgo_tests_gojsontest_gojson_test_proto_rawDescData)
	})
	return file_xgo_tests_gojsontest_gojson_test_proto_rawDescData
}

var file_xgo_tests_gojsontest_gojson_test_proto_enumTypes = make([]protoimpl.EnumInfo, 17)
var file_xgo_tests_gojsontest_gojson_test_proto_msgTypes = make([]protoimpl.MessageInfo, 219)
var file_xgo_tests_gojsontest_gojson_test_proto_goTypes = []interface{}{
	(StandEnum1)(0),                         // 0: gojsontest.StandEnum1
	(Model1_EmbedEnum1)(0),                  // 1: gojsontest.Model1.EmbedEnum1
	(Model2_EmbedEnum1)(0),                  // 2: gojsontest.Model2.EmbedEnum1
	(FieldCustomName_Enum)(0),               // 3: gojsontest.FieldCustomName.Enum
	(EnumUseString1_Status1)(0),             // 4: gojsontest.EnumUseString1.Status1
	(EnumUseString1_Status2)(0),             // 5: gojsontest.EnumUseString1.Status2
	(EnumUseString2_Status1)(0),             // 6: gojsontest.EnumUseString2.Status1
	(EnumUseString2_Status2)(0),             // 7: gojsontest.EnumUseString2.Status2
	(EnumUseString3_Status1)(0),             // 8: gojsontest.EnumUseString3.Status1
	(EnumUseString3_Status2)(0),             // 9: gojsontest.EnumUseString3.Status2
	(EnumUseString4_Status)(0),              // 10: gojsontest.EnumUseString4.Status
	(EnumUseString5_Status)(0),              // 11: gojsontest.EnumUseString5.Status
	(UnmarshalData_Enum)(0),                 // 12: gojsontest.UnmarshalData.Enum
	(UnmarshalOneofNotHide_Enum)(0),         // 13: gojsontest.UnmarshalOneofNotHide.Enum
	(UnmarshalOneofHide_Enum)(0),            // 14: gojsontest.UnmarshalOneofHide.Enum
	(OptionalModel1_Enum)(0),                // 15: gojsontest.OptionalModel1.Enum
	(OptionalModel2_Enum)(0),                // 16: gojsontest.OptionalModel2.Enum
	(*EmptyMessage)(nil),                    // 17: gojsontest.EmptyMessage
	(*StandMessage1)(nil),                   // 18: gojsontest.StandMessage1
	(*Model1)(nil),                          // 19: gojsontest.Model1
	(*Model2)(nil),                          // 20: gojsontest.Model2
	(*Model3)(nil),                          // 21: gojsontest.Model3
	(*NameStyleTextName)(nil),               // 22: gojsontest.NameStyleTextName
	(*NameStyleGoName)(nil),                 // 23: gojsontest.NameStyleGoName
	(*NameStyleJSONName)(nil),               // 24: gojsontest.NameStyleJSONName
	(*FieldCustomName)(nil),                 // 25: gojsontest.FieldCustomName
	(*OneofHide1)(nil),                      // 26: gojsontest.OneofHide1
	(*OneofHide2)(nil),                      // 27: gojsontest.OneofHide2
	(*OneofHide3)(nil),                      // 28: gojsontest.OneofHide3
	(*OneofHide4)(nil),                      // 29: gojsontest.OneofHide4
	(*FieldOmitempty1)(nil),                 // 30: gojsontest.FieldOmitempty1
	(*FieldOmitempty2)(nil),                 // 31: gojsontest.FieldOmitempty2
	(*FieldOmitempty3)(nil),                 // 32: gojsontest.FieldOmitempty3
	(*FieldOmitempty4)(nil),                 // 33: gojsontest.FieldOmitempty4
	(*FieldIgnore1)(nil),                    // 34: gojsontest.FieldIgnore1
	(*FieldIgnore2)(nil),                    // 35: gojsontest.FieldIgnore2
	(*FieldDisallowUnknown)(nil),            // 36: gojsontest.FieldDisallowUnknown
	(*FieldAllowUnknown)(nil),               // 37: gojsontest.FieldAllowUnknown
	(*EnumUseString1)(nil),                  // 38: gojsontest.EnumUseString1
	(*EnumUseString2)(nil),                  // 39: gojsontest.EnumUseString2
	(*EnumUseString3)(nil),                  // 40: gojsontest.EnumUseString3
	(*EnumUseString4)(nil),                  // 41: gojsontest.EnumUseString4
	(*EnumUseString5)(nil),                  // 42: gojsontest.EnumUseString5
	(*SerializeBytes1)(nil),                 // 43: gojsontest.SerializeBytes1
	(*SerializeBytes2)(nil),                 // 44: gojsontest.SerializeBytes2
	(*SerializeOmitempty1)(nil),             // 45: gojsontest.SerializeOmitempty1
	(*SerializeOmitempty2)(nil),             // 46: gojsontest.SerializeOmitempty2
	(*UnmarshalData)(nil),                   // 47: gojsontest.UnmarshalData
	(*UnmarshalOneofNotHide)(nil),           // 48: gojsontest.UnmarshalOneofNotHide
	(*UnmarshalOneofHide)(nil),              // 49: gojsontest.UnmarshalOneofHide
	(*OptionalModel1)(nil),                  // 50: gojsontest.OptionalModel1
	(*OptionalModel2)(nil),                  // 51: gojsontest.OptionalModel2
	(*Model1_EmbedMessage1)(nil),            // 52: gojsontest.Model1.EmbedMessage1
	nil,                                     // 53: gojsontest.Model1.MapInt32DoubleEntry
	nil,                                     // 54: gojsontest.Model1.MapInt32FloatEntry
	nil,                                     // 55: gojsontest.Model1.MapInt32Int32Entry
	nil,                                     // 56: gojsontest.Model1.MapInt32Int64Entry
	nil,                                     // 57: gojsontest.Model1.MapInt32Uint32Entry
	nil,                                     // 58: gojsontest.Model1.MapInt32Uint64Entry
	nil,                                     // 59: gojsontest.Model1.MapInt32Sint32Entry
	nil,                                     // 60: gojsontest.Model1.MapInt32Sint64Entry
	nil,                                     // 61: gojsontest.Model1.MapInt32Fixed32Entry
	nil,                                     // 62: gojsontest.Model1.MapInt32Fixed64Entry
	nil,                                     // 63: gojsontest.Model1.MapInt32Sfixed32Entry
	nil,                                     // 64: gojsontest.Model1.MapInt32Sfixed64Entry
	nil,                                     // 65: gojsontest.Model1.MapInt32BoolEntry
	nil,                                     // 66: gojsontest.Model1.MapInt32StringEntry
	nil,                                     // 67: gojsontest.Model1.MapInt32BytesEntry
	nil,                                     // 68: gojsontest.Model1.MapInt32EmbedMessageEntry
	nil,                                     // 69: gojsontest.Model1.MapInt32StandMessageEntry
	nil,                                     // 70: gojsontest.Model1.MapInt32EmbedEnumEntry
	nil,                                     // 71: gojsontest.Model1.MapInt32StandEnumEntry
	nil,                                     // 72: gojsontest.Model1.MapInt64Int32Entry
	nil,                                     // 73: gojsontest.Model1.MapUint32Int32Entry
	nil,                                     // 74: gojsontest.Model1.MapUint64Int32Entry
	nil,                                     // 75: gojsontest.Model1.MapSint32Int32Entry
	nil,                                     // 76: gojsontest.Model1.MapSint64Int32Entry
	nil,                                     // 77: gojsontest.Model1.MapFixed32Int32Entry
	nil,                                     // 78: gojsontest.Model1.MapFixed64Int32Entry
	nil,                                     // 79: gojsontest.Model1.MapSfixed32Int32Entry
	nil,                                     // 80: gojsontest.Model1.MapSfixed64Int32Entry
	nil,                                     // 81: gojsontest.Model1.MapStringInt32Entry
	nil,                                     // 82: gojsontest.Model1.MapStringInt32NullEntry
	nil,                                     // 83: gojsontest.Model1.MapStringStringEntry
	nil,                                     // 84: gojsontest.Model1.MapStringEmbedMessageEntry
	nil,                                     // 85: gojsontest.Model1.MapStringStandMessageEntry
	nil,                                     // 86: gojsontest.Model1.MapStringExternalMessageEntry
	nil,                                     // 87: gojsontest.Model1.MapStringEmbedEnumEntry
	nil,                                     // 88: gojsontest.Model1.MapStringStandEnumEntry
	nil,                                     // 89: gojsontest.Model1.MapStringExternalEnumEntry
	(*Model2_EmbedMessage1)(nil),            // 90: gojsontest.Model2.EmbedMessage1
	nil,                                     // 91: gojsontest.Model2.MapInt32DoubleEntry
	nil,                                     // 92: gojsontest.Model2.MapInt32FloatEntry
	nil,                                     // 93: gojsontest.Model2.MapInt32Int32Entry
	nil,                                     // 94: gojsontest.Model2.MapInt32Int64Entry
	nil,                                     // 95: gojsontest.Model2.MapInt32Uint32Entry
	nil,                                     // 96: gojsontest.Model2.MapInt32Uint64Entry
	nil,                                     // 97: gojsontest.Model2.MapInt32Sint32Entry
	nil,                                     // 98: gojsontest.Model2.MapInt32Sint64Entry
	nil,                                     // 99: gojsontest.Model2.MapInt32Fixed32Entry
	nil,                                     // 100: gojsontest.Model2.MapInt32Fixed64Entry
	nil,                                     // 101: gojsontest.Model2.MapInt32Sfixed32Entry
	nil,                                     // 102: gojsontest.Model2.MapInt32Sfixed64Entry
	nil,                                     // 103: gojsontest.Model2.MapInt32BoolEntry
	nil,                                     // 104: gojsontest.Model2.MapInt32StringEntry
	nil,                                     // 105: gojsontest.Model2.MapInt32BytesEntry
	nil,                                     // 106: gojsontest.Model2.MapInt32EmbedMessageEntry
	nil,                                     // 107: gojsontest.Model2.MapInt32StandMessageEntry
	nil,                                     // 108: gojsontest.Model2.MapInt32EmbedEnumEntry
	nil,                                     // 109: gojsontest.Model2.MapInt32StandEnumEntry
	nil,                                     // 110: gojsontest.Model2.MapInt64Int32Entry
	nil,                                     // 111: gojsontest.Model2.MapUint32Int32Entry
	nil,                                     // 112: gojsontest.Model2.MapUint64Int32Entry
	nil,                                     // 113: gojsontest.Model2.MapSint32Int32Entry
	nil,                                     // 114: gojsontest.Model2.MapSint64Int32Entry
	nil,                                     // 115: gojsontest.Model2.MapFixed32Int32Entry
	nil,                                     // 116: gojsontest.Model2.MapFixed64Int32Entry
	nil,                                     // 117: gojsontest.Model2.MapSfixed32Int32Entry
	nil,                                     // 118: gojsontest.Model2.MapSfixed64Int32Entry
	nil,                                     // 119: gojsontest.Model2.MapStringInt32Entry
	nil,                                     // 120: gojsontest.Model2.MapStringStringEntry
	nil,                                     // 121: gojsontest.Model2.MapStringEmbedMessageEntry
	nil,                                     // 122: gojsontest.Model2.MapStringStandMessageEntry
	nil,                                     // 123: gojsontest.Model2.MapStringExternalMessageEntry
	nil,                                     // 124: gojsontest.Model2.MapStringEmbedEnumEntry
	nil,                                     // 125: gojsontest.Model2.MapStringStandEnumEntry
	nil,                                     // 126: gojsontest.Model2.MapStringExternalEnumEntry
	(*FieldCustomName_Aliases)(nil),         // 127: gojsontest.FieldCustomName.Aliases
	(*FieldCustomName_Config)(nil),          // 128: gojsontest.FieldCustomName.Config
	nil,                                     // 129: gojsontest.FieldCustomName.MapInt32DoubleEntry
	nil,                                     // 130: gojsontest.FieldCustomName.MapInt32FloatEntry
	nil,                                     // 131: gojsontest.FieldCustomName.MapInt32Int32Entry
	nil,                                     // 132: gojsontest.FieldCustomName.MapInt32Int64Entry
	nil,                                     // 133: gojsontest.FieldCustomName.MapInt32Uint32Entry
	nil,                                     // 134: gojsontest.FieldCustomName.MapInt32Uint64Entry
	nil,                                     // 135: gojsontest.FieldCustomName.MapInt32Sint32Entry
	nil,                                     // 136: gojsontest.FieldCustomName.MapInt32Sint64Entry
	nil,                                     // 137: gojsontest.FieldCustomName.MapInt32Sfixed32Entry
	nil,                                     // 138: gojsontest.FieldCustomName.MapInt32Sfixed64Entry
	nil,                                     // 139: gojsontest.FieldCustomName.MapInt32Fixed32Entry
	nil,                                     // 140: gojsontest.FieldCustomName.MapInt32Fixed64Entry
	nil,                                     // 141: gojsontest.FieldCustomName.MapInt32BoolEntry
	nil,                                     // 142: gojsontest.FieldCustomName.MapInt32StringEntry
	nil,                                     // 143: gojsontest.FieldCustomName.MapInt32BytesEntry
	nil,                                     // 144: gojsontest.FieldCustomName.MapInt32Enum1Entry
	nil,                                     // 145: gojsontest.FieldCustomName.MapInt32Enum2Entry
	nil,                                     // 146: gojsontest.FieldCustomName.MapInt32AliasesEntry
	nil,                                     // 147: gojsontest.FieldCustomName.MapInt32ConfigEntry
	nil,                                     // 148: gojsontest.FieldCustomName.MapInt64Int32Entry
	nil,                                     // 149: gojsontest.FieldCustomName.MapUint32Int32Entry
	nil,                                     // 150: gojsontest.FieldCustomName.MapUint64Int32Entry
	nil,                                     // 151: gojsontest.FieldCustomName.MapSint32Int32Entry
	nil,                                     // 152: gojsontest.FieldCustomName.MapSint64Int32Entry
	nil,                                     // 153: gojsontest.FieldCustomName.MapFixed32Int32Entry
	nil,                                     // 154: gojsontest.FieldCustomName.MapFixed64Int32Entry
	nil,                                     // 155: gojsontest.FieldCustomName.MapSfixed32Int32Entry
	nil,                                     // 156: gojsontest.FieldCustomName.MapSfixed64Int32Entry
	nil,                                     // 157: gojsontest.FieldCustomName.MapStringInt32Entry
	nil,                                     // 158: gojsontest.EnumUseString1.MStatus1Entry
	nil,                                     // 159: gojsontest.EnumUseString1.MStatus2Entry
	nil,                                     // 160: gojsontest.EnumUseString1.MStatus3Entry
	nil,                                     // 161: gojsontest.EnumUseString2.MStatus1Entry
	nil,                                     // 162: gojsontest.EnumUseString2.MStatus2Entry
	nil,                                     // 163: gojsontest.EnumUseString2.MStatus3Entry
	nil,                                     // 164: gojsontest.EnumUseString3.MStatus1Entry
	nil,                                     // 165: gojsontest.EnumUseString3.MStatus2Entry
	nil,                                     // 166: gojsontest.EnumUseString3.MStatus3Entry
	nil,                                     // 167: gojsontest.EnumUseString4.MStatus1Entry
	nil,                                     // 168: gojsontest.EnumUseString4.MStatus2Entry
	nil,                                     // 169: gojsontest.EnumUseString4.MStatus3Entry
	nil,                                     // 170: gojsontest.EnumUseString5.MStatusEntry
	nil,                                     // 171: gojsontest.SerializeBytes1.MapBytes1Entry
	nil,                                     // 172: gojsontest.SerializeBytes1.MapBytes2Entry
	nil,                                     // 173: gojsontest.SerializeBytes1.MapBytes3Entry
	nil,                                     // 174: gojsontest.SerializeBytes1.MapBytes4Entry
	nil,                                     // 175: gojsontest.SerializeBytes2.MapBytes1Entry
	nil,                                     // 176: gojsontest.SerializeBytes2.MapBytes2Entry
	nil,                                     // 177: gojsontest.SerializeBytes2.MapBytes3Entry
	nil,                                     // 178: gojsontest.SerializeBytes2.MapBytes4Entry
	nil,                                     // 179: gojsontest.SerializeOmitempty1.MapString1Entry
	nil,                                     // 180: gojsontest.SerializeOmitempty1.MapString2Entry
	nil,                                     // 181: gojsontest.SerializeOmitempty1.MapString3Entry
	nil,                                     // 182: gojsontest.SerializeOmitempty1.MapMessage1Entry
	nil,                                     // 183: gojsontest.SerializeOmitempty1.MapMessage2Entry
	nil,                                     // 184: gojsontest.SerializeOmitempty1.MapMessage3Entry
	nil,                                     // 185: gojsontest.SerializeOmitempty1.MapEnum1Entry
	nil,                                     // 186: gojsontest.SerializeOmitempty1.MapEnum2Entry
	nil,                                     // 187: gojsontest.SerializeOmitempty1.MapEnum3Entry
	nil,                                     // 188: gojsontest.SerializeOmitempty2.MapString1Entry
	nil,                                     // 189: gojsontest.SerializeOmitempty2.MapString2Entry
	nil,                                     // 190: gojsontest.SerializeOmitempty2.MapString3Entry
	nil,                                     // 191: gojsontest.SerializeOmitempty2.MapMessage1Entry
	nil,                                     // 192: gojsontest.SerializeOmitempty2.MapMessage2Entry
	nil,                                     // 193: gojsontest.SerializeOmitempty2.MapMessage3Entry
	nil,                                     // 194: gojsontest.SerializeOmitempty2.MapEnum1Entry
	nil,                                     // 195: gojsontest.SerializeOmitempty2.MapEnum2Entry
	nil,                                     // 196: gojsontest.SerializeOmitempty2.MapEnum3Entry
	(*UnmarshalData_Aliases)(nil),           // 197: gojsontest.UnmarshalData.Aliases
	(*UnmarshalData_Config)(nil),            // 198: gojsontest.UnmarshalData.Config
	nil,                                     // 199: gojsontest.UnmarshalData.MapInt32DoubleEntry
	nil,                                     // 200: gojsontest.UnmarshalData.MapInt32FloatEntry
	nil,                                     // 201: gojsontest.UnmarshalData.MapInt32Int32Entry
	nil,                                     // 202: gojsontest.UnmarshalData.MapInt32Int64Entry
	nil,                                     // 203: gojsontest.UnmarshalData.MapInt32Uint32Entry
	nil,                                     // 204: gojsontest.UnmarshalData.MapInt32Uint64Entry
	nil,                                     // 205: gojsontest.UnmarshalData.MapInt32Sint32Entry
	nil,                                     // 206: gojsontest.UnmarshalData.MapInt32Sint64Entry
	nil,                                     // 207: gojsontest.UnmarshalData.MapInt32Sfixed32Entry
	nil,                                     // 208: gojsontest.UnmarshalData.MapInt32Sfixed64Entry
	nil,                                     // 209: gojsontest.UnmarshalData.MapInt32Fixed32Entry
	nil,                                     // 210: gojsontest.UnmarshalData.MapInt32Fixed64Entry
	nil,                                     // 211: gojsontest.UnmarshalData.MapInt32BoolEntry
	nil,                                     // 212: gojsontest.UnmarshalData.MapInt32StringEntry
	nil,                                     // 213: gojsontest.UnmarshalData.MapInt32BytesEntry
	nil,                                     // 214: gojsontest.UnmarshalData.MapInt32Enum1Entry
	nil,                                     // 215: gojsontest.UnmarshalData.MapInt32Enum2Entry
	nil,                                     // 216: gojsontest.UnmarshalData.MapInt32AliasesEntry
	nil,                                     // 217: gojsontest.UnmarshalData.MapInt32ConfigEntry
	nil,                                     // 218: gojsontest.UnmarshalData.MapInt64Int32Entry
	nil,                                     // 219: gojsontest.UnmarshalData.MapUint32Int32Entry
	nil,                                     // 220: gojsontest.UnmarshalData.MapUint64Int32Entry
	nil,                                     // 221: gojsontest.UnmarshalData.MapSint32Int32Entry
	nil,                                     // 222: gojsontest.UnmarshalData.MapSint64Int32Entry
	nil,                                     // 223: gojsontest.UnmarshalData.MapFixed32Int32Entry
	nil,                                     // 224: gojsontest.UnmarshalData.MapFixed64Int32Entry
	nil,                                     // 225: gojsontest.UnmarshalData.MapSfixed32Int32Entry
	nil,                                     // 226: gojsontest.UnmarshalData.MapSfixed64Int32Entry
	nil,                                     // 227: gojsontest.UnmarshalData.MapStringInt32Entry
	(*UnmarshalOneofNotHide_Aliases)(nil),   // 228: gojsontest.UnmarshalOneofNotHide.Aliases
	(*UnmarshalOneofNotHide_Config)(nil),    // 229: gojsontest.UnmarshalOneofNotHide.Config
	(*UnmarshalOneofHide_Aliases)(nil),      // 230: gojsontest.UnmarshalOneofHide.Aliases
	(*UnmarshalOneofHide_Config)(nil),       // 231: gojsontest.UnmarshalOneofHide.Config
	(*OptionalModel1_Aliases)(nil),          // 232: gojsontest.OptionalModel1.Aliases
	(*OptionalModel1_Config)(nil),           // 233: gojsontest.OptionalModel1.Config
	(*OptionalModel2_Aliases)(nil),          // 234: gojsontest.OptionalModel2.Aliases
	(*OptionalModel2_Config)(nil),           // 235: gojsontest.OptionalModel2.Config
	(*gojsonexternal.ExternalMessage1)(nil), // 236: gojsonexternal.ExternalMessage1
	(gojsonexternal.ExternalEnum1)(0),       // 237: gojsonexternal.ExternalEnum1
}
var file_xgo_tests_gojsontest_gojson_test_proto_depIdxs = []int32{
	52,  // 0: gojsontest.Model1.oneof1_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 1: gojsontest.Model1.oneof1_stand_message:type_name -> gojsontest.StandMessage1
	236, // 2: gojsontest.Model1.oneof1_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 3: gojsontest.Model1.oneof1_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 4: gojsontest.Model1.oneof1_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 5: gojsontest.Model1.oneof1_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 6: gojsontest.Model1.oneof2_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 7: gojsontest.Model1.oneof2_stand_message:type_name -> gojsontest.StandMessage1
	236, // 8: gojsontest.Model1.oneof2_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 9: gojsontest.Model1.oneof2_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 10: gojsontest.Model1.oneof2_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 11: gojsontest.Model1.oneof2_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 12: gojsontest.Model1.oneof3_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 13: gojsontest.Model1.oneof3_stand_message:type_name -> gojsontest.StandMessage1
	236, // 14: gojsontest.Model1.oneof3_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 15: gojsontest.Model1.oneof3_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 16: gojsontest.Model1.oneof3_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 17: gojsontest.Model1.oneof3_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 18: gojsontest.Model1.oneof4_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 19: gojsontest.Model1.oneof4_stand_message:type_name -> gojsontest.StandMessage1
	236, // 20: gojsontest.Model1.oneof4_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 21: gojsontest.Model1.oneof4_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 22: gojsontest.Model1.oneof4_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 23: gojsontest.Model1.oneof4_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 24: gojsontest.Model1.oneof5_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 25: gojsontest.Model1.oneof5_stand_message:type_name -> gojsontest.StandMessage1
	236, // 26: gojsontest.Model1.oneof5_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 27: gojsontest.Model1.oneof5_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 28: gojsontest.Model1.oneof5_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 29: gojsontest.Model1.oneof5_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 30: gojsontest.Model1.oneof6_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 31: gojsontest.Model1.oneof6_stand_message:type_name -> gojsontest.StandMessage1
	236, // 32: gojsontest.Model1.oneof6_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 33: gojsontest.Model1.oneof6_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 34: gojsontest.Model1.oneof6_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 35: gojsontest.Model1.oneof6_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 36: gojsontest.Model1.oneof7_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 37: gojsontest.Model1.oneof7_stand_message:type_name -> gojsontest.StandMessage1
	236, // 38: gojsontest.Model1.oneof7_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 39: gojsontest.Model1.oneof7_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 40: gojsontest.Model1.oneof7_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 41: gojsontest.Model1.oneof7_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 42: gojsontest.Model1.oneof8_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 43: gojsontest.Model1.oneof8_stand_message:type_name -> gojsontest.StandMessage1
	236, // 44: gojsontest.Model1.oneof8_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 45: gojsontest.Model1.oneof8_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 46: gojsontest.Model1.oneof8_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 47: gojsontest.Model1.oneof8_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 48: gojsontest.Model1.oneof9_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 49: gojsontest.Model1.oneof9_stand_message:type_name -> gojsontest.StandMessage1
	236, // 50: gojsontest.Model1.oneof9_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 51: gojsontest.Model1.oneof9_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 52: gojsontest.Model1.oneof9_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 53: gojsontest.Model1.oneof9_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 54: gojsontest.Model1.oneof10_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 55: gojsontest.Model1.oneof10_stand_message:type_name -> gojsontest.StandMessage1
	236, // 56: gojsontest.Model1.oneof10_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 57: gojsontest.Model1.oneof10_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 58: gojsontest.Model1.oneof10_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 59: gojsontest.Model1.oneof10_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 60: gojsontest.Model1.oneof11_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 61: gojsontest.Model1.oneof11_stand_message:type_name -> gojsontest.StandMessage1
	236, // 62: gojsontest.Model1.oneof11_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 63: gojsontest.Model1.oneof11_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 64: gojsontest.Model1.oneof11_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 65: gojsontest.Model1.oneof11_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 66: gojsontest.Model1.oneof12_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 67: gojsontest.Model1.oneof12_stand_message:type_name -> gojsontest.StandMessage1
	236, // 68: gojsontest.Model1.oneof12_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 69: gojsontest.Model1.oneof12_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 70: gojsontest.Model1.oneof12_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 71: gojsontest.Model1.oneof12_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 72: gojsontest.Model1.oneof13_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 73: gojsontest.Model1.oneof13_stand_message:type_name -> gojsontest.StandMessage1
	236, // 74: gojsontest.Model1.oneof13_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 75: gojsontest.Model1.oneof13_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 76: gojsontest.Model1.oneof13_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 77: gojsontest.Model1.oneof13_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 78: gojsontest.Model1.oneof14_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 79: gojsontest.Model1.oneof14_stand_message:type_name -> gojsontest.StandMessage1
	236, // 80: gojsontest.Model1.oneof14_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 81: gojsontest.Model1.oneof14_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 82: gojsontest.Model1.oneof14_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 83: gojsontest.Model1.oneof14_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 84: gojsontest.Model1.oneof15_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 85: gojsontest.Model1.oneof15_stand_message:type_name -> gojsontest.StandMessage1
	236, // 86: gojsontest.Model1.oneof15_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 87: gojsontest.Model1.oneof15_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 88: gojsontest.Model1.oneof15_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 89: gojsontest.Model1.oneof15_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 90: gojsontest.Model1.oneof16_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 91: gojsontest.Model1.oneof16_stand_message:type_name -> gojsontest.StandMessage1
	236, // 92: gojsontest.Model1.oneof16_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 93: gojsontest.Model1.oneof16_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 94: gojsontest.Model1.oneof16_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 95: gojsontest.Model1.oneof16_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 96: gojsontest.Model1.oneof17_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 97: gojsontest.Model1.oneof17_stand_message:type_name -> gojsontest.StandMessage1
	236, // 98: gojsontest.Model1.oneof17_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 99: gojsontest.Model1.oneof17_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 100: gojsontest.Model1.oneof17_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 101: gojsontest.Model1.oneof17_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 102: gojsontest.Model1.oneof18_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 103: gojsontest.Model1.oneof18_stand_message:type_name -> gojsontest.StandMessage1
	236, // 104: gojsontest.Model1.oneof18_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 105: gojsontest.Model1.oneof18_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 106: gojsontest.Model1.oneof18_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 107: gojsontest.Model1.oneof18_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 108: gojsontest.Model1.oneof19_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 109: gojsontest.Model1.oneof19_stand_message:type_name -> gojsontest.StandMessage1
	236, // 110: gojsontest.Model1.oneof19_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 111: gojsontest.Model1.oneof19_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 112: gojsontest.Model1.oneof19_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 113: gojsontest.Model1.oneof19_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 114: gojsontest.Model1.oneof20_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 115: gojsontest.Model1.oneof20_stand_message:type_name -> gojsontest.StandMessage1
	236, // 116: gojsontest.Model1.oneof20_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 117: gojsontest.Model1.oneof20_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 118: gojsontest.Model1.oneof20_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 119: gojsontest.Model1.oneof20_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 120: gojsontest.Model1.oneof21_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 121: gojsontest.Model1.oneof21_stand_message:type_name -> gojsontest.StandMessage1
	236, // 122: gojsontest.Model1.oneof21_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 123: gojsontest.Model1.oneof21_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 124: gojsontest.Model1.oneof21_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 125: gojsontest.Model1.oneof21_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 126: gojsontest.Model1.oneof22_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 127: gojsontest.Model1.oneof22_stand_message:type_name -> gojsontest.StandMessage1
	236, // 128: gojsontest.Model1.oneof22_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 129: gojsontest.Model1.oneof22_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 130: gojsontest.Model1.oneof22_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 131: gojsontest.Model1.oneof22_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 132: gojsontest.Model1.oneof23_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 133: gojsontest.Model1.oneof23_stand_message:type_name -> gojsontest.StandMessage1
	236, // 134: gojsontest.Model1.oneof23_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 135: gojsontest.Model1.oneof23_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 136: gojsontest.Model1.oneof23_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 137: gojsontest.Model1.oneof23_external_enum:type_name -> gojsonexternal.ExternalEnum1
	52,  // 138: gojsontest.Model1.type_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 139: gojsontest.Model1.type_stand_message:type_name -> gojsontest.StandMessage1
	1,   // 140: gojsontest.Model1.type_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 141: gojsontest.Model1.type_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 142: gojsontest.Model1.type_external_enum:type_name -> gojsonexternal.ExternalEnum1
	236, // 143: gojsontest.Model1.type_external_message:type_name -> gojsonexternal.ExternalMessage1
	52,  // 144: gojsontest.Model1.type_embed_message_null:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 145: gojsontest.Model1.type_stand_message_null:type_name -> gojsontest.StandMessage1
	236, // 146: gojsontest.Model1.type_external_message_null:type_name -> gojsonexternal.ExternalMessage1
	52,  // 147: gojsontest.Model1.array_embed_message:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 148: gojsontest.Model1.array_stand_message:type_name -> gojsontest.StandMessage1
	236, // 149: gojsontest.Model1.array_external_message:type_name -> gojsonexternal.ExternalMessage1
	1,   // 150: gojsontest.Model1.array_embed_enum:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 151: gojsontest.Model1.array_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 152: gojsontest.Model1.array_external_enum:type_name -> gojsonexternal.ExternalEnum1
	0,   // 153: gojsontest.Model1.array_stand_enum_null:type_name -> gojsontest.StandEnum1
	53,  // 154: gojsontest.Model1.map_int32_double:type_name -> gojsontest.Model1.MapInt32DoubleEntry
	54,  // 155: gojsontest.Model1.map_int32_float:type_name -> gojsontest.Model1.MapInt32FloatEntry
	55,  // 156: gojsontest.Model1.map_int32_int32:type_name -> gojsontest.Model1.MapInt32Int32Entry
	56,  // 157: gojsontest.Model1.map_int32_int64:type_name -> gojsontest.Model1.MapInt32Int64Entry
	57,  // 158: gojsontest.Model1.map_int32_uint32:type_name -> gojsontest.Model1.MapInt32Uint32Entry
	58,  // 159: gojsontest.Model1.map_int32_uint64:type_name -> gojsontest.Model1.MapInt32Uint64Entry
	59,  // 160: gojsontest.Model1.map_int32_sint32:type_name -> gojsontest.Model1.MapInt32Sint32Entry
	60,  // 161: gojsontest.Model1.map_int32_sint64:type_name -> gojsontest.Model1.MapInt32Sint64Entry
	61,  // 162: gojsontest.Model1.map_int32_fixed32:type_name -> gojsontest.Model1.MapInt32Fixed32Entry
	62,  // 163: gojsontest.Model1.map_int32_fixed64:type_name -> gojsontest.Model1.MapInt32Fixed64Entry
	63,  // 164: gojsontest.Model1.map_int32_sfixed32:type_name -> gojsontest.Model1.MapInt32Sfixed32Entry
	64,  // 165: gojsontest.Model1.map_int32_sfixed64:type_name -> gojsontest.Model1.MapInt32Sfixed64Entry
	65,  // 166: gojsontest.Model1.map_int32_bool:type_name -> gojsontest.Model1.MapInt32BoolEntry
	66,  // 167: gojsontest.Model1.map_int32_string:type_name -> gojsontest.Model1.MapInt32StringEntry
	67,  // 168: gojsontest.Model1.map_int32_bytes:type_name -> gojsontest.Model1.MapInt32BytesEntry
	68,  // 169: gojsontest.Model1.map_int32_embed_message:type_name -> gojsontest.Model1.MapInt32EmbedMessageEntry
	69,  // 170: gojsontest.Model1.map_int32_stand_message:type_name -> gojsontest.Model1.MapInt32StandMessageEntry
	70,  // 171: gojsontest.Model1.map_int32_embed_enum:type_name -> gojsontest.Model1.MapInt32EmbedEnumEntry
	71,  // 172: gojsontest.Model1.map_int32_stand_enum:type_name -> gojsontest.Model1.MapInt32StandEnumEntry
	72,  // 173: gojsontest.Model1.map_int64_int32:type_name -> gojsontest.Model1.MapInt64Int32Entry
	73,  // 174: gojsontest.Model1.map_uint32_int32:type_name -> gojsontest.Model1.MapUint32Int32Entry
	74,  // 175: gojsontest.Model1.map_uint64_int32:type_name -> gojsontest.Model1.MapUint64Int32Entry
	75,  // 176: gojsontest.Model1.map_sint32_int32:type_name -> gojsontest.Model1.MapSint32Int32Entry
	76,  // 177: gojsontest.Model1.map_sint64_int32:type_name -> gojsontest.Model1.MapSint64Int32Entry
	77,  // 178: gojsontest.Model1.map_fixed32_int32:type_name -> gojsontest.Model1.MapFixed32Int32Entry
	78,  // 179: gojsontest.Model1.map_fixed64_int32:type_name -> gojsontest.Model1.MapFixed64Int32Entry
	79,  // 180: gojsontest.Model1.map_sfixed32_int32:type_name -> gojsontest.Model1.MapSfixed32Int32Entry
	80,  // 181: gojsontest.Model1.map_sfixed64_int32:type_name -> gojsontest.Model1.MapSfixed64Int32Entry
	81,  // 182: gojsontest.Model1.map_string_int32:type_name -> gojsontest.Model1.MapStringInt32Entry
	82,  // 183: gojsontest.Model1.map_string_int32_null:type_name -> gojsontest.Model1.MapStringInt32NullEntry
	83,  // 184: gojsontest.Model1.map_string_string:type_name -> gojsontest.Model1.MapStringStringEntry
	84,  // 185: gojsontest.Model1.map_string_embed_message:type_name -> gojsontest.Model1.MapStringEmbedMessageEntry
	85,  // 186: gojsontest.Model1.map_string_stand_message:type_name -> gojsontest.Model1.MapStringStandMessageEntry
	86,  // 187: gojsontest.Model1.map_string_external_message:type_name -> gojsontest.Model1.MapStringExternalMessageEntry
	87,  // 188: gojsontest.Model1.map_string_embed_enum:type_name -> gojsontest.Model1.MapStringEmbedEnumEntry
	88,  // 189: gojsontest.Model1.map_string_stand_enum:type_name -> gojsontest.Model1.MapStringStandEnumEntry
	89,  // 190: gojsontest.Model1.map_string_external_enum:type_name -> gojsontest.Model1.MapStringExternalEnumEntry
	90,  // 191: gojsontest.Model2.type_embed_message:type_name -> gojsontest.Model2.EmbedMessage1
	18,  // 192: gojsontest.Model2.type_stand_message:type_name -> gojsontest.StandMessage1
	2,   // 193: gojsontest.Model2.type_embed_enum:type_name -> gojsontest.Model2.EmbedEnum1
	0,   // 194: gojsontest.Model2.type_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 195: gojsontest.Model2.type_external_enum:type_name -> gojsonexternal.ExternalEnum1
	236, // 196: gojsontest.Model2.type_external_message:type_name -> gojsonexternal.ExternalMessage1
	90,  // 197: gojsontest.Model2.array_embed_message:type_name -> gojsontest.Model2.EmbedMessage1
	18,  // 198: gojsontest.Model2.array_stand_message:type_name -> gojsontest.StandMessage1
	236, // 199: gojsontest.Model2.array_external_message:type_name -> gojsonexternal.ExternalMessage1
	2,   // 200: gojsontest.Model2.array_embed_enum:type_name -> gojsontest.Model2.EmbedEnum1
	0,   // 201: gojsontest.Model2.array_stand_enum:type_name -> gojsontest.StandEnum1
	237, // 202: gojsontest.Model2.array_external_enum:type_name -> gojsonexternal.ExternalEnum1
	91,  // 203: gojsontest.Model2.map_int32_double:type_name -> gojsontest.Model2.MapInt32DoubleEntry
	92,  // 204: gojsontest.Model2.map_int32_float:type_name -> gojsontest.Model2.MapInt32FloatEntry
	93,  // 205: gojsontest.Model2.map_int32_int32:type_name -> gojsontest.Model2.MapInt32Int32Entry
	94,  // 206: gojsontest.Model2.map_int32_int64:type_name -> gojsontest.Model2.MapInt32Int64Entry
	95,  // 207: gojsontest.Model2.map_int32_uint32:type_name -> gojsontest.Model2.MapInt32Uint32Entry
	96,  // 208: gojsontest.Model2.map_int32_uint64:type_name -> gojsontest.Model2.MapInt32Uint64Entry
	97,  // 209: gojsontest.Model2.map_int32_sint32:type_name -> gojsontest.Model2.MapInt32Sint32Entry
	98,  // 210: gojsontest.Model2.map_int32_sint64:type_name -> gojsontest.Model2.MapInt32Sint64Entry
	99,  // 211: gojsontest.Model2.map_int32_fixed32:type_name -> gojsontest.Model2.MapInt32Fixed32Entry
	100, // 212: gojsontest.Model2.map_int32_fixed64:type_name -> gojsontest.Model2.MapInt32Fixed64Entry
	101, // 213: gojsontest.Model2.map_int32_sfixed32:type_name -> gojsontest.Model2.MapInt32Sfixed32Entry
	102, // 214: gojsontest.Model2.map_int32_sfixed64:type_name -> gojsontest.Model2.MapInt32Sfixed64Entry
	103, // 215: gojsontest.Model2.map_int32_bool:type_name -> gojsontest.Model2.MapInt32BoolEntry
	104, // 216: gojsontest.Model2.map_int32_string:type_name -> gojsontest.Model2.MapInt32StringEntry
	105, // 217: gojsontest.Model2.map_int32_bytes:type_name -> gojsontest.Model2.MapInt32BytesEntry
	106, // 218: gojsontest.Model2.map_int32_embed_message:type_name -> gojsontest.Model2.MapInt32EmbedMessageEntry
	107, // 219: gojsontest.Model2.map_int32_stand_message:type_name -> gojsontest.Model2.MapInt32StandMessageEntry
	108, // 220: gojsontest.Model2.map_int32_embed_enum:type_name -> gojsontest.Model2.MapInt32EmbedEnumEntry
	109, // 221: gojsontest.Model2.map_int32_stand_enum:type_name -> gojsontest.Model2.MapInt32StandEnumEntry
	110, // 222: gojsontest.Model2.map_int64_int32:type_name -> gojsontest.Model2.MapInt64Int32Entry
	111, // 223: gojsontest.Model2.map_uint32_int32:type_name -> gojsontest.Model2.MapUint32Int32Entry
	112, // 224: gojsontest.Model2.map_uint64_int32:type_name -> gojsontest.Model2.MapUint64Int32Entry
	113, // 225: gojsontest.Model2.map_sint32_int32:type_name -> gojsontest.Model2.MapSint32Int32Entry
	114, // 226: gojsontest.Model2.map_sint64_int32:type_name -> gojsontest.Model2.MapSint64Int32Entry
	115, // 227: gojsontest.Model2.map_fixed32_int32:type_name -> gojsontest.Model2.MapFixed32Int32Entry
	116, // 228: gojsontest.Model2.map_fixed64_int32:type_name -> gojsontest.Model2.MapFixed64Int32Entry
	117, // 229: gojsontest.Model2.map_sfixed32_int32:type_name -> gojsontest.Model2.MapSfixed32Int32Entry
	118, // 230: gojsontest.Model2.map_sfixed64_int32:type_name -> gojsontest.Model2.MapSfixed64Int32Entry
	119, // 231: gojsontest.Model2.map_string_int32:type_name -> gojsontest.Model2.MapStringInt32Entry
	120, // 232: gojsontest.Model2.map_string_string:type_name -> gojsontest.Model2.MapStringStringEntry
	121, // 233: gojsontest.Model2.map_string_embed_message:type_name -> gojsontest.Model2.MapStringEmbedMessageEntry
	122, // 234: gojsontest.Model2.map_string_stand_message:type_name -> gojsontest.Model2.MapStringStandMessageEntry
	123, // 235: gojsontest.Model2.map_string_external_message:type_name -> gojsontest.Model2.MapStringExternalMessageEntry
	124, // 236: gojsontest.Model2.map_string_embed_enum:type_name -> gojsontest.Model2.MapStringEmbedEnumEntry
	125, // 237: gojsontest.Model2.map_string_stand_enum:type_name -> gojsontest.Model2.MapStringStandEnumEntry
	126, // 238: gojsontest.Model2.map_string_external_enum:type_name -> gojsontest.Model2.MapStringExternalEnumEntry
	3,   // 239: gojsontest.FieldCustomName.t_enum1:type_name -> gojsontest.FieldCustomName.Enum
	3,   // 240: gojsontest.FieldCustomName.t_enum2:type_name -> gojsontest.FieldCustomName.Enum
	127, // 241: gojsontest.FieldCustomName.t_aliases:type_name -> gojsontest.FieldCustomName.Aliases
	128, // 242: gojsontest.FieldCustomName.t_config:type_name -> gojsontest.FieldCustomName.Config
	3,   // 243: gojsontest.FieldCustomName.array_enum1:type_name -> gojsontest.FieldCustomName.Enum
	3,   // 244: gojsontest.FieldCustomName.array_enum2:type_name -> gojsontest.FieldCustomName.Enum
	127, // 245: gojsontest.FieldCustomName.array_aliases:type_name -> gojsontest.FieldCustomName.Aliases
	128, // 246: gojsontest.FieldCustomName.array_config:type_name -> gojsontest.FieldCustomName.Config
	129, // 247: gojsontest.FieldCustomName.map_int32_double:type_name -> gojsontest.FieldCustomName.MapInt32DoubleEntry
	130, // 248: gojsontest.FieldCustomName.map_int32_float:type_name -> gojsontest.FieldCustomName.MapInt32FloatEntry
	131, // 249: gojsontest.FieldCustomName.map_int32_int32:type_name -> gojsontest.FieldCustomName.MapInt32Int32Entry
	132, // 250: gojsontest.FieldCustomName.map_int32_int64:type_name -> gojsontest.FieldCustomName.MapInt32Int64Entry
	133, // 251: gojsontest.FieldCustomName.map_int32_uint32:type_name -> gojsontest.FieldCustomName.MapInt32Uint32Entry
	134, // 252: gojsontest.FieldCustomName.map_int32_uint64:type_name -> gojsontest.FieldCustomName.MapInt32Uint64Entry
	135, // 253: gojsontest.FieldCustomName.map_int32_sint32:type_name -> gojsontest.FieldCustomName.MapInt32Sint32Entry
	136, // 254: gojsontest.FieldCustomName.map_int32_sint64:type_name -> gojsontest.FieldCustomName.MapInt32Sint64Entry
	137, // 255: gojsontest.FieldCustomName.map_int32_sfixed32:type_name -> gojsontest.FieldCustomName.MapInt32Sfixed32Entry
	138, // 256: gojsontest.FieldCustomName.map_int32_sfixed64:type_name -> gojsontest.FieldCustomName.MapInt32Sfixed64Entry
	139, // 257: gojsontest.FieldCustomName.map_int32_fixed32:type_name -> gojsontest.FieldCustomName.MapInt32Fixed32Entry
	140, // 258: gojsontest.FieldCustomName.map_int32_fixed64:type_name -> gojsontest.FieldCustomName.MapInt32Fixed64Entry
	141, // 259: gojsontest.FieldCustomName.map_int32_bool:type_name -> gojsontest.FieldCustomName.MapInt32BoolEntry
	142, // 260: gojsontest.FieldCustomName.map_int32_string:type_name -> gojsontest.FieldCustomName.MapInt32StringEntry
	143, // 261: gojsontest.FieldCustomName.map_int32_bytes:type_name -> gojsontest.FieldCustomName.MapInt32BytesEntry
	144, // 262: gojsontest.FieldCustomName.map_int32_enum1:type_name -> gojsontest.FieldCustomName.MapInt32Enum1Entry
	145, // 263: gojsontest.FieldCustomName.map_int32_enum2:type_name -> gojsontest.FieldCustomName.MapInt32Enum2Entry
	146, // 264: gojsontest.FieldCustomName.map_int32_aliases:type_name -> gojsontest.FieldCustomName.MapInt32AliasesEntry
	147, // 265: gojsontest.FieldCustomName.map_int32_config:type_name -> gojsontest.FieldCustomName.MapInt32ConfigEntry
	148, // 266: gojsontest.FieldCustomName.map_int64_int32:type_name -> gojsontest.FieldCustomName.MapInt64Int32Entry
	149, // 267: gojsontest.FieldCustomName.map_uint32_int32:type_name -> gojsontest.FieldCustomName.MapUint32Int32Entry
	150, // 268: gojsontest.FieldCustomName.map_uint64_int32:type_name -> gojsontest.FieldCustomName.MapUint64Int32Entry
	151, // 269: gojsontest.FieldCustomName.map_sint32_int32:type_name -> gojsontest.FieldCustomName.MapSint32Int32Entry
	152, // 270: gojsontest.FieldCustomName.map_sint64_int32:type_name -> gojsontest.FieldCustomName.MapSint64Int32Entry
	153, // 271: gojsontest.FieldCustomName.map_fixed32_int32:type_name -> gojsontest.FieldCustomName.MapFixed32Int32Entry
	154, // 272: gojsontest.FieldCustomName.map_fixed64_int32:type_name -> gojsontest.FieldCustomName.MapFixed64Int32Entry
	155, // 273: gojsontest.FieldCustomName.map_sfixed32_int32:type_name -> gojsontest.FieldCustomName.MapSfixed32Int32Entry
	156, // 274: gojsontest.FieldCustomName.map_sfixed64_int32:type_name -> gojsontest.FieldCustomName.MapSfixed64Int32Entry
	157, // 275: gojsontest.FieldCustomName.map_string_int32:type_name -> gojsontest.FieldCustomName.MapStringInt32Entry
	3,   // 276: gojsontest.FieldCustomName.one1_t_enum1:type_name -> gojsontest.FieldCustomName.Enum
	3,   // 277: gojsontest.FieldCustomName.one1_t_enum2:type_name -> gojsontest.FieldCustomName.Enum
	127, // 278: gojsontest.FieldCustomName.one1_t_aliases:type_name -> gojsontest.FieldCustomName.Aliases
	128, // 279: gojsontest.FieldCustomName.one1_t_config:type_name -> gojsontest.FieldCustomName.Config
	3,   // 280: gojsontest.FieldCustomName.one2_t_enum1:type_name -> gojsontest.FieldCustomName.Enum
	3,   // 281: gojsontest.FieldCustomName.one2_t_enum2:type_name -> gojsontest.FieldCustomName.Enum
	127, // 282: gojsontest.FieldCustomName.one2_t_aliases:type_name -> gojsontest.FieldCustomName.Aliases
	128, // 283: gojsontest.FieldCustomName.one2_t_config:type_name -> gojsontest.FieldCustomName.Config
	4,   // 284: gojsontest.EnumUseString1.t_status1:type_name -> gojsontest.EnumUseString1.Status1
	5,   // 285: gojsontest.EnumUseString1.t_status2:type_name -> gojsontest.EnumUseString1.Status2
	4,   // 286: gojsontest.EnumUseString1.a_status1:type_name -> gojsontest.EnumUseString1.Status1
	5,   // 287: gojsontest.EnumUseString1.a_status2:type_name -> gojsontest.EnumUseString1.Status2
	4,   // 288: gojsontest.EnumUseString1.a_status3:type_name -> gojsontest.EnumUseString1.Status1
	158, // 289: gojsontest.EnumUseString1.m_status1:type_name -> gojsontest.EnumUseString1.MStatus1Entry
	159, // 290: gojsontest.EnumUseString1.m_status2:type_name -> gojsontest.EnumUseString1.MStatus2Entry
	160, // 291: gojsontest.EnumUseString1.m_status3:type_name -> gojsontest.EnumUseString1.MStatus3Entry
	6,   // 292: gojsontest.EnumUseString2.t_status1:type_name -> gojsontest.EnumUseString2.Status1
	7,   // 293: gojsontest.EnumUseString2.t_status2:type_name -> gojsontest.EnumUseString2.Status2
	6,   // 294: gojsontest.EnumUseString2.a_status1:type_name -> gojsontest.EnumUseString2.Status1
	7,   // 295: gojsontest.EnumUseString2.a_status2:type_name -> gojsontest.EnumUseString2.Status2
	6,   // 296: gojsontest.EnumUseString2.a_status3:type_name -> gojsontest.EnumUseString2.Status1
	161, // 297: gojsontest.EnumUseString2.m_status1:type_name -> gojsontest.EnumUseString2.MStatus1Entry
	162, // 298: gojsontest.EnumUseString2.m_status2:type_name -> gojsontest.EnumUseString2.MStatus2Entry
	163, // 299: gojsontest.EnumUseString2.m_status3:type_name -> gojsontest.EnumUseString2.MStatus3Entry
	8,   // 300: gojsontest.EnumUseString3.t_status1:type_name -> gojsontest.EnumUseString3.Status1
	9,   // 301: gojsontest.EnumUseString3.t_status2:type_name -> gojsontest.EnumUseString3.Status2
	8,   // 302: gojsontest.EnumUseString3.a_status1:type_name -> gojsontest.EnumUseString3.Status1
	9,   // 303: gojsontest.EnumUseString3.a_status2:type_name -> gojsontest.EnumUseString3.Status2
	8,   // 304: gojsontest.EnumUseString3.a_status3:type_name -> gojsontest.EnumUseString3.Status1
	164, // 305: gojsontest.EnumUseString3.m_status1:type_name -> gojsontest.EnumUseString3.MStatus1Entry
	165, // 306: gojsontest.EnumUseString3.m_status2:type_name -> gojsontest.EnumUseString3.MStatus2Entry
	166, // 307: gojsontest.EnumUseString3.m_status3:type_name -> gojsontest.EnumUseString3.MStatus3Entry
	10,  // 308: gojsontest.EnumUseString4.t_status1:type_name -> gojsontest.EnumUseString4.Status
	10,  // 309: gojsontest.EnumUseString4.t_status2:type_name -> gojsontest.EnumUseString4.Status
	10,  // 310: gojsontest.EnumUseString4.a_status1:type_name -> gojsontest.EnumUseString4.Status
	10,  // 311: gojsontest.EnumUseString4.a_status2:type_name -> gojsontest.EnumUseString4.Status
	10,  // 312: gojsontest.EnumUseString4.a_status3:type_name -> gojsontest.EnumUseString4.Status
	167, // 313: gojsontest.EnumUseString4.m_status1:type_name -> gojsontest.EnumUseString4.MStatus1Entry
	168, // 314: gojsontest.EnumUseString4.m_status2:type_name -> gojsontest.EnumUseString4.MStatus2Entry
	169, // 315: gojsontest.EnumUseString4.m_status3:type_name -> gojsontest.EnumUseString4.MStatus3Entry
	11,  // 316: gojsontest.EnumUseString5.t_status:type_name -> gojsontest.EnumUseString5.Status
	11,  // 317: gojsontest.EnumUseString5.a_status:type_name -> gojsontest.EnumUseString5.Status
	170, // 318: gojsontest.EnumUseString5.m_status:type_name -> gojsontest.EnumUseString5.MStatusEntry
	171, // 319: gojsontest.SerializeBytes1.map_bytes1:type_name -> gojsontest.SerializeBytes1.MapBytes1Entry
	172, // 320: gojsontest.SerializeBytes1.map_bytes2:type_name -> gojsontest.SerializeBytes1.MapBytes2Entry
	173, // 321: gojsontest.SerializeBytes1.map_bytes3:type_name -> gojsontest.SerializeBytes1.MapBytes3Entry
	174, // 322: gojsontest.SerializeBytes1.map_bytes4:type_name -> gojsontest.SerializeBytes1.MapBytes4Entry
	175, // 323: gojsontest.SerializeBytes2.map_bytes1:type_name -> gojsontest.SerializeBytes2.MapBytes1Entry
	176, // 324: gojsontest.SerializeBytes2.map_bytes2:type_name -> gojsontest.SerializeBytes2.MapBytes2Entry
	177, // 325: gojsontest.SerializeBytes2.map_bytes3:type_name -> gojsontest.SerializeBytes2.MapBytes3Entry
	178, // 326: gojsontest.SerializeBytes2.map_bytes4:type_name -> gojsontest.SerializeBytes2.MapBytes4Entry
	236, // 327: gojsontest.SerializeOmitempty1.array_message1:type_name -> gojsonexternal.ExternalMessage1
	236, // 328: gojsontest.SerializeOmitempty1.array_message2:type_name -> gojsonexternal.ExternalMessage1
	236, // 329: gojsontest.SerializeOmitempty1.array_message3:type_name -> gojsonexternal.ExternalMessage1
	237, // 330: gojsontest.SerializeOmitempty1.array_enum1:type_name -> gojsonexternal.ExternalEnum1
	237, // 331: gojsontest.SerializeOmitempty1.array_enum2:type_name -> gojsonexternal.ExternalEnum1
	237, // 332: gojsontest.SerializeOmitempty1.array_enum3:type_name -> gojsonexternal.ExternalEnum1
	179, // 333: gojsontest.SerializeOmitempty1.map_string1:type_name -> gojsontest.SerializeOmitempty1.MapString1Entry
	180, // 334: gojsontest.SerializeOmitempty1.map_string2:type_name -> gojsontest.SerializeOmitempty1.MapString2Entry
	181, // 335: gojsontest.SerializeOmitempty1.map_string3:type_name -> gojsontest.SerializeOmitempty1.MapString3Entry
	182, // 336: gojsontest.SerializeOmitempty1.map_message1:type_name -> gojsontest.SerializeOmitempty1.MapMessage1Entry
	183, // 337: gojsontest.SerializeOmitempty1.map_message2:type_name -> gojsontest.SerializeOmitempty1.MapMessage2Entry
	184, // 338: gojsontest.SerializeOmitempty1.map_message3:type_name -> gojsontest.SerializeOmitempty1.MapMessage3Entry
	185, // 339: gojsontest.SerializeOmitempty1.map_enum1:type_name -> gojsontest.SerializeOmitempty1.MapEnum1Entry
	186, // 340: gojsontest.SerializeOmitempty1.map_enum2:type_name -> gojsontest.SerializeOmitempty1.MapEnum2Entry
	187, // 341: gojsontest.SerializeOmitempty1.map_enum3:type_name -> gojsontest.SerializeOmitempty1.MapEnum3Entry
	236, // 342: gojsontest.SerializeOmitempty2.array_message1:type_name -> gojsonexternal.ExternalMessage1
	236, // 343: gojsontest.SerializeOmitempty2.array_message2:type_name -> gojsonexternal.ExternalMessage1
	236, // 344: gojsontest.SerializeOmitempty2.array_message3:type_name -> gojsonexternal.ExternalMessage1
	237, // 345: gojsontest.SerializeOmitempty2.array_enum1:type_name -> gojsonexternal.ExternalEnum1
	237, // 346: gojsontest.SerializeOmitempty2.array_enum2:type_name -> gojsonexternal.ExternalEnum1
	237, // 347: gojsontest.SerializeOmitempty2.array_enum3:type_name -> gojsonexternal.ExternalEnum1
	188, // 348: gojsontest.SerializeOmitempty2.map_string1:type_name -> gojsontest.SerializeOmitempty2.MapString1Entry
	189, // 349: gojsontest.SerializeOmitempty2.map_string2:type_name -> gojsontest.SerializeOmitempty2.MapString2Entry
	190, // 350: gojsontest.SerializeOmitempty2.map_string3:type_name -> gojsontest.SerializeOmitempty2.MapString3Entry
	191, // 351: gojsontest.SerializeOmitempty2.map_message1:type_name -> gojsontest.SerializeOmitempty2.MapMessage1Entry
	192, // 352: gojsontest.SerializeOmitempty2.map_message2:type_name -> gojsontest.SerializeOmitempty2.MapMessage2Entry
	193, // 353: gojsontest.SerializeOmitempty2.map_message3:type_name -> gojsontest.SerializeOmitempty2.MapMessage3Entry
	194, // 354: gojsontest.SerializeOmitempty2.map_enum1:type_name -> gojsontest.SerializeOmitempty2.MapEnum1Entry
	195, // 355: gojsontest.SerializeOmitempty2.map_enum2:type_name -> gojsontest.SerializeOmitempty2.MapEnum2Entry
	196, // 356: gojsontest.SerializeOmitempty2.map_enum3:type_name -> gojsontest.SerializeOmitempty2.MapEnum3Entry
	12,  // 357: gojsontest.UnmarshalData.t_enum1:type_name -> gojsontest.UnmarshalData.Enum
	12,  // 358: gojsontest.UnmarshalData.t_enum2:type_name -> gojsontest.UnmarshalData.Enum
	197, // 359: gojsontest.UnmarshalData.t_aliases:type_name -> gojsontest.UnmarshalData.Aliases
	198, // 360: gojsontest.UnmarshalData.t_config:type_name -> gojsontest.UnmarshalData.Config
	12,  // 361: gojsontest.UnmarshalData.array_enum1:type_name -> gojsontest.UnmarshalData.Enum
	12,  // 362: gojsontest.UnmarshalData.array_enum2:type_name -> gojsontest.UnmarshalData.Enum
	197, // 363: gojsontest.UnmarshalData.array_aliases:type_name -> gojsontest.UnmarshalData.Aliases
	198, // 364: gojsontest.UnmarshalData.array_config:type_name -> gojsontest.UnmarshalData.Config
	199, // 365: gojsontest.UnmarshalData.map_int32_double:type_name -> gojsontest.UnmarshalData.MapInt32DoubleEntry
	200, // 366: gojsontest.UnmarshalData.map_int32_float:type_name -> gojsontest.UnmarshalData.MapInt32FloatEntry
	201, // 367: gojsontest.UnmarshalData.map_int32_int32:type_name -> gojsontest.UnmarshalData.MapInt32Int32Entry
	202, // 368: gojsontest.UnmarshalData.map_int32_int64:type_name -> gojsontest.UnmarshalData.MapInt32Int64Entry
	203, // 369: gojsontest.UnmarshalData.map_int32_uint32:type_name -> gojsontest.UnmarshalData.MapInt32Uint32Entry
	204, // 370: gojsontest.UnmarshalData.map_int32_uint64:type_name -> gojsontest.UnmarshalData.MapInt32Uint64Entry
	205, // 371: gojsontest.UnmarshalData.map_int32_sint32:type_name -> gojsontest.UnmarshalData.MapInt32Sint32Entry
	206, // 372: gojsontest.UnmarshalData.map_int32_sint64:type_name -> gojsontest.UnmarshalData.MapInt32Sint64Entry
	207, // 373: gojsontest.UnmarshalData.map_int32_sfixed32:type_name -> gojsontest.UnmarshalData.MapInt32Sfixed32Entry
	208, // 374: gojsontest.UnmarshalData.map_int32_sfixed64:type_name -> gojsontest.UnmarshalData.MapInt32Sfixed64Entry
	209, // 375: gojsontest.UnmarshalData.map_int32_fixed32:type_name -> gojsontest.UnmarshalData.MapInt32Fixed32Entry
	210, // 376: gojsontest.UnmarshalData.map_int32_fixed64:type_name -> gojsontest.UnmarshalData.MapInt32Fixed64Entry
	211, // 377: gojsontest.UnmarshalData.map_int32_bool:type_name -> gojsontest.UnmarshalData.MapInt32BoolEntry
	212, // 378: gojsontest.UnmarshalData.map_int32_string:type_name -> gojsontest.UnmarshalData.MapInt32StringEntry
	213, // 379: gojsontest.UnmarshalData.map_int32_bytes:type_name -> gojsontest.UnmarshalData.MapInt32BytesEntry
	214, // 380: gojsontest.UnmarshalData.map_int32_enum1:type_name -> gojsontest.UnmarshalData.MapInt32Enum1Entry
	215, // 381: gojsontest.UnmarshalData.map_int32_enum2:type_name -> gojsontest.UnmarshalData.MapInt32Enum2Entry
	216, // 382: gojsontest.UnmarshalData.map_int32_aliases:type_name -> gojsontest.UnmarshalData.MapInt32AliasesEntry
	217, // 383: gojsontest.UnmarshalData.map_int32_config:type_name -> gojsontest.UnmarshalData.MapInt32ConfigEntry
	218, // 384: gojsontest.UnmarshalData.map_int64_int32:type_name -> gojsontest.UnmarshalData.MapInt64Int32Entry
	219, // 385: gojsontest.UnmarshalData.map_uint32_int32:type_name -> gojsontest.UnmarshalData.MapUint32Int32Entry
	220, // 386: gojsontest.UnmarshalData.map_uint64_int32:type_name -> gojsontest.UnmarshalData.MapUint64Int32Entry
	221, // 387: gojsontest.UnmarshalData.map_sint32_int32:type_name -> gojsontest.UnmarshalData.MapSint32Int32Entry
	222, // 388: gojsontest.UnmarshalData.map_sint64_int32:type_name -> gojsontest.UnmarshalData.MapSint64Int32Entry
	223, // 389: gojsontest.UnmarshalData.map_fixed32_int32:type_name -> gojsontest.UnmarshalData.MapFixed32Int32Entry
	224, // 390: gojsontest.UnmarshalData.map_fixed64_int32:type_name -> gojsontest.UnmarshalData.MapFixed64Int32Entry
	225, // 391: gojsontest.UnmarshalData.map_sfixed32_int32:type_name -> gojsontest.UnmarshalData.MapSfixed32Int32Entry
	226, // 392: gojsontest.UnmarshalData.map_sfixed64_int32:type_name -> gojsontest.UnmarshalData.MapSfixed64Int32Entry
	227, // 393: gojsontest.UnmarshalData.map_string_int32:type_name -> gojsontest.UnmarshalData.MapStringInt32Entry
	13,  // 394: gojsontest.UnmarshalOneofNotHide.t_enum1:type_name -> gojsontest.UnmarshalOneofNotHide.Enum
	13,  // 395: gojsontest.UnmarshalOneofNotHide.t_enum2:type_name -> gojsontest.UnmarshalOneofNotHide.Enum
	228, // 396: gojsontest.UnmarshalOneofNotHide.t_aliases:type_name -> gojsontest.UnmarshalOneofNotHide.Aliases
	229, // 397: gojsontest.UnmarshalOneofNotHide.t_config:type_name -> gojsontest.UnmarshalOneofNotHide.Config
	14,  // 398: gojsontest.UnmarshalOneofHide.t_enum1:type_name -> gojsontest.UnmarshalOneofHide.Enum
	14,  // 399: gojsontest.UnmarshalOneofHide.t_enum2:type_name -> gojsontest.UnmarshalOneofHide.Enum
	230, // 400: gojsontest.UnmarshalOneofHide.t_aliases:type_name -> gojsontest.UnmarshalOneofHide.Aliases
	231, // 401: gojsontest.UnmarshalOneofHide.t_config:type_name -> gojsontest.UnmarshalOneofHide.Config
	15,  // 402: gojsontest.OptionalModel1.t_enum1:type_name -> gojsontest.OptionalModel1.Enum
	15,  // 403: gojsontest.OptionalModel1.t_enum2:type_name -> gojsontest.OptionalModel1.Enum
	232, // 404: gojsontest.OptionalModel1.t_aliases:type_name -> gojsontest.OptionalModel1.Aliases
	233, // 405: gojsontest.OptionalModel1.t_config:type_name -> gojsontest.OptionalModel1.Config
	16,  // 406: gojsontest.OptionalModel2.t_enum1:type_name -> gojsontest.OptionalModel2.Enum
	16,  // 407: gojsontest.OptionalModel2.t_enum2:type_name -> gojsontest.OptionalModel2.Enum
	234, // 408: gojsontest.OptionalModel2.t_aliases:type_name -> gojsontest.OptionalModel2.Aliases
	235, // 409: gojsontest.OptionalModel2.t_config:type_name -> gojsontest.OptionalModel2.Config
	52,  // 410: gojsontest.Model1.MapInt32EmbedMessageEntry.value:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 411: gojsontest.Model1.MapInt32StandMessageEntry.value:type_name -> gojsontest.StandMessage1
	1,   // 412: gojsontest.Model1.MapInt32EmbedEnumEntry.value:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 413: gojsontest.Model1.MapInt32StandEnumEntry.value:type_name -> gojsontest.StandEnum1
	52,  // 414: gojsontest.Model1.MapStringEmbedMessageEntry.value:type_name -> gojsontest.Model1.EmbedMessage1
	18,  // 415: gojsontest.Model1.MapStringStandMessageEntry.value:type_name -> gojsontest.StandMessage1
	236, // 416: gojsontest.Model1.MapStringExternalMessageEntry.value:type_name -> gojsonexternal.ExternalMessage1
	1,   // 417: gojsontest.Model1.MapStringEmbedEnumEntry.value:type_name -> gojsontest.Model1.EmbedEnum1
	0,   // 418: gojsontest.Model1.MapStringStandEnumEntry.value:type_name -> gojsontest.StandEnum1
	237, // 419: gojsontest.Model1.MapStringExternalEnumEntry.value:type_name -> gojsonexternal.ExternalEnum1
	90,  // 420: gojsontest.Model2.MapInt32EmbedMessageEntry.value:type_name -> gojsontest.Model2.EmbedMessage1
	18,  // 421: gojsontest.Model2.MapInt32StandMessageEntry.value:type_name -> gojsontest.StandMessage1
	2,   // 422: gojsontest.Model2.MapInt32EmbedEnumEntry.value:type_name -> gojsontest.Model2.EmbedEnum1
	0,   // 423: gojsontest.Model2.MapInt32StandEnumEntry.value:type_name -> gojsontest.StandEnum1
	90,  // 424: gojsontest.Model2.MapStringEmbedMessageEntry.value:type_name -> gojsontest.Model2.EmbedMessage1
	18,  // 425: gojsontest.Model2.MapStringStandMessageEntry.value:type_name -> gojsontest.StandMessage1
	236, // 426: gojsontest.Model2.MapStringExternalMessageEntry.value:type_name -> gojsonexternal.ExternalMessage1
	2,   // 427: gojsontest.Model2.MapStringEmbedEnumEntry.value:type_name -> gojsontest.Model2.EmbedEnum1
	0,   // 428: gojsontest.Model2.MapStringStandEnumEntry.value:type_name -> gojsontest.StandEnum1
	237, // 429: gojsontest.Model2.MapStringExternalEnumEntry.value:type_name -> gojsonexternal.ExternalEnum1
	3,   // 430: gojsontest.FieldCustomName.MapInt32Enum1Entry.value:type_name -> gojsontest.FieldCustomName.Enum
	3,   // 431: gojsontest.FieldCustomName.MapInt32Enum2Entry.value:type_name -> gojsontest.FieldCustomName.Enum
	127, // 432: gojsontest.FieldCustomName.MapInt32AliasesEntry.value:type_name -> gojsontest.FieldCustomName.Aliases
	128, // 433: gojsontest.FieldCustomName.MapInt32ConfigEntry.value:type_name -> gojsontest.FieldCustomName.Config
	4,   // 434: gojsontest.EnumUseString1.MStatus1Entry.value:type_name -> gojsontest.EnumUseString1.Status1
	5,   // 435: gojsontest.EnumUseString1.MStatus2Entry.value:type_name -> gojsontest.EnumUseString1.Status2
	4,   // 436: gojsontest.EnumUseString1.MStatus3Entry.value:type_name -> gojsontest.EnumUseString1.Status1
	6,   // 437: gojsontest.EnumUseString2.MStatus1Entry.value:type_name -> gojsontest.EnumUseString2.Status1
	7,   // 438: gojsontest.EnumUseString2.MStatus2Entry.value:type_name -> gojsontest.EnumUseString2.Status2
	6,   // 439: gojsontest.EnumUseString2.MStatus3Entry.value:type_name -> gojsontest.EnumUseString2.Status1
	8,   // 440: gojsontest.EnumUseString3.MStatus1Entry.value:type_name -> gojsontest.EnumUseString3.Status1
	9,   // 441: gojsontest.EnumUseString3.MStatus2Entry.value:type_name -> gojsontest.EnumUseString3.Status2
	8,   // 442: gojsontest.EnumUseString3.MStatus3Entry.value:type_name -> gojsontest.EnumUseString3.Status1
	10,  // 443: gojsontest.EnumUseString4.MStatus1Entry.value:type_name -> gojsontest.EnumUseString4.Status
	10,  // 444: gojsontest.EnumUseString4.MStatus2Entry.value:type_name -> gojsontest.EnumUseString4.Status
	10,  // 445: gojsontest.EnumUseString4.MStatus3Entry.value:type_name -> gojsontest.EnumUseString4.Status
	11,  // 446: gojsontest.EnumUseString5.MStatusEntry.value:type_name -> gojsontest.EnumUseString5.Status
	236, // 447: gojsontest.SerializeOmitempty1.MapMessage1Entry.value:type_name -> gojsonexternal.ExternalMessage1
	236, // 448: gojsontest.SerializeOmitempty1.MapMessage2Entry.value:type_name -> gojsonexternal.ExternalMessage1
	236, // 449: gojsontest.SerializeOmitempty1.MapMessage3Entry.value:type_name -> gojsonexternal.ExternalMessage1
	237, // 450: gojsontest.SerializeOmitempty1.MapEnum1Entry.value:type_name -> gojsonexternal.ExternalEnum1
	237, // 451: gojsontest.SerializeOmitempty1.MapEnum2Entry.value:type_name -> gojsonexternal.ExternalEnum1
	237, // 452: gojsontest.SerializeOmitempty1.MapEnum3Entry.value:type_name -> gojsonexternal.ExternalEnum1
	236, // 453: gojsontest.SerializeOmitempty2.MapMessage1Entry.value:type_name -> gojsonexternal.ExternalMessage1
	236, // 454: gojsontest.SerializeOmitempty2.MapMessage2Entry.value:type_name -> gojsonexternal.ExternalMessage1
	236, // 455: gojsontest.SerializeOmitempty2.MapMessage3Entry.value:type_name -> gojsonexternal.ExternalMessage1
	237, // 456: gojsontest.SerializeOmitempty2.MapEnum1Entry.value:type_name -> gojsonexternal.ExternalEnum1
	237, // 457: gojsontest.SerializeOmitempty2.MapEnum2Entry.value:type_name -> gojsonexternal.ExternalEnum1
	237, // 458: gojsontest.SerializeOmitempty2.MapEnum3Entry.value:type_name -> gojsonexternal.ExternalEnum1
	12,  // 459: gojsontest.UnmarshalData.MapInt32Enum1Entry.value:type_name -> gojsontest.UnmarshalData.Enum
	12,  // 460: gojsontest.UnmarshalData.MapInt32Enum2Entry.value:type_name -> gojsontest.UnmarshalData.Enum
	197, // 461: gojsontest.UnmarshalData.MapInt32AliasesEntry.value:type_name -> gojsontest.UnmarshalData.Aliases
	198, // 462: gojsontest.UnmarshalData.MapInt32ConfigEntry.value:type_name -> gojsontest.UnmarshalData.Config
	463, // [463:463] is the sub-list for method output_type
	463, // [463:463] is the sub-list for method input_type
	463, // [463:463] is the sub-list for extension type_name
	463, // [463:463] is the sub-list for extension extendee
	0,   // [0:463] is the sub-list for field type_name
}

func init() { file_xgo_tests_gojsontest_gojson_test_proto_init() }
func file_xgo_tests_gojsontest_gojson_test_proto_init() {
	if File_xgo_tests_gojsontest_gojson_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandMessage1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameStyleTextName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameStyleGoName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameStyleJSONName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldCustomName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofHide1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofHide2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofHide3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofHide4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOmitempty1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOmitempty2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOmitempty3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOmitempty4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldIgnore1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldIgnore2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDisallowUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldAllowUnknown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumUseString1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumUseString2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumUseString3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumUseString4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumUseString5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializeBytes1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializeBytes2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializeOmitempty1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializeOmitempty2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmarshalData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmarshalOneofNotHide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmarshalOneofHide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalModel1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalModel2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model1_EmbedMessage1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Model2_EmbedMessage1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldCustomName_Aliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldCustomName_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmarshalData_Aliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmarshalData_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmarshalOneofNotHide_Aliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmarshalOneofNotHide_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmarshalOneofHide_Aliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnmarshalOneofHide_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalModel1_Aliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalModel1_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalModel2_Aliases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalModel2_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Model1_Oneof1Double)(nil),
		(*Model1_Oneof1Float)(nil),
		(*Model1_Oneof1Int32)(nil),
		(*Model1_Oneof1Int64)(nil),
		(*Model1_Oneof1Uint32)(nil),
		(*Model1_Oneof1Uint64)(nil),
		(*Model1_Oneof1Sint32)(nil),
		(*Model1_Oneof1Sint64)(nil),
		(*Model1_Oneof1Fixed32)(nil),
		(*Model1_Oneof1Fixed64)(nil),
		(*Model1_Oneof1Sfixed32)(nil),
		(*Model1_Oneof1Sfixed64)(nil),
		(*Model1_Oneof1Bool)(nil),
		(*Model1_Oneof1String)(nil),
		(*Model1_Oneof1Bytes)(nil),
		(*Model1_Oneof1EmbedMessage)(nil),
		(*Model1_Oneof1StandMessage)(nil),
		(*Model1_Oneof1ExternalMessage)(nil),
		(*Model1_Oneof1EmbedEnum)(nil),
		(*Model1_Oneof1StandEnum)(nil),
		(*Model1_Oneof1ExternalEnum)(nil),
		(*Model1_Oneof2Double)(nil),
		(*Model1_Oneof2Float)(nil),
		(*Model1_Oneof2Int32)(nil),
		(*Model1_Oneof2Int64)(nil),
		(*Model1_Oneof2Uint32)(nil),
		(*Model1_Oneof2Uint64)(nil),
		(*Model1_Oneof2Sint32)(nil),
		(*Model1_Oneof2Sint64)(nil),
		(*Model1_Oneof2Fixed32)(nil),
		(*Model1_Oneof2Fixed64)(nil),
		(*Model1_Oneof2Sfixed32)(nil),
		(*Model1_Oneof2Sfixed64)(nil),
		(*Model1_Oneof2Bool)(nil),
		(*Model1_Oneof2String)(nil),
		(*Model1_Oneof2Bytes)(nil),
		(*Model1_Oneof2EmbedMessage)(nil),
		(*Model1_Oneof2StandMessage)(nil),
		(*Model1_Oneof2ExternalMessage)(nil),
		(*Model1_Oneof2EmbedEnum)(nil),
		(*Model1_Oneof2StandEnum)(nil),
		(*Model1_Oneof2ExternalEnum)(nil),
		(*Model1_Oneof3Double)(nil),
		(*Model1_Oneof3Float)(nil),
		(*Model1_Oneof3Int32)(nil),
		(*Model1_Oneof3Int64)(nil),
		(*Model1_Oneof3Uint32)(nil),
		(*Model1_Oneof3Uint64)(nil),
		(*Model1_Oneof3Sint32)(nil),
		(*Model1_Oneof3Sint64)(nil),
		(*Model1_Oneof3Fixed32)(nil),
		(*Model1_Oneof3Fixed64)(nil),
		(*Model1_Oneof3Sfixed32)(nil),
		(*Model1_Oneof3Sfixed64)(nil),
		(*Model1_Oneof3Bool)(nil),
		(*Model1_Oneof3String)(nil),
		(*Model1_Oneof3Bytes)(nil),
		(*Model1_Oneof3EmbedMessage)(nil),
		(*Model1_Oneof3StandMessage)(nil),
		(*Model1_Oneof3ExternalMessage)(nil),
		(*Model1_Oneof3EmbedEnum)(nil),
		(*Model1_Oneof3StandEnum)(nil),
		(*Model1_Oneof3ExternalEnum)(nil),
		(*Model1_Oneof4Double)(nil),
		(*Model1_Oneof4Float)(nil),
		(*Model1_Oneof4Int32)(nil),
		(*Model1_Oneof4Int64)(nil),
		(*Model1_Oneof4Uint32)(nil),
		(*Model1_Oneof4Uint64)(nil),
		(*Model1_Oneof4Sint32)(nil),
		(*Model1_Oneof4Sint64)(nil),
		(*Model1_Oneof4Fixed32)(nil),
		(*Model1_Oneof4Fixed64)(nil),
		(*Model1_Oneof4Sfixed32)(nil),
		(*Model1_Oneof4Sfixed64)(nil),
		(*Model1_Oneof4Bool)(nil),
		(*Model1_Oneof4String)(nil),
		(*Model1_Oneof4Bytes)(nil),
		(*Model1_Oneof4EmbedMessage)(nil),
		(*Model1_Oneof4StandMessage)(nil),
		(*Model1_Oneof4ExternalMessage)(nil),
		(*Model1_Oneof4EmbedEnum)(nil),
		(*Model1_Oneof4StandEnum)(nil),
		(*Model1_Oneof4ExternalEnum)(nil),
		(*Model1_Oneof5Double)(nil),
		(*Model1_Oneof5Float)(nil),
		(*Model1_Oneof5Int32)(nil),
		(*Model1_Oneof5Int64)(nil),
		(*Model1_Oneof5Uint32)(nil),
		(*Model1_Oneof5Uint64)(nil),
		(*Model1_Oneof5Sint32)(nil),
		(*Model1_Oneof5Sint64)(nil),
		(*Model1_Oneof5Fixed32)(nil),
		(*Model1_Oneof5Fixed64)(nil),
		(*Model1_Oneof5Sfixed32)(nil),
		(*Model1_Oneof5Sfixed64)(nil),
		(*Model1_Oneof5Bool)(nil),
		(*Model1_Oneof5String)(nil),
		(*Model1_Oneof5Bytes)(nil),
		(*Model1_Oneof5EmbedMessage)(nil),
		(*Model1_Oneof5StandMessage)(nil),
		(*Model1_Oneof5ExternalMessage)(nil),
		(*Model1_Oneof5EmbedEnum)(nil),
		(*Model1_Oneof5StandEnum)(nil),
		(*Model1_Oneof5ExternalEnum)(nil),
		(*Model1_Oneof6Double)(nil),
		(*Model1_Oneof6Float)(nil),
		(*Model1_Oneof6Int32)(nil),
		(*Model1_Oneof6Int64)(nil),
		(*Model1_Oneof6Uint32)(nil),
		(*Model1_Oneof6Uint64)(nil),
		(*Model1_Oneof6Sint32)(nil),
		(*Model1_Oneof6Sint64)(nil),
		(*Model1_Oneof6Fixed32)(nil),
		(*Model1_Oneof6Fixed64)(nil),
		(*Model1_Oneof6Sfixed32)(nil),
		(*Model1_Oneof6Sfixed64)(nil),
		(*Model1_Oneof6Bool)(nil),
		(*Model1_Oneof6String)(nil),
		(*Model1_Oneof6Bytes)(nil),
		(*Model1_Oneof6EmbedMessage)(nil),
		(*Model1_Oneof6StandMessage)(nil),
		(*Model1_Oneof6ExternalMessage)(nil),
		(*Model1_Oneof6EmbedEnum)(nil),
		(*Model1_Oneof6StandEnum)(nil),
		(*Model1_Oneof6ExternalEnum)(nil),
		(*Model1_Oneof7Double)(nil),
		(*Model1_Oneof7Float)(nil),
		(*Model1_Oneof7Int32)(nil),
		(*Model1_Oneof7Int64)(nil),
		(*Model1_Oneof7Uint32)(nil),
		(*Model1_Oneof7Uint64)(nil),
		(*Model1_Oneof7Sint32)(nil),
		(*Model1_Oneof7Sint64)(nil),
		(*Model1_Oneof7Fixed32)(nil),
		(*Model1_Oneof7Fixed64)(nil),
		(*Model1_Oneof7Sfixed32)(nil),
		(*Model1_Oneof7Sfixed64)(nil),
		(*Model1_Oneof7Bool)(nil),
		(*Model1_Oneof7String)(nil),
		(*Model1_Oneof7Bytes)(nil),
		(*Model1_Oneof7EmbedMessage)(nil),
		(*Model1_Oneof7StandMessage)(nil),
		(*Model1_Oneof7ExternalMessage)(nil),
		(*Model1_Oneof7EmbedEnum)(nil),
		(*Model1_Oneof7StandEnum)(nil),
		(*Model1_Oneof7ExternalEnum)(nil),
		(*Model1_Oneof8Double)(nil),
		(*Model1_Oneof8Float)(nil),
		(*Model1_Oneof8Int32)(nil),
		(*Model1_Oneof8Int64)(nil),
		(*Model1_Oneof8Uint32)(nil),
		(*Model1_Oneof8Uint64)(nil),
		(*Model1_Oneof8Sint32)(nil),
		(*Model1_Oneof8Sint64)(nil),
		(*Model1_Oneof8Fixed32)(nil),
		(*Model1_Oneof8Fixed64)(nil),
		(*Model1_Oneof8Sfixed32)(nil),
		(*Model1_Oneof8Sfixed64)(nil),
		(*Model1_Oneof8Bool)(nil),
		(*Model1_Oneof8String)(nil),
		(*Model1_Oneof8Bytes)(nil),
		(*Model1_Oneof8EmbedMessage)(nil),
		(*Model1_Oneof8StandMessage)(nil),
		(*Model1_Oneof8ExternalMessage)(nil),
		(*Model1_Oneof8EmbedEnum)(nil),
		(*Model1_Oneof8StandEnum)(nil),
		(*Model1_Oneof8ExternalEnum)(nil),
		(*Model1_Oneof9Double)(nil),
		(*Model1_Oneof9Float)(nil),
		(*Model1_Oneof9Int32)(nil),
		(*Model1_Oneof9Int64)(nil),
		(*Model1_Oneof9Uint32)(nil),
		(*Model1_Oneof9Uint64)(nil),
		(*Model1_Oneof9Sint32)(nil),
		(*Model1_Oneof9Sint64)(nil),
		(*Model1_Oneof9Fixed32)(nil),
		(*Model1_Oneof9Fixed64)(nil),
		(*Model1_Oneof9Sfixed32)(nil),
		(*Model1_Oneof9Sfixed64)(nil),
		(*Model1_Oneof9Bool)(nil),
		(*Model1_Oneof9String)(nil),
		(*Model1_Oneof9Bytes)(nil),
		(*Model1_Oneof9EmbedMessage)(nil),
		(*Model1_Oneof9StandMessage)(nil),
		(*Model1_Oneof9ExternalMessage)(nil),
		(*Model1_Oneof9EmbedEnum)(nil),
		(*Model1_Oneof9StandEnum)(nil),
		(*Model1_Oneof9ExternalEnum)(nil),
		(*Model1_Oneof10Double)(nil),
		(*Model1_Oneof10Float)(nil),
		(*Model1_Oneof10Int32)(nil),
		(*Model1_Oneof10Int64)(nil),
		(*Model1_Oneof10Uint32)(nil),
		(*Model1_Oneof10Uint64)(nil),
		(*Model1_Oneof10Sint32)(nil),
		(*Model1_Oneof10Sint64)(nil),
		(*Model1_Oneof10Fixed32)(nil),
		(*Model1_Oneof10Fixed64)(nil),
		(*Model1_Oneof10Sfixed32)(nil),
		(*Model1_Oneof10Sfixed64)(nil),
		(*Model1_Oneof10Bool)(nil),
		(*Model1_Oneof10String)(nil),
		(*Model1_Oneof10Bytes)(nil),
		(*Model1_Oneof10EmbedMessage)(nil),
		(*Model1_Oneof10StandMessage)(nil),
		(*Model1_Oneof10ExternalMessage)(nil),
		(*Model1_Oneof10EmbedEnum)(nil),
		(*Model1_Oneof10StandEnum)(nil),
		(*Model1_Oneof10ExternalEnum)(nil),
		(*Model1_Oneof11Double)(nil),
		(*Model1_Oneof11Float)(nil),
		(*Model1_Oneof11Int32)(nil),
		(*Model1_Oneof11Int64)(nil),
		(*Model1_Oneof11Uint32)(nil),
		(*Model1_Oneof11Uint64)(nil),
		(*Model1_Oneof11Sint32)(nil),
		(*Model1_Oneof11Sint64)(nil),
		(*Model1_Oneof11Fixed32)(nil),
		(*Model1_Oneof11Fixed64)(nil),
		(*Model1_Oneof11Sfixed32)(nil),
		(*Model1_Oneof11Sfixed64)(nil),
		(*Model1_Oneof11Bool)(nil),
		(*Model1_Oneof11String)(nil),
		(*Model1_Oneof11Bytes)(nil),
		(*Model1_Oneof11EmbedMessage)(nil),
		(*Model1_Oneof11StandMessage)(nil),
		(*Model1_Oneof11ExternalMessage)(nil),
		(*Model1_Oneof11EmbedEnum)(nil),
		(*Model1_Oneof11StandEnum)(nil),
		(*Model1_Oneof11ExternalEnum)(nil),
		(*Model1_Oneof12Double)(nil),
		(*Model1_Oneof12Float)(nil),
		(*Model1_Oneof12Int32)(nil),
		(*Model1_Oneof12Int64)(nil),
		(*Model1_Oneof12Uint32)(nil),
		(*Model1_Oneof12Uint64)(nil),
		(*Model1_Oneof12Sint32)(nil),
		(*Model1_Oneof12Sint64)(nil),
		(*Model1_Oneof12Fixed32)(nil),
		(*Model1_Oneof12Fixed64)(nil),
		(*Model1_Oneof12Sfixed32)(nil),
		(*Model1_Oneof12Sfixed64)(nil),
		(*Model1_Oneof12Bool)(nil),
		(*Model1_Oneof12String)(nil),
		(*Model1_Oneof12Bytes)(nil),
		(*Model1_Oneof12EmbedMessage)(nil),
		(*Model1_Oneof12StandMessage)(nil),
		(*Model1_Oneof12ExternalMessage)(nil),
		(*Model1_Oneof12EmbedEnum)(nil),
		(*Model1_Oneof12StandEnum)(nil),
		(*Model1_Oneof12ExternalEnum)(nil),
		(*Model1_Oneof13Double)(nil),
		(*Model1_Oneof13Float)(nil),
		(*Model1_Oneof13Int32)(nil),
		(*Model1_Oneof13Int64)(nil),
		(*Model1_Oneof13Uint32)(nil),
		(*Model1_Oneof13Uint64)(nil),
		(*Model1_Oneof13Sint32)(nil),
		(*Model1_Oneof13Sint64)(nil),
		(*Model1_Oneof13Fixed32)(nil),
		(*Model1_Oneof13Fixed64)(nil),
		(*Model1_Oneof13Sfixed32)(nil),
		(*Model1_Oneof13Sfixed64)(nil),
		(*Model1_Oneof13Bool)(nil),
		(*Model1_Oneof13String)(nil),
		(*Model1_Oneof13Bytes)(nil),
		(*Model1_Oneof13EmbedMessage)(nil),
		(*Model1_Oneof13StandMessage)(nil),
		(*Model1_Oneof13ExternalMessage)(nil),
		(*Model1_Oneof13EmbedEnum)(nil),
		(*Model1_Oneof13StandEnum)(nil),
		(*Model1_Oneof13ExternalEnum)(nil),
		(*Model1_Oneof14Double)(nil),
		(*Model1_Oneof14Float)(nil),
		(*Model1_Oneof14Int32)(nil),
		(*Model1_Oneof14Int64)(nil),
		(*Model1_Oneof14Uint32)(nil),
		(*Model1_Oneof14Uint64)(nil),
		(*Model1_Oneof14Sint32)(nil),
		(*Model1_Oneof14Sint64)(nil),
		(*Model1_Oneof14Fixed32)(nil),
		(*Model1_Oneof14Fixed64)(nil),
		(*Model1_Oneof14Sfixed32)(nil),
		(*Model1_Oneof14Sfixed64)(nil),
		(*Model1_Oneof14Bool)(nil),
		(*Model1_Oneof14String)(nil),
		(*Model1_Oneof14Bytes)(nil),
		(*Model1_Oneof14EmbedMessage)(nil),
		(*Model1_Oneof14StandMessage)(nil),
		(*Model1_Oneof14ExternalMessage)(nil),
		(*Model1_Oneof14EmbedEnum)(nil),
		(*Model1_Oneof14StandEnum)(nil),
		(*Model1_Oneof14ExternalEnum)(nil),
		(*Model1_Oneof15Double)(nil),
		(*Model1_Oneof15Float)(nil),
		(*Model1_Oneof15Int32)(nil),
		(*Model1_Oneof15Int64)(nil),
		(*Model1_Oneof15Uint32)(nil),
		(*Model1_Oneof15Uint64)(nil),
		(*Model1_Oneof15Sint32)(nil),
		(*Model1_Oneof15Sint64)(nil),
		(*Model1_Oneof15Fixed32)(nil),
		(*Model1_Oneof15Fixed64)(nil),
		(*Model1_Oneof15Sfixed32)(nil),
		(*Model1_Oneof15Sfixed64)(nil),
		(*Model1_Oneof15Bool)(nil),
		(*Model1_Oneof15String)(nil),
		(*Model1_Oneof15Bytes)(nil),
		(*Model1_Oneof15EmbedMessage)(nil),
		(*Model1_Oneof15StandMessage)(nil),
		(*Model1_Oneof15ExternalMessage)(nil),
		(*Model1_Oneof15EmbedEnum)(nil),
		(*Model1_Oneof15StandEnum)(nil),
		(*Model1_Oneof15ExternalEnum)(nil),
		(*Model1_Oneof16Double)(nil),
		(*Model1_Oneof16Float)(nil),
		(*Model1_Oneof16Int32)(nil),
		(*Model1_Oneof16Int64)(nil),
		(*Model1_Oneof16Uint32)(nil),
		(*Model1_Oneof16Uint64)(nil),
		(*Model1_Oneof16Sint32)(nil),
		(*Model1_Oneof16Sint64)(nil),
		(*Model1_Oneof16Fixed32)(nil),
		(*Model1_Oneof16Fixed64)(nil),
		(*Model1_Oneof16Sfixed32)(nil),
		(*Model1_Oneof16Sfixed64)(nil),
		(*Model1_Oneof16Bool)(nil),
		(*Model1_Oneof16String)(nil),
		(*Model1_Oneof16Bytes)(nil),
		(*Model1_Oneof16EmbedMessage)(nil),
		(*Model1_Oneof16StandMessage)(nil),
		(*Model1_Oneof16ExternalMessage)(nil),
		(*Model1_Oneof16EmbedEnum)(nil),
		(*Model1_Oneof16StandEnum)(nil),
		(*Model1_Oneof16ExternalEnum)(nil),
		(*Model1_Oneof17Double)(nil),
		(*Model1_Oneof17Float)(nil),
		(*Model1_Oneof17Int32)(nil),
		(*Model1_Oneof17Int64)(nil),
		(*Model1_Oneof17Uint32)(nil),
		(*Model1_Oneof17Uint64)(nil),
		(*Model1_Oneof17Sint32)(nil),
		(*Model1_Oneof17Sint64)(nil),
		(*Model1_Oneof17Fixed32)(nil),
		(*Model1_Oneof17Fixed64)(nil),
		(*Model1_Oneof17Sfixed32)(nil),
		(*Model1_Oneof17Sfixed64)(nil),
		(*Model1_Oneof17Bool)(nil),
		(*Model1_Oneof17String)(nil),
		(*Model1_Oneof17Bytes)(nil),
		(*Model1_Oneof17EmbedMessage)(nil),
		(*Model1_Oneof17StandMessage)(nil),
		(*Model1_Oneof17ExternalMessage)(nil),
		(*Model1_Oneof17EmbedEnum)(nil),
		(*Model1_Oneof17StandEnum)(nil),
		(*Model1_Oneof17ExternalEnum)(nil),
		(*Model1_Oneof18Double)(nil),
		(*Model1_Oneof18Float)(nil),
		(*Model1_Oneof18Int32)(nil),
		(*Model1_Oneof18Int64)(nil),
		(*Model1_Oneof18Uint32)(nil),
		(*Model1_Oneof18Uint64)(nil),
		(*Model1_Oneof18Sint32)(nil),
		(*Model1_Oneof18Sint64)(nil),
		(*Model1_Oneof18Fixed32)(nil),
		(*Model1_Oneof18Fixed64)(nil),
		(*Model1_Oneof18Sfixed32)(nil),
		(*Model1_Oneof18Sfixed64)(nil),
		(*Model1_Oneof18Bool)(nil),
		(*Model1_Oneof18String)(nil),
		(*Model1_Oneof18Bytes)(nil),
		(*Model1_Oneof18EmbedMessage)(nil),
		(*Model1_Oneof18StandMessage)(nil),
		(*Model1_Oneof18ExternalMessage)(nil),
		(*Model1_Oneof18EmbedEnum)(nil),
		(*Model1_Oneof18StandEnum)(nil),
		(*Model1_Oneof18ExternalEnum)(nil),
		(*Model1_Oneof19Double)(nil),
		(*Model1_Oneof19Float)(nil),
		(*Model1_Oneof19Int32)(nil),
		(*Model1_Oneof19Int64)(nil),
		(*Model1_Oneof19Uint32)(nil),
		(*Model1_Oneof19Uint64)(nil),
		(*Model1_Oneof19Sint32)(nil),
		(*Model1_Oneof19Sint64)(nil),
		(*Model1_Oneof19Fixed32)(nil),
		(*Model1_Oneof19Fixed64)(nil),
		(*Model1_Oneof19Sfixed32)(nil),
		(*Model1_Oneof19Sfixed64)(nil),
		(*Model1_Oneof19Bool)(nil),
		(*Model1_Oneof19String)(nil),
		(*Model1_Oneof19Bytes)(nil),
		(*Model1_Oneof19EmbedMessage)(nil),
		(*Model1_Oneof19StandMessage)(nil),
		(*Model1_Oneof19ExternalMessage)(nil),
		(*Model1_Oneof19EmbedEnum)(nil),
		(*Model1_Oneof19StandEnum)(nil),
		(*Model1_Oneof19ExternalEnum)(nil),
		(*Model1_Oneof20Double)(nil),
		(*Model1_Oneof20Float)(nil),
		(*Model1_Oneof20Int32)(nil),
		(*Model1_Oneof20Int64)(nil),
		(*Model1_Oneof20Uint32)(nil),
		(*Model1_Oneof20Uint64)(nil),
		(*Model1_Oneof20Sint32)(nil),
		(*Model1_Oneof20Sint64)(nil),
		(*Model1_Oneof20Fixed32)(nil),
		(*Model1_Oneof20Fixed64)(nil),
		(*Model1_Oneof20Sfixed32)(nil),
		(*Model1_Oneof20Sfixed64)(nil),
		(*Model1_Oneof20Bool)(nil),
		(*Model1_Oneof20String)(nil),
		(*Model1_Oneof20Bytes)(nil),
		(*Model1_Oneof20EmbedMessage)(nil),
		(*Model1_Oneof20StandMessage)(nil),
		(*Model1_Oneof20ExternalMessage)(nil),
		(*Model1_Oneof20EmbedEnum)(nil),
		(*Model1_Oneof20StandEnum)(nil),
		(*Model1_Oneof20ExternalEnum)(nil),
		(*Model1_Oneof21Double)(nil),
		(*Model1_Oneof21Float)(nil),
		(*Model1_Oneof21Int32)(nil),
		(*Model1_Oneof21Int64)(nil),
		(*Model1_Oneof21Uint32)(nil),
		(*Model1_Oneof21Uint64)(nil),
		(*Model1_Oneof21Sint32)(nil),
		(*Model1_Oneof21Sint64)(nil),
		(*Model1_Oneof21Fixed32)(nil),
		(*Model1_Oneof21Fixed64)(nil),
		(*Model1_Oneof21Sfixed32)(nil),
		(*Model1_Oneof21Sfixed64)(nil),
		(*Model1_Oneof21Bool)(nil),
		(*Model1_Oneof21String)(nil),
		(*Model1_Oneof21Bytes)(nil),
		(*Model1_Oneof21EmbedMessage)(nil),
		(*Model1_Oneof21StandMessage)(nil),
		(*Model1_Oneof21ExternalMessage)(nil),
		(*Model1_Oneof21EmbedEnum)(nil),
		(*Model1_Oneof21StandEnum)(nil),
		(*Model1_Oneof21ExternalEnum)(nil),
		(*Model1_Oneof22Double)(nil),
		(*Model1_Oneof22Float)(nil),
		(*Model1_Oneof22Int32)(nil),
		(*Model1_Oneof22Int64)(nil),
		(*Model1_Oneof22Uint32)(nil),
		(*Model1_Oneof22Uint64)(nil),
		(*Model1_Oneof22Sint32)(nil),
		(*Model1_Oneof22Sint64)(nil),
		(*Model1_Oneof22Fixed32)(nil),
		(*Model1_Oneof22Fixed64)(nil),
		(*Model1_Oneof22Sfixed32)(nil),
		(*Model1_Oneof22Sfixed64)(nil),
		(*Model1_Oneof22Bool)(nil),
		(*Model1_Oneof22String)(nil),
		(*Model1_Oneof22Bytes)(nil),
		(*Model1_Oneof22EmbedMessage)(nil),
		(*Model1_Oneof22StandMessage)(nil),
		(*Model1_Oneof22ExternalMessage)(nil),
		(*Model1_Oneof22EmbedEnum)(nil),
		(*Model1_Oneof22StandEnum)(nil),
		(*Model1_Oneof22ExternalEnum)(nil),
		(*Model1_Oneof23Double)(nil),
		(*Model1_Oneof23Float)(nil),
		(*Model1_Oneof23Int32)(nil),
		(*Model1_Oneof23Int64)(nil),
		(*Model1_Oneof23Uint32)(nil),
		(*Model1_Oneof23Uint64)(nil),
		(*Model1_Oneof23Sint32)(nil),
		(*Model1_Oneof23Sint64)(nil),
		(*Model1_Oneof23Fixed32)(nil),
		(*Model1_Oneof23Fixed64)(nil),
		(*Model1_Oneof23Sfixed32)(nil),
		(*Model1_Oneof23Sfixed64)(nil),
		(*Model1_Oneof23Bool)(nil),
		(*Model1_Oneof23String)(nil),
		(*Model1_Oneof23Bytes)(nil),
		(*Model1_Oneof23EmbedMessage)(nil),
		(*Model1_Oneof23StandMessage)(nil),
		(*Model1_Oneof23ExternalMessage)(nil),
		(*Model1_Oneof23EmbedEnum)(nil),
		(*Model1_Oneof23StandEnum)(nil),
		(*Model1_Oneof23ExternalEnum)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*NameStyleTextName_Integer1)(nil),
		(*NameStyleTextName_Float1)(nil),
		(*NameStyleTextName_Integer2)(nil),
		(*NameStyleTextName_Float2)(nil),
		(*NameStyleTextName_Integer3)(nil),
		(*NameStyleTextName_Float3)(nil),
		(*NameStyleTextName_Integer4)(nil),
		(*NameStyleTextName_Float4)(nil),
		(*NameStyleTextName_Integer5)(nil),
		(*NameStyleTextName_Float5)(nil),
		(*NameStyleTextName_Integer6)(nil),
		(*NameStyleTextName_Float6)(nil),
		(*NameStyleTextName_Integer7)(nil),
		(*NameStyleTextName_Float7)(nil),
		(*NameStyleTextName_Integer8)(nil),
		(*NameStyleTextName_Float8)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*NameStyleGoName_Integer1)(nil),
		(*NameStyleGoName_Float1)(nil),
		(*NameStyleGoName_Integer2)(nil),
		(*NameStyleGoName_Float2)(nil),
		(*NameStyleGoName_Integer3)(nil),
		(*NameStyleGoName_Float3)(nil),
		(*NameStyleGoName_Integer4)(nil),
		(*NameStyleGoName_Float4)(nil),
		(*NameStyleGoName_Integer5)(nil),
		(*NameStyleGoName_Float5)(nil),
		(*NameStyleGoName_Integer6)(nil),
		(*NameStyleGoName_Float6)(nil),
		(*NameStyleGoName_Integer7)(nil),
		(*NameStyleGoName_Float7)(nil),
		(*NameStyleGoName_Integer8)(nil),
		(*NameStyleGoName_Float8)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*NameStyleJSONName_Integer1)(nil),
		(*NameStyleJSONName_Float1)(nil),
		(*NameStyleJSONName_Integer2)(nil),
		(*NameStyleJSONName_Float2)(nil),
		(*NameStyleJSONName_Integer3)(nil),
		(*NameStyleJSONName_Float3)(nil),
		(*NameStyleJSONName_Integer4)(nil),
		(*NameStyleJSONName_Float4)(nil),
		(*NameStyleJSONName_Integer5)(nil),
		(*NameStyleJSONName_Float5)(nil),
		(*NameStyleJSONName_Integer6)(nil),
		(*NameStyleJSONName_Float6)(nil),
		(*NameStyleJSONName_Integer7)(nil),
		(*NameStyleJSONName_Float7)(nil),
		(*NameStyleJSONName_Integer8)(nil),
		(*NameStyleJSONName_Float8)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*FieldCustomName_One1TString)(nil),
		(*FieldCustomName_One1TInt32)(nil),
		(*FieldCustomName_One1TInt64)(nil),
		(*FieldCustomName_One1TUint32)(nil),
		(*FieldCustomName_One1TUint64)(nil),
		(*FieldCustomName_One1TSint32)(nil),
		(*FieldCustomName_One1TSint64)(nil),
		(*FieldCustomName_One1TSfixed32)(nil),
		(*FieldCustomName_One1TSfixed64)(nil),
		(*FieldCustomName_One1TFixed32)(nil),
		(*FieldCustomName_One1TFixed64)(nil),
		(*FieldCustomName_One1TFloat)(nil),
		(*FieldCustomName_One1TDouble)(nil),
		(*FieldCustomName_One1TBool)(nil),
		(*FieldCustomName_One1TEnum1)(nil),
		(*FieldCustomName_One1TEnum2)(nil),
		(*FieldCustomName_One1TBytes)(nil),
		(*FieldCustomName_One1TAliases)(nil),
		(*FieldCustomName_One1TConfig)(nil),
		(*FieldCustomName_One2TString)(nil),
		(*FieldCustomName_One2TInt32)(nil),
		(*FieldCustomName_One2TInt64)(nil),
		(*FieldCustomName_One2TUint32)(nil),
		(*FieldCustomName_One2TUint64)(nil),
		(*FieldCustomName_One2TSint32)(nil),
		(*FieldCustomName_One2TSint64)(nil),
		(*FieldCustomName_One2TSfixed32)(nil),
		(*FieldCustomName_One2TSfixed64)(nil),
		(*FieldCustomName_One2TFixed32)(nil),
		(*FieldCustomName_One2TFixed64)(nil),
		(*FieldCustomName_One2TFloat)(nil),
		(*FieldCustomName_One2TDouble)(nil),
		(*FieldCustomName_One2TBool)(nil),
		(*FieldCustomName_One2TEnum1)(nil),
		(*FieldCustomName_One2TEnum2)(nil),
		(*FieldCustomName_One2TBytes)(nil),
		(*FieldCustomName_One2TAliases)(nil),
		(*FieldCustomName_One2TConfig)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*OneofHide1_One1String1)(nil),
		(*OneofHide1_One1String2)(nil),
		(*OneofHide1_One2String1)(nil),
		(*OneofHide1_One2String2)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*OneofHide2_One1String1)(nil),
		(*OneofHide2_One1String2)(nil),
		(*OneofHide2_One2String1)(nil),
		(*OneofHide2_One2String2)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*OneofHide3_One1String1)(nil),
		(*OneofHide3_One1String2)(nil),
		(*OneofHide3_One2String1)(nil),
		(*OneofHide3_One2String2)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*OneofHide4_One1String1)(nil),
		(*OneofHide4_One1String2)(nil),
		(*OneofHide4_One2String1)(nil),
		(*OneofHide4_One2String2)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*FieldOmitempty1_One1Int32)(nil),
		(*FieldOmitempty1_One2Int64)(nil),
		(*FieldOmitempty1_One3Uint32)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*FieldOmitempty2_One1Int32)(nil),
		(*FieldOmitempty2_One2Int64)(nil),
		(*FieldOmitempty2_One3Uint32)(nil),
		(*FieldOmitempty2_One4Uint64)(nil),
		(*FieldOmitempty2_One5String1)(nil),
		(*FieldOmitempty2_One6Sint32)(nil),
		(*FieldOmitempty2_One6Sint64)(nil),
		(*FieldOmitempty2_One7Bool1)(nil),
		(*FieldOmitempty2_One7Bool2)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*FieldOmitempty3_One1Int32)(nil),
		(*FieldOmitempty3_One2Int64)(nil),
		(*FieldOmitempty3_One3Uint32)(nil),
		(*FieldOmitempty3_One4Uint64)(nil),
		(*FieldOmitempty3_One5String1)(nil),
		(*FieldOmitempty3_One5String2)(nil),
		(*FieldOmitempty3_One6Sint32)(nil),
		(*FieldOmitempty3_One6Sint64)(nil),
		(*FieldOmitempty3_One7Bool1)(nil),
		(*FieldOmitempty3_One7Bool2)(nil),
		(*FieldOmitempty3_One8Bool1)(nil),
		(*FieldOmitempty3_One8Bool2)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*FieldOmitempty4_One1Int32)(nil),
		(*FieldOmitempty4_One2Int64)(nil),
		(*FieldOmitempty4_One3Uint32)(nil),
		(*FieldOmitempty4_One4Uint64)(nil),
		(*FieldOmitempty4_One5String1)(nil),
		(*FieldOmitempty4_One6Sint32)(nil),
		(*FieldOmitempty4_One6Sint64)(nil),
		(*FieldOmitempty4_One7Bool1)(nil),
		(*FieldOmitempty4_One7Bool2)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*FieldIgnore1_One1Int32)(nil),
		(*FieldIgnore1_One2Int64)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*FieldIgnore2_Integer1)(nil),
		(*FieldIgnore2_Integer2)(nil),
		(*FieldIgnore2_Integer3)(nil),
		(*FieldIgnore2_Integer4)(nil),
		(*FieldIgnore2_Integer5)(nil),
		(*FieldIgnore2_Float5)(nil),
		(*FieldIgnore2_Integer6)(nil),
		(*FieldIgnore2_Float6)(nil),
		(*FieldIgnore2_Integer7)(nil),
		(*FieldIgnore2_Float7)(nil),
		(*FieldIgnore2_Integer8)(nil),
		(*FieldIgnore2_Float8)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*FieldDisallowUnknown_TString1)(nil),
		(*FieldDisallowUnknown_TString2)(nil),
		(*FieldDisallowUnknown_TInt1)(nil),
		(*FieldDisallowUnknown_TInt2)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*FieldAllowUnknown_TString1)(nil),
		(*FieldAllowUnknown_TString2)(nil),
		(*FieldAllowUnknown_TInt1)(nil),
		(*FieldAllowUnknown_TInt2)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*UnmarshalOneofNotHide_TString)(nil),
		(*UnmarshalOneofNotHide_TInt32)(nil),
		(*UnmarshalOneofNotHide_TInt64)(nil),
		(*UnmarshalOneofNotHide_TUint32)(nil),
		(*UnmarshalOneofNotHide_TUint64)(nil),
		(*UnmarshalOneofNotHide_TSint32)(nil),
		(*UnmarshalOneofNotHide_TSint64)(nil),
		(*UnmarshalOneofNotHide_TSfixed32)(nil),
		(*UnmarshalOneofNotHide_TSfixed64)(nil),
		(*UnmarshalOneofNotHide_TFixed32)(nil),
		(*UnmarshalOneofNotHide_TFixed64)(nil),
		(*UnmarshalOneofNotHide_TFloat)(nil),
		(*UnmarshalOneofNotHide_TDouble)(nil),
		(*UnmarshalOneofNotHide_TBool)(nil),
		(*UnmarshalOneofNotHide_TEnum1)(nil),
		(*UnmarshalOneofNotHide_TEnum2)(nil),
		(*UnmarshalOneofNotHide_TBytes)(nil),
		(*UnmarshalOneofNotHide_TAliases)(nil),
		(*UnmarshalOneofNotHide_TConfig)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*UnmarshalOneofHide_TString)(nil),
		(*UnmarshalOneofHide_TInt32)(nil),
		(*UnmarshalOneofHide_TInt64)(nil),
		(*UnmarshalOneofHide_TUint32)(nil),
		(*UnmarshalOneofHide_TUint64)(nil),
		(*UnmarshalOneofHide_TSint32)(nil),
		(*UnmarshalOneofHide_TSint64)(nil),
		(*UnmarshalOneofHide_TSfixed32)(nil),
		(*UnmarshalOneofHide_TSfixed64)(nil),
		(*UnmarshalOneofHide_TFixed32)(nil),
		(*UnmarshalOneofHide_TFixed64)(nil),
		(*UnmarshalOneofHide_TFloat)(nil),
		(*UnmarshalOneofHide_TDouble)(nil),
		(*UnmarshalOneofHide_TBool)(nil),
		(*UnmarshalOneofHide_TEnum1)(nil),
		(*UnmarshalOneofHide_TEnum2)(nil),
		(*UnmarshalOneofHide_TBytes)(nil),
		(*UnmarshalOneofHide_TAliases)(nil),
		(*UnmarshalOneofHide_TConfig)(nil),
	}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[33].OneofWrappers = []interface{}{}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[216].OneofWrappers = []interface{}{}
	file_xgo_tests_gojsontest_gojson_test_proto_msgTypes[218].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xgo_tests_gojsontest_gojson_test_proto_rawDesc,
			NumEnums:      17,
			NumMessages:   219,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xgo_tests_gojsontest_gojson_test_proto_goTypes,
		DependencyIndexes: file_xgo_tests_gojsontest_gojson_test_proto_depIdxs,
		EnumInfos:         file_xgo_tests_gojsontest_gojson_test_proto_enumTypes,
		MessageInfos:      file_xgo_tests_gojsontest_gojson_test_proto_msgTypes,
	}.Build()
	File_xgo_tests_gojsontest_gojson_test_proto = out.File
	file_xgo_tests_gojsontest_gojson_test_proto_rawDesc = nil
	file_xgo_tests_gojsontest_gojson_test_proto_goTypes = nil
	file_xgo_tests_gojsontest_gojson_test_proto_depIdxs = nil
}
