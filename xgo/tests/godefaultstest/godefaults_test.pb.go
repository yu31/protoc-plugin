// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: xgo/tests/godefaultstest/godefaults_test.proto

package godefaultstest

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbdefaults"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum1 int32

const (
	Enum1_January  Enum1 = 0
	Enum1_February Enum1 = 1
	Enum1_March    Enum1 = 2
	Enum1_April    Enum1 = 3
	Enum1_May      Enum1 = 4
	Enum1_June     Enum1 = 8
)

// Enum value maps for Enum1.
var (
	Enum1_name = map[int32]string{
		0: "January",
		1: "February",
		2: "March",
		3: "April",
		4: "May",
		8: "June",
	}
	Enum1_value = map[string]int32{
		"January":  0,
		"February": 1,
		"March":    2,
		"April":    3,
		"May":      4,
		"June":     8,
	}
)

func (x Enum1) Enum() *Enum1 {
	p := new(Enum1)
	*p = x
	return p
}

func (x Enum1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum1) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_godefaultstest_godefaults_test_proto_enumTypes[0].Descriptor()
}

func (Enum1) Type() protoreflect.EnumType {
	return &file_xgo_tests_godefaultstest_godefaults_test_proto_enumTypes[0]
}

func (x Enum1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum1.Descriptor instead.
func (Enum1) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescGZIP(), []int{0}
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Config) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type LiteralMessage1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1  string  `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3" json:"t_string1,omitempty"`
	TString2  string  `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3" json:"t_string2,omitempty"`
	TString3  string  `protobuf:"bytes,3,opt,name=t_string3,json=tString3,proto3" json:"t_string3,omitempty"`
	TString4  string  `protobuf:"bytes,4,opt,name=t_string4,json=tString4,proto3" json:"t_string4,omitempty"`
	TString5  string  `protobuf:"bytes,5,opt,name=t_string5,json=tString5,proto3" json:"t_string5,omitempty"`
	TString6  string  `protobuf:"bytes,6,opt,name=t_string6,json=tString6,proto3" json:"t_string6,omitempty"`
	TString7  string  `protobuf:"bytes,7,opt,name=t_string7,json=tString7,proto3" json:"t_string7,omitempty"`
	TString8  string  `protobuf:"bytes,8,opt,name=t_string8,json=tString8,proto3" json:"t_string8,omitempty"`
	TString9  string  `protobuf:"bytes,9,opt,name=t_string9,json=tString9,proto3" json:"t_string9,omitempty"`
	TString10 string  `protobuf:"bytes,10,opt,name=t_string10,json=tString10,proto3" json:"t_string10,omitempty"`
	TInt32    int32   `protobuf:"varint,101,opt,name=t_int32,json=tInt32,proto3" json:"t_int32,omitempty"`
	TInt64    int64   `protobuf:"varint,102,opt,name=t_int64,json=tInt64,proto3" json:"t_int64,omitempty"`
	TUint32   uint32  `protobuf:"varint,103,opt,name=t_uint32,json=tUint32,proto3" json:"t_uint32,omitempty"`
	TUint64   uint64  `protobuf:"varint,104,opt,name=t_uint64,json=tUint64,proto3" json:"t_uint64,omitempty"`
	TSint32   int32   `protobuf:"zigzag32,105,opt,name=t_sint32,json=tSint32,proto3" json:"t_sint32,omitempty"`
	TSint64   int64   `protobuf:"zigzag64,106,opt,name=t_sint64,json=tSint64,proto3" json:"t_sint64,omitempty"`
	TSfixed32 int32   `protobuf:"fixed32,107,opt,name=t_sfixed32,json=tSfixed32,proto3" json:"t_sfixed32,omitempty"`
	TSfixed64 int64   `protobuf:"fixed64,108,opt,name=t_sfixed64,json=tSfixed64,proto3" json:"t_sfixed64,omitempty"`
	TFixed32  uint32  `protobuf:"fixed32,109,opt,name=t_fixed32,json=tFixed32,proto3" json:"t_fixed32,omitempty"`
	TFixed64  uint64  `protobuf:"fixed64,110,opt,name=t_fixed64,json=tFixed64,proto3" json:"t_fixed64,omitempty"`
	TFloat    float32 `protobuf:"fixed32,111,opt,name=t_float,json=tFloat,proto3" json:"t_float,omitempty"`
	TDouble   float64 `protobuf:"fixed64,112,opt,name=t_double,json=tDouble,proto3" json:"t_double,omitempty"`
	TBool     bool    `protobuf:"varint,113,opt,name=t_bool,json=tBool,proto3" json:"t_bool,omitempty"`
	TBytes1   []byte  `protobuf:"bytes,114,opt,name=t_bytes1,json=tBytes1,proto3" json:"t_bytes1,omitempty"`
	TBytes2   []byte  `protobuf:"bytes,115,opt,name=t_bytes2,json=tBytes2,proto3" json:"t_bytes2,omitempty"`
	TEnum1    Enum1   `protobuf:"varint,116,opt,name=t_enum1,json=tEnum1,proto3,enum=godefaultstest.Enum1" json:"t_enum1,omitempty"`
	TEnum2    Enum1   `protobuf:"varint,117,opt,name=t_enum2,json=tEnum2,proto3,enum=godefaultstest.Enum1" json:"t_enum2,omitempty"`
	TConfig1  *Config `protobuf:"bytes,118,opt,name=t_config1,json=tConfig1,proto3" json:"t_config1,omitempty"`
	TConfig2  *Config `protobuf:"bytes,119,opt,name=t_config2,json=tConfig2,proto3" json:"t_config2,omitempty"`
}

func (x *LiteralMessage1) Reset() {
	*x = LiteralMessage1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralMessage1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralMessage1) ProtoMessage() {}

func (x *LiteralMessage1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralMessage1.ProtoReflect.Descriptor instead.
func (*LiteralMessage1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescGZIP(), []int{1}
}

func (x *LiteralMessage1) GetTString1() string {
	if x != nil {
		return x.TString1
	}
	return ""
}

func (x *LiteralMessage1) GetTString2() string {
	if x != nil {
		return x.TString2
	}
	return ""
}

func (x *LiteralMessage1) GetTString3() string {
	if x != nil {
		return x.TString3
	}
	return ""
}

func (x *LiteralMessage1) GetTString4() string {
	if x != nil {
		return x.TString4
	}
	return ""
}

func (x *LiteralMessage1) GetTString5() string {
	if x != nil {
		return x.TString5
	}
	return ""
}

func (x *LiteralMessage1) GetTString6() string {
	if x != nil {
		return x.TString6
	}
	return ""
}

func (x *LiteralMessage1) GetTString7() string {
	if x != nil {
		return x.TString7
	}
	return ""
}

func (x *LiteralMessage1) GetTString8() string {
	if x != nil {
		return x.TString8
	}
	return ""
}

func (x *LiteralMessage1) GetTString9() string {
	if x != nil {
		return x.TString9
	}
	return ""
}

func (x *LiteralMessage1) GetTString10() string {
	if x != nil {
		return x.TString10
	}
	return ""
}

func (x *LiteralMessage1) GetTInt32() int32 {
	if x != nil {
		return x.TInt32
	}
	return 0
}

func (x *LiteralMessage1) GetTInt64() int64 {
	if x != nil {
		return x.TInt64
	}
	return 0
}

func (x *LiteralMessage1) GetTUint32() uint32 {
	if x != nil {
		return x.TUint32
	}
	return 0
}

func (x *LiteralMessage1) GetTUint64() uint64 {
	if x != nil {
		return x.TUint64
	}
	return 0
}

func (x *LiteralMessage1) GetTSint32() int32 {
	if x != nil {
		return x.TSint32
	}
	return 0
}

func (x *LiteralMessage1) GetTSint64() int64 {
	if x != nil {
		return x.TSint64
	}
	return 0
}

func (x *LiteralMessage1) GetTSfixed32() int32 {
	if x != nil {
		return x.TSfixed32
	}
	return 0
}

func (x *LiteralMessage1) GetTSfixed64() int64 {
	if x != nil {
		return x.TSfixed64
	}
	return 0
}

func (x *LiteralMessage1) GetTFixed32() uint32 {
	if x != nil {
		return x.TFixed32
	}
	return 0
}

func (x *LiteralMessage1) GetTFixed64() uint64 {
	if x != nil {
		return x.TFixed64
	}
	return 0
}

func (x *LiteralMessage1) GetTFloat() float32 {
	if x != nil {
		return x.TFloat
	}
	return 0
}

func (x *LiteralMessage1) GetTDouble() float64 {
	if x != nil {
		return x.TDouble
	}
	return 0
}

func (x *LiteralMessage1) GetTBool() bool {
	if x != nil {
		return x.TBool
	}
	return false
}

func (x *LiteralMessage1) GetTBytes1() []byte {
	if x != nil {
		return x.TBytes1
	}
	return nil
}

func (x *LiteralMessage1) GetTBytes2() []byte {
	if x != nil {
		return x.TBytes2
	}
	return nil
}

func (x *LiteralMessage1) GetTEnum1() Enum1 {
	if x != nil {
		return x.TEnum1
	}
	return Enum1_January
}

func (x *LiteralMessage1) GetTEnum2() Enum1 {
	if x != nil {
		return x.TEnum2
	}
	return Enum1_January
}

func (x *LiteralMessage1) GetTConfig1() *Config {
	if x != nil {
		return x.TConfig1
	}
	return nil
}

func (x *LiteralMessage1) GetTConfig2() *Config {
	if x != nil {
		return x.TConfig2
	}
	return nil
}

type OptionalMessage1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1  *string  `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3,oneof" json:"t_string1,omitempty"`
	TString2  *string  `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3,oneof" json:"t_string2,omitempty"`
	TString3  *string  `protobuf:"bytes,3,opt,name=t_string3,json=tString3,proto3,oneof" json:"t_string3,omitempty"`
	TString4  *string  `protobuf:"bytes,4,opt,name=t_string4,json=tString4,proto3,oneof" json:"t_string4,omitempty"`
	TString5  *string  `protobuf:"bytes,5,opt,name=t_string5,json=tString5,proto3,oneof" json:"t_string5,omitempty"`
	TString6  *string  `protobuf:"bytes,6,opt,name=t_string6,json=tString6,proto3,oneof" json:"t_string6,omitempty"`
	TString7  *string  `protobuf:"bytes,7,opt,name=t_string7,json=tString7,proto3,oneof" json:"t_string7,omitempty"`
	TString8  *string  `protobuf:"bytes,8,opt,name=t_string8,json=tString8,proto3,oneof" json:"t_string8,omitempty"`
	TString9  *string  `protobuf:"bytes,9,opt,name=t_string9,json=tString9,proto3,oneof" json:"t_string9,omitempty"`
	TString10 *string  `protobuf:"bytes,10,opt,name=t_string10,json=tString10,proto3,oneof" json:"t_string10,omitempty"`
	TInt32    *int32   `protobuf:"varint,101,opt,name=t_int32,json=tInt32,proto3,oneof" json:"t_int32,omitempty"`
	TInt64    *int64   `protobuf:"varint,102,opt,name=t_int64,json=tInt64,proto3,oneof" json:"t_int64,omitempty"`
	TUint32   *uint32  `protobuf:"varint,103,opt,name=t_uint32,json=tUint32,proto3,oneof" json:"t_uint32,omitempty"`
	TUint64   *uint64  `protobuf:"varint,104,opt,name=t_uint64,json=tUint64,proto3,oneof" json:"t_uint64,omitempty"`
	TSint32   *int32   `protobuf:"zigzag32,105,opt,name=t_sint32,json=tSint32,proto3,oneof" json:"t_sint32,omitempty"`
	TSint64   *int64   `protobuf:"zigzag64,106,opt,name=t_sint64,json=tSint64,proto3,oneof" json:"t_sint64,omitempty"`
	TSfixed32 *int32   `protobuf:"fixed32,107,opt,name=t_sfixed32,json=tSfixed32,proto3,oneof" json:"t_sfixed32,omitempty"`
	TSfixed64 *int64   `protobuf:"fixed64,108,opt,name=t_sfixed64,json=tSfixed64,proto3,oneof" json:"t_sfixed64,omitempty"`
	TFixed32  *uint32  `protobuf:"fixed32,109,opt,name=t_fixed32,json=tFixed32,proto3,oneof" json:"t_fixed32,omitempty"`
	TFixed64  *uint64  `protobuf:"fixed64,110,opt,name=t_fixed64,json=tFixed64,proto3,oneof" json:"t_fixed64,omitempty"`
	TFloat    *float32 `protobuf:"fixed32,111,opt,name=t_float,json=tFloat,proto3,oneof" json:"t_float,omitempty"`
	TDouble   *float64 `protobuf:"fixed64,112,opt,name=t_double,json=tDouble,proto3,oneof" json:"t_double,omitempty"`
	TBool     *bool    `protobuf:"varint,113,opt,name=t_bool,json=tBool,proto3,oneof" json:"t_bool,omitempty"`
	TBytes1   []byte   `protobuf:"bytes,114,opt,name=t_bytes1,json=tBytes1,proto3,oneof" json:"t_bytes1,omitempty"`
	TBytes2   []byte   `protobuf:"bytes,115,opt,name=t_bytes2,json=tBytes2,proto3,oneof" json:"t_bytes2,omitempty"`
	TEnum1    *Enum1   `protobuf:"varint,116,opt,name=t_enum1,json=tEnum1,proto3,enum=godefaultstest.Enum1,oneof" json:"t_enum1,omitempty"`
	TEnum2    *Enum1   `protobuf:"varint,117,opt,name=t_enum2,json=tEnum2,proto3,enum=godefaultstest.Enum1,oneof" json:"t_enum2,omitempty"`
	TConfig1  *Config  `protobuf:"bytes,118,opt,name=t_config1,json=tConfig1,proto3,oneof" json:"t_config1,omitempty"`
	TConfig2  *Config  `protobuf:"bytes,119,opt,name=t_config2,json=tConfig2,proto3,oneof" json:"t_config2,omitempty"`
}

func (x *OptionalMessage1) Reset() {
	*x = OptionalMessage1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionalMessage1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalMessage1) ProtoMessage() {}

func (x *OptionalMessage1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalMessage1.ProtoReflect.Descriptor instead.
func (*OptionalMessage1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescGZIP(), []int{2}
}

func (x *OptionalMessage1) GetTString1() string {
	if x != nil && x.TString1 != nil {
		return *x.TString1
	}
	return ""
}

func (x *OptionalMessage1) GetTString2() string {
	if x != nil && x.TString2 != nil {
		return *x.TString2
	}
	return ""
}

func (x *OptionalMessage1) GetTString3() string {
	if x != nil && x.TString3 != nil {
		return *x.TString3
	}
	return ""
}

func (x *OptionalMessage1) GetTString4() string {
	if x != nil && x.TString4 != nil {
		return *x.TString4
	}
	return ""
}

func (x *OptionalMessage1) GetTString5() string {
	if x != nil && x.TString5 != nil {
		return *x.TString5
	}
	return ""
}

func (x *OptionalMessage1) GetTString6() string {
	if x != nil && x.TString6 != nil {
		return *x.TString6
	}
	return ""
}

func (x *OptionalMessage1) GetTString7() string {
	if x != nil && x.TString7 != nil {
		return *x.TString7
	}
	return ""
}

func (x *OptionalMessage1) GetTString8() string {
	if x != nil && x.TString8 != nil {
		return *x.TString8
	}
	return ""
}

func (x *OptionalMessage1) GetTString9() string {
	if x != nil && x.TString9 != nil {
		return *x.TString9
	}
	return ""
}

func (x *OptionalMessage1) GetTString10() string {
	if x != nil && x.TString10 != nil {
		return *x.TString10
	}
	return ""
}

func (x *OptionalMessage1) GetTInt32() int32 {
	if x != nil && x.TInt32 != nil {
		return *x.TInt32
	}
	return 0
}

func (x *OptionalMessage1) GetTInt64() int64 {
	if x != nil && x.TInt64 != nil {
		return *x.TInt64
	}
	return 0
}

func (x *OptionalMessage1) GetTUint32() uint32 {
	if x != nil && x.TUint32 != nil {
		return *x.TUint32
	}
	return 0
}

func (x *OptionalMessage1) GetTUint64() uint64 {
	if x != nil && x.TUint64 != nil {
		return *x.TUint64
	}
	return 0
}

func (x *OptionalMessage1) GetTSint32() int32 {
	if x != nil && x.TSint32 != nil {
		return *x.TSint32
	}
	return 0
}

func (x *OptionalMessage1) GetTSint64() int64 {
	if x != nil && x.TSint64 != nil {
		return *x.TSint64
	}
	return 0
}

func (x *OptionalMessage1) GetTSfixed32() int32 {
	if x != nil && x.TSfixed32 != nil {
		return *x.TSfixed32
	}
	return 0
}

func (x *OptionalMessage1) GetTSfixed64() int64 {
	if x != nil && x.TSfixed64 != nil {
		return *x.TSfixed64
	}
	return 0
}

func (x *OptionalMessage1) GetTFixed32() uint32 {
	if x != nil && x.TFixed32 != nil {
		return *x.TFixed32
	}
	return 0
}

func (x *OptionalMessage1) GetTFixed64() uint64 {
	if x != nil && x.TFixed64 != nil {
		return *x.TFixed64
	}
	return 0
}

func (x *OptionalMessage1) GetTFloat() float32 {
	if x != nil && x.TFloat != nil {
		return *x.TFloat
	}
	return 0
}

func (x *OptionalMessage1) GetTDouble() float64 {
	if x != nil && x.TDouble != nil {
		return *x.TDouble
	}
	return 0
}

func (x *OptionalMessage1) GetTBool() bool {
	if x != nil && x.TBool != nil {
		return *x.TBool
	}
	return false
}

func (x *OptionalMessage1) GetTBytes1() []byte {
	if x != nil {
		return x.TBytes1
	}
	return nil
}

func (x *OptionalMessage1) GetTBytes2() []byte {
	if x != nil {
		return x.TBytes2
	}
	return nil
}

func (x *OptionalMessage1) GetTEnum1() Enum1 {
	if x != nil && x.TEnum1 != nil {
		return *x.TEnum1
	}
	return Enum1_January
}

func (x *OptionalMessage1) GetTEnum2() Enum1 {
	if x != nil && x.TEnum2 != nil {
		return *x.TEnum2
	}
	return Enum1_January
}

func (x *OptionalMessage1) GetTConfig1() *Config {
	if x != nil {
		return x.TConfig1
	}
	return nil
}

func (x *OptionalMessage1) GetTConfig2() *Config {
	if x != nil {
		return x.TConfig2
	}
	return nil
}

type ListMessage1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrayString1  []string  `protobuf:"bytes,1,rep,name=array_string1,json=arrayString1,proto3" json:"array_string1,omitempty"`
	ArrayString2  []string  `protobuf:"bytes,2,rep,name=array_string2,json=arrayString2,proto3" json:"array_string2,omitempty"`
	ArrayString3  []string  `protobuf:"bytes,3,rep,name=array_string3,json=arrayString3,proto3" json:"array_string3,omitempty"`
	ArrayDouble   []float64 `protobuf:"fixed64,101,rep,packed,name=array_double,json=arrayDouble,proto3" json:"array_double,omitempty"`
	ArrayFloat    []float32 `protobuf:"fixed32,102,rep,packed,name=array_float,json=arrayFloat,proto3" json:"array_float,omitempty"`
	ArrayInt32    []int32   `protobuf:"varint,103,rep,packed,name=array_int32,json=arrayInt32,proto3" json:"array_int32,omitempty"`
	ArrayInt64    []int64   `protobuf:"varint,104,rep,packed,name=array_int64,json=arrayInt64,proto3" json:"array_int64,omitempty"`
	ArrayUint32   []uint32  `protobuf:"varint,105,rep,packed,name=array_uint32,json=arrayUint32,proto3" json:"array_uint32,omitempty"`
	ArrayUint64   []uint64  `protobuf:"varint,106,rep,packed,name=array_uint64,json=arrayUint64,proto3" json:"array_uint64,omitempty"`
	ArraySint32   []int32   `protobuf:"zigzag32,107,rep,packed,name=array_sint32,json=arraySint32,proto3" json:"array_sint32,omitempty"`
	ArraySint64   []int64   `protobuf:"zigzag64,108,rep,packed,name=array_sint64,json=arraySint64,proto3" json:"array_sint64,omitempty"`
	ArraySfixed32 []int32   `protobuf:"fixed32,109,rep,packed,name=array_sfixed32,json=arraySfixed32,proto3" json:"array_sfixed32,omitempty"`
	ArraySfixed64 []int64   `protobuf:"fixed64,110,rep,packed,name=array_sfixed64,json=arraySfixed64,proto3" json:"array_sfixed64,omitempty"`
	ArrayFixed32  []uint32  `protobuf:"fixed32,111,rep,packed,name=array_fixed32,json=arrayFixed32,proto3" json:"array_fixed32,omitempty"`
	ArrayFixed64  []uint64  `protobuf:"fixed64,112,rep,packed,name=array_fixed64,json=arrayFixed64,proto3" json:"array_fixed64,omitempty"`
	ArrayBool     []bool    `protobuf:"varint,113,rep,packed,name=array_bool,json=arrayBool,proto3" json:"array_bool,omitempty"`
	ArrayBytes1   [][]byte  `protobuf:"bytes,114,rep,name=array_bytes1,json=arrayBytes1,proto3" json:"array_bytes1,omitempty"`
	ArrayBytes2   [][]byte  `protobuf:"bytes,115,rep,name=array_bytes2,json=arrayBytes2,proto3" json:"array_bytes2,omitempty"`
	ArrayEnum1    []Enum1   `protobuf:"varint,116,rep,packed,name=array_enum1,json=arrayEnum1,proto3,enum=godefaultstest.Enum1" json:"array_enum1,omitempty"`
	ArrayEnum2    []Enum1   `protobuf:"varint,117,rep,packed,name=array_enum2,json=arrayEnum2,proto3,enum=godefaultstest.Enum1" json:"array_enum2,omitempty"`
	ArrayConfig1  []*Config `protobuf:"bytes,118,rep,name=array_config1,json=arrayConfig1,proto3" json:"array_config1,omitempty"`
	ArrayConfig2  []*Config `protobuf:"bytes,119,rep,name=array_config2,json=arrayConfig2,proto3" json:"array_config2,omitempty"`
}

func (x *ListMessage1) Reset() {
	*x = ListMessage1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMessage1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessage1) ProtoMessage() {}

func (x *ListMessage1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessage1.ProtoReflect.Descriptor instead.
func (*ListMessage1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescGZIP(), []int{3}
}

func (x *ListMessage1) GetArrayString1() []string {
	if x != nil {
		return x.ArrayString1
	}
	return nil
}

func (x *ListMessage1) GetArrayString2() []string {
	if x != nil {
		return x.ArrayString2
	}
	return nil
}

func (x *ListMessage1) GetArrayString3() []string {
	if x != nil {
		return x.ArrayString3
	}
	return nil
}

func (x *ListMessage1) GetArrayDouble() []float64 {
	if x != nil {
		return x.ArrayDouble
	}
	return nil
}

func (x *ListMessage1) GetArrayFloat() []float32 {
	if x != nil {
		return x.ArrayFloat
	}
	return nil
}

func (x *ListMessage1) GetArrayInt32() []int32 {
	if x != nil {
		return x.ArrayInt32
	}
	return nil
}

func (x *ListMessage1) GetArrayInt64() []int64 {
	if x != nil {
		return x.ArrayInt64
	}
	return nil
}

func (x *ListMessage1) GetArrayUint32() []uint32 {
	if x != nil {
		return x.ArrayUint32
	}
	return nil
}

func (x *ListMessage1) GetArrayUint64() []uint64 {
	if x != nil {
		return x.ArrayUint64
	}
	return nil
}

func (x *ListMessage1) GetArraySint32() []int32 {
	if x != nil {
		return x.ArraySint32
	}
	return nil
}

func (x *ListMessage1) GetArraySint64() []int64 {
	if x != nil {
		return x.ArraySint64
	}
	return nil
}

func (x *ListMessage1) GetArraySfixed32() []int32 {
	if x != nil {
		return x.ArraySfixed32
	}
	return nil
}

func (x *ListMessage1) GetArraySfixed64() []int64 {
	if x != nil {
		return x.ArraySfixed64
	}
	return nil
}

func (x *ListMessage1) GetArrayFixed32() []uint32 {
	if x != nil {
		return x.ArrayFixed32
	}
	return nil
}

func (x *ListMessage1) GetArrayFixed64() []uint64 {
	if x != nil {
		return x.ArrayFixed64
	}
	return nil
}

func (x *ListMessage1) GetArrayBool() []bool {
	if x != nil {
		return x.ArrayBool
	}
	return nil
}

func (x *ListMessage1) GetArrayBytes1() [][]byte {
	if x != nil {
		return x.ArrayBytes1
	}
	return nil
}

func (x *ListMessage1) GetArrayBytes2() [][]byte {
	if x != nil {
		return x.ArrayBytes2
	}
	return nil
}

func (x *ListMessage1) GetArrayEnum1() []Enum1 {
	if x != nil {
		return x.ArrayEnum1
	}
	return nil
}

func (x *ListMessage1) GetArrayEnum2() []Enum1 {
	if x != nil {
		return x.ArrayEnum2
	}
	return nil
}

func (x *ListMessage1) GetArrayConfig1() []*Config {
	if x != nil {
		return x.ArrayConfig1
	}
	return nil
}

func (x *ListMessage1) GetArrayConfig2() []*Config {
	if x != nil {
		return x.ArrayConfig2
	}
	return nil
}

type MapMessage1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapStringString1 map[string]string `protobuf:"bytes,1,rep,name=map_string_string1,json=mapStringString1,proto3" json:"map_string_string1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringString2 map[string]string `protobuf:"bytes,2,rep,name=map_string_string2,json=mapStringString2,proto3" json:"map_string_string2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringString3 map[string]string `protobuf:"bytes,3,rep,name=map_string_string3,json=mapStringString3,proto3" json:"map_string_string3,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringString4 map[string]string `protobuf:"bytes,4,rep,name=map_string_string4,json=mapStringString4,proto3" json:"map_string_string4,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Double   map[int32]float64 `protobuf:"bytes,202,rep,name=map_int32_double,json=mapInt32Double,proto3" json:"map_int32_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Float    map[int32]float32 `protobuf:"bytes,203,rep,name=map_int32_float,json=mapInt32Float,proto3" json:"map_int32_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Int32    map[int32]int32   `protobuf:"bytes,204,rep,name=map_int32_int32,json=mapInt32Int32,proto3" json:"map_int32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Int64    map[int32]int64   `protobuf:"bytes,205,rep,name=map_int32_int64,json=mapInt32Int64,proto3" json:"map_int32_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint32   map[int32]uint32  `protobuf:"bytes,206,rep,name=map_int32_uint32,json=mapInt32Uint32,proto3" json:"map_int32_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Uint64   map[int32]uint64  `protobuf:"bytes,207,rep,name=map_int32_uint64,json=mapInt32Uint64,proto3" json:"map_int32_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32Sint32   map[int32]int32   `protobuf:"bytes,208,rep,name=map_int32_sint32,json=mapInt32Sint32,proto3" json:"map_int32_sint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapInt32Sint64   map[int32]int64   `protobuf:"bytes,209,rep,name=map_int32_sint64,json=mapInt32Sint64,proto3" json:"map_int32_sint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapInt32Sfixed32 map[int32]int32   `protobuf:"bytes,210,rep,name=map_int32_sfixed32,json=mapInt32Sfixed32,proto3" json:"map_int32_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Sfixed64 map[int32]int64   `protobuf:"bytes,211,rep,name=map_int32_sfixed64,json=mapInt32Sfixed64,proto3" json:"map_int32_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Fixed32  map[int32]uint32  `protobuf:"bytes,212,rep,name=map_int32_fixed32,json=mapInt32Fixed32,proto3" json:"map_int32_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapInt32Fixed64  map[int32]uint64  `protobuf:"bytes,213,rep,name=map_int32_fixed64,json=mapInt32Fixed64,proto3" json:"map_int32_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapInt32Bool     map[int32]bool    `protobuf:"bytes,214,rep,name=map_int32_bool,json=mapInt32Bool,proto3" json:"map_int32_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt32String   map[int32]string  `protobuf:"bytes,215,rep,name=map_int32_string,json=mapInt32String,proto3" json:"map_int32_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Bytes    map[int32][]byte  `protobuf:"bytes,216,rep,name=map_int32_bytes,json=mapInt32Bytes,proto3" json:"map_int32_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Enum1    map[int32]Enum1   `protobuf:"bytes,217,rep,name=map_int32_enum1,json=mapInt32Enum1,proto3" json:"map_int32_enum1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=godefaultstest.Enum1"`
	MapInt32Enum2    map[int32]Enum1   `protobuf:"bytes,218,rep,name=map_int32_enum2,json=mapInt32Enum2,proto3" json:"map_int32_enum2,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=godefaultstest.Enum1"`
	MapInt32Config   map[int32]*Config `protobuf:"bytes,220,rep,name=map_int32_config,json=mapInt32Config,proto3" json:"map_int32_config,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt64Int32    map[int64]int32   `protobuf:"bytes,301,rep,name=map_int64_int32,json=mapInt64Int32,proto3" json:"map_int64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Int32   map[uint32]int32  `protobuf:"bytes,302,rep,name=map_uint32_int32,json=mapUint32Int32,proto3" json:"map_uint32_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Int32   map[uint64]int32  `protobuf:"bytes,304,rep,name=map_uint64_int32,json=mapUint64Int32,proto3" json:"map_uint64_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint32Int32   map[int32]int32   `protobuf:"bytes,305,rep,name=map_sint32_int32,json=mapSint32Int32,proto3" json:"map_sint32_int32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint64Int32   map[int64]int32   `protobuf:"bytes,306,rep,name=map_sint64_int32,json=mapSint64Int32,proto3" json:"map_sint64_int32,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed32Int32  map[uint32]int32  `protobuf:"bytes,307,rep,name=map_fixed32_int32,json=mapFixed32Int32,proto3" json:"map_fixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed64Int32  map[uint64]int32  `protobuf:"bytes,308,rep,name=map_fixed64_int32,json=mapFixed64Int32,proto3" json:"map_fixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed32Int32 map[int32]int32   `protobuf:"bytes,309,rep,name=map_sfixed32_int32,json=mapSfixed32Int32,proto3" json:"map_sfixed32_int32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSfixed64Int32 map[int64]int32   `protobuf:"bytes,310,rep,name=map_sfixed64_int32,json=mapSfixed64Int32,proto3" json:"map_sfixed64_int32,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringInt32   map[string]int32  `protobuf:"bytes,311,rep,name=map_string_int32,json=mapStringInt32,proto3" json:"map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapMessage1) Reset() {
	*x = MapMessage1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapMessage1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapMessage1) ProtoMessage() {}

func (x *MapMessage1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapMessage1.ProtoReflect.Descriptor instead.
func (*MapMessage1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescGZIP(), []int{4}
}

func (x *MapMessage1) GetMapStringString1() map[string]string {
	if x != nil {
		return x.MapStringString1
	}
	return nil
}

func (x *MapMessage1) GetMapStringString2() map[string]string {
	if x != nil {
		return x.MapStringString2
	}
	return nil
}

func (x *MapMessage1) GetMapStringString3() map[string]string {
	if x != nil {
		return x.MapStringString3
	}
	return nil
}

func (x *MapMessage1) GetMapStringString4() map[string]string {
	if x != nil {
		return x.MapStringString4
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Double() map[int32]float64 {
	if x != nil {
		return x.MapInt32Double
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Float() map[int32]float32 {
	if x != nil {
		return x.MapInt32Float
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Int32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Int32
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Int64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Int64
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Uint32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Uint32
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Uint64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Uint64
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Sint32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sint32
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Sint64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sint64
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Sfixed32() map[int32]int32 {
	if x != nil {
		return x.MapInt32Sfixed32
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Sfixed64() map[int32]int64 {
	if x != nil {
		return x.MapInt32Sfixed64
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Fixed32() map[int32]uint32 {
	if x != nil {
		return x.MapInt32Fixed32
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Fixed64() map[int32]uint64 {
	if x != nil {
		return x.MapInt32Fixed64
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Bool() map[int32]bool {
	if x != nil {
		return x.MapInt32Bool
	}
	return nil
}

func (x *MapMessage1) GetMapInt32String() map[int32]string {
	if x != nil {
		return x.MapInt32String
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Bytes() map[int32][]byte {
	if x != nil {
		return x.MapInt32Bytes
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Enum1() map[int32]Enum1 {
	if x != nil {
		return x.MapInt32Enum1
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Enum2() map[int32]Enum1 {
	if x != nil {
		return x.MapInt32Enum2
	}
	return nil
}

func (x *MapMessage1) GetMapInt32Config() map[int32]*Config {
	if x != nil {
		return x.MapInt32Config
	}
	return nil
}

func (x *MapMessage1) GetMapInt64Int32() map[int64]int32 {
	if x != nil {
		return x.MapInt64Int32
	}
	return nil
}

func (x *MapMessage1) GetMapUint32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapUint32Int32
	}
	return nil
}

func (x *MapMessage1) GetMapUint64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapUint64Int32
	}
	return nil
}

func (x *MapMessage1) GetMapSint32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSint32Int32
	}
	return nil
}

func (x *MapMessage1) GetMapSint64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSint64Int32
	}
	return nil
}

func (x *MapMessage1) GetMapFixed32Int32() map[uint32]int32 {
	if x != nil {
		return x.MapFixed32Int32
	}
	return nil
}

func (x *MapMessage1) GetMapFixed64Int32() map[uint64]int32 {
	if x != nil {
		return x.MapFixed64Int32
	}
	return nil
}

func (x *MapMessage1) GetMapSfixed32Int32() map[int32]int32 {
	if x != nil {
		return x.MapSfixed32Int32
	}
	return nil
}

func (x *MapMessage1) GetMapSfixed64Int32() map[int64]int32 {
	if x != nil {
		return x.MapSfixed64Int32
	}
	return nil
}

func (x *MapMessage1) GetMapStringInt32() map[string]int32 {
	if x != nil {
		return x.MapStringInt32
	}
	return nil
}

type OneofMessag1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofTyp1:
	//	*OneofMessag1_Oneof1String1
	//	*OneofMessag1_Oneof1String2
	//	*OneofMessag1_Oneof1String3
	//	*OneofMessag1_Oneof1String4
	//	*OneofMessag1_Oneof1String5
	//	*OneofMessag1_Oneof1String6
	//	*OneofMessag1_Oneof1String7
	//	*OneofMessag1_Oneof1String8
	//	*OneofMessag1_Oneof1String9
	//	*OneofMessag1_Oneof1Double
	//	*OneofMessag1_Oneof1Float
	//	*OneofMessag1_Oneof1Int32
	//	*OneofMessag1_Oneof1Int64
	//	*OneofMessag1_Oneof1Uint32
	//	*OneofMessag1_Oneof1Uint64
	//	*OneofMessag1_Oneof1Sint32
	//	*OneofMessag1_Oneof1Sint64
	//	*OneofMessag1_Oneof1Fixed32
	//	*OneofMessag1_Oneof1Fixed64
	//	*OneofMessag1_Oneof1Sfixed32
	//	*OneofMessag1_Oneof1Sfixed64
	//	*OneofMessag1_Oneof1Bool
	//	*OneofMessag1_Oneof1Bytes1
	//	*OneofMessag1_Oneof1Bytes2
	//	*OneofMessag1_Oneof1Bytes3
	//	*OneofMessag1_Oneof1Enum1
	//	*OneofMessag1_Oneof1Enum2
	//	*OneofMessag1_Oneof1Config1
	//	*OneofMessag1_Oneof1Config2
	OneofTyp1 isOneofMessag1_OneofTyp1 `protobuf_oneof:"oneof_typ1"`
	// Types that are assignable to OneofTyp2:
	//	*OneofMessag1_Oneof2String1
	//	*OneofMessag1_Oneof2String2
	//	*OneofMessag1_Oneof2String3
	//	*OneofMessag1_Oneof2String4
	//	*OneofMessag1_Oneof2String5
	//	*OneofMessag1_Oneof2String6
	//	*OneofMessag1_Oneof2String7
	//	*OneofMessag1_Oneof2String8
	//	*OneofMessag1_Oneof2String9
	//	*OneofMessag1_Oneof2Double
	//	*OneofMessag1_Oneof2Float
	//	*OneofMessag1_Oneof2Int32
	//	*OneofMessag1_Oneof2Int64
	//	*OneofMessag1_Oneof2Uint32
	//	*OneofMessag1_Oneof2Uint64
	//	*OneofMessag1_Oneof2Sint32
	//	*OneofMessag1_Oneof2Sint64
	//	*OneofMessag1_Oneof2Fixed32
	//	*OneofMessag1_Oneof2Fixed64
	//	*OneofMessag1_Oneof2Sfixed32
	//	*OneofMessag1_Oneof2Sfixed64
	//	*OneofMessag1_Oneof2Bool
	//	*OneofMessag1_Oneof2Bytes1
	//	*OneofMessag1_Oneof2Bytes2
	//	*OneofMessag1_Oneof2Bytes3
	//	*OneofMessag1_Oneof2Enum1
	//	*OneofMessag1_Oneof2Enum2
	//	*OneofMessag1_Oneof2Config1
	//	*OneofMessag1_Oneof2Config2
	OneofTyp2 isOneofMessag1_OneofTyp2 `protobuf_oneof:"oneof_typ2"`
}

func (x *OneofMessag1) Reset() {
	*x = OneofMessag1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneofMessag1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofMessag1) ProtoMessage() {}

func (x *OneofMessag1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofMessag1.ProtoReflect.Descriptor instead.
func (*OneofMessag1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescGZIP(), []int{5}
}

func (m *OneofMessag1) GetOneofTyp1() isOneofMessag1_OneofTyp1 {
	if m != nil {
		return m.OneofTyp1
	}
	return nil
}

func (x *OneofMessag1) GetOneof1String1() string {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1String1); ok {
		return x.Oneof1String1
	}
	return ""
}

func (x *OneofMessag1) GetOneof1String2() string {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1String2); ok {
		return x.Oneof1String2
	}
	return ""
}

func (x *OneofMessag1) GetOneof1String3() string {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1String3); ok {
		return x.Oneof1String3
	}
	return ""
}

func (x *OneofMessag1) GetOneof1String4() string {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1String4); ok {
		return x.Oneof1String4
	}
	return ""
}

func (x *OneofMessag1) GetOneof1String5() string {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1String5); ok {
		return x.Oneof1String5
	}
	return ""
}

func (x *OneofMessag1) GetOneof1String6() string {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1String6); ok {
		return x.Oneof1String6
	}
	return ""
}

func (x *OneofMessag1) GetOneof1String7() string {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1String7); ok {
		return x.Oneof1String7
	}
	return ""
}

func (x *OneofMessag1) GetOneof1String8() string {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1String8); ok {
		return x.Oneof1String8
	}
	return ""
}

func (x *OneofMessag1) GetOneof1String9() string {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1String9); ok {
		return x.Oneof1String9
	}
	return ""
}

func (x *OneofMessag1) GetOneof1Double() float64 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Double); ok {
		return x.Oneof1Double
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Float() float32 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Float); ok {
		return x.Oneof1Float
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Int32() int32 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Int32); ok {
		return x.Oneof1Int32
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Int64() int64 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Int64); ok {
		return x.Oneof1Int64
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Uint32() uint32 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Uint32); ok {
		return x.Oneof1Uint32
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Uint64() uint64 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Uint64); ok {
		return x.Oneof1Uint64
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Sint32() int32 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Sint32); ok {
		return x.Oneof1Sint32
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Sint64() int64 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Sint64); ok {
		return x.Oneof1Sint64
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Fixed32() uint32 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Fixed32); ok {
		return x.Oneof1Fixed32
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Fixed64() uint64 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Fixed64); ok {
		return x.Oneof1Fixed64
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Sfixed32() int32 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Sfixed32); ok {
		return x.Oneof1Sfixed32
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Sfixed64() int64 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Sfixed64); ok {
		return x.Oneof1Sfixed64
	}
	return 0
}

func (x *OneofMessag1) GetOneof1Bool() bool {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Bool); ok {
		return x.Oneof1Bool
	}
	return false
}

func (x *OneofMessag1) GetOneof1Bytes1() []byte {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Bytes1); ok {
		return x.Oneof1Bytes1
	}
	return nil
}

func (x *OneofMessag1) GetOneof1Bytes2() []byte {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Bytes2); ok {
		return x.Oneof1Bytes2
	}
	return nil
}

func (x *OneofMessag1) GetOneof1Bytes3() []byte {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Bytes3); ok {
		return x.Oneof1Bytes3
	}
	return nil
}

func (x *OneofMessag1) GetOneof1Enum1() Enum1 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Enum1); ok {
		return x.Oneof1Enum1
	}
	return Enum1_January
}

func (x *OneofMessag1) GetOneof1Enum2() Enum1 {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Enum2); ok {
		return x.Oneof1Enum2
	}
	return Enum1_January
}

func (x *OneofMessag1) GetOneof1Config1() *Config {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Config1); ok {
		return x.Oneof1Config1
	}
	return nil
}

func (x *OneofMessag1) GetOneof1Config2() *Config {
	if x, ok := x.GetOneofTyp1().(*OneofMessag1_Oneof1Config2); ok {
		return x.Oneof1Config2
	}
	return nil
}

func (m *OneofMessag1) GetOneofTyp2() isOneofMessag1_OneofTyp2 {
	if m != nil {
		return m.OneofTyp2
	}
	return nil
}

func (x *OneofMessag1) GetOneof2String1() string {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2String1); ok {
		return x.Oneof2String1
	}
	return ""
}

func (x *OneofMessag1) GetOneof2String2() string {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2String2); ok {
		return x.Oneof2String2
	}
	return ""
}

func (x *OneofMessag1) GetOneof2String3() string {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2String3); ok {
		return x.Oneof2String3
	}
	return ""
}

func (x *OneofMessag1) GetOneof2String4() string {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2String4); ok {
		return x.Oneof2String4
	}
	return ""
}

func (x *OneofMessag1) GetOneof2String5() string {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2String5); ok {
		return x.Oneof2String5
	}
	return ""
}

func (x *OneofMessag1) GetOneof2String6() string {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2String6); ok {
		return x.Oneof2String6
	}
	return ""
}

func (x *OneofMessag1) GetOneof2String7() string {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2String7); ok {
		return x.Oneof2String7
	}
	return ""
}

func (x *OneofMessag1) GetOneof2String8() string {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2String8); ok {
		return x.Oneof2String8
	}
	return ""
}

func (x *OneofMessag1) GetOneof2String9() string {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2String9); ok {
		return x.Oneof2String9
	}
	return ""
}

func (x *OneofMessag1) GetOneof2Double() float64 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Double); ok {
		return x.Oneof2Double
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Float() float32 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Float); ok {
		return x.Oneof2Float
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Int32() int32 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Int32); ok {
		return x.Oneof2Int32
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Int64() int64 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Int64); ok {
		return x.Oneof2Int64
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Uint32() uint32 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Uint32); ok {
		return x.Oneof2Uint32
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Uint64() uint64 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Uint64); ok {
		return x.Oneof2Uint64
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Sint32() int32 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Sint32); ok {
		return x.Oneof2Sint32
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Sint64() int64 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Sint64); ok {
		return x.Oneof2Sint64
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Fixed32() uint32 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Fixed32); ok {
		return x.Oneof2Fixed32
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Fixed64() uint64 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Fixed64); ok {
		return x.Oneof2Fixed64
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Sfixed32() int32 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Sfixed32); ok {
		return x.Oneof2Sfixed32
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Sfixed64() int64 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Sfixed64); ok {
		return x.Oneof2Sfixed64
	}
	return 0
}

func (x *OneofMessag1) GetOneof2Bool() bool {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Bool); ok {
		return x.Oneof2Bool
	}
	return false
}

func (x *OneofMessag1) GetOneof2Bytes1() []byte {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Bytes1); ok {
		return x.Oneof2Bytes1
	}
	return nil
}

func (x *OneofMessag1) GetOneof2Bytes2() []byte {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Bytes2); ok {
		return x.Oneof2Bytes2
	}
	return nil
}

func (x *OneofMessag1) GetOneof2Bytes3() []byte {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Bytes3); ok {
		return x.Oneof2Bytes3
	}
	return nil
}

func (x *OneofMessag1) GetOneof2Enum1() Enum1 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Enum1); ok {
		return x.Oneof2Enum1
	}
	return Enum1_January
}

func (x *OneofMessag1) GetOneof2Enum2() Enum1 {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Enum2); ok {
		return x.Oneof2Enum2
	}
	return Enum1_January
}

func (x *OneofMessag1) GetOneof2Config1() *Config {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Config1); ok {
		return x.Oneof2Config1
	}
	return nil
}

func (x *OneofMessag1) GetOneof2Config2() *Config {
	if x, ok := x.GetOneofTyp2().(*OneofMessag1_Oneof2Config2); ok {
		return x.Oneof2Config2
	}
	return nil
}

type isOneofMessag1_OneofTyp1 interface {
	isOneofMessag1_OneofTyp1()
}

type OneofMessag1_Oneof1String1 struct {
	Oneof1String1 string `protobuf:"bytes,1,opt,name=oneof1_string1,json=oneof1String1,proto3,oneof"`
}

type OneofMessag1_Oneof1String2 struct {
	Oneof1String2 string `protobuf:"bytes,2,opt,name=oneof1_string2,json=oneof1String2,proto3,oneof"`
}

type OneofMessag1_Oneof1String3 struct {
	Oneof1String3 string `protobuf:"bytes,3,opt,name=oneof1_string3,json=oneof1String3,proto3,oneof"`
}

type OneofMessag1_Oneof1String4 struct {
	Oneof1String4 string `protobuf:"bytes,4,opt,name=oneof1_string4,json=oneof1String4,proto3,oneof"`
}

type OneofMessag1_Oneof1String5 struct {
	Oneof1String5 string `protobuf:"bytes,5,opt,name=oneof1_string5,json=oneof1String5,proto3,oneof"`
}

type OneofMessag1_Oneof1String6 struct {
	Oneof1String6 string `protobuf:"bytes,6,opt,name=oneof1_string6,json=oneof1String6,proto3,oneof"`
}

type OneofMessag1_Oneof1String7 struct {
	Oneof1String7 string `protobuf:"bytes,7,opt,name=oneof1_string7,json=oneof1String7,proto3,oneof"`
}

type OneofMessag1_Oneof1String8 struct {
	Oneof1String8 string `protobuf:"bytes,8,opt,name=oneof1_string8,json=oneof1String8,proto3,oneof"`
}

type OneofMessag1_Oneof1String9 struct {
	Oneof1String9 string `protobuf:"bytes,9,opt,name=oneof1_string9,json=oneof1String9,proto3,oneof"`
}

type OneofMessag1_Oneof1Double struct {
	Oneof1Double float64 `protobuf:"fixed64,31,opt,name=oneof1_double,json=oneof1Double,proto3,oneof"`
}

type OneofMessag1_Oneof1Float struct {
	Oneof1Float float32 `protobuf:"fixed32,32,opt,name=oneof1_float,json=oneof1Float,proto3,oneof"`
}

type OneofMessag1_Oneof1Int32 struct {
	Oneof1Int32 int32 `protobuf:"varint,33,opt,name=oneof1_int32,json=oneof1Int32,proto3,oneof"`
}

type OneofMessag1_Oneof1Int64 struct {
	Oneof1Int64 int64 `protobuf:"varint,34,opt,name=oneof1_int64,json=oneof1Int64,proto3,oneof"`
}

type OneofMessag1_Oneof1Uint32 struct {
	Oneof1Uint32 uint32 `protobuf:"varint,35,opt,name=oneof1_uint32,json=oneof1Uint32,proto3,oneof"`
}

type OneofMessag1_Oneof1Uint64 struct {
	Oneof1Uint64 uint64 `protobuf:"varint,36,opt,name=oneof1_uint64,json=oneof1Uint64,proto3,oneof"`
}

type OneofMessag1_Oneof1Sint32 struct {
	Oneof1Sint32 int32 `protobuf:"zigzag32,37,opt,name=oneof1_sint32,json=oneof1Sint32,proto3,oneof"`
}

type OneofMessag1_Oneof1Sint64 struct {
	Oneof1Sint64 int64 `protobuf:"zigzag64,38,opt,name=oneof1_sint64,json=oneof1Sint64,proto3,oneof"`
}

type OneofMessag1_Oneof1Fixed32 struct {
	Oneof1Fixed32 uint32 `protobuf:"fixed32,39,opt,name=oneof1_fixed32,json=oneof1Fixed32,proto3,oneof"`
}

type OneofMessag1_Oneof1Fixed64 struct {
	Oneof1Fixed64 uint64 `protobuf:"fixed64,40,opt,name=oneof1_fixed64,json=oneof1Fixed64,proto3,oneof"`
}

type OneofMessag1_Oneof1Sfixed32 struct {
	Oneof1Sfixed32 int32 `protobuf:"fixed32,41,opt,name=oneof1_sfixed32,json=oneof1Sfixed32,proto3,oneof"`
}

type OneofMessag1_Oneof1Sfixed64 struct {
	Oneof1Sfixed64 int64 `protobuf:"fixed64,42,opt,name=oneof1_sfixed64,json=oneof1Sfixed64,proto3,oneof"`
}

type OneofMessag1_Oneof1Bool struct {
	Oneof1Bool bool `protobuf:"varint,43,opt,name=oneof1_bool,json=oneof1Bool,proto3,oneof"`
}

type OneofMessag1_Oneof1Bytes1 struct {
	Oneof1Bytes1 []byte `protobuf:"bytes,44,opt,name=oneof1_bytes1,json=oneof1Bytes1,proto3,oneof"`
}

type OneofMessag1_Oneof1Bytes2 struct {
	Oneof1Bytes2 []byte `protobuf:"bytes,45,opt,name=oneof1_bytes2,json=oneof1Bytes2,proto3,oneof"`
}

type OneofMessag1_Oneof1Bytes3 struct {
	Oneof1Bytes3 []byte `protobuf:"bytes,46,opt,name=oneof1_bytes3,json=oneof1Bytes3,proto3,oneof"`
}

type OneofMessag1_Oneof1Enum1 struct {
	Oneof1Enum1 Enum1 `protobuf:"varint,47,opt,name=oneof1_enum1,json=oneof1Enum1,proto3,enum=godefaultstest.Enum1,oneof"`
}

type OneofMessag1_Oneof1Enum2 struct {
	Oneof1Enum2 Enum1 `protobuf:"varint,48,opt,name=oneof1_enum2,json=oneof1Enum2,proto3,enum=godefaultstest.Enum1,oneof"`
}

type OneofMessag1_Oneof1Config1 struct {
	Oneof1Config1 *Config `protobuf:"bytes,49,opt,name=oneof1_config1,json=oneof1Config1,proto3,oneof"`
}

type OneofMessag1_Oneof1Config2 struct {
	Oneof1Config2 *Config `protobuf:"bytes,50,opt,name=oneof1_config2,json=oneof1Config2,proto3,oneof"`
}

func (*OneofMessag1_Oneof1String1) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1String2) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1String3) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1String4) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1String5) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1String6) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1String7) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1String8) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1String9) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Double) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Float) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Int32) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Int64) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Uint32) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Uint64) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Sint32) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Sint64) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Fixed32) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Fixed64) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Sfixed32) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Sfixed64) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Bool) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Bytes1) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Bytes2) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Bytes3) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Enum1) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Enum2) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Config1) isOneofMessag1_OneofTyp1() {}

func (*OneofMessag1_Oneof1Config2) isOneofMessag1_OneofTyp1() {}

type isOneofMessag1_OneofTyp2 interface {
	isOneofMessag1_OneofTyp2()
}

type OneofMessag1_Oneof2String1 struct {
	Oneof2String1 string `protobuf:"bytes,101,opt,name=oneof2_string1,json=oneof2String1,proto3,oneof"`
}

type OneofMessag1_Oneof2String2 struct {
	Oneof2String2 string `protobuf:"bytes,102,opt,name=oneof2_string2,json=oneof2String2,proto3,oneof"`
}

type OneofMessag1_Oneof2String3 struct {
	Oneof2String3 string `protobuf:"bytes,103,opt,name=oneof2_string3,json=oneof2String3,proto3,oneof"`
}

type OneofMessag1_Oneof2String4 struct {
	Oneof2String4 string `protobuf:"bytes,104,opt,name=oneof2_string4,json=oneof2String4,proto3,oneof"`
}

type OneofMessag1_Oneof2String5 struct {
	Oneof2String5 string `protobuf:"bytes,105,opt,name=oneof2_string5,json=oneof2String5,proto3,oneof"`
}

type OneofMessag1_Oneof2String6 struct {
	Oneof2String6 string `protobuf:"bytes,106,opt,name=oneof2_string6,json=oneof2String6,proto3,oneof"`
}

type OneofMessag1_Oneof2String7 struct {
	Oneof2String7 string `protobuf:"bytes,107,opt,name=oneof2_string7,json=oneof2String7,proto3,oneof"`
}

type OneofMessag1_Oneof2String8 struct {
	Oneof2String8 string `protobuf:"bytes,108,opt,name=oneof2_string8,json=oneof2String8,proto3,oneof"`
}

type OneofMessag1_Oneof2String9 struct {
	Oneof2String9 string `protobuf:"bytes,109,opt,name=oneof2_string9,json=oneof2String9,proto3,oneof"`
}

type OneofMessag1_Oneof2Double struct {
	Oneof2Double float64 `protobuf:"fixed64,131,opt,name=oneof2_double,json=oneof2Double,proto3,oneof"`
}

type OneofMessag1_Oneof2Float struct {
	Oneof2Float float32 `protobuf:"fixed32,132,opt,name=oneof2_float,json=oneof2Float,proto3,oneof"`
}

type OneofMessag1_Oneof2Int32 struct {
	Oneof2Int32 int32 `protobuf:"varint,133,opt,name=oneof2_int32,json=oneof2Int32,proto3,oneof"`
}

type OneofMessag1_Oneof2Int64 struct {
	Oneof2Int64 int64 `protobuf:"varint,134,opt,name=oneof2_int64,json=oneof2Int64,proto3,oneof"`
}

type OneofMessag1_Oneof2Uint32 struct {
	Oneof2Uint32 uint32 `protobuf:"varint,135,opt,name=oneof2_uint32,json=oneof2Uint32,proto3,oneof"`
}

type OneofMessag1_Oneof2Uint64 struct {
	Oneof2Uint64 uint64 `protobuf:"varint,136,opt,name=oneof2_uint64,json=oneof2Uint64,proto3,oneof"`
}

type OneofMessag1_Oneof2Sint32 struct {
	Oneof2Sint32 int32 `protobuf:"zigzag32,137,opt,name=oneof2_sint32,json=oneof2Sint32,proto3,oneof"`
}

type OneofMessag1_Oneof2Sint64 struct {
	Oneof2Sint64 int64 `protobuf:"zigzag64,138,opt,name=oneof2_sint64,json=oneof2Sint64,proto3,oneof"`
}

type OneofMessag1_Oneof2Fixed32 struct {
	Oneof2Fixed32 uint32 `protobuf:"fixed32,139,opt,name=oneof2_fixed32,json=oneof2Fixed32,proto3,oneof"`
}

type OneofMessag1_Oneof2Fixed64 struct {
	Oneof2Fixed64 uint64 `protobuf:"fixed64,140,opt,name=oneof2_fixed64,json=oneof2Fixed64,proto3,oneof"`
}

type OneofMessag1_Oneof2Sfixed32 struct {
	Oneof2Sfixed32 int32 `protobuf:"fixed32,141,opt,name=oneof2_sfixed32,json=oneof2Sfixed32,proto3,oneof"`
}

type OneofMessag1_Oneof2Sfixed64 struct {
	Oneof2Sfixed64 int64 `protobuf:"fixed64,142,opt,name=oneof2_sfixed64,json=oneof2Sfixed64,proto3,oneof"`
}

type OneofMessag1_Oneof2Bool struct {
	Oneof2Bool bool `protobuf:"varint,143,opt,name=oneof2_bool,json=oneof2Bool,proto3,oneof"`
}

type OneofMessag1_Oneof2Bytes1 struct {
	Oneof2Bytes1 []byte `protobuf:"bytes,144,opt,name=oneof2_bytes1,json=oneof2Bytes1,proto3,oneof"`
}

type OneofMessag1_Oneof2Bytes2 struct {
	Oneof2Bytes2 []byte `protobuf:"bytes,145,opt,name=oneof2_bytes2,json=oneof2Bytes2,proto3,oneof"`
}

type OneofMessag1_Oneof2Bytes3 struct {
	Oneof2Bytes3 []byte `protobuf:"bytes,146,opt,name=oneof2_bytes3,json=oneof2Bytes3,proto3,oneof"`
}

type OneofMessag1_Oneof2Enum1 struct {
	Oneof2Enum1 Enum1 `protobuf:"varint,147,opt,name=oneof2_enum1,json=oneof2Enum1,proto3,enum=godefaultstest.Enum1,oneof"`
}

type OneofMessag1_Oneof2Enum2 struct {
	Oneof2Enum2 Enum1 `protobuf:"varint,148,opt,name=oneof2_enum2,json=oneof2Enum2,proto3,enum=godefaultstest.Enum1,oneof"`
}

type OneofMessag1_Oneof2Config1 struct {
	Oneof2Config1 *Config `protobuf:"bytes,149,opt,name=oneof2_config1,json=oneof2Config1,proto3,oneof"`
}

type OneofMessag1_Oneof2Config2 struct {
	Oneof2Config2 *Config `protobuf:"bytes,150,opt,name=oneof2_config2,json=oneof2Config2,proto3,oneof"`
}

func (*OneofMessag1_Oneof2String1) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2String2) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2String3) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2String4) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2String5) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2String6) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2String7) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2String8) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2String9) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Double) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Float) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Int32) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Int64) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Uint32) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Uint64) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Sint32) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Sint64) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Fixed32) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Fixed64) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Sfixed32) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Sfixed64) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Bool) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Bytes1) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Bytes2) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Bytes3) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Enum1) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Enum2) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Config1) isOneofMessag1_OneofTyp2() {}

func (*OneofMessag1_Oneof2Config2) isOneofMessag1_OneofTyp2() {}

var File_xgo_tests_godefaultstest_godefaults_test_proto protoreflect.FileDescriptor

var file_xgo_tests_godefaultstest_godefaults_test_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x20, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xa2, 0xa1,
	0x1f, 0x0c, 0xaa, 0x06, 0x09, 0x31, 0x32, 0x37, 0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x1d, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xa2, 0xa1, 0x1f, 0x05, 0xaa, 0x06, 0x02, 0x38, 0x30, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0xcb, 0x09, 0x0a, 0x0f, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x27, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06,
	0x03, 0x74, 0x73, 0x31, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x24,
	0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x07, 0xa2, 0xa1, 0x1f, 0x03, 0xaa, 0x06, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xa2, 0xa1, 0x1f, 0x05, 0xaa, 0x06, 0x02,
	0x22, 0x22, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x25, 0x0a, 0x09,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x22, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x34, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x22,
	0x74, 0x73, 0x35, 0x22, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x12, 0x2a,
	0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0xa2, 0xa1, 0x1f, 0x09, 0xaa, 0x06, 0x06, 0x22, 0x74, 0x73, 0x22, 0x36, 0x22,
	0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x36, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xa2,
	0xa1, 0x1f, 0x09, 0xaa, 0x06, 0x06, 0x22, 0x74, 0x73, 0x22, 0x37, 0x22, 0x52, 0x08, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x37, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa,
	0x06, 0x05, 0x5b, 0x74, 0x73, 0x38, 0x5d, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x38, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x7b, 0x74, 0x73,
	0x39, 0x7d, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x12, 0x23, 0x0a, 0x0a,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x09, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x30, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x31, 0x52, 0x06, 0x74, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x32, 0x52,
	0x06, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x23, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa,
	0x06, 0x01, 0x33, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x08,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x68, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08,
	0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x34, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x23, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x69, 0x20,
	0x01, 0x28, 0x11, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x35, 0x52, 0x07, 0x74,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x23, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x12, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06,
	0x01, 0x36, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x27, 0x0a, 0x0a, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0f, 0x42,
	0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x37, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x10, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06,
	0x01, 0x38, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x25, 0x0a,
	0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x07,
	0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x39, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x06, 0x42, 0x09, 0xa2, 0xa1, 0x1f, 0x05, 0xaa, 0x06, 0x02,
	0x31, 0x30, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x25, 0x0a, 0x07,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0c, 0xa2,
	0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x31, 0x31, 0x2e, 0x31, 0x31, 0x52, 0x06, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x08, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x70, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x31, 0x32,
	0x2e, 0x31, 0x32, 0x52, 0x07, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x06,
	0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0xa2, 0xa1,
	0x1f, 0x07, 0xaa, 0x06, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x05, 0x74, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x1f, 0x0a, 0x08, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x72, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x07, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x31, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x18, 0x73, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x07, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x32, 0x12, 0x38, 0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04,
	0xaa, 0x06, 0x01, 0x33, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x38, 0x0a, 0x07,
	0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x31, 0x52, 0x06,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x3c, 0x0a, 0x09, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x31, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x07, 0xa2, 0xa1, 0x1f, 0x03, 0xaa, 0x06, 0x00, 0x52, 0x08, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x31, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x32, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x08, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x22,
	0xe2, 0x0d, 0x0a, 0x10, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03,
	0x74, 0x73, 0x31, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xa2, 0xa1, 0x1f, 0x03, 0xaa, 0x06, 0x00, 0x48, 0x01,
	0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xa2, 0xa1, 0x1f, 0x05, 0xaa, 0x06, 0x02, 0x22, 0x22, 0x48, 0x02, 0x52, 0x08, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xa2,
	0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x22, 0x48, 0x03, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x34, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa,
	0x06, 0x05, 0x22, 0x74, 0x73, 0x35, 0x22, 0x48, 0x04, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x35, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xa2, 0xa1, 0x1f, 0x09, 0xaa,
	0x06, 0x06, 0x22, 0x74, 0x73, 0x22, 0x36, 0x22, 0x48, 0x05, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x36, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xa2, 0xa1, 0x1f, 0x09,
	0xaa, 0x06, 0x06, 0x22, 0x74, 0x73, 0x22, 0x37, 0x22, 0x48, 0x06, 0x52, 0x08, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x37, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f,
	0x08, 0xaa, 0x06, 0x05, 0x5b, 0x74, 0x73, 0x38, 0x5d, 0x48, 0x07, 0x52, 0x08, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x38, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f,
	0x08, 0xaa, 0x06, 0x05, 0x7b, 0x74, 0x73, 0x39, 0x7d, 0x48, 0x08, 0x52, 0x08, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x39, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xa2, 0xa1,
	0x1f, 0x00, 0x48, 0x09, 0x52, 0x09, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x30, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x07, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x30, 0x48, 0x0a, 0x52,
	0x06, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x07, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xa2, 0xa1, 0x1f,
	0x04, 0xaa, 0x06, 0x01, 0x32, 0x48, 0x0b, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x33, 0x48, 0x0c,
	0x52, 0x07, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x08,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x68, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08,
	0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x34, 0x48, 0x0d, 0x52, 0x07, 0x74, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x69, 0x20, 0x01, 0x28, 0x11, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06,
	0x01, 0x35, 0x48, 0x0e, 0x52, 0x07, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x08, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x12, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x36, 0x48, 0x0f, 0x52, 0x07,
	0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x08,
	0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x37, 0x48, 0x10, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x10, 0x42, 0x08, 0xa2, 0xa1,
	0x1f, 0x04, 0xaa, 0x06, 0x01, 0x38, 0x48, 0x11, 0x52, 0x09, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x07, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa,
	0x06, 0x01, 0x39, 0x48, 0x12, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x06, 0x42, 0x09, 0xa2, 0xa1, 0x1f, 0x05, 0xaa, 0x06, 0x02, 0x31, 0x30,
	0x48, 0x13, 0x52, 0x08, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x07, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x31, 0x31, 0x2e, 0x31, 0x31, 0x48, 0x14,
	0x52, 0x06, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x08, 0x74,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x70, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0c, 0xa2,
	0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x31, 0x32, 0x2e, 0x31, 0x32, 0x48, 0x15, 0x52, 0x07, 0x74,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x5f, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x71, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0xa2, 0xa1, 0x1f, 0x07, 0xaa,
	0x06, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x16, 0x52, 0x05, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x48, 0x17, 0x52, 0x07, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x31, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x08, 0x74, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x32, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00,
	0x48, 0x18, 0x52, 0x07, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x31,
	0x48, 0x19, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x07, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x34, 0x48,
	0x1a, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0xa2, 0xa1, 0x1f, 0x03, 0xaa, 0x06, 0x00,
	0x48, 0x1b, 0x52, 0x08, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x09, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x18, 0x77, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00,
	0x48, 0x1c, 0x52, 0x08, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x35, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x36, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x37, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x38, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x30, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x31, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x32, 0x22, 0xfb, 0x09, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x3f, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0xa2, 0xa1,
	0x1f, 0x16, 0xb2, 0x06, 0x02, 0x73, 0x31, 0xb2, 0x06, 0x06, 0x73, 0x32, 0x2c, 0x20, 0x73, 0x34,
	0xb2, 0x06, 0x02, 0x73, 0x33, 0xb2, 0x06, 0x00, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xa2,
	0xa1, 0x1f, 0x00, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x33, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x39, 0x0a, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x65, 0x20, 0x03,
	0x28, 0x01, 0x42, 0x16, 0xa2, 0xa1, 0x1f, 0x12, 0xb2, 0x06, 0x03, 0x31, 0x2e, 0x31, 0xb2, 0x06,
	0x03, 0x31, 0x2e, 0x32, 0xb2, 0x06, 0x03, 0x31, 0x2e, 0x33, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x66, 0x20, 0x03, 0x28, 0x02, 0x42, 0x16, 0xa2, 0xa1,
	0x1f, 0x12, 0xb2, 0x06, 0x03, 0x32, 0x2e, 0x31, 0xb2, 0x06, 0x03, 0x32, 0x2e, 0x32, 0xb2, 0x06,
	0x03, 0x32, 0x2e, 0x33, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x12, 0x34, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x67, 0x20, 0x03, 0x28, 0x05, 0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x0f, 0xb2, 0x06, 0x02, 0x31, 0x30,
	0xb2, 0x06, 0x02, 0x31, 0x31, 0xb2, 0x06, 0x02, 0x31, 0x32, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x68, 0x20, 0x03, 0x28, 0x03, 0x42, 0x13, 0xa2, 0xa1, 0x1f,
	0x0f, 0xb2, 0x06, 0x02, 0x32, 0x30, 0xb2, 0x06, 0x02, 0x32, 0x31, 0xb2, 0x06, 0x02, 0x32, 0x32,
	0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x69, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x0f, 0xb2, 0x06, 0x02, 0x33, 0x30, 0xb2, 0x06, 0x02,
	0x33, 0x31, 0xb2, 0x06, 0x02, 0x33, 0x32, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x6a, 0x20, 0x03, 0x28, 0x04, 0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x0f,
	0xb2, 0x06, 0x02, 0x34, 0x30, 0xb2, 0x06, 0x02, 0x34, 0x31, 0xb2, 0x06, 0x02, 0x34, 0x32, 0x52,
	0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x6b, 0x20, 0x03,
	0x28, 0x11, 0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x0f, 0xb2, 0x06, 0x02, 0x35, 0x30, 0xb2, 0x06, 0x02,
	0x35, 0x31, 0xb2, 0x06, 0x02, 0x35, 0x32, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x36, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x6c, 0x20, 0x03, 0x28, 0x12, 0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x0f,
	0xb2, 0x06, 0x02, 0x36, 0x30, 0xb2, 0x06, 0x02, 0x36, 0x31, 0xb2, 0x06, 0x02, 0x36, 0x32, 0x52,
	0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3a, 0x0a, 0x0e,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6d,
	0x20, 0x03, 0x28, 0x0f, 0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x0f, 0xb2, 0x06, 0x02, 0x37, 0x30, 0xb2,
	0x06, 0x02, 0x37, 0x31, 0xb2, 0x06, 0x02, 0x37, 0x32, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x10,
	0x42, 0x13, 0xa2, 0xa1, 0x1f, 0x0f, 0xb2, 0x06, 0x02, 0x38, 0x30, 0xb2, 0x06, 0x02, 0x38, 0x31,
	0xb2, 0x06, 0x02, 0x38, 0x32, 0x52, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x38, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x07, 0x42, 0x13, 0xa2, 0xa1, 0x1f,
	0x0f, 0xb2, 0x06, 0x02, 0x39, 0x30, 0xb2, 0x06, 0x02, 0x39, 0x31, 0xb2, 0x06, 0x02, 0x39, 0x32,
	0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x3b,
	0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x70, 0x20, 0x03, 0x28, 0x06, 0x42, 0x16, 0xa2, 0xa1, 0x1f, 0x12, 0xb2, 0x06, 0x03, 0x31, 0x30,
	0x30, 0xb2, 0x06, 0x03, 0x31, 0x30, 0x31, 0xb2, 0x06, 0x03, 0x31, 0x30, 0x32, 0x52, 0x0c, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x39, 0x0a, 0x0a, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x71, 0x20, 0x03, 0x28, 0x08, 0x42,
	0x1a, 0xa2, 0xa1, 0x1f, 0x16, 0xb2, 0x06, 0x04, 0x74, 0x72, 0x75, 0x65, 0xb2, 0x06, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0xb2, 0x06, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x72, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1,
	0x1f, 0x00, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x12,
	0x27, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x18,
	0x73, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x0b, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x74, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x42, 0x10, 0xa2, 0xa1, 0x1f, 0x0c, 0xb2, 0x06, 0x01, 0x30, 0xb2, 0x06,
	0x01, 0x31, 0xb2, 0x06, 0x01, 0x32, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x32, 0x18, 0x75, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x10,
	0xa2, 0xa1, 0x1f, 0x0c, 0xb2, 0x06, 0x01, 0x33, 0xb2, 0x06, 0x01, 0x34, 0xb2, 0x06, 0x01, 0x38,
	0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x41, 0x0a, 0x0d,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x18, 0x76, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xa2, 0xa1, 0x1f,
	0x00, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x12,
	0x41, 0x0a, 0x0d, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32,
	0x18, 0x77, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04,
	0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x32, 0x22, 0xb7, 0x2f, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x12, 0x7f, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x1e, 0xa2, 0xa1, 0x1f, 0x1a, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x6b, 0x31, 0x31, 0x12,
	0x03, 0x76, 0x31, 0x31, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x6b, 0x31, 0x32, 0x12, 0x03, 0x76, 0x31,
	0x32, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x12, 0x73, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x12, 0xa2, 0xa1, 0x1f, 0x0e, 0xba, 0x06, 0x04, 0x0a, 0x00, 0x12, 0x00, 0xba,
	0x06, 0x04, 0x0a, 0x00, 0x12, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x65, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x10, 0x6d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12,
	0x65, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04,
	0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12, 0x7a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0xca, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1, 0x1f, 0x1a, 0xba, 0x06, 0x0a, 0x0a, 0x02, 0x31, 0x30, 0x12,
	0x04, 0x31, 0x30, 0x2e, 0x31, 0xba, 0x06, 0x0a, 0x0a, 0x02, 0x31, 0x31, 0x12, 0x04, 0x31, 0x30,
	0x2e, 0x32, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x77, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xcb, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1,
	0x1f, 0x1a, 0xba, 0x06, 0x0a, 0x0a, 0x02, 0x32, 0x30, 0x12, 0x04, 0x32, 0x30, 0x2e, 0x31, 0xba,
	0x06, 0x0a, 0x0a, 0x02, 0x32, 0x31, 0x12, 0x04, 0x32, 0x30, 0x2e, 0x32, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x72, 0x0a, 0x0f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xcc,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x19, 0xa2, 0xa1, 0x1f, 0x15, 0xba, 0x06, 0x07, 0x0a, 0x02,
	0x33, 0x30, 0x12, 0x01, 0x31, 0xba, 0x06, 0x08, 0x0a, 0x02, 0x33, 0x31, 0x12, 0x02, 0x31, 0x31,
	0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x72, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0xcd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x19, 0xa2, 0xa1, 0x1f, 0x15, 0xba,
	0x06, 0x07, 0x0a, 0x02, 0x34, 0x30, 0x12, 0x01, 0x32, 0xba, 0x06, 0x08, 0x0a, 0x02, 0x34, 0x31,
	0x12, 0x02, 0x31, 0x32, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x75, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xce, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x19, 0xa2, 0xa1, 0x1f, 0x15, 0xba, 0x06, 0x07, 0x0a, 0x02, 0x35, 0x30, 0x12, 0x01, 0x33, 0xba,
	0x06, 0x08, 0x0a, 0x02, 0x35, 0x31, 0x12, 0x02, 0x31, 0x33, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x75, 0x0a, 0x10, 0x6d, 0x61,
	0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xcf,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x19, 0xa2, 0xa1, 0x1f, 0x15, 0xba, 0x06, 0x07, 0x0a,
	0x02, 0x36, 0x30, 0x12, 0x01, 0x34, 0xba, 0x06, 0x08, 0x0a, 0x02, 0x36, 0x31, 0x12, 0x02, 0x31,
	0x34, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x75, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xd0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x19, 0xa2,
	0xa1, 0x1f, 0x15, 0xba, 0x06, 0x07, 0x0a, 0x02, 0x37, 0x30, 0x12, 0x01, 0x35, 0xba, 0x06, 0x08,
	0x0a, 0x02, 0x37, 0x31, 0x12, 0x02, 0x31, 0x35, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x75, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0xd1, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x19, 0xa2, 0xa1, 0x1f, 0x15, 0xba, 0x06, 0x07, 0x0a, 0x02, 0x38,
	0x30, 0x12, 0x01, 0x36, 0xba, 0x06, 0x08, 0x0a, 0x02, 0x38, 0x31, 0x12, 0x02, 0x31, 0x36, 0x52,
	0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x7b, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x19, 0xa2, 0xa1, 0x1f, 0x15, 0xba, 0x06, 0x07, 0x0a, 0x02, 0x39, 0x30, 0x12, 0x01, 0x37, 0xba,
	0x06, 0x08, 0x0a, 0x02, 0x39, 0x31, 0x12, 0x02, 0x31, 0x37, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x7d, 0x0a, 0x12,
	0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0xd3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0xa2, 0xa1,
	0x1f, 0x17, 0xba, 0x06, 0x08, 0x0a, 0x03, 0x31, 0x30, 0x30, 0x12, 0x01, 0x38, 0xba, 0x06, 0x09,
	0x0a, 0x03, 0x31, 0x30, 0x31, 0x12, 0x02, 0x31, 0x38, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x7a, 0x0a, 0x11, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0xd4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0xa2, 0xa1, 0x1f, 0x17, 0xba,
	0x06, 0x08, 0x0a, 0x03, 0x31, 0x31, 0x30, 0x12, 0x01, 0x39, 0xba, 0x06, 0x09, 0x0a, 0x03, 0x31,
	0x31, 0x31, 0x12, 0x02, 0x31, 0x39, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x7b, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0xd5, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0xa2, 0xa1, 0x1f, 0x18, 0xba, 0x06, 0x09, 0x0a, 0x03,
	0x31, 0x32, 0x30, 0x12, 0x02, 0x31, 0x30, 0xba, 0x06, 0x09, 0x0a, 0x03, 0x31, 0x32, 0x31, 0x12,
	0x02, 0x32, 0x30, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x12, 0x77, 0x0a, 0x0e, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0xd6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x21, 0xa2, 0xa1,
	0x1f, 0x1d, 0xba, 0x06, 0x0b, 0x0a, 0x03, 0x31, 0x33, 0x30, 0x12, 0x04, 0x74, 0x72, 0x75, 0x65,
	0xba, 0x06, 0x0c, 0x0a, 0x03, 0x31, 0x33, 0x31, 0x12, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0c, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x78, 0x0a,
	0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0xd7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0xa2, 0xa1, 0x1f, 0x18, 0xba,
	0x06, 0x09, 0x0a, 0x03, 0x31, 0x34, 0x30, 0x12, 0x02, 0x76, 0x31, 0xba, 0x06, 0x09, 0x0a, 0x03,
	0x31, 0x34, 0x31, 0x12, 0x02, 0x76, 0x32, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xd8, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0xd9, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x1a, 0xa2, 0xa1, 0x1f, 0x16, 0xba, 0x06, 0x08, 0x0a, 0x03, 0x31, 0x36, 0x30, 0x12, 0x01,
	0x30, 0xba, 0x06, 0x08, 0x0a, 0x03, 0x31, 0x36, 0x31, 0x12, 0x01, 0x31, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x73, 0x0a, 0x0f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0xda,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1a, 0xa2, 0xa1, 0x1f, 0x16, 0xba, 0x06, 0x08, 0x0a, 0x03,
	0x31, 0x37, 0x30, 0x12, 0x01, 0x33, 0xba, 0x06, 0x08, 0x0a, 0x03, 0x31, 0x37, 0x31, 0x12, 0x01,
	0x34, 0x52, 0x0d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x32,
	0x12, 0x60, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0xdc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xa2, 0xa1,
	0x1f, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x77, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xad, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1,
	0x1f, 0x1a, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x03, 0x31, 0x30, 0x30, 0xba,
	0x06, 0x0a, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x03, 0x31, 0x30, 0x31, 0x52, 0x0d, 0x6d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x7a, 0x0a, 0x10, 0x6d,
	0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0xae, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1, 0x1f, 0x1a, 0xba, 0x06, 0x0a,
	0x0a, 0x03, 0x32, 0x31, 0x30, 0x12, 0x03, 0x31, 0x31, 0x30, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32,
	0x31, 0x31, 0x12, 0x03, 0x31, 0x31, 0x31, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x7a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb0, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e,
	0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1, 0x1f, 0x1a, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32, 0x32,
	0x30, 0x12, 0x03, 0x31, 0x32, 0x30, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32, 0x32, 0x31, 0x12, 0x03,
	0x31, 0x32, 0x31, 0x52, 0x0e, 0x6d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x7a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xb1, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x1e, 0xa2, 0xa1, 0x1f, 0x1a, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32, 0x33, 0x30, 0x12, 0x03, 0x31,
	0x33, 0x30, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32, 0x33, 0x31, 0x12, 0x03, 0x31, 0x33, 0x31, 0x52,
	0x0e, 0x6d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x7a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xb2, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1, 0x1f,
	0x1a, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32, 0x34, 0x30, 0x12, 0x03, 0x31, 0x34, 0x30, 0xba, 0x06,
	0x0a, 0x0a, 0x03, 0x32, 0x34, 0x31, 0x12, 0x03, 0x31, 0x34, 0x31, 0x52, 0x0e, 0x6d, 0x61, 0x70,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x7d, 0x0a, 0x11, 0x6d,
	0x61, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0xb3, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1, 0x1f, 0x1a, 0xba,
	0x06, 0x0a, 0x0a, 0x03, 0x32, 0x35, 0x30, 0x12, 0x03, 0x31, 0x35, 0x30, 0xba, 0x06, 0x0a, 0x0a,
	0x03, 0x32, 0x35, 0x31, 0x12, 0x03, 0x31, 0x35, 0x31, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x7d, 0x0a, 0x11, 0x6d, 0x61,
	0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0xb4, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1, 0x1f, 0x1a, 0xba, 0x06,
	0x0a, 0x0a, 0x03, 0x32, 0x36, 0x30, 0x12, 0x03, 0x31, 0x36, 0x30, 0xba, 0x06, 0x0a, 0x0a, 0x03,
	0x32, 0x36, 0x31, 0x12, 0x03, 0x31, 0x36, 0x31, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x80, 0x01, 0x0a, 0x12, 0x6d, 0x61,
	0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0xb5, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1, 0x1f, 0x1a,
	0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32, 0x37, 0x30, 0x12, 0x03, 0x31, 0x37, 0x30, 0xba, 0x06, 0x0a,
	0x0a, 0x03, 0x32, 0x37, 0x31, 0x12, 0x03, 0x31, 0x37, 0x31, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x80, 0x01, 0x0a,
	0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xb6, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2,
	0xa1, 0x1f, 0x1a, 0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32, 0x38, 0x30, 0x12, 0x03, 0x31, 0x38, 0x30,
	0xba, 0x06, 0x0a, 0x0a, 0x03, 0x32, 0x38, 0x31, 0x12, 0x03, 0x31, 0x38, 0x31, 0x52, 0x10, 0x6d,
	0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x7a, 0x0a, 0x10, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0xb7, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x61, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1e, 0xa2, 0xa1, 0x1f,
	0x1a, 0xba, 0x06, 0x0a, 0x0a, 0x02, 0x6b, 0x31, 0x12, 0x04, 0x31, 0x30, 0x30, 0x30, 0xba, 0x06,
	0x0a, 0x0a, 0x02, 0x6b, 0x32, 0x12, 0x04, 0x31, 0x30, 0x30, 0x31, 0x52, 0x0e, 0x6d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x1a, 0x43, 0x0a, 0x15, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42,
	0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x12,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x12, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d,
	0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41,
	0x0a, 0x13, 0x4d, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d,
	0x61, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf7, 0x18, 0x0a,
	0x0c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x31, 0x12, 0x33, 0x0a,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03, 0x74, 0x73,
	0x31, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x12, 0x30, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xa2, 0xa1, 0x1f, 0x03,
	0xaa, 0x06, 0x00, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x12, 0x32, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xa2, 0xa1,
	0x1f, 0x05, 0xaa, 0x06, 0x02, 0x22, 0x22, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x31, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x22, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12, 0x35, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x22, 0x74, 0x73, 0x35,
	0x22, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x35, 0x12, 0x36, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xa2, 0xa1, 0x1f, 0x09,
	0xaa, 0x06, 0x06, 0x22, 0x74, 0x73, 0x22, 0x36, 0x22, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x36, 0x12, 0x36, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x37, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0d, 0xa2, 0xa1, 0x1f, 0x09, 0xaa, 0x06, 0x06, 0x22, 0x74, 0x73, 0x22, 0x37,
	0x22, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x37, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08,
	0xaa, 0x06, 0x05, 0x5b, 0x74, 0x73, 0x38, 0x5d, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x38, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x7b, 0x74, 0x73, 0x39, 0x7d, 0x48,
	0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39,
	0x12, 0x31, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03,
	0x31, 0x2e, 0x31, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0xa2, 0xa1, 0x1f, 0x06, 0xaa,
	0x06, 0x03, 0x31, 0x2e, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04,
	0xaa, 0x06, 0x01, 0x31, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x2d, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa,
	0x06, 0x01, 0x32, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa,
	0x06, 0x01, 0x33, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04,
	0xaa, 0x06, 0x01, 0x34, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x25, 0x20, 0x01, 0x28, 0x11, 0x42, 0x08, 0xa2, 0xa1, 0x1f,
	0x04, 0xaa, 0x06, 0x01, 0x35, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2f, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x26, 0x20, 0x01, 0x28, 0x12, 0x42, 0x08, 0xa2, 0xa1,
	0x1f, 0x04, 0xaa, 0x06, 0x01, 0x36, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x31, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x27, 0x20, 0x01, 0x28, 0x07, 0x42, 0x08,
	0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x37, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x31, 0x0a, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x31, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x39, 0x48, 0x00, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x34, 0x0a, 0x0f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x09, 0xa2, 0xa1, 0x1f, 0x05, 0xaa, 0x06, 0x02, 0x31, 0x30,
	0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x34, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x10, 0x42, 0x09, 0xa2, 0xa1, 0x1f,
	0x05, 0xaa, 0x06, 0x02, 0x31, 0x31, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2e, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0xa2,
	0xa1, 0x1f, 0x07, 0xaa, 0x06, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2b, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x31, 0x12, 0x2b, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x32, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1,
	0x1f, 0x00, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x32, 0x12, 0x2b, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x33, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x48,
	0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x12,
	0x44, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x08, 0xa2, 0xa1,
	0x1f, 0x04, 0xaa, 0x06, 0x01, 0x38, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x44, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x33, 0x48, 0x00, 0x52, 0x0b,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x48, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0xa2, 0xa1, 0x1f,
	0x03, 0xaa, 0x06, 0x00, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x31, 0x12, 0x45, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x12, 0x33, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03, 0x74, 0x73, 0x31,
	0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x12, 0x30, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xa2, 0xa1, 0x1f, 0x03, 0xaa,
	0x06, 0x00, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x12, 0x32, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x33, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xa2, 0xa1, 0x1f,
	0x05, 0xaa, 0x06, 0x02, 0x22, 0x22, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x31, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x22, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x35, 0x18, 0x69, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x22, 0x74, 0x73, 0x35, 0x22,
	0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x35, 0x12, 0x36, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x36, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xa2, 0xa1, 0x1f, 0x09, 0xaa,
	0x06, 0x06, 0x22, 0x74, 0x73, 0x22, 0x36, 0x22, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x36, 0x12, 0x36, 0x0a, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x37, 0x18, 0x6b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0d, 0xa2, 0xa1, 0x1f, 0x09, 0xaa, 0x06, 0x06, 0x22, 0x74, 0x73, 0x22, 0x37, 0x22,
	0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x37, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x38, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa,
	0x06, 0x05, 0x5b, 0x74, 0x73, 0x38, 0x5d, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x38, 0x12, 0x35, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xa2, 0xa1, 0x1f, 0x08, 0xaa, 0x06, 0x05, 0x7b, 0x74, 0x73, 0x39, 0x7d, 0x48, 0x01,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x39, 0x12,
	0x32, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x01, 0x42, 0x0a, 0xa2, 0xa1, 0x1f, 0x06, 0xaa, 0x06, 0x03,
	0x31, 0x2e, 0x31, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0a, 0xa2, 0xa1, 0x1f, 0x06,
	0xaa, 0x06, 0x03, 0x31, 0x2e, 0x32, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xa2, 0xa1,
	0x1f, 0x04, 0xaa, 0x06, 0x01, 0x31, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x08, 0xa2, 0xa1,
	0x1f, 0x04, 0xaa, 0x06, 0x01, 0x32, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x30, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xa2,
	0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x33, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x34, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x30, 0x0a, 0x0d, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x35, 0x48, 0x01, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x8a, 0x01, 0x20,
	0x01, 0x28, 0x12, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x36, 0x48, 0x01, 0x52,
	0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x32, 0x0a,
	0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x8b, 0x01, 0x20, 0x01, 0x28, 0x07, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x37,
	0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x12, 0x32, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x06, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04,
	0xaa, 0x06, 0x01, 0x39, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x35, 0x0a, 0x0f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x42,
	0x09, 0xa2, 0xa1, 0x1f, 0x05, 0xaa, 0x06, 0x02, 0x31, 0x30, 0x48, 0x01, 0x52, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x35, 0x0a, 0x0f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x8e, 0x01, 0x20, 0x01, 0x28, 0x10, 0x42, 0x09, 0xa2, 0xa1, 0x1f, 0x05, 0xaa, 0x06, 0x02, 0x31,
	0x31, 0x48, 0x01, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x2f, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0xa2, 0xa1, 0x1f, 0x07, 0xaa,
	0x06, 0x04, 0x74, 0x72, 0x75, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x31, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1,
	0x1f, 0x00, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x31, 0x12, 0x2c, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x32, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00,
	0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x32,
	0x12, 0x2c, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x33, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x48, 0x01,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x33, 0x12, 0x45,
	0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x31, 0x18, 0x93,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x08, 0xa2, 0xa1,
	0x1f, 0x04, 0xaa, 0x06, 0x01, 0x32, 0x48, 0x01, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x32, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67,
	0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x42, 0x08, 0xa2, 0xa1, 0x1f, 0x04, 0xaa, 0x06, 0x01, 0x33, 0x48, 0x01, 0x52,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x49, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x18, 0x95,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0xa2,
	0xa1, 0x1f, 0x03, 0xaa, 0x06, 0x00, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x31, 0x12, 0x46, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x32, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xa2, 0xa1, 0x1f, 0x00, 0x48, 0x01,
	0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x32, 0x42,
	0x21, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x31, 0x12, 0x13, 0xaa,
	0xa1, 0x1f, 0x0f, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x42, 0x12, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x32,
	0x12, 0x04, 0xaa, 0xa1, 0x1f, 0x00, 0x2a, 0x4b, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12,
	0x0b, 0x0a, 0x07, 0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x65, 0x62, 0x72, 0x75, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61,
	0x72, 0x63, 0x68, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x70, 0x72, 0x69, 0x6c, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x79, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x75, 0x6e,
	0x65, 0x10, 0x08, 0x42, 0x16, 0x5a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescOnce sync.Once
	file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescData = file_xgo_tests_godefaultstest_godefaults_test_proto_rawDesc
)

func file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescGZIP() []byte {
	file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescOnce.Do(func() {
		file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescData)
	})
	return file_xgo_tests_godefaultstest_godefaults_test_proto_rawDescData
}

var file_xgo_tests_godefaultstest_godefaults_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_xgo_tests_godefaultstest_godefaults_test_proto_goTypes = []interface{}{
	(Enum1)(0),               // 0: godefaultstest.Enum1
	(*Config)(nil),           // 1: godefaultstest.Config
	(*LiteralMessage1)(nil),  // 2: godefaultstest.LiteralMessage1
	(*OptionalMessage1)(nil), // 3: godefaultstest.OptionalMessage1
	(*ListMessage1)(nil),     // 4: godefaultstest.ListMessage1
	(*MapMessage1)(nil),      // 5: godefaultstest.MapMessage1
	(*OneofMessag1)(nil),     // 6: godefaultstest.OneofMessag1
	nil,                      // 7: godefaultstest.MapMessage1.MapStringString1Entry
	nil,                      // 8: godefaultstest.MapMessage1.MapStringString2Entry
	nil,                      // 9: godefaultstest.MapMessage1.MapStringString3Entry
	nil,                      // 10: godefaultstest.MapMessage1.MapStringString4Entry
	nil,                      // 11: godefaultstest.MapMessage1.MapInt32DoubleEntry
	nil,                      // 12: godefaultstest.MapMessage1.MapInt32FloatEntry
	nil,                      // 13: godefaultstest.MapMessage1.MapInt32Int32Entry
	nil,                      // 14: godefaultstest.MapMessage1.MapInt32Int64Entry
	nil,                      // 15: godefaultstest.MapMessage1.MapInt32Uint32Entry
	nil,                      // 16: godefaultstest.MapMessage1.MapInt32Uint64Entry
	nil,                      // 17: godefaultstest.MapMessage1.MapInt32Sint32Entry
	nil,                      // 18: godefaultstest.MapMessage1.MapInt32Sint64Entry
	nil,                      // 19: godefaultstest.MapMessage1.MapInt32Sfixed32Entry
	nil,                      // 20: godefaultstest.MapMessage1.MapInt32Sfixed64Entry
	nil,                      // 21: godefaultstest.MapMessage1.MapInt32Fixed32Entry
	nil,                      // 22: godefaultstest.MapMessage1.MapInt32Fixed64Entry
	nil,                      // 23: godefaultstest.MapMessage1.MapInt32BoolEntry
	nil,                      // 24: godefaultstest.MapMessage1.MapInt32StringEntry
	nil,                      // 25: godefaultstest.MapMessage1.MapInt32BytesEntry
	nil,                      // 26: godefaultstest.MapMessage1.MapInt32Enum1Entry
	nil,                      // 27: godefaultstest.MapMessage1.MapInt32Enum2Entry
	nil,                      // 28: godefaultstest.MapMessage1.MapInt32ConfigEntry
	nil,                      // 29: godefaultstest.MapMessage1.MapInt64Int32Entry
	nil,                      // 30: godefaultstest.MapMessage1.MapUint32Int32Entry
	nil,                      // 31: godefaultstest.MapMessage1.MapUint64Int32Entry
	nil,                      // 32: godefaultstest.MapMessage1.MapSint32Int32Entry
	nil,                      // 33: godefaultstest.MapMessage1.MapSint64Int32Entry
	nil,                      // 34: godefaultstest.MapMessage1.MapFixed32Int32Entry
	nil,                      // 35: godefaultstest.MapMessage1.MapFixed64Int32Entry
	nil,                      // 36: godefaultstest.MapMessage1.MapSfixed32Int32Entry
	nil,                      // 37: godefaultstest.MapMessage1.MapSfixed64Int32Entry
	nil,                      // 38: godefaultstest.MapMessage1.MapStringInt32Entry
}
var file_xgo_tests_godefaultstest_godefaults_test_proto_depIdxs = []int32{
	0,  // 0: godefaultstest.LiteralMessage1.t_enum1:type_name -> godefaultstest.Enum1
	0,  // 1: godefaultstest.LiteralMessage1.t_enum2:type_name -> godefaultstest.Enum1
	1,  // 2: godefaultstest.LiteralMessage1.t_config1:type_name -> godefaultstest.Config
	1,  // 3: godefaultstest.LiteralMessage1.t_config2:type_name -> godefaultstest.Config
	0,  // 4: godefaultstest.OptionalMessage1.t_enum1:type_name -> godefaultstest.Enum1
	0,  // 5: godefaultstest.OptionalMessage1.t_enum2:type_name -> godefaultstest.Enum1
	1,  // 6: godefaultstest.OptionalMessage1.t_config1:type_name -> godefaultstest.Config
	1,  // 7: godefaultstest.OptionalMessage1.t_config2:type_name -> godefaultstest.Config
	0,  // 8: godefaultstest.ListMessage1.array_enum1:type_name -> godefaultstest.Enum1
	0,  // 9: godefaultstest.ListMessage1.array_enum2:type_name -> godefaultstest.Enum1
	1,  // 10: godefaultstest.ListMessage1.array_config1:type_name -> godefaultstest.Config
	1,  // 11: godefaultstest.ListMessage1.array_config2:type_name -> godefaultstest.Config
	7,  // 12: godefaultstest.MapMessage1.map_string_string1:type_name -> godefaultstest.MapMessage1.MapStringString1Entry
	8,  // 13: godefaultstest.MapMessage1.map_string_string2:type_name -> godefaultstest.MapMessage1.MapStringString2Entry
	9,  // 14: godefaultstest.MapMessage1.map_string_string3:type_name -> godefaultstest.MapMessage1.MapStringString3Entry
	10, // 15: godefaultstest.MapMessage1.map_string_string4:type_name -> godefaultstest.MapMessage1.MapStringString4Entry
	11, // 16: godefaultstest.MapMessage1.map_int32_double:type_name -> godefaultstest.MapMessage1.MapInt32DoubleEntry
	12, // 17: godefaultstest.MapMessage1.map_int32_float:type_name -> godefaultstest.MapMessage1.MapInt32FloatEntry
	13, // 18: godefaultstest.MapMessage1.map_int32_int32:type_name -> godefaultstest.MapMessage1.MapInt32Int32Entry
	14, // 19: godefaultstest.MapMessage1.map_int32_int64:type_name -> godefaultstest.MapMessage1.MapInt32Int64Entry
	15, // 20: godefaultstest.MapMessage1.map_int32_uint32:type_name -> godefaultstest.MapMessage1.MapInt32Uint32Entry
	16, // 21: godefaultstest.MapMessage1.map_int32_uint64:type_name -> godefaultstest.MapMessage1.MapInt32Uint64Entry
	17, // 22: godefaultstest.MapMessage1.map_int32_sint32:type_name -> godefaultstest.MapMessage1.MapInt32Sint32Entry
	18, // 23: godefaultstest.MapMessage1.map_int32_sint64:type_name -> godefaultstest.MapMessage1.MapInt32Sint64Entry
	19, // 24: godefaultstest.MapMessage1.map_int32_sfixed32:type_name -> godefaultstest.MapMessage1.MapInt32Sfixed32Entry
	20, // 25: godefaultstest.MapMessage1.map_int32_sfixed64:type_name -> godefaultstest.MapMessage1.MapInt32Sfixed64Entry
	21, // 26: godefaultstest.MapMessage1.map_int32_fixed32:type_name -> godefaultstest.MapMessage1.MapInt32Fixed32Entry
	22, // 27: godefaultstest.MapMessage1.map_int32_fixed64:type_name -> godefaultstest.MapMessage1.MapInt32Fixed64Entry
	23, // 28: godefaultstest.MapMessage1.map_int32_bool:type_name -> godefaultstest.MapMessage1.MapInt32BoolEntry
	24, // 29: godefaultstest.MapMessage1.map_int32_string:type_name -> godefaultstest.MapMessage1.MapInt32StringEntry
	25, // 30: godefaultstest.MapMessage1.map_int32_bytes:type_name -> godefaultstest.MapMessage1.MapInt32BytesEntry
	26, // 31: godefaultstest.MapMessage1.map_int32_enum1:type_name -> godefaultstest.MapMessage1.MapInt32Enum1Entry
	27, // 32: godefaultstest.MapMessage1.map_int32_enum2:type_name -> godefaultstest.MapMessage1.MapInt32Enum2Entry
	28, // 33: godefaultstest.MapMessage1.map_int32_config:type_name -> godefaultstest.MapMessage1.MapInt32ConfigEntry
	29, // 34: godefaultstest.MapMessage1.map_int64_int32:type_name -> godefaultstest.MapMessage1.MapInt64Int32Entry
	30, // 35: godefaultstest.MapMessage1.map_uint32_int32:type_name -> godefaultstest.MapMessage1.MapUint32Int32Entry
	31, // 36: godefaultstest.MapMessage1.map_uint64_int32:type_name -> godefaultstest.MapMessage1.MapUint64Int32Entry
	32, // 37: godefaultstest.MapMessage1.map_sint32_int32:type_name -> godefaultstest.MapMessage1.MapSint32Int32Entry
	33, // 38: godefaultstest.MapMessage1.map_sint64_int32:type_name -> godefaultstest.MapMessage1.MapSint64Int32Entry
	34, // 39: godefaultstest.MapMessage1.map_fixed32_int32:type_name -> godefaultstest.MapMessage1.MapFixed32Int32Entry
	35, // 40: godefaultstest.MapMessage1.map_fixed64_int32:type_name -> godefaultstest.MapMessage1.MapFixed64Int32Entry
	36, // 41: godefaultstest.MapMessage1.map_sfixed32_int32:type_name -> godefaultstest.MapMessage1.MapSfixed32Int32Entry
	37, // 42: godefaultstest.MapMessage1.map_sfixed64_int32:type_name -> godefaultstest.MapMessage1.MapSfixed64Int32Entry
	38, // 43: godefaultstest.MapMessage1.map_string_int32:type_name -> godefaultstest.MapMessage1.MapStringInt32Entry
	0,  // 44: godefaultstest.OneofMessag1.oneof1_enum1:type_name -> godefaultstest.Enum1
	0,  // 45: godefaultstest.OneofMessag1.oneof1_enum2:type_name -> godefaultstest.Enum1
	1,  // 46: godefaultstest.OneofMessag1.oneof1_config1:type_name -> godefaultstest.Config
	1,  // 47: godefaultstest.OneofMessag1.oneof1_config2:type_name -> godefaultstest.Config
	0,  // 48: godefaultstest.OneofMessag1.oneof2_enum1:type_name -> godefaultstest.Enum1
	0,  // 49: godefaultstest.OneofMessag1.oneof2_enum2:type_name -> godefaultstest.Enum1
	1,  // 50: godefaultstest.OneofMessag1.oneof2_config1:type_name -> godefaultstest.Config
	1,  // 51: godefaultstest.OneofMessag1.oneof2_config2:type_name -> godefaultstest.Config
	0,  // 52: godefaultstest.MapMessage1.MapInt32Enum1Entry.value:type_name -> godefaultstest.Enum1
	0,  // 53: godefaultstest.MapMessage1.MapInt32Enum2Entry.value:type_name -> godefaultstest.Enum1
	1,  // 54: godefaultstest.MapMessage1.MapInt32ConfigEntry.value:type_name -> godefaultstest.Config
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_xgo_tests_godefaultstest_godefaults_test_proto_init() }
func file_xgo_tests_godefaultstest_godefaults_test_proto_init() {
	if File_xgo_tests_godefaultstest_godefaults_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralMessage1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionalMessage1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMessage1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapMessage1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneofMessag1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*OneofMessag1_Oneof1String1)(nil),
		(*OneofMessag1_Oneof1String2)(nil),
		(*OneofMessag1_Oneof1String3)(nil),
		(*OneofMessag1_Oneof1String4)(nil),
		(*OneofMessag1_Oneof1String5)(nil),
		(*OneofMessag1_Oneof1String6)(nil),
		(*OneofMessag1_Oneof1String7)(nil),
		(*OneofMessag1_Oneof1String8)(nil),
		(*OneofMessag1_Oneof1String9)(nil),
		(*OneofMessag1_Oneof1Double)(nil),
		(*OneofMessag1_Oneof1Float)(nil),
		(*OneofMessag1_Oneof1Int32)(nil),
		(*OneofMessag1_Oneof1Int64)(nil),
		(*OneofMessag1_Oneof1Uint32)(nil),
		(*OneofMessag1_Oneof1Uint64)(nil),
		(*OneofMessag1_Oneof1Sint32)(nil),
		(*OneofMessag1_Oneof1Sint64)(nil),
		(*OneofMessag1_Oneof1Fixed32)(nil),
		(*OneofMessag1_Oneof1Fixed64)(nil),
		(*OneofMessag1_Oneof1Sfixed32)(nil),
		(*OneofMessag1_Oneof1Sfixed64)(nil),
		(*OneofMessag1_Oneof1Bool)(nil),
		(*OneofMessag1_Oneof1Bytes1)(nil),
		(*OneofMessag1_Oneof1Bytes2)(nil),
		(*OneofMessag1_Oneof1Bytes3)(nil),
		(*OneofMessag1_Oneof1Enum1)(nil),
		(*OneofMessag1_Oneof1Enum2)(nil),
		(*OneofMessag1_Oneof1Config1)(nil),
		(*OneofMessag1_Oneof1Config2)(nil),
		(*OneofMessag1_Oneof2String1)(nil),
		(*OneofMessag1_Oneof2String2)(nil),
		(*OneofMessag1_Oneof2String3)(nil),
		(*OneofMessag1_Oneof2String4)(nil),
		(*OneofMessag1_Oneof2String5)(nil),
		(*OneofMessag1_Oneof2String6)(nil),
		(*OneofMessag1_Oneof2String7)(nil),
		(*OneofMessag1_Oneof2String8)(nil),
		(*OneofMessag1_Oneof2String9)(nil),
		(*OneofMessag1_Oneof2Double)(nil),
		(*OneofMessag1_Oneof2Float)(nil),
		(*OneofMessag1_Oneof2Int32)(nil),
		(*OneofMessag1_Oneof2Int64)(nil),
		(*OneofMessag1_Oneof2Uint32)(nil),
		(*OneofMessag1_Oneof2Uint64)(nil),
		(*OneofMessag1_Oneof2Sint32)(nil),
		(*OneofMessag1_Oneof2Sint64)(nil),
		(*OneofMessag1_Oneof2Fixed32)(nil),
		(*OneofMessag1_Oneof2Fixed64)(nil),
		(*OneofMessag1_Oneof2Sfixed32)(nil),
		(*OneofMessag1_Oneof2Sfixed64)(nil),
		(*OneofMessag1_Oneof2Bool)(nil),
		(*OneofMessag1_Oneof2Bytes1)(nil),
		(*OneofMessag1_Oneof2Bytes2)(nil),
		(*OneofMessag1_Oneof2Bytes3)(nil),
		(*OneofMessag1_Oneof2Enum1)(nil),
		(*OneofMessag1_Oneof2Enum2)(nil),
		(*OneofMessag1_Oneof2Config1)(nil),
		(*OneofMessag1_Oneof2Config2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xgo_tests_godefaultstest_godefaults_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xgo_tests_godefaultstest_godefaults_test_proto_goTypes,
		DependencyIndexes: file_xgo_tests_godefaultstest_godefaults_test_proto_depIdxs,
		EnumInfos:         file_xgo_tests_godefaultstest_godefaults_test_proto_enumTypes,
		MessageInfos:      file_xgo_tests_godefaultstest_godefaults_test_proto_msgTypes,
	}.Build()
	File_xgo_tests_godefaultstest_godefaults_test_proto = out.File
	file_xgo_tests_godefaultstest_godefaults_test_proto_rawDesc = nil
	file_xgo_tests_godefaultstest_godefaults_test_proto_goTypes = nil
	file_xgo_tests_godefaultstest_godefaults_test_proto_depIdxs = nil
}
