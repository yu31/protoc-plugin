// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: xgo/tests/govalidatortest/govalidator_test.proto

package govalidatortest

import (
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbvalidator"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum1 int32

const (
	Enum1_January  Enum1 = 0
	Enum1_February Enum1 = 1
	Enum1_March    Enum1 = 2
	Enum1_April    Enum1 = 3
	Enum1_May      Enum1 = 4
	Enum1_June     Enum1 = 8
)

// Enum value maps for Enum1.
var (
	Enum1_name = map[int32]string{
		0: "January",
		1: "February",
		2: "March",
		3: "April",
		4: "May",
		8: "June",
	}
	Enum1_value = map[string]int32{
		"January":  0,
		"February": 1,
		"March":    2,
		"April":    3,
		"May":      4,
		"June":     8,
	}
)

func (x Enum1) Enum() *Enum1 {
	p := new(Enum1)
	*p = x
	return p
}

func (x Enum1) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum1) Descriptor() protoreflect.EnumDescriptor {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_enumTypes[0].Descriptor()
}

func (Enum1) Type() protoreflect.EnumType {
	return &file_xgo_tests_govalidatortest_govalidator_test_proto_enumTypes[0]
}

func (x Enum1) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum1.Descriptor instead.
func (Enum1) EnumDescriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{0}
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Config) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Message for valid field.
//
// ValidOneOfTags1 for test option tag OneOfTags.
type ValidOneOfTags1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofType1:
	//	*ValidOneOfTags1_Oneof1String1
	OneofType1 isValidOneOfTags1_OneofType1 `protobuf_oneof:"oneof_type1"`
	// Types that are assignable to OneofType2:
	//	*ValidOneOfTags1_Oneof2String1
	OneofType2 isValidOneOfTags1_OneofType2 `protobuf_oneof:"oneof_type2"`
	// Types that are assignable to OneofType3:
	//	*ValidOneOfTags1_Oneof3String1
	OneofType3 isValidOneOfTags1_OneofType3 `protobuf_oneof:"oneof_type3"`
	// Types that are assignable to OneofType4:
	//	*ValidOneOfTags1_Oneof4String1
	OneofType4 isValidOneOfTags1_OneofType4 `protobuf_oneof:"oneof_type4"`
	// Types that are assignable to OneofType5:
	//	*ValidOneOfTags1_Oneof5String1
	OneofType5 isValidOneOfTags1_OneofType5 `protobuf_oneof:"oneof_type5"`
}

func (x *ValidOneOfTags1) Reset() {
	*x = ValidOneOfTags1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidOneOfTags1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidOneOfTags1) ProtoMessage() {}

func (x *ValidOneOfTags1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidOneOfTags1.ProtoReflect.Descriptor instead.
func (*ValidOneOfTags1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{1}
}

func (m *ValidOneOfTags1) GetOneofType1() isValidOneOfTags1_OneofType1 {
	if m != nil {
		return m.OneofType1
	}
	return nil
}

func (x *ValidOneOfTags1) GetOneof1String1() string {
	if x, ok := x.GetOneofType1().(*ValidOneOfTags1_Oneof1String1); ok {
		return x.Oneof1String1
	}
	return ""
}

func (m *ValidOneOfTags1) GetOneofType2() isValidOneOfTags1_OneofType2 {
	if m != nil {
		return m.OneofType2
	}
	return nil
}

func (x *ValidOneOfTags1) GetOneof2String1() string {
	if x, ok := x.GetOneofType2().(*ValidOneOfTags1_Oneof2String1); ok {
		return x.Oneof2String1
	}
	return ""
}

func (m *ValidOneOfTags1) GetOneofType3() isValidOneOfTags1_OneofType3 {
	if m != nil {
		return m.OneofType3
	}
	return nil
}

func (x *ValidOneOfTags1) GetOneof3String1() string {
	if x, ok := x.GetOneofType3().(*ValidOneOfTags1_Oneof3String1); ok {
		return x.Oneof3String1
	}
	return ""
}

func (m *ValidOneOfTags1) GetOneofType4() isValidOneOfTags1_OneofType4 {
	if m != nil {
		return m.OneofType4
	}
	return nil
}

func (x *ValidOneOfTags1) GetOneof4String1() string {
	if x, ok := x.GetOneofType4().(*ValidOneOfTags1_Oneof4String1); ok {
		return x.Oneof4String1
	}
	return ""
}

func (m *ValidOneOfTags1) GetOneofType5() isValidOneOfTags1_OneofType5 {
	if m != nil {
		return m.OneofType5
	}
	return nil
}

func (x *ValidOneOfTags1) GetOneof5String1() string {
	if x, ok := x.GetOneofType5().(*ValidOneOfTags1_Oneof5String1); ok {
		return x.Oneof5String1
	}
	return ""
}

type isValidOneOfTags1_OneofType1 interface {
	isValidOneOfTags1_OneofType1()
}

type ValidOneOfTags1_Oneof1String1 struct {
	Oneof1String1 string `protobuf:"bytes,1,opt,name=oneof1_string1,json=oneof1String1,proto3,oneof"`
}

func (*ValidOneOfTags1_Oneof1String1) isValidOneOfTags1_OneofType1() {}

type isValidOneOfTags1_OneofType2 interface {
	isValidOneOfTags1_OneofType2()
}

type ValidOneOfTags1_Oneof2String1 struct {
	Oneof2String1 string `protobuf:"bytes,2,opt,name=oneof2_string1,json=oneof2String1,proto3,oneof"`
}

func (*ValidOneOfTags1_Oneof2String1) isValidOneOfTags1_OneofType2() {}

type isValidOneOfTags1_OneofType3 interface {
	isValidOneOfTags1_OneofType3()
}

type ValidOneOfTags1_Oneof3String1 struct {
	Oneof3String1 string `protobuf:"bytes,3,opt,name=oneof3_string1,json=oneof3String1,proto3,oneof"`
}

func (*ValidOneOfTags1_Oneof3String1) isValidOneOfTags1_OneofType3() {}

type isValidOneOfTags1_OneofType4 interface {
	isValidOneOfTags1_OneofType4()
}

type ValidOneOfTags1_Oneof4String1 struct {
	Oneof4String1 string `protobuf:"bytes,4,opt,name=oneof4_string1,json=oneof4String1,proto3,oneof"`
}

func (*ValidOneOfTags1_Oneof4String1) isValidOneOfTags1_OneofType4() {}

type isValidOneOfTags1_OneofType5 interface {
	isValidOneOfTags1_OneofType5()
}

type ValidOneOfTags1_Oneof5String1 struct {
	Oneof5String1 string `protobuf:"bytes,5,opt,name=oneof5_string1,json=oneof5String1,proto3,oneof"`
}

func (*ValidOneOfTags1_Oneof5String1) isValidOneOfTags1_OneofType5() {}

// ValidFloatTagsGeneral1 for test option tag FloatTags with general field.
type ValidFloatTagsGeneral1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type for float
	TFloat1      float32 `protobuf:"fixed32,1,opt,name=t_float1,json=tFloat1,proto3" json:"t_float1,omitempty"`
	TFloat2      float32 `protobuf:"fixed32,2,opt,name=t_float2,json=tFloat2,proto3" json:"t_float2,omitempty"`
	TFloat3      float32 `protobuf:"fixed32,3,opt,name=t_float3,json=tFloat3,proto3" json:"t_float3,omitempty"`
	TFloat4      float32 `protobuf:"fixed32,4,opt,name=t_float4,json=tFloat4,proto3" json:"t_float4,omitempty"`
	TFloatEq1    float32 `protobuf:"fixed32,10,opt,name=t_float_eq1,json=tFloatEq1,proto3" json:"t_float_eq1,omitempty"`
	TFloatNe1    float32 `protobuf:"fixed32,11,opt,name=t_float_ne1,json=tFloatNe1,proto3" json:"t_float_ne1,omitempty"`
	TFloatLt1    float32 `protobuf:"fixed32,12,opt,name=t_float_lt1,json=tFloatLt1,proto3" json:"t_float_lt1,omitempty"`
	TFloatGt1    float32 `protobuf:"fixed32,13,opt,name=t_float_gt1,json=tFloatGt1,proto3" json:"t_float_gt1,omitempty"`
	TFloatLte1   float32 `protobuf:"fixed32,14,opt,name=t_float_lte1,json=tFloatLte1,proto3" json:"t_float_lte1,omitempty"`
	TFloatGte1   float32 `protobuf:"fixed32,15,opt,name=t_float_gte1,json=tFloatGte1,proto3" json:"t_float_gte1,omitempty"`
	TFloatIn1    float32 `protobuf:"fixed32,16,opt,name=t_float_in1,json=tFloatIn1,proto3" json:"t_float_in1,omitempty"`
	TFloatNotIn1 float32 `protobuf:"fixed32,17,opt,name=t_float_not_in1,json=tFloatNotIn1,proto3" json:"t_float_not_in1,omitempty"`
	// Type for double
	TDouble1      float64 `protobuf:"fixed64,31,opt,name=t_double1,json=tDouble1,proto3" json:"t_double1,omitempty"`
	TDouble2      float64 `protobuf:"fixed64,32,opt,name=t_double2,json=tDouble2,proto3" json:"t_double2,omitempty"`
	TDouble3      float64 `protobuf:"fixed64,33,opt,name=t_double3,json=tDouble3,proto3" json:"t_double3,omitempty"`
	TDouble4      float64 `protobuf:"fixed64,34,opt,name=t_double4,json=tDouble4,proto3" json:"t_double4,omitempty"`
	TDoubleEq1    float64 `protobuf:"fixed64,40,opt,name=t_double_eq1,json=tDoubleEq1,proto3" json:"t_double_eq1,omitempty"`
	TDoubleNe1    float64 `protobuf:"fixed64,41,opt,name=t_double_ne1,json=tDoubleNe1,proto3" json:"t_double_ne1,omitempty"`
	TDoubleLt1    float64 `protobuf:"fixed64,42,opt,name=t_double_lt1,json=tDoubleLt1,proto3" json:"t_double_lt1,omitempty"`
	TDoubleGt1    float64 `protobuf:"fixed64,43,opt,name=t_double_gt1,json=tDoubleGt1,proto3" json:"t_double_gt1,omitempty"`
	TDoubleLte1   float64 `protobuf:"fixed64,44,opt,name=t_double_lte1,json=tDoubleLte1,proto3" json:"t_double_lte1,omitempty"`
	TDoubleGte1   float64 `protobuf:"fixed64,45,opt,name=t_double_gte1,json=tDoubleGte1,proto3" json:"t_double_gte1,omitempty"`
	TDoubleIn1    float64 `protobuf:"fixed64,46,opt,name=t_double_in1,json=tDoubleIn1,proto3" json:"t_double_in1,omitempty"`
	TDoubleNotIn1 float64 `protobuf:"fixed64,47,opt,name=t_double_not_in1,json=tDoubleNotIn1,proto3" json:"t_double_not_in1,omitempty"`
}

func (x *ValidFloatTagsGeneral1) Reset() {
	*x = ValidFloatTagsGeneral1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidFloatTagsGeneral1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidFloatTagsGeneral1) ProtoMessage() {}

func (x *ValidFloatTagsGeneral1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidFloatTagsGeneral1.ProtoReflect.Descriptor instead.
func (*ValidFloatTagsGeneral1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{2}
}

func (x *ValidFloatTagsGeneral1) GetTFloat1() float32 {
	if x != nil {
		return x.TFloat1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloat2() float32 {
	if x != nil {
		return x.TFloat2
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloat3() float32 {
	if x != nil {
		return x.TFloat3
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloat4() float32 {
	if x != nil {
		return x.TFloat4
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloatEq1() float32 {
	if x != nil {
		return x.TFloatEq1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloatNe1() float32 {
	if x != nil {
		return x.TFloatNe1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloatLt1() float32 {
	if x != nil {
		return x.TFloatLt1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloatGt1() float32 {
	if x != nil {
		return x.TFloatGt1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloatLte1() float32 {
	if x != nil {
		return x.TFloatLte1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloatGte1() float32 {
	if x != nil {
		return x.TFloatGte1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloatIn1() float32 {
	if x != nil {
		return x.TFloatIn1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTFloatNotIn1() float32 {
	if x != nil {
		return x.TFloatNotIn1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDouble1() float64 {
	if x != nil {
		return x.TDouble1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDouble2() float64 {
	if x != nil {
		return x.TDouble2
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDouble3() float64 {
	if x != nil {
		return x.TDouble3
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDouble4() float64 {
	if x != nil {
		return x.TDouble4
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDoubleEq1() float64 {
	if x != nil {
		return x.TDoubleEq1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDoubleNe1() float64 {
	if x != nil {
		return x.TDoubleNe1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDoubleLt1() float64 {
	if x != nil {
		return x.TDoubleLt1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDoubleGt1() float64 {
	if x != nil {
		return x.TDoubleGt1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDoubleLte1() float64 {
	if x != nil {
		return x.TDoubleLte1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDoubleGte1() float64 {
	if x != nil {
		return x.TDoubleGte1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDoubleIn1() float64 {
	if x != nil {
		return x.TDoubleIn1
	}
	return 0
}

func (x *ValidFloatTagsGeneral1) GetTDoubleNotIn1() float64 {
	if x != nil {
		return x.TDoubleNotIn1
	}
	return 0
}

// ValidFloatTagsOptional1 for test option tag FloatTags with optional field.
type ValidFloatTagsOptional1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type for float
	TFloat1      *float32 `protobuf:"fixed32,1,opt,name=t_float1,json=tFloat1,proto3,oneof" json:"t_float1,omitempty"`
	TFloat2      *float32 `protobuf:"fixed32,2,opt,name=t_float2,json=tFloat2,proto3,oneof" json:"t_float2,omitempty"`
	TFloat3      *float32 `protobuf:"fixed32,3,opt,name=t_float3,json=tFloat3,proto3,oneof" json:"t_float3,omitempty"`
	TFloat4      *float32 `protobuf:"fixed32,4,opt,name=t_float4,json=tFloat4,proto3,oneof" json:"t_float4,omitempty"`
	TFloatEq1    *float32 `protobuf:"fixed32,10,opt,name=t_float_eq1,json=tFloatEq1,proto3,oneof" json:"t_float_eq1,omitempty"`
	TFloatNe1    *float32 `protobuf:"fixed32,11,opt,name=t_float_ne1,json=tFloatNe1,proto3,oneof" json:"t_float_ne1,omitempty"`
	TFloatLt1    *float32 `protobuf:"fixed32,12,opt,name=t_float_lt1,json=tFloatLt1,proto3,oneof" json:"t_float_lt1,omitempty"`
	TFloatGt1    *float32 `protobuf:"fixed32,13,opt,name=t_float_gt1,json=tFloatGt1,proto3,oneof" json:"t_float_gt1,omitempty"`
	TFloatLte1   *float32 `protobuf:"fixed32,14,opt,name=t_float_lte1,json=tFloatLte1,proto3,oneof" json:"t_float_lte1,omitempty"`
	TFloatGte1   *float32 `protobuf:"fixed32,15,opt,name=t_float_gte1,json=tFloatGte1,proto3,oneof" json:"t_float_gte1,omitempty"`
	TFloatIn1    *float32 `protobuf:"fixed32,16,opt,name=t_float_in1,json=tFloatIn1,proto3,oneof" json:"t_float_in1,omitempty"`
	TFloatNotIn1 *float32 `protobuf:"fixed32,17,opt,name=t_float_not_in1,json=tFloatNotIn1,proto3,oneof" json:"t_float_not_in1,omitempty"`
	// Type for double
	TDouble1      *float64 `protobuf:"fixed64,31,opt,name=t_double1,json=tDouble1,proto3,oneof" json:"t_double1,omitempty"`
	TDouble2      *float64 `protobuf:"fixed64,32,opt,name=t_double2,json=tDouble2,proto3,oneof" json:"t_double2,omitempty"`
	TDouble3      *float64 `protobuf:"fixed64,33,opt,name=t_double3,json=tDouble3,proto3,oneof" json:"t_double3,omitempty"`
	TDouble4      *float64 `protobuf:"fixed64,34,opt,name=t_double4,json=tDouble4,proto3,oneof" json:"t_double4,omitempty"`
	TDoubleEq1    *float64 `protobuf:"fixed64,40,opt,name=t_double_eq1,json=tDoubleEq1,proto3,oneof" json:"t_double_eq1,omitempty"`
	TDoubleNe1    *float64 `protobuf:"fixed64,41,opt,name=t_double_ne1,json=tDoubleNe1,proto3,oneof" json:"t_double_ne1,omitempty"`
	TDoubleLt1    *float64 `protobuf:"fixed64,42,opt,name=t_double_lt1,json=tDoubleLt1,proto3,oneof" json:"t_double_lt1,omitempty"`
	TDoubleGt1    *float64 `protobuf:"fixed64,43,opt,name=t_double_gt1,json=tDoubleGt1,proto3,oneof" json:"t_double_gt1,omitempty"`
	TDoubleLte1   *float64 `protobuf:"fixed64,44,opt,name=t_double_lte1,json=tDoubleLte1,proto3,oneof" json:"t_double_lte1,omitempty"`
	TDoubleGte1   *float64 `protobuf:"fixed64,45,opt,name=t_double_gte1,json=tDoubleGte1,proto3,oneof" json:"t_double_gte1,omitempty"`
	TDoubleIn1    *float64 `protobuf:"fixed64,46,opt,name=t_double_in1,json=tDoubleIn1,proto3,oneof" json:"t_double_in1,omitempty"`
	TDoubleNotIn1 *float64 `protobuf:"fixed64,47,opt,name=t_double_not_in1,json=tDoubleNotIn1,proto3,oneof" json:"t_double_not_in1,omitempty"`
}

func (x *ValidFloatTagsOptional1) Reset() {
	*x = ValidFloatTagsOptional1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidFloatTagsOptional1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidFloatTagsOptional1) ProtoMessage() {}

func (x *ValidFloatTagsOptional1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidFloatTagsOptional1.ProtoReflect.Descriptor instead.
func (*ValidFloatTagsOptional1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{3}
}

func (x *ValidFloatTagsOptional1) GetTFloat1() float32 {
	if x != nil && x.TFloat1 != nil {
		return *x.TFloat1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloat2() float32 {
	if x != nil && x.TFloat2 != nil {
		return *x.TFloat2
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloat3() float32 {
	if x != nil && x.TFloat3 != nil {
		return *x.TFloat3
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloat4() float32 {
	if x != nil && x.TFloat4 != nil {
		return *x.TFloat4
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloatEq1() float32 {
	if x != nil && x.TFloatEq1 != nil {
		return *x.TFloatEq1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloatNe1() float32 {
	if x != nil && x.TFloatNe1 != nil {
		return *x.TFloatNe1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloatLt1() float32 {
	if x != nil && x.TFloatLt1 != nil {
		return *x.TFloatLt1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloatGt1() float32 {
	if x != nil && x.TFloatGt1 != nil {
		return *x.TFloatGt1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloatLte1() float32 {
	if x != nil && x.TFloatLte1 != nil {
		return *x.TFloatLte1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloatGte1() float32 {
	if x != nil && x.TFloatGte1 != nil {
		return *x.TFloatGte1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloatIn1() float32 {
	if x != nil && x.TFloatIn1 != nil {
		return *x.TFloatIn1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTFloatNotIn1() float32 {
	if x != nil && x.TFloatNotIn1 != nil {
		return *x.TFloatNotIn1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDouble1() float64 {
	if x != nil && x.TDouble1 != nil {
		return *x.TDouble1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDouble2() float64 {
	if x != nil && x.TDouble2 != nil {
		return *x.TDouble2
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDouble3() float64 {
	if x != nil && x.TDouble3 != nil {
		return *x.TDouble3
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDouble4() float64 {
	if x != nil && x.TDouble4 != nil {
		return *x.TDouble4
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDoubleEq1() float64 {
	if x != nil && x.TDoubleEq1 != nil {
		return *x.TDoubleEq1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDoubleNe1() float64 {
	if x != nil && x.TDoubleNe1 != nil {
		return *x.TDoubleNe1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDoubleLt1() float64 {
	if x != nil && x.TDoubleLt1 != nil {
		return *x.TDoubleLt1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDoubleGt1() float64 {
	if x != nil && x.TDoubleGt1 != nil {
		return *x.TDoubleGt1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDoubleLte1() float64 {
	if x != nil && x.TDoubleLte1 != nil {
		return *x.TDoubleLte1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDoubleGte1() float64 {
	if x != nil && x.TDoubleGte1 != nil {
		return *x.TDoubleGte1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDoubleIn1() float64 {
	if x != nil && x.TDoubleIn1 != nil {
		return *x.TDoubleIn1
	}
	return 0
}

func (x *ValidFloatTagsOptional1) GetTDoubleNotIn1() float64 {
	if x != nil && x.TDoubleNotIn1 != nil {
		return *x.TDoubleNotIn1
	}
	return 0
}

// ValidFloatTagsOneOf1 for test option tag FloatTags with oneof field.
type ValidFloatTagsOneOf1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneTyp1:
	//	*ValidFloatTagsOneOf1_TFloat1
	//	*ValidFloatTagsOneOf1_TFloat2
	//	*ValidFloatTagsOneOf1_TFloat3
	//	*ValidFloatTagsOneOf1_TFloat4
	//	*ValidFloatTagsOneOf1_TFloatEq1
	//	*ValidFloatTagsOneOf1_TFloatNe1
	//	*ValidFloatTagsOneOf1_TFloatLt1
	//	*ValidFloatTagsOneOf1_TFloatGt1
	//	*ValidFloatTagsOneOf1_TFloatLte1
	//	*ValidFloatTagsOneOf1_TFloatGte1
	//	*ValidFloatTagsOneOf1_TFloatIn1
	//	*ValidFloatTagsOneOf1_TFloatNotIn1
	//	*ValidFloatTagsOneOf1_TDouble1
	//	*ValidFloatTagsOneOf1_TDouble2
	//	*ValidFloatTagsOneOf1_TDouble3
	//	*ValidFloatTagsOneOf1_TDouble4
	//	*ValidFloatTagsOneOf1_TDoubleEq1
	//	*ValidFloatTagsOneOf1_TDoubleNe1
	//	*ValidFloatTagsOneOf1_TDoubleLt1
	//	*ValidFloatTagsOneOf1_TDoubleGt1
	//	*ValidFloatTagsOneOf1_TDoubleLte1
	//	*ValidFloatTagsOneOf1_TDoubleGte1
	//	*ValidFloatTagsOneOf1_TDoubleIn1
	//	*ValidFloatTagsOneOf1_TDoubleNotIn1
	OneTyp1 isValidFloatTagsOneOf1_OneTyp1 `protobuf_oneof:"one_typ1"`
}

func (x *ValidFloatTagsOneOf1) Reset() {
	*x = ValidFloatTagsOneOf1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidFloatTagsOneOf1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidFloatTagsOneOf1) ProtoMessage() {}

func (x *ValidFloatTagsOneOf1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidFloatTagsOneOf1.ProtoReflect.Descriptor instead.
func (*ValidFloatTagsOneOf1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{4}
}

func (m *ValidFloatTagsOneOf1) GetOneTyp1() isValidFloatTagsOneOf1_OneTyp1 {
	if m != nil {
		return m.OneTyp1
	}
	return nil
}

func (x *ValidFloatTagsOneOf1) GetTFloat1() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloat1); ok {
		return x.TFloat1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloat2() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloat2); ok {
		return x.TFloat2
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloat3() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloat3); ok {
		return x.TFloat3
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloat4() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloat4); ok {
		return x.TFloat4
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloatEq1() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloatEq1); ok {
		return x.TFloatEq1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloatNe1() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloatNe1); ok {
		return x.TFloatNe1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloatLt1() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloatLt1); ok {
		return x.TFloatLt1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloatGt1() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloatGt1); ok {
		return x.TFloatGt1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloatLte1() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloatLte1); ok {
		return x.TFloatLte1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloatGte1() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloatGte1); ok {
		return x.TFloatGte1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloatIn1() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloatIn1); ok {
		return x.TFloatIn1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTFloatNotIn1() float32 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TFloatNotIn1); ok {
		return x.TFloatNotIn1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDouble1() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDouble1); ok {
		return x.TDouble1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDouble2() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDouble2); ok {
		return x.TDouble2
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDouble3() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDouble3); ok {
		return x.TDouble3
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDouble4() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDouble4); ok {
		return x.TDouble4
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDoubleEq1() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDoubleEq1); ok {
		return x.TDoubleEq1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDoubleNe1() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDoubleNe1); ok {
		return x.TDoubleNe1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDoubleLt1() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDoubleLt1); ok {
		return x.TDoubleLt1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDoubleGt1() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDoubleGt1); ok {
		return x.TDoubleGt1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDoubleLte1() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDoubleLte1); ok {
		return x.TDoubleLte1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDoubleGte1() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDoubleGte1); ok {
		return x.TDoubleGte1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDoubleIn1() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDoubleIn1); ok {
		return x.TDoubleIn1
	}
	return 0
}

func (x *ValidFloatTagsOneOf1) GetTDoubleNotIn1() float64 {
	if x, ok := x.GetOneTyp1().(*ValidFloatTagsOneOf1_TDoubleNotIn1); ok {
		return x.TDoubleNotIn1
	}
	return 0
}

type isValidFloatTagsOneOf1_OneTyp1 interface {
	isValidFloatTagsOneOf1_OneTyp1()
}

type ValidFloatTagsOneOf1_TFloat1 struct {
	// Type for float
	TFloat1 float32 `protobuf:"fixed32,1,opt,name=t_float1,json=tFloat1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloat2 struct {
	TFloat2 float32 `protobuf:"fixed32,2,opt,name=t_float2,json=tFloat2,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloat3 struct {
	TFloat3 float32 `protobuf:"fixed32,3,opt,name=t_float3,json=tFloat3,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloat4 struct {
	TFloat4 float32 `protobuf:"fixed32,4,opt,name=t_float4,json=tFloat4,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloatEq1 struct {
	TFloatEq1 float32 `protobuf:"fixed32,10,opt,name=t_float_eq1,json=tFloatEq1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloatNe1 struct {
	TFloatNe1 float32 `protobuf:"fixed32,11,opt,name=t_float_ne1,json=tFloatNe1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloatLt1 struct {
	TFloatLt1 float32 `protobuf:"fixed32,12,opt,name=t_float_lt1,json=tFloatLt1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloatGt1 struct {
	TFloatGt1 float32 `protobuf:"fixed32,13,opt,name=t_float_gt1,json=tFloatGt1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloatLte1 struct {
	TFloatLte1 float32 `protobuf:"fixed32,14,opt,name=t_float_lte1,json=tFloatLte1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloatGte1 struct {
	TFloatGte1 float32 `protobuf:"fixed32,15,opt,name=t_float_gte1,json=tFloatGte1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloatIn1 struct {
	TFloatIn1 float32 `protobuf:"fixed32,16,opt,name=t_float_in1,json=tFloatIn1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TFloatNotIn1 struct {
	TFloatNotIn1 float32 `protobuf:"fixed32,17,opt,name=t_float_not_in1,json=tFloatNotIn1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDouble1 struct {
	// Type for double
	TDouble1 float64 `protobuf:"fixed64,31,opt,name=t_double1,json=tDouble1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDouble2 struct {
	TDouble2 float64 `protobuf:"fixed64,32,opt,name=t_double2,json=tDouble2,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDouble3 struct {
	TDouble3 float64 `protobuf:"fixed64,33,opt,name=t_double3,json=tDouble3,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDouble4 struct {
	TDouble4 float64 `protobuf:"fixed64,34,opt,name=t_double4,json=tDouble4,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDoubleEq1 struct {
	TDoubleEq1 float64 `protobuf:"fixed64,40,opt,name=t_double_eq1,json=tDoubleEq1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDoubleNe1 struct {
	TDoubleNe1 float64 `protobuf:"fixed64,41,opt,name=t_double_ne1,json=tDoubleNe1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDoubleLt1 struct {
	TDoubleLt1 float64 `protobuf:"fixed64,42,opt,name=t_double_lt1,json=tDoubleLt1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDoubleGt1 struct {
	TDoubleGt1 float64 `protobuf:"fixed64,43,opt,name=t_double_gt1,json=tDoubleGt1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDoubleLte1 struct {
	TDoubleLte1 float64 `protobuf:"fixed64,44,opt,name=t_double_lte1,json=tDoubleLte1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDoubleGte1 struct {
	TDoubleGte1 float64 `protobuf:"fixed64,45,opt,name=t_double_gte1,json=tDoubleGte1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDoubleIn1 struct {
	TDoubleIn1 float64 `protobuf:"fixed64,46,opt,name=t_double_in1,json=tDoubleIn1,proto3,oneof"`
}

type ValidFloatTagsOneOf1_TDoubleNotIn1 struct {
	TDoubleNotIn1 float64 `protobuf:"fixed64,47,opt,name=t_double_not_in1,json=tDoubleNotIn1,proto3,oneof"`
}

func (*ValidFloatTagsOneOf1_TFloat1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloat2) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloat3) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloat4) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloatEq1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloatNe1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloatLt1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloatGt1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloatLte1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloatGte1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloatIn1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TFloatNotIn1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDouble1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDouble2) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDouble3) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDouble4) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDoubleEq1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDoubleNe1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDoubleLt1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDoubleGt1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDoubleLte1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDoubleGte1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDoubleIn1) isValidFloatTagsOneOf1_OneTyp1() {}

func (*ValidFloatTagsOneOf1_TDoubleNotIn1) isValidFloatTagsOneOf1_OneTyp1() {}

// ValidIntTagsGeneral1 for test option tag IntTags with general field.
type ValidIntTagsGeneral1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type for int32
	TInt32_1     int32 `protobuf:"varint,1,opt,name=t_int32_1,json=tInt321,proto3" json:"t_int32_1,omitempty"`
	TInt32_2     int32 `protobuf:"varint,2,opt,name=t_int32_2,json=tInt322,proto3" json:"t_int32_2,omitempty"`
	TInt32_3     int32 `protobuf:"varint,3,opt,name=t_int32_3,json=tInt323,proto3" json:"t_int32_3,omitempty"`
	TInt32_4     int32 `protobuf:"varint,4,opt,name=t_int32_4,json=tInt324,proto3" json:"t_int32_4,omitempty"`
	TInt32Eq1    int32 `protobuf:"varint,10,opt,name=t_int32_eq1,json=tInt32Eq1,proto3" json:"t_int32_eq1,omitempty"`
	TInt32Ne1    int32 `protobuf:"varint,11,opt,name=t_int32_ne1,json=tInt32Ne1,proto3" json:"t_int32_ne1,omitempty"`
	TInt32Lt1    int32 `protobuf:"varint,12,opt,name=t_int32_lt1,json=tInt32Lt1,proto3" json:"t_int32_lt1,omitempty"`
	TInt32Gt1    int32 `protobuf:"varint,13,opt,name=t_int32_gt1,json=tInt32Gt1,proto3" json:"t_int32_gt1,omitempty"`
	TInt32Lte1   int32 `protobuf:"varint,14,opt,name=t_int32_lte1,json=tInt32Lte1,proto3" json:"t_int32_lte1,omitempty"`
	TInt32Gte1   int32 `protobuf:"varint,15,opt,name=t_int32_gte1,json=tInt32Gte1,proto3" json:"t_int32_gte1,omitempty"`
	TInt32In1    int32 `protobuf:"varint,16,opt,name=t_int32_in1,json=tInt32In1,proto3" json:"t_int32_in1,omitempty"`
	TInt32NotIn1 int32 `protobuf:"varint,17,opt,name=t_int32_not_in1,json=tInt32NotIn1,proto3" json:"t_int32_not_in1,omitempty"`
	// Type for int64
	TInt64_1     int64 `protobuf:"varint,21,opt,name=t_int64_1,json=tInt641,proto3" json:"t_int64_1,omitempty"`
	TInt64_2     int64 `protobuf:"varint,22,opt,name=t_int64_2,json=tInt642,proto3" json:"t_int64_2,omitempty"`
	TInt64_3     int64 `protobuf:"varint,23,opt,name=t_int64_3,json=tInt643,proto3" json:"t_int64_3,omitempty"`
	TInt64_4     int64 `protobuf:"varint,24,opt,name=t_int64_4,json=tInt644,proto3" json:"t_int64_4,omitempty"`
	TInt64Eq1    int64 `protobuf:"varint,30,opt,name=t_int64_eq1,json=tInt64Eq1,proto3" json:"t_int64_eq1,omitempty"`
	TInt64Ne1    int64 `protobuf:"varint,31,opt,name=t_int64_ne1,json=tInt64Ne1,proto3" json:"t_int64_ne1,omitempty"`
	TInt64Lt1    int64 `protobuf:"varint,32,opt,name=t_int64_lt1,json=tInt64Lt1,proto3" json:"t_int64_lt1,omitempty"`
	TInt64Gt1    int64 `protobuf:"varint,33,opt,name=t_int64_gt1,json=tInt64Gt1,proto3" json:"t_int64_gt1,omitempty"`
	TInt64Lte1   int64 `protobuf:"varint,34,opt,name=t_int64_lte1,json=tInt64Lte1,proto3" json:"t_int64_lte1,omitempty"`
	TInt64Gte1   int64 `protobuf:"varint,35,opt,name=t_int64_gte1,json=tInt64Gte1,proto3" json:"t_int64_gte1,omitempty"`
	TInt64In1    int64 `protobuf:"varint,36,opt,name=t_int64_in1,json=tInt64In1,proto3" json:"t_int64_in1,omitempty"`
	TInt64NotIn1 int64 `protobuf:"varint,37,opt,name=t_int64_not_in1,json=tInt64NotIn1,proto3" json:"t_int64_not_in1,omitempty"`
	// Type for sint32
	TSint32_1     int32 `protobuf:"zigzag32,41,opt,name=t_sint32_1,json=tSint321,proto3" json:"t_sint32_1,omitempty"`
	TSint32_2     int32 `protobuf:"zigzag32,42,opt,name=t_sint32_2,json=tSint322,proto3" json:"t_sint32_2,omitempty"`
	TSint32_3     int32 `protobuf:"zigzag32,43,opt,name=t_sint32_3,json=tSint323,proto3" json:"t_sint32_3,omitempty"`
	TSint32_4     int32 `protobuf:"zigzag32,44,opt,name=t_sint32_4,json=tSint324,proto3" json:"t_sint32_4,omitempty"`
	TSint32Eq1    int32 `protobuf:"zigzag32,50,opt,name=t_sint32_eq1,json=tSint32Eq1,proto3" json:"t_sint32_eq1,omitempty"`
	TSint32Ne1    int32 `protobuf:"zigzag32,51,opt,name=t_sint32_ne1,json=tSint32Ne1,proto3" json:"t_sint32_ne1,omitempty"`
	TSint32Lt1    int32 `protobuf:"zigzag32,52,opt,name=t_sint32_lt1,json=tSint32Lt1,proto3" json:"t_sint32_lt1,omitempty"`
	TSint32Gt1    int32 `protobuf:"zigzag32,53,opt,name=t_sint32_gt1,json=tSint32Gt1,proto3" json:"t_sint32_gt1,omitempty"`
	TSint32Lte1   int32 `protobuf:"zigzag32,54,opt,name=t_sint32_lte1,json=tSint32Lte1,proto3" json:"t_sint32_lte1,omitempty"`
	TSint32Gte1   int32 `protobuf:"zigzag32,55,opt,name=t_sint32_gte1,json=tSint32Gte1,proto3" json:"t_sint32_gte1,omitempty"`
	TSint32In1    int32 `protobuf:"zigzag32,56,opt,name=t_sint32_in1,json=tSint32In1,proto3" json:"t_sint32_in1,omitempty"`
	TSint32NotIn1 int32 `protobuf:"zigzag32,57,opt,name=t_sint32_not_in1,json=tSint32NotIn1,proto3" json:"t_sint32_not_in1,omitempty"`
	// Type for sint64
	TSint64_1     int64 `protobuf:"zigzag64,61,opt,name=t_sint64_1,json=tSint641,proto3" json:"t_sint64_1,omitempty"`
	TSint64_2     int64 `protobuf:"zigzag64,62,opt,name=t_sint64_2,json=tSint642,proto3" json:"t_sint64_2,omitempty"`
	TSint64_3     int64 `protobuf:"zigzag64,63,opt,name=t_sint64_3,json=tSint643,proto3" json:"t_sint64_3,omitempty"`
	TSint64_4     int64 `protobuf:"zigzag64,64,opt,name=t_sint64_4,json=tSint644,proto3" json:"t_sint64_4,omitempty"`
	TSint64Eq1    int64 `protobuf:"zigzag64,70,opt,name=t_sint64_eq1,json=tSint64Eq1,proto3" json:"t_sint64_eq1,omitempty"`
	TSint64Ne1    int64 `protobuf:"zigzag64,71,opt,name=t_sint64_ne1,json=tSint64Ne1,proto3" json:"t_sint64_ne1,omitempty"`
	TSint64Lt1    int64 `protobuf:"zigzag64,72,opt,name=t_sint64_lt1,json=tSint64Lt1,proto3" json:"t_sint64_lt1,omitempty"`
	TSint64Gt1    int64 `protobuf:"zigzag64,73,opt,name=t_sint64_gt1,json=tSint64Gt1,proto3" json:"t_sint64_gt1,omitempty"`
	TSint64Lte1   int64 `protobuf:"zigzag64,74,opt,name=t_sint64_lte1,json=tSint64Lte1,proto3" json:"t_sint64_lte1,omitempty"`
	TSint64Gte1   int64 `protobuf:"zigzag64,75,opt,name=t_sint64_gte1,json=tSint64Gte1,proto3" json:"t_sint64_gte1,omitempty"`
	TSint64In1    int64 `protobuf:"zigzag64,76,opt,name=t_sint64_in1,json=tSint64In1,proto3" json:"t_sint64_in1,omitempty"`
	TSint64NotIn1 int64 `protobuf:"zigzag64,77,opt,name=t_sint64_not_in1,json=tSint64NotIn1,proto3" json:"t_sint64_not_in1,omitempty"`
	// Type for sfixed32
	TSfixed32_1     int32 `protobuf:"fixed32,81,opt,name=t_sfixed32_1,json=tSfixed321,proto3" json:"t_sfixed32_1,omitempty"`
	TSfixed32_2     int32 `protobuf:"fixed32,82,opt,name=t_sfixed32_2,json=tSfixed322,proto3" json:"t_sfixed32_2,omitempty"`
	TSfixed32_3     int32 `protobuf:"fixed32,83,opt,name=t_sfixed32_3,json=tSfixed323,proto3" json:"t_sfixed32_3,omitempty"`
	TSfixed32_4     int32 `protobuf:"fixed32,84,opt,name=t_sfixed32_4,json=tSfixed324,proto3" json:"t_sfixed32_4,omitempty"`
	TSfixed32Eq1    int32 `protobuf:"fixed32,90,opt,name=t_sfixed32_eq1,json=tSfixed32Eq1,proto3" json:"t_sfixed32_eq1,omitempty"`
	TSfixed32Ne1    int32 `protobuf:"fixed32,91,opt,name=t_sfixed32_ne1,json=tSfixed32Ne1,proto3" json:"t_sfixed32_ne1,omitempty"`
	TSfixed32Lt1    int32 `protobuf:"fixed32,92,opt,name=t_sfixed32_lt1,json=tSfixed32Lt1,proto3" json:"t_sfixed32_lt1,omitempty"`
	TSfixed32Gt1    int32 `protobuf:"fixed32,93,opt,name=t_sfixed32_gt1,json=tSfixed32Gt1,proto3" json:"t_sfixed32_gt1,omitempty"`
	TSfixed32Lte1   int32 `protobuf:"fixed32,94,opt,name=t_sfixed32_lte1,json=tSfixed32Lte1,proto3" json:"t_sfixed32_lte1,omitempty"`
	TSfixed32Gte1   int32 `protobuf:"fixed32,95,opt,name=t_sfixed32_gte1,json=tSfixed32Gte1,proto3" json:"t_sfixed32_gte1,omitempty"`
	TSfixed32In1    int32 `protobuf:"fixed32,96,opt,name=t_sfixed32_in1,json=tSfixed32In1,proto3" json:"t_sfixed32_in1,omitempty"`
	TSfixed32NotIn1 int32 `protobuf:"fixed32,97,opt,name=t_sfixed32_not_in1,json=tSfixed32NotIn1,proto3" json:"t_sfixed32_not_in1,omitempty"`
	// Type for sfixed64
	TSfixed64_1     int64 `protobuf:"fixed64,101,opt,name=t_sfixed64_1,json=tSfixed641,proto3" json:"t_sfixed64_1,omitempty"`
	TSfixed64_2     int64 `protobuf:"fixed64,102,opt,name=t_sfixed64_2,json=tSfixed642,proto3" json:"t_sfixed64_2,omitempty"`
	TSfixed64_3     int64 `protobuf:"fixed64,103,opt,name=t_sfixed64_3,json=tSfixed643,proto3" json:"t_sfixed64_3,omitempty"`
	TSfixed64_4     int64 `protobuf:"fixed64,104,opt,name=t_sfixed64_4,json=tSfixed644,proto3" json:"t_sfixed64_4,omitempty"`
	TSfixed64Eq1    int64 `protobuf:"fixed64,110,opt,name=t_sfixed64_eq1,json=tSfixed64Eq1,proto3" json:"t_sfixed64_eq1,omitempty"`
	TSfixed64Ne1    int64 `protobuf:"fixed64,111,opt,name=t_sfixed64_ne1,json=tSfixed64Ne1,proto3" json:"t_sfixed64_ne1,omitempty"`
	TSfixed64Lt1    int64 `protobuf:"fixed64,112,opt,name=t_sfixed64_lt1,json=tSfixed64Lt1,proto3" json:"t_sfixed64_lt1,omitempty"`
	TSfixed64Gt1    int64 `protobuf:"fixed64,113,opt,name=t_sfixed64_gt1,json=tSfixed64Gt1,proto3" json:"t_sfixed64_gt1,omitempty"`
	TSfixed64Lte1   int64 `protobuf:"fixed64,114,opt,name=t_sfixed64_lte1,json=tSfixed64Lte1,proto3" json:"t_sfixed64_lte1,omitempty"`
	TSfixed64Gte1   int64 `protobuf:"fixed64,115,opt,name=t_sfixed64_gte1,json=tSfixed64Gte1,proto3" json:"t_sfixed64_gte1,omitempty"`
	TSfixed64In1    int64 `protobuf:"fixed64,116,opt,name=t_sfixed64_in1,json=tSfixed64In1,proto3" json:"t_sfixed64_in1,omitempty"`
	TSfixed64NotIn1 int64 `protobuf:"fixed64,117,opt,name=t_sfixed64_not_in1,json=tSfixed64NotIn1,proto3" json:"t_sfixed64_not_in1,omitempty"`
}

func (x *ValidIntTagsGeneral1) Reset() {
	*x = ValidIntTagsGeneral1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidIntTagsGeneral1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIntTagsGeneral1) ProtoMessage() {}

func (x *ValidIntTagsGeneral1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIntTagsGeneral1.ProtoReflect.Descriptor instead.
func (*ValidIntTagsGeneral1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{5}
}

func (x *ValidIntTagsGeneral1) GetTInt32_1() int32 {
	if x != nil {
		return x.TInt32_1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32_2() int32 {
	if x != nil {
		return x.TInt32_2
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32_3() int32 {
	if x != nil {
		return x.TInt32_3
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32_4() int32 {
	if x != nil {
		return x.TInt32_4
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32Eq1() int32 {
	if x != nil {
		return x.TInt32Eq1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32Ne1() int32 {
	if x != nil {
		return x.TInt32Ne1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32Lt1() int32 {
	if x != nil {
		return x.TInt32Lt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32Gt1() int32 {
	if x != nil {
		return x.TInt32Gt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32Lte1() int32 {
	if x != nil {
		return x.TInt32Lte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32Gte1() int32 {
	if x != nil {
		return x.TInt32Gte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32In1() int32 {
	if x != nil {
		return x.TInt32In1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt32NotIn1() int32 {
	if x != nil {
		return x.TInt32NotIn1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64_1() int64 {
	if x != nil {
		return x.TInt64_1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64_2() int64 {
	if x != nil {
		return x.TInt64_2
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64_3() int64 {
	if x != nil {
		return x.TInt64_3
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64_4() int64 {
	if x != nil {
		return x.TInt64_4
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64Eq1() int64 {
	if x != nil {
		return x.TInt64Eq1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64Ne1() int64 {
	if x != nil {
		return x.TInt64Ne1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64Lt1() int64 {
	if x != nil {
		return x.TInt64Lt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64Gt1() int64 {
	if x != nil {
		return x.TInt64Gt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64Lte1() int64 {
	if x != nil {
		return x.TInt64Lte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64Gte1() int64 {
	if x != nil {
		return x.TInt64Gte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64In1() int64 {
	if x != nil {
		return x.TInt64In1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTInt64NotIn1() int64 {
	if x != nil {
		return x.TInt64NotIn1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32_1() int32 {
	if x != nil {
		return x.TSint32_1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32_2() int32 {
	if x != nil {
		return x.TSint32_2
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32_3() int32 {
	if x != nil {
		return x.TSint32_3
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32_4() int32 {
	if x != nil {
		return x.TSint32_4
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32Eq1() int32 {
	if x != nil {
		return x.TSint32Eq1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32Ne1() int32 {
	if x != nil {
		return x.TSint32Ne1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32Lt1() int32 {
	if x != nil {
		return x.TSint32Lt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32Gt1() int32 {
	if x != nil {
		return x.TSint32Gt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32Lte1() int32 {
	if x != nil {
		return x.TSint32Lte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32Gte1() int32 {
	if x != nil {
		return x.TSint32Gte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32In1() int32 {
	if x != nil {
		return x.TSint32In1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint32NotIn1() int32 {
	if x != nil {
		return x.TSint32NotIn1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64_1() int64 {
	if x != nil {
		return x.TSint64_1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64_2() int64 {
	if x != nil {
		return x.TSint64_2
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64_3() int64 {
	if x != nil {
		return x.TSint64_3
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64_4() int64 {
	if x != nil {
		return x.TSint64_4
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64Eq1() int64 {
	if x != nil {
		return x.TSint64Eq1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64Ne1() int64 {
	if x != nil {
		return x.TSint64Ne1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64Lt1() int64 {
	if x != nil {
		return x.TSint64Lt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64Gt1() int64 {
	if x != nil {
		return x.TSint64Gt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64Lte1() int64 {
	if x != nil {
		return x.TSint64Lte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64Gte1() int64 {
	if x != nil {
		return x.TSint64Gte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64In1() int64 {
	if x != nil {
		return x.TSint64In1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSint64NotIn1() int64 {
	if x != nil {
		return x.TSint64NotIn1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32_1() int32 {
	if x != nil {
		return x.TSfixed32_1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32_2() int32 {
	if x != nil {
		return x.TSfixed32_2
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32_3() int32 {
	if x != nil {
		return x.TSfixed32_3
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32_4() int32 {
	if x != nil {
		return x.TSfixed32_4
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32Eq1() int32 {
	if x != nil {
		return x.TSfixed32Eq1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32Ne1() int32 {
	if x != nil {
		return x.TSfixed32Ne1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32Lt1() int32 {
	if x != nil {
		return x.TSfixed32Lt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32Gt1() int32 {
	if x != nil {
		return x.TSfixed32Gt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32Lte1() int32 {
	if x != nil {
		return x.TSfixed32Lte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32Gte1() int32 {
	if x != nil {
		return x.TSfixed32Gte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32In1() int32 {
	if x != nil {
		return x.TSfixed32In1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed32NotIn1() int32 {
	if x != nil {
		return x.TSfixed32NotIn1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64_1() int64 {
	if x != nil {
		return x.TSfixed64_1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64_2() int64 {
	if x != nil {
		return x.TSfixed64_2
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64_3() int64 {
	if x != nil {
		return x.TSfixed64_3
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64_4() int64 {
	if x != nil {
		return x.TSfixed64_4
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64Eq1() int64 {
	if x != nil {
		return x.TSfixed64Eq1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64Ne1() int64 {
	if x != nil {
		return x.TSfixed64Ne1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64Lt1() int64 {
	if x != nil {
		return x.TSfixed64Lt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64Gt1() int64 {
	if x != nil {
		return x.TSfixed64Gt1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64Lte1() int64 {
	if x != nil {
		return x.TSfixed64Lte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64Gte1() int64 {
	if x != nil {
		return x.TSfixed64Gte1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64In1() int64 {
	if x != nil {
		return x.TSfixed64In1
	}
	return 0
}

func (x *ValidIntTagsGeneral1) GetTSfixed64NotIn1() int64 {
	if x != nil {
		return x.TSfixed64NotIn1
	}
	return 0
}

// ValidIntTagsOptional1 for test option tag IntTags with optional field.
type ValidIntTagsOptional1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type for int32
	TInt32_1     *int32 `protobuf:"varint,1,opt,name=t_int32_1,json=tInt321,proto3,oneof" json:"t_int32_1,omitempty"`
	TInt32_2     *int32 `protobuf:"varint,2,opt,name=t_int32_2,json=tInt322,proto3,oneof" json:"t_int32_2,omitempty"`
	TInt32_3     *int32 `protobuf:"varint,3,opt,name=t_int32_3,json=tInt323,proto3,oneof" json:"t_int32_3,omitempty"`
	TInt32_4     *int32 `protobuf:"varint,4,opt,name=t_int32_4,json=tInt324,proto3,oneof" json:"t_int32_4,omitempty"`
	TInt32Eq1    *int32 `protobuf:"varint,10,opt,name=t_int32_eq1,json=tInt32Eq1,proto3,oneof" json:"t_int32_eq1,omitempty"`
	TInt32Ne1    *int32 `protobuf:"varint,11,opt,name=t_int32_ne1,json=tInt32Ne1,proto3,oneof" json:"t_int32_ne1,omitempty"`
	TInt32Lt1    *int32 `protobuf:"varint,12,opt,name=t_int32_lt1,json=tInt32Lt1,proto3,oneof" json:"t_int32_lt1,omitempty"`
	TInt32Gt1    *int32 `protobuf:"varint,13,opt,name=t_int32_gt1,json=tInt32Gt1,proto3,oneof" json:"t_int32_gt1,omitempty"`
	TInt32Lte1   *int32 `protobuf:"varint,14,opt,name=t_int32_lte1,json=tInt32Lte1,proto3,oneof" json:"t_int32_lte1,omitempty"`
	TInt32Gte1   *int32 `protobuf:"varint,15,opt,name=t_int32_gte1,json=tInt32Gte1,proto3,oneof" json:"t_int32_gte1,omitempty"`
	TInt32In1    *int32 `protobuf:"varint,16,opt,name=t_int32_in1,json=tInt32In1,proto3,oneof" json:"t_int32_in1,omitempty"`
	TInt32NotIn1 *int32 `protobuf:"varint,17,opt,name=t_int32_not_in1,json=tInt32NotIn1,proto3,oneof" json:"t_int32_not_in1,omitempty"`
	// Type for int64
	TInt64_1     *int64 `protobuf:"varint,21,opt,name=t_int64_1,json=tInt641,proto3,oneof" json:"t_int64_1,omitempty"`
	TInt64_2     *int64 `protobuf:"varint,22,opt,name=t_int64_2,json=tInt642,proto3,oneof" json:"t_int64_2,omitempty"`
	TInt64_3     *int64 `protobuf:"varint,23,opt,name=t_int64_3,json=tInt643,proto3,oneof" json:"t_int64_3,omitempty"`
	TInt64_4     *int64 `protobuf:"varint,24,opt,name=t_int64_4,json=tInt644,proto3,oneof" json:"t_int64_4,omitempty"`
	TInt64Eq1    *int64 `protobuf:"varint,30,opt,name=t_int64_eq1,json=tInt64Eq1,proto3,oneof" json:"t_int64_eq1,omitempty"`
	TInt64Ne1    *int64 `protobuf:"varint,31,opt,name=t_int64_ne1,json=tInt64Ne1,proto3,oneof" json:"t_int64_ne1,omitempty"`
	TInt64Lt1    *int64 `protobuf:"varint,32,opt,name=t_int64_lt1,json=tInt64Lt1,proto3,oneof" json:"t_int64_lt1,omitempty"`
	TInt64Gt1    *int64 `protobuf:"varint,33,opt,name=t_int64_gt1,json=tInt64Gt1,proto3,oneof" json:"t_int64_gt1,omitempty"`
	TInt64Lte1   *int64 `protobuf:"varint,34,opt,name=t_int64_lte1,json=tInt64Lte1,proto3,oneof" json:"t_int64_lte1,omitempty"`
	TInt64Gte1   *int64 `protobuf:"varint,35,opt,name=t_int64_gte1,json=tInt64Gte1,proto3,oneof" json:"t_int64_gte1,omitempty"`
	TInt64In1    *int64 `protobuf:"varint,36,opt,name=t_int64_in1,json=tInt64In1,proto3,oneof" json:"t_int64_in1,omitempty"`
	TInt64NotIn1 *int64 `protobuf:"varint,37,opt,name=t_int64_not_in1,json=tInt64NotIn1,proto3,oneof" json:"t_int64_not_in1,omitempty"`
	// Type for sint32
	TSint32_1     *int32 `protobuf:"zigzag32,41,opt,name=t_sint32_1,json=tSint321,proto3,oneof" json:"t_sint32_1,omitempty"`
	TSint32_2     *int32 `protobuf:"zigzag32,42,opt,name=t_sint32_2,json=tSint322,proto3,oneof" json:"t_sint32_2,omitempty"`
	TSint32_3     *int32 `protobuf:"zigzag32,43,opt,name=t_sint32_3,json=tSint323,proto3,oneof" json:"t_sint32_3,omitempty"`
	TSint32_4     *int32 `protobuf:"zigzag32,44,opt,name=t_sint32_4,json=tSint324,proto3,oneof" json:"t_sint32_4,omitempty"`
	TSint32Eq1    *int32 `protobuf:"zigzag32,50,opt,name=t_sint32_eq1,json=tSint32Eq1,proto3,oneof" json:"t_sint32_eq1,omitempty"`
	TSint32Ne1    *int32 `protobuf:"zigzag32,51,opt,name=t_sint32_ne1,json=tSint32Ne1,proto3,oneof" json:"t_sint32_ne1,omitempty"`
	TSint32Lt1    *int32 `protobuf:"zigzag32,52,opt,name=t_sint32_lt1,json=tSint32Lt1,proto3,oneof" json:"t_sint32_lt1,omitempty"`
	TSint32Gt1    *int32 `protobuf:"zigzag32,53,opt,name=t_sint32_gt1,json=tSint32Gt1,proto3,oneof" json:"t_sint32_gt1,omitempty"`
	TSint32Lte1   *int32 `protobuf:"zigzag32,54,opt,name=t_sint32_lte1,json=tSint32Lte1,proto3,oneof" json:"t_sint32_lte1,omitempty"`
	TSint32Gte1   *int32 `protobuf:"zigzag32,55,opt,name=t_sint32_gte1,json=tSint32Gte1,proto3,oneof" json:"t_sint32_gte1,omitempty"`
	TSint32In1    *int32 `protobuf:"zigzag32,56,opt,name=t_sint32_in1,json=tSint32In1,proto3,oneof" json:"t_sint32_in1,omitempty"`
	TSint32NotIn1 *int32 `protobuf:"zigzag32,57,opt,name=t_sint32_not_in1,json=tSint32NotIn1,proto3,oneof" json:"t_sint32_not_in1,omitempty"`
	// Type for sint64
	TSint64_1     *int64 `protobuf:"zigzag64,61,opt,name=t_sint64_1,json=tSint641,proto3,oneof" json:"t_sint64_1,omitempty"`
	TSint64_2     *int64 `protobuf:"zigzag64,62,opt,name=t_sint64_2,json=tSint642,proto3,oneof" json:"t_sint64_2,omitempty"`
	TSint64_3     *int64 `protobuf:"zigzag64,63,opt,name=t_sint64_3,json=tSint643,proto3,oneof" json:"t_sint64_3,omitempty"`
	TSint64_4     *int64 `protobuf:"zigzag64,64,opt,name=t_sint64_4,json=tSint644,proto3,oneof" json:"t_sint64_4,omitempty"`
	TSint64Eq1    *int64 `protobuf:"zigzag64,70,opt,name=t_sint64_eq1,json=tSint64Eq1,proto3,oneof" json:"t_sint64_eq1,omitempty"`
	TSint64Ne1    *int64 `protobuf:"zigzag64,71,opt,name=t_sint64_ne1,json=tSint64Ne1,proto3,oneof" json:"t_sint64_ne1,omitempty"`
	TSint64Lt1    *int64 `protobuf:"zigzag64,72,opt,name=t_sint64_lt1,json=tSint64Lt1,proto3,oneof" json:"t_sint64_lt1,omitempty"`
	TSint64Gt1    *int64 `protobuf:"zigzag64,73,opt,name=t_sint64_gt1,json=tSint64Gt1,proto3,oneof" json:"t_sint64_gt1,omitempty"`
	TSint64Lte1   *int64 `protobuf:"zigzag64,74,opt,name=t_sint64_lte1,json=tSint64Lte1,proto3,oneof" json:"t_sint64_lte1,omitempty"`
	TSint64Gte1   *int64 `protobuf:"zigzag64,75,opt,name=t_sint64_gte1,json=tSint64Gte1,proto3,oneof" json:"t_sint64_gte1,omitempty"`
	TSint64In1    *int64 `protobuf:"zigzag64,76,opt,name=t_sint64_in1,json=tSint64In1,proto3,oneof" json:"t_sint64_in1,omitempty"`
	TSint64NotIn1 *int64 `protobuf:"zigzag64,77,opt,name=t_sint64_not_in1,json=tSint64NotIn1,proto3,oneof" json:"t_sint64_not_in1,omitempty"`
	// Type for sfixed32
	TSfixed32_1     *int32 `protobuf:"fixed32,81,opt,name=t_sfixed32_1,json=tSfixed321,proto3,oneof" json:"t_sfixed32_1,omitempty"`
	TSfixed32_2     *int32 `protobuf:"fixed32,82,opt,name=t_sfixed32_2,json=tSfixed322,proto3,oneof" json:"t_sfixed32_2,omitempty"`
	TSfixed32_3     *int32 `protobuf:"fixed32,83,opt,name=t_sfixed32_3,json=tSfixed323,proto3,oneof" json:"t_sfixed32_3,omitempty"`
	TSfixed32_4     *int32 `protobuf:"fixed32,84,opt,name=t_sfixed32_4,json=tSfixed324,proto3,oneof" json:"t_sfixed32_4,omitempty"`
	TSfixed32Eq1    *int32 `protobuf:"fixed32,90,opt,name=t_sfixed32_eq1,json=tSfixed32Eq1,proto3,oneof" json:"t_sfixed32_eq1,omitempty"`
	TSfixed32Ne1    *int32 `protobuf:"fixed32,91,opt,name=t_sfixed32_ne1,json=tSfixed32Ne1,proto3,oneof" json:"t_sfixed32_ne1,omitempty"`
	TSfixed32Lt1    *int32 `protobuf:"fixed32,92,opt,name=t_sfixed32_lt1,json=tSfixed32Lt1,proto3,oneof" json:"t_sfixed32_lt1,omitempty"`
	TSfixed32Gt1    *int32 `protobuf:"fixed32,93,opt,name=t_sfixed32_gt1,json=tSfixed32Gt1,proto3,oneof" json:"t_sfixed32_gt1,omitempty"`
	TSfixed32Lte1   *int32 `protobuf:"fixed32,94,opt,name=t_sfixed32_lte1,json=tSfixed32Lte1,proto3,oneof" json:"t_sfixed32_lte1,omitempty"`
	TSfixed32Gte1   *int32 `protobuf:"fixed32,95,opt,name=t_sfixed32_gte1,json=tSfixed32Gte1,proto3,oneof" json:"t_sfixed32_gte1,omitempty"`
	TSfixed32In1    *int32 `protobuf:"fixed32,96,opt,name=t_sfixed32_in1,json=tSfixed32In1,proto3,oneof" json:"t_sfixed32_in1,omitempty"`
	TSfixed32NotIn1 *int32 `protobuf:"fixed32,97,opt,name=t_sfixed32_not_in1,json=tSfixed32NotIn1,proto3,oneof" json:"t_sfixed32_not_in1,omitempty"`
	// Type for sfixed64
	TSfixed64_1     *int64 `protobuf:"fixed64,101,opt,name=t_sfixed64_1,json=tSfixed641,proto3,oneof" json:"t_sfixed64_1,omitempty"`
	TSfixed64_2     *int64 `protobuf:"fixed64,102,opt,name=t_sfixed64_2,json=tSfixed642,proto3,oneof" json:"t_sfixed64_2,omitempty"`
	TSfixed64_3     *int64 `protobuf:"fixed64,103,opt,name=t_sfixed64_3,json=tSfixed643,proto3,oneof" json:"t_sfixed64_3,omitempty"`
	TSfixed64_4     *int64 `protobuf:"fixed64,104,opt,name=t_sfixed64_4,json=tSfixed644,proto3,oneof" json:"t_sfixed64_4,omitempty"`
	TSfixed64Eq1    *int64 `protobuf:"fixed64,110,opt,name=t_sfixed64_eq1,json=tSfixed64Eq1,proto3,oneof" json:"t_sfixed64_eq1,omitempty"`
	TSfixed64Ne1    *int64 `protobuf:"fixed64,111,opt,name=t_sfixed64_ne1,json=tSfixed64Ne1,proto3,oneof" json:"t_sfixed64_ne1,omitempty"`
	TSfixed64Lt1    *int64 `protobuf:"fixed64,112,opt,name=t_sfixed64_lt1,json=tSfixed64Lt1,proto3,oneof" json:"t_sfixed64_lt1,omitempty"`
	TSfixed64Gt1    *int64 `protobuf:"fixed64,113,opt,name=t_sfixed64_gt1,json=tSfixed64Gt1,proto3,oneof" json:"t_sfixed64_gt1,omitempty"`
	TSfixed64Lte1   *int64 `protobuf:"fixed64,114,opt,name=t_sfixed64_lte1,json=tSfixed64Lte1,proto3,oneof" json:"t_sfixed64_lte1,omitempty"`
	TSfixed64Gte1   *int64 `protobuf:"fixed64,115,opt,name=t_sfixed64_gte1,json=tSfixed64Gte1,proto3,oneof" json:"t_sfixed64_gte1,omitempty"`
	TSfixed64In1    *int64 `protobuf:"fixed64,116,opt,name=t_sfixed64_in1,json=tSfixed64In1,proto3,oneof" json:"t_sfixed64_in1,omitempty"`
	TSfixed64NotIn1 *int64 `protobuf:"fixed64,117,opt,name=t_sfixed64_not_in1,json=tSfixed64NotIn1,proto3,oneof" json:"t_sfixed64_not_in1,omitempty"`
}

func (x *ValidIntTagsOptional1) Reset() {
	*x = ValidIntTagsOptional1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidIntTagsOptional1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIntTagsOptional1) ProtoMessage() {}

func (x *ValidIntTagsOptional1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIntTagsOptional1.ProtoReflect.Descriptor instead.
func (*ValidIntTagsOptional1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{6}
}

func (x *ValidIntTagsOptional1) GetTInt32_1() int32 {
	if x != nil && x.TInt32_1 != nil {
		return *x.TInt32_1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32_2() int32 {
	if x != nil && x.TInt32_2 != nil {
		return *x.TInt32_2
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32_3() int32 {
	if x != nil && x.TInt32_3 != nil {
		return *x.TInt32_3
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32_4() int32 {
	if x != nil && x.TInt32_4 != nil {
		return *x.TInt32_4
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32Eq1() int32 {
	if x != nil && x.TInt32Eq1 != nil {
		return *x.TInt32Eq1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32Ne1() int32 {
	if x != nil && x.TInt32Ne1 != nil {
		return *x.TInt32Ne1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32Lt1() int32 {
	if x != nil && x.TInt32Lt1 != nil {
		return *x.TInt32Lt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32Gt1() int32 {
	if x != nil && x.TInt32Gt1 != nil {
		return *x.TInt32Gt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32Lte1() int32 {
	if x != nil && x.TInt32Lte1 != nil {
		return *x.TInt32Lte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32Gte1() int32 {
	if x != nil && x.TInt32Gte1 != nil {
		return *x.TInt32Gte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32In1() int32 {
	if x != nil && x.TInt32In1 != nil {
		return *x.TInt32In1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt32NotIn1() int32 {
	if x != nil && x.TInt32NotIn1 != nil {
		return *x.TInt32NotIn1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64_1() int64 {
	if x != nil && x.TInt64_1 != nil {
		return *x.TInt64_1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64_2() int64 {
	if x != nil && x.TInt64_2 != nil {
		return *x.TInt64_2
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64_3() int64 {
	if x != nil && x.TInt64_3 != nil {
		return *x.TInt64_3
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64_4() int64 {
	if x != nil && x.TInt64_4 != nil {
		return *x.TInt64_4
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64Eq1() int64 {
	if x != nil && x.TInt64Eq1 != nil {
		return *x.TInt64Eq1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64Ne1() int64 {
	if x != nil && x.TInt64Ne1 != nil {
		return *x.TInt64Ne1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64Lt1() int64 {
	if x != nil && x.TInt64Lt1 != nil {
		return *x.TInt64Lt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64Gt1() int64 {
	if x != nil && x.TInt64Gt1 != nil {
		return *x.TInt64Gt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64Lte1() int64 {
	if x != nil && x.TInt64Lte1 != nil {
		return *x.TInt64Lte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64Gte1() int64 {
	if x != nil && x.TInt64Gte1 != nil {
		return *x.TInt64Gte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64In1() int64 {
	if x != nil && x.TInt64In1 != nil {
		return *x.TInt64In1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTInt64NotIn1() int64 {
	if x != nil && x.TInt64NotIn1 != nil {
		return *x.TInt64NotIn1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32_1() int32 {
	if x != nil && x.TSint32_1 != nil {
		return *x.TSint32_1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32_2() int32 {
	if x != nil && x.TSint32_2 != nil {
		return *x.TSint32_2
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32_3() int32 {
	if x != nil && x.TSint32_3 != nil {
		return *x.TSint32_3
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32_4() int32 {
	if x != nil && x.TSint32_4 != nil {
		return *x.TSint32_4
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32Eq1() int32 {
	if x != nil && x.TSint32Eq1 != nil {
		return *x.TSint32Eq1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32Ne1() int32 {
	if x != nil && x.TSint32Ne1 != nil {
		return *x.TSint32Ne1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32Lt1() int32 {
	if x != nil && x.TSint32Lt1 != nil {
		return *x.TSint32Lt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32Gt1() int32 {
	if x != nil && x.TSint32Gt1 != nil {
		return *x.TSint32Gt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32Lte1() int32 {
	if x != nil && x.TSint32Lte1 != nil {
		return *x.TSint32Lte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32Gte1() int32 {
	if x != nil && x.TSint32Gte1 != nil {
		return *x.TSint32Gte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32In1() int32 {
	if x != nil && x.TSint32In1 != nil {
		return *x.TSint32In1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint32NotIn1() int32 {
	if x != nil && x.TSint32NotIn1 != nil {
		return *x.TSint32NotIn1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64_1() int64 {
	if x != nil && x.TSint64_1 != nil {
		return *x.TSint64_1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64_2() int64 {
	if x != nil && x.TSint64_2 != nil {
		return *x.TSint64_2
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64_3() int64 {
	if x != nil && x.TSint64_3 != nil {
		return *x.TSint64_3
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64_4() int64 {
	if x != nil && x.TSint64_4 != nil {
		return *x.TSint64_4
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64Eq1() int64 {
	if x != nil && x.TSint64Eq1 != nil {
		return *x.TSint64Eq1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64Ne1() int64 {
	if x != nil && x.TSint64Ne1 != nil {
		return *x.TSint64Ne1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64Lt1() int64 {
	if x != nil && x.TSint64Lt1 != nil {
		return *x.TSint64Lt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64Gt1() int64 {
	if x != nil && x.TSint64Gt1 != nil {
		return *x.TSint64Gt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64Lte1() int64 {
	if x != nil && x.TSint64Lte1 != nil {
		return *x.TSint64Lte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64Gte1() int64 {
	if x != nil && x.TSint64Gte1 != nil {
		return *x.TSint64Gte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64In1() int64 {
	if x != nil && x.TSint64In1 != nil {
		return *x.TSint64In1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSint64NotIn1() int64 {
	if x != nil && x.TSint64NotIn1 != nil {
		return *x.TSint64NotIn1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32_1() int32 {
	if x != nil && x.TSfixed32_1 != nil {
		return *x.TSfixed32_1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32_2() int32 {
	if x != nil && x.TSfixed32_2 != nil {
		return *x.TSfixed32_2
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32_3() int32 {
	if x != nil && x.TSfixed32_3 != nil {
		return *x.TSfixed32_3
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32_4() int32 {
	if x != nil && x.TSfixed32_4 != nil {
		return *x.TSfixed32_4
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32Eq1() int32 {
	if x != nil && x.TSfixed32Eq1 != nil {
		return *x.TSfixed32Eq1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32Ne1() int32 {
	if x != nil && x.TSfixed32Ne1 != nil {
		return *x.TSfixed32Ne1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32Lt1() int32 {
	if x != nil && x.TSfixed32Lt1 != nil {
		return *x.TSfixed32Lt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32Gt1() int32 {
	if x != nil && x.TSfixed32Gt1 != nil {
		return *x.TSfixed32Gt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32Lte1() int32 {
	if x != nil && x.TSfixed32Lte1 != nil {
		return *x.TSfixed32Lte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32Gte1() int32 {
	if x != nil && x.TSfixed32Gte1 != nil {
		return *x.TSfixed32Gte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32In1() int32 {
	if x != nil && x.TSfixed32In1 != nil {
		return *x.TSfixed32In1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed32NotIn1() int32 {
	if x != nil && x.TSfixed32NotIn1 != nil {
		return *x.TSfixed32NotIn1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64_1() int64 {
	if x != nil && x.TSfixed64_1 != nil {
		return *x.TSfixed64_1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64_2() int64 {
	if x != nil && x.TSfixed64_2 != nil {
		return *x.TSfixed64_2
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64_3() int64 {
	if x != nil && x.TSfixed64_3 != nil {
		return *x.TSfixed64_3
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64_4() int64 {
	if x != nil && x.TSfixed64_4 != nil {
		return *x.TSfixed64_4
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64Eq1() int64 {
	if x != nil && x.TSfixed64Eq1 != nil {
		return *x.TSfixed64Eq1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64Ne1() int64 {
	if x != nil && x.TSfixed64Ne1 != nil {
		return *x.TSfixed64Ne1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64Lt1() int64 {
	if x != nil && x.TSfixed64Lt1 != nil {
		return *x.TSfixed64Lt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64Gt1() int64 {
	if x != nil && x.TSfixed64Gt1 != nil {
		return *x.TSfixed64Gt1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64Lte1() int64 {
	if x != nil && x.TSfixed64Lte1 != nil {
		return *x.TSfixed64Lte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64Gte1() int64 {
	if x != nil && x.TSfixed64Gte1 != nil {
		return *x.TSfixed64Gte1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64In1() int64 {
	if x != nil && x.TSfixed64In1 != nil {
		return *x.TSfixed64In1
	}
	return 0
}

func (x *ValidIntTagsOptional1) GetTSfixed64NotIn1() int64 {
	if x != nil && x.TSfixed64NotIn1 != nil {
		return *x.TSfixed64NotIn1
	}
	return 0
}

// ValidIntTagsOneOf1 for test option tag IntTags with oneof field.
type ValidIntTagsOneOf1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneTyp1:
	//	*ValidIntTagsOneOf1_TInt32_1
	//	*ValidIntTagsOneOf1_TInt32_2
	//	*ValidIntTagsOneOf1_TInt32_3
	//	*ValidIntTagsOneOf1_TInt32_4
	//	*ValidIntTagsOneOf1_TInt32Eq1
	//	*ValidIntTagsOneOf1_TInt32Ne1
	//	*ValidIntTagsOneOf1_TInt32Lt1
	//	*ValidIntTagsOneOf1_TInt32Gt1
	//	*ValidIntTagsOneOf1_TInt32Lte1
	//	*ValidIntTagsOneOf1_TInt32Gte1
	//	*ValidIntTagsOneOf1_TInt32In1
	//	*ValidIntTagsOneOf1_TInt32NotIn1
	//	*ValidIntTagsOneOf1_TInt64_1
	//	*ValidIntTagsOneOf1_TInt64_2
	//	*ValidIntTagsOneOf1_TInt64_3
	//	*ValidIntTagsOneOf1_TInt64_4
	//	*ValidIntTagsOneOf1_TInt64Eq1
	//	*ValidIntTagsOneOf1_TInt64Ne1
	//	*ValidIntTagsOneOf1_TInt64Lt1
	//	*ValidIntTagsOneOf1_TInt64Gt1
	//	*ValidIntTagsOneOf1_TInt64Lte1
	//	*ValidIntTagsOneOf1_TInt64Gte1
	//	*ValidIntTagsOneOf1_TInt64In1
	//	*ValidIntTagsOneOf1_TInt64NotIn1
	//	*ValidIntTagsOneOf1_TSint32_1
	//	*ValidIntTagsOneOf1_TSint32_2
	//	*ValidIntTagsOneOf1_TSint32_3
	//	*ValidIntTagsOneOf1_TSint32_4
	//	*ValidIntTagsOneOf1_TSint32Eq1
	//	*ValidIntTagsOneOf1_TSint32Ne1
	//	*ValidIntTagsOneOf1_TSint32Lt1
	//	*ValidIntTagsOneOf1_TSint32Gt1
	//	*ValidIntTagsOneOf1_TSint32Lte1
	//	*ValidIntTagsOneOf1_TSint32Gte1
	//	*ValidIntTagsOneOf1_TSint32In1
	//	*ValidIntTagsOneOf1_TSint32NotIn1
	//	*ValidIntTagsOneOf1_TSint64_1
	//	*ValidIntTagsOneOf1_TSint64_2
	//	*ValidIntTagsOneOf1_TSint64_3
	//	*ValidIntTagsOneOf1_TSint64_4
	//	*ValidIntTagsOneOf1_TSint64Eq1
	//	*ValidIntTagsOneOf1_TSint64Ne1
	//	*ValidIntTagsOneOf1_TSint64Lt1
	//	*ValidIntTagsOneOf1_TSint64Gt1
	//	*ValidIntTagsOneOf1_TSint64Lte1
	//	*ValidIntTagsOneOf1_TSint64Gte1
	//	*ValidIntTagsOneOf1_TSint64In1
	//	*ValidIntTagsOneOf1_TSint64NotIn1
	//	*ValidIntTagsOneOf1_TSfixed32_1
	//	*ValidIntTagsOneOf1_TSfixed32_2
	//	*ValidIntTagsOneOf1_TSfixed32_3
	//	*ValidIntTagsOneOf1_TSfixed32_4
	//	*ValidIntTagsOneOf1_TSfixed32Eq1
	//	*ValidIntTagsOneOf1_TSfixed32Ne1
	//	*ValidIntTagsOneOf1_TSfixed32Lt1
	//	*ValidIntTagsOneOf1_TSfixed32Gt1
	//	*ValidIntTagsOneOf1_TSfixed32Lte1
	//	*ValidIntTagsOneOf1_TSfixed32Gte1
	//	*ValidIntTagsOneOf1_TSfixed32In1
	//	*ValidIntTagsOneOf1_TSfixed32NotIn1
	//	*ValidIntTagsOneOf1_TSfixed64_1
	//	*ValidIntTagsOneOf1_TSfixed64_2
	//	*ValidIntTagsOneOf1_TSfixed64_3
	//	*ValidIntTagsOneOf1_TSfixed64_4
	//	*ValidIntTagsOneOf1_TSfixed64Eq1
	//	*ValidIntTagsOneOf1_TSfixed64Ne1
	//	*ValidIntTagsOneOf1_TSfixed64Lt1
	//	*ValidIntTagsOneOf1_TSfixed64Gt1
	//	*ValidIntTagsOneOf1_TSfixed64Lte1
	//	*ValidIntTagsOneOf1_TSfixed64Gte1
	//	*ValidIntTagsOneOf1_TSfixed64In1
	//	*ValidIntTagsOneOf1_TSfixed64NotIn1
	OneTyp1 isValidIntTagsOneOf1_OneTyp1 `protobuf_oneof:"one_typ1"`
}

func (x *ValidIntTagsOneOf1) Reset() {
	*x = ValidIntTagsOneOf1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidIntTagsOneOf1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIntTagsOneOf1) ProtoMessage() {}

func (x *ValidIntTagsOneOf1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIntTagsOneOf1.ProtoReflect.Descriptor instead.
func (*ValidIntTagsOneOf1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{7}
}

func (m *ValidIntTagsOneOf1) GetOneTyp1() isValidIntTagsOneOf1_OneTyp1 {
	if m != nil {
		return m.OneTyp1
	}
	return nil
}

func (x *ValidIntTagsOneOf1) GetTInt32_1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32_1); ok {
		return x.TInt32_1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32_2() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32_2); ok {
		return x.TInt32_2
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32_3() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32_3); ok {
		return x.TInt32_3
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32_4() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32_4); ok {
		return x.TInt32_4
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32Eq1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32Eq1); ok {
		return x.TInt32Eq1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32Ne1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32Ne1); ok {
		return x.TInt32Ne1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32Lt1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32Lt1); ok {
		return x.TInt32Lt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32Gt1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32Gt1); ok {
		return x.TInt32Gt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32Lte1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32Lte1); ok {
		return x.TInt32Lte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32Gte1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32Gte1); ok {
		return x.TInt32Gte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32In1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32In1); ok {
		return x.TInt32In1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt32NotIn1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt32NotIn1); ok {
		return x.TInt32NotIn1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64_1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64_1); ok {
		return x.TInt64_1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64_2() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64_2); ok {
		return x.TInt64_2
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64_3() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64_3); ok {
		return x.TInt64_3
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64_4() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64_4); ok {
		return x.TInt64_4
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64Eq1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64Eq1); ok {
		return x.TInt64Eq1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64Ne1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64Ne1); ok {
		return x.TInt64Ne1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64Lt1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64Lt1); ok {
		return x.TInt64Lt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64Gt1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64Gt1); ok {
		return x.TInt64Gt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64Lte1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64Lte1); ok {
		return x.TInt64Lte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64Gte1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64Gte1); ok {
		return x.TInt64Gte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64In1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64In1); ok {
		return x.TInt64In1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTInt64NotIn1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TInt64NotIn1); ok {
		return x.TInt64NotIn1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32_1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32_1); ok {
		return x.TSint32_1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32_2() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32_2); ok {
		return x.TSint32_2
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32_3() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32_3); ok {
		return x.TSint32_3
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32_4() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32_4); ok {
		return x.TSint32_4
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32Eq1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32Eq1); ok {
		return x.TSint32Eq1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32Ne1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32Ne1); ok {
		return x.TSint32Ne1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32Lt1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32Lt1); ok {
		return x.TSint32Lt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32Gt1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32Gt1); ok {
		return x.TSint32Gt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32Lte1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32Lte1); ok {
		return x.TSint32Lte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32Gte1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32Gte1); ok {
		return x.TSint32Gte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32In1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32In1); ok {
		return x.TSint32In1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint32NotIn1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint32NotIn1); ok {
		return x.TSint32NotIn1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64_1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64_1); ok {
		return x.TSint64_1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64_2() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64_2); ok {
		return x.TSint64_2
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64_3() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64_3); ok {
		return x.TSint64_3
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64_4() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64_4); ok {
		return x.TSint64_4
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64Eq1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64Eq1); ok {
		return x.TSint64Eq1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64Ne1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64Ne1); ok {
		return x.TSint64Ne1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64Lt1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64Lt1); ok {
		return x.TSint64Lt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64Gt1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64Gt1); ok {
		return x.TSint64Gt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64Lte1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64Lte1); ok {
		return x.TSint64Lte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64Gte1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64Gte1); ok {
		return x.TSint64Gte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64In1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64In1); ok {
		return x.TSint64In1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSint64NotIn1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSint64NotIn1); ok {
		return x.TSint64NotIn1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32_1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32_1); ok {
		return x.TSfixed32_1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32_2() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32_2); ok {
		return x.TSfixed32_2
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32_3() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32_3); ok {
		return x.TSfixed32_3
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32_4() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32_4); ok {
		return x.TSfixed32_4
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32Eq1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32Eq1); ok {
		return x.TSfixed32Eq1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32Ne1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32Ne1); ok {
		return x.TSfixed32Ne1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32Lt1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32Lt1); ok {
		return x.TSfixed32Lt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32Gt1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32Gt1); ok {
		return x.TSfixed32Gt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32Lte1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32Lte1); ok {
		return x.TSfixed32Lte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32Gte1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32Gte1); ok {
		return x.TSfixed32Gte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32In1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32In1); ok {
		return x.TSfixed32In1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed32NotIn1() int32 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed32NotIn1); ok {
		return x.TSfixed32NotIn1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64_1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64_1); ok {
		return x.TSfixed64_1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64_2() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64_2); ok {
		return x.TSfixed64_2
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64_3() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64_3); ok {
		return x.TSfixed64_3
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64_4() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64_4); ok {
		return x.TSfixed64_4
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64Eq1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64Eq1); ok {
		return x.TSfixed64Eq1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64Ne1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64Ne1); ok {
		return x.TSfixed64Ne1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64Lt1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64Lt1); ok {
		return x.TSfixed64Lt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64Gt1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64Gt1); ok {
		return x.TSfixed64Gt1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64Lte1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64Lte1); ok {
		return x.TSfixed64Lte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64Gte1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64Gte1); ok {
		return x.TSfixed64Gte1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64In1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64In1); ok {
		return x.TSfixed64In1
	}
	return 0
}

func (x *ValidIntTagsOneOf1) GetTSfixed64NotIn1() int64 {
	if x, ok := x.GetOneTyp1().(*ValidIntTagsOneOf1_TSfixed64NotIn1); ok {
		return x.TSfixed64NotIn1
	}
	return 0
}

type isValidIntTagsOneOf1_OneTyp1 interface {
	isValidIntTagsOneOf1_OneTyp1()
}

type ValidIntTagsOneOf1_TInt32_1 struct {
	// Type for int32
	TInt32_1 int32 `protobuf:"varint,1,opt,name=t_int32_1,json=tInt321,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32_2 struct {
	TInt32_2 int32 `protobuf:"varint,2,opt,name=t_int32_2,json=tInt322,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32_3 struct {
	TInt32_3 int32 `protobuf:"varint,3,opt,name=t_int32_3,json=tInt323,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32_4 struct {
	TInt32_4 int32 `protobuf:"varint,4,opt,name=t_int32_4,json=tInt324,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32Eq1 struct {
	TInt32Eq1 int32 `protobuf:"varint,10,opt,name=t_int32_eq1,json=tInt32Eq1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32Ne1 struct {
	TInt32Ne1 int32 `protobuf:"varint,11,opt,name=t_int32_ne1,json=tInt32Ne1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32Lt1 struct {
	TInt32Lt1 int32 `protobuf:"varint,12,opt,name=t_int32_lt1,json=tInt32Lt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32Gt1 struct {
	TInt32Gt1 int32 `protobuf:"varint,13,opt,name=t_int32_gt1,json=tInt32Gt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32Lte1 struct {
	TInt32Lte1 int32 `protobuf:"varint,14,opt,name=t_int32_lte1,json=tInt32Lte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32Gte1 struct {
	TInt32Gte1 int32 `protobuf:"varint,15,opt,name=t_int32_gte1,json=tInt32Gte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32In1 struct {
	TInt32In1 int32 `protobuf:"varint,16,opt,name=t_int32_in1,json=tInt32In1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt32NotIn1 struct {
	TInt32NotIn1 int32 `protobuf:"varint,17,opt,name=t_int32_not_in1,json=tInt32NotIn1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64_1 struct {
	// Type for int64
	TInt64_1 int64 `protobuf:"varint,21,opt,name=t_int64_1,json=tInt641,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64_2 struct {
	TInt64_2 int64 `protobuf:"varint,22,opt,name=t_int64_2,json=tInt642,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64_3 struct {
	TInt64_3 int64 `protobuf:"varint,23,opt,name=t_int64_3,json=tInt643,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64_4 struct {
	TInt64_4 int64 `protobuf:"varint,24,opt,name=t_int64_4,json=tInt644,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64Eq1 struct {
	TInt64Eq1 int64 `protobuf:"varint,30,opt,name=t_int64_eq1,json=tInt64Eq1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64Ne1 struct {
	TInt64Ne1 int64 `protobuf:"varint,31,opt,name=t_int64_ne1,json=tInt64Ne1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64Lt1 struct {
	TInt64Lt1 int64 `protobuf:"varint,32,opt,name=t_int64_lt1,json=tInt64Lt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64Gt1 struct {
	TInt64Gt1 int64 `protobuf:"varint,33,opt,name=t_int64_gt1,json=tInt64Gt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64Lte1 struct {
	TInt64Lte1 int64 `protobuf:"varint,34,opt,name=t_int64_lte1,json=tInt64Lte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64Gte1 struct {
	TInt64Gte1 int64 `protobuf:"varint,35,opt,name=t_int64_gte1,json=tInt64Gte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64In1 struct {
	TInt64In1 int64 `protobuf:"varint,36,opt,name=t_int64_in1,json=tInt64In1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TInt64NotIn1 struct {
	TInt64NotIn1 int64 `protobuf:"varint,37,opt,name=t_int64_not_in1,json=tInt64NotIn1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32_1 struct {
	// Type for sint32
	TSint32_1 int32 `protobuf:"zigzag32,41,opt,name=t_sint32_1,json=tSint321,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32_2 struct {
	TSint32_2 int32 `protobuf:"zigzag32,42,opt,name=t_sint32_2,json=tSint322,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32_3 struct {
	TSint32_3 int32 `protobuf:"zigzag32,43,opt,name=t_sint32_3,json=tSint323,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32_4 struct {
	TSint32_4 int32 `protobuf:"zigzag32,44,opt,name=t_sint32_4,json=tSint324,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32Eq1 struct {
	TSint32Eq1 int32 `protobuf:"zigzag32,50,opt,name=t_sint32_eq1,json=tSint32Eq1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32Ne1 struct {
	TSint32Ne1 int32 `protobuf:"zigzag32,51,opt,name=t_sint32_ne1,json=tSint32Ne1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32Lt1 struct {
	TSint32Lt1 int32 `protobuf:"zigzag32,52,opt,name=t_sint32_lt1,json=tSint32Lt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32Gt1 struct {
	TSint32Gt1 int32 `protobuf:"zigzag32,53,opt,name=t_sint32_gt1,json=tSint32Gt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32Lte1 struct {
	TSint32Lte1 int32 `protobuf:"zigzag32,54,opt,name=t_sint32_lte1,json=tSint32Lte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32Gte1 struct {
	TSint32Gte1 int32 `protobuf:"zigzag32,55,opt,name=t_sint32_gte1,json=tSint32Gte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32In1 struct {
	TSint32In1 int32 `protobuf:"zigzag32,56,opt,name=t_sint32_in1,json=tSint32In1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint32NotIn1 struct {
	TSint32NotIn1 int32 `protobuf:"zigzag32,57,opt,name=t_sint32_not_in1,json=tSint32NotIn1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64_1 struct {
	// Type for sint64
	TSint64_1 int64 `protobuf:"zigzag64,61,opt,name=t_sint64_1,json=tSint641,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64_2 struct {
	TSint64_2 int64 `protobuf:"zigzag64,62,opt,name=t_sint64_2,json=tSint642,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64_3 struct {
	TSint64_3 int64 `protobuf:"zigzag64,63,opt,name=t_sint64_3,json=tSint643,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64_4 struct {
	TSint64_4 int64 `protobuf:"zigzag64,64,opt,name=t_sint64_4,json=tSint644,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64Eq1 struct {
	TSint64Eq1 int64 `protobuf:"zigzag64,70,opt,name=t_sint64_eq1,json=tSint64Eq1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64Ne1 struct {
	TSint64Ne1 int64 `protobuf:"zigzag64,71,opt,name=t_sint64_ne1,json=tSint64Ne1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64Lt1 struct {
	TSint64Lt1 int64 `protobuf:"zigzag64,72,opt,name=t_sint64_lt1,json=tSint64Lt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64Gt1 struct {
	TSint64Gt1 int64 `protobuf:"zigzag64,73,opt,name=t_sint64_gt1,json=tSint64Gt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64Lte1 struct {
	TSint64Lte1 int64 `protobuf:"zigzag64,74,opt,name=t_sint64_lte1,json=tSint64Lte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64Gte1 struct {
	TSint64Gte1 int64 `protobuf:"zigzag64,75,opt,name=t_sint64_gte1,json=tSint64Gte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64In1 struct {
	TSint64In1 int64 `protobuf:"zigzag64,76,opt,name=t_sint64_in1,json=tSint64In1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSint64NotIn1 struct {
	TSint64NotIn1 int64 `protobuf:"zigzag64,77,opt,name=t_sint64_not_in1,json=tSint64NotIn1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32_1 struct {
	// Type for sfixed32
	TSfixed32_1 int32 `protobuf:"fixed32,81,opt,name=t_sfixed32_1,json=tSfixed321,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32_2 struct {
	TSfixed32_2 int32 `protobuf:"fixed32,82,opt,name=t_sfixed32_2,json=tSfixed322,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32_3 struct {
	TSfixed32_3 int32 `protobuf:"fixed32,83,opt,name=t_sfixed32_3,json=tSfixed323,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32_4 struct {
	TSfixed32_4 int32 `protobuf:"fixed32,84,opt,name=t_sfixed32_4,json=tSfixed324,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32Eq1 struct {
	TSfixed32Eq1 int32 `protobuf:"fixed32,90,opt,name=t_sfixed32_eq1,json=tSfixed32Eq1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32Ne1 struct {
	TSfixed32Ne1 int32 `protobuf:"fixed32,91,opt,name=t_sfixed32_ne1,json=tSfixed32Ne1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32Lt1 struct {
	TSfixed32Lt1 int32 `protobuf:"fixed32,92,opt,name=t_sfixed32_lt1,json=tSfixed32Lt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32Gt1 struct {
	TSfixed32Gt1 int32 `protobuf:"fixed32,93,opt,name=t_sfixed32_gt1,json=tSfixed32Gt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32Lte1 struct {
	TSfixed32Lte1 int32 `protobuf:"fixed32,94,opt,name=t_sfixed32_lte1,json=tSfixed32Lte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32Gte1 struct {
	TSfixed32Gte1 int32 `protobuf:"fixed32,95,opt,name=t_sfixed32_gte1,json=tSfixed32Gte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32In1 struct {
	TSfixed32In1 int32 `protobuf:"fixed32,96,opt,name=t_sfixed32_in1,json=tSfixed32In1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed32NotIn1 struct {
	TSfixed32NotIn1 int32 `protobuf:"fixed32,97,opt,name=t_sfixed32_not_in1,json=tSfixed32NotIn1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64_1 struct {
	// Type for sfixed64
	TSfixed64_1 int64 `protobuf:"fixed64,101,opt,name=t_sfixed64_1,json=tSfixed641,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64_2 struct {
	TSfixed64_2 int64 `protobuf:"fixed64,102,opt,name=t_sfixed64_2,json=tSfixed642,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64_3 struct {
	TSfixed64_3 int64 `protobuf:"fixed64,103,opt,name=t_sfixed64_3,json=tSfixed643,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64_4 struct {
	TSfixed64_4 int64 `protobuf:"fixed64,104,opt,name=t_sfixed64_4,json=tSfixed644,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64Eq1 struct {
	TSfixed64Eq1 int64 `protobuf:"fixed64,110,opt,name=t_sfixed64_eq1,json=tSfixed64Eq1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64Ne1 struct {
	TSfixed64Ne1 int64 `protobuf:"fixed64,111,opt,name=t_sfixed64_ne1,json=tSfixed64Ne1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64Lt1 struct {
	TSfixed64Lt1 int64 `protobuf:"fixed64,112,opt,name=t_sfixed64_lt1,json=tSfixed64Lt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64Gt1 struct {
	TSfixed64Gt1 int64 `protobuf:"fixed64,113,opt,name=t_sfixed64_gt1,json=tSfixed64Gt1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64Lte1 struct {
	TSfixed64Lte1 int64 `protobuf:"fixed64,114,opt,name=t_sfixed64_lte1,json=tSfixed64Lte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64Gte1 struct {
	TSfixed64Gte1 int64 `protobuf:"fixed64,115,opt,name=t_sfixed64_gte1,json=tSfixed64Gte1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64In1 struct {
	TSfixed64In1 int64 `protobuf:"fixed64,116,opt,name=t_sfixed64_in1,json=tSfixed64In1,proto3,oneof"`
}

type ValidIntTagsOneOf1_TSfixed64NotIn1 struct {
	TSfixed64NotIn1 int64 `protobuf:"fixed64,117,opt,name=t_sfixed64_not_in1,json=tSfixed64NotIn1,proto3,oneof"`
}

func (*ValidIntTagsOneOf1_TInt32_1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32_2) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32_3) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32_4) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32Eq1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32Ne1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32Lt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32Gt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32Lte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32Gte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32In1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt32NotIn1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64_1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64_2) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64_3) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64_4) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64Eq1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64Ne1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64Lt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64Gt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64Lte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64Gte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64In1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TInt64NotIn1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32_1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32_2) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32_3) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32_4) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32Eq1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32Ne1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32Lt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32Gt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32Lte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32Gte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32In1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint32NotIn1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64_1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64_2) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64_3) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64_4) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64Eq1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64Ne1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64Lt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64Gt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64Lte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64Gte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64In1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSint64NotIn1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32_1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32_2) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32_3) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32_4) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32Eq1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32Ne1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32Lt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32Gt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32Lte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32Gte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32In1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed32NotIn1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64_1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64_2) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64_3) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64_4) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64Eq1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64Ne1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64Lt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64Gt1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64Lte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64Gte1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64In1) isValidIntTagsOneOf1_OneTyp1() {}

func (*ValidIntTagsOneOf1_TSfixed64NotIn1) isValidIntTagsOneOf1_OneTyp1() {}

// ValidUintTagsGeneral1 for test option tag UintTags with general field.
type ValidUintTagsGeneral1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type for uint32
	TUint32_1     uint32 `protobuf:"varint,1,opt,name=t_uint32_1,json=tUint321,proto3" json:"t_uint32_1,omitempty"`
	TUint32_2     uint32 `protobuf:"varint,2,opt,name=t_uint32_2,json=tUint322,proto3" json:"t_uint32_2,omitempty"`
	TUint32_3     uint32 `protobuf:"varint,3,opt,name=t_uint32_3,json=tUint323,proto3" json:"t_uint32_3,omitempty"`
	TUint32_4     uint32 `protobuf:"varint,4,opt,name=t_uint32_4,json=tUint324,proto3" json:"t_uint32_4,omitempty"`
	TUint32Eq1    uint32 `protobuf:"varint,10,opt,name=t_uint32_eq1,json=tUint32Eq1,proto3" json:"t_uint32_eq1,omitempty"`
	TUint32Ne1    uint32 `protobuf:"varint,11,opt,name=t_uint32_ne1,json=tUint32Ne1,proto3" json:"t_uint32_ne1,omitempty"`
	TUint32Lt1    uint32 `protobuf:"varint,12,opt,name=t_uint32_lt1,json=tUint32Lt1,proto3" json:"t_uint32_lt1,omitempty"`
	TUint32Gt1    uint32 `protobuf:"varint,13,opt,name=t_uint32_gt1,json=tUint32Gt1,proto3" json:"t_uint32_gt1,omitempty"`
	TUint32Lte1   uint32 `protobuf:"varint,14,opt,name=t_uint32_lte1,json=tUint32Lte1,proto3" json:"t_uint32_lte1,omitempty"`
	TUint32Gte1   uint32 `protobuf:"varint,15,opt,name=t_uint32_gte1,json=tUint32Gte1,proto3" json:"t_uint32_gte1,omitempty"`
	TUint32In1    uint32 `protobuf:"varint,16,opt,name=t_uint32_in1,json=tUint32In1,proto3" json:"t_uint32_in1,omitempty"`
	TUint32NotIn1 uint32 `protobuf:"varint,17,opt,name=t_uint32_not_in1,json=tUint32NotIn1,proto3" json:"t_uint32_not_in1,omitempty"`
	// Type for uint64
	TUint64_1     uint64 `protobuf:"varint,21,opt,name=t_uint64_1,json=tUint641,proto3" json:"t_uint64_1,omitempty"`
	TUint64_2     uint64 `protobuf:"varint,22,opt,name=t_uint64_2,json=tUint642,proto3" json:"t_uint64_2,omitempty"`
	TUint64_3     uint64 `protobuf:"varint,23,opt,name=t_uint64_3,json=tUint643,proto3" json:"t_uint64_3,omitempty"`
	TUint64_4     uint64 `protobuf:"varint,24,opt,name=t_uint64_4,json=tUint644,proto3" json:"t_uint64_4,omitempty"`
	TUint64Eq1    uint64 `protobuf:"varint,30,opt,name=t_uint64_eq1,json=tUint64Eq1,proto3" json:"t_uint64_eq1,omitempty"`
	TUint64Ne1    uint64 `protobuf:"varint,31,opt,name=t_uint64_ne1,json=tUint64Ne1,proto3" json:"t_uint64_ne1,omitempty"`
	TUint64Lt1    uint64 `protobuf:"varint,32,opt,name=t_uint64_lt1,json=tUint64Lt1,proto3" json:"t_uint64_lt1,omitempty"`
	TUint64Gt1    uint64 `protobuf:"varint,33,opt,name=t_uint64_gt1,json=tUint64Gt1,proto3" json:"t_uint64_gt1,omitempty"`
	TUint64Lte1   uint64 `protobuf:"varint,34,opt,name=t_uint64_lte1,json=tUint64Lte1,proto3" json:"t_uint64_lte1,omitempty"`
	TUint64Gte1   uint64 `protobuf:"varint,35,opt,name=t_uint64_gte1,json=tUint64Gte1,proto3" json:"t_uint64_gte1,omitempty"`
	TUint64In1    uint64 `protobuf:"varint,36,opt,name=t_uint64_in1,json=tUint64In1,proto3" json:"t_uint64_in1,omitempty"`
	TUint64NotIn1 uint64 `protobuf:"varint,37,opt,name=t_uint64_not_in1,json=tUint64NotIn1,proto3" json:"t_uint64_not_in1,omitempty"`
	// Type for fixed32
	TFixed32_1     uint32 `protobuf:"fixed32,41,opt,name=t_fixed32_1,json=tFixed321,proto3" json:"t_fixed32_1,omitempty"`
	TFixed32_2     uint32 `protobuf:"fixed32,42,opt,name=t_fixed32_2,json=tFixed322,proto3" json:"t_fixed32_2,omitempty"`
	TFixed32_3     uint32 `protobuf:"fixed32,43,opt,name=t_fixed32_3,json=tFixed323,proto3" json:"t_fixed32_3,omitempty"`
	TFixed32_4     uint32 `protobuf:"fixed32,44,opt,name=t_fixed32_4,json=tFixed324,proto3" json:"t_fixed32_4,omitempty"`
	TFixed32Eq1    uint32 `protobuf:"fixed32,50,opt,name=t_fixed32_eq1,json=tFixed32Eq1,proto3" json:"t_fixed32_eq1,omitempty"`
	TFixed32Ne1    uint32 `protobuf:"fixed32,51,opt,name=t_fixed32_ne1,json=tFixed32Ne1,proto3" json:"t_fixed32_ne1,omitempty"`
	TFixed32Lt1    uint32 `protobuf:"fixed32,52,opt,name=t_fixed32_lt1,json=tFixed32Lt1,proto3" json:"t_fixed32_lt1,omitempty"`
	TFixed32Gt1    uint32 `protobuf:"fixed32,53,opt,name=t_fixed32_gt1,json=tFixed32Gt1,proto3" json:"t_fixed32_gt1,omitempty"`
	TFixed32Lte1   uint32 `protobuf:"fixed32,54,opt,name=t_fixed32_lte1,json=tFixed32Lte1,proto3" json:"t_fixed32_lte1,omitempty"`
	TFixed32Gte1   uint32 `protobuf:"fixed32,55,opt,name=t_fixed32_gte1,json=tFixed32Gte1,proto3" json:"t_fixed32_gte1,omitempty"`
	TFixed32In1    uint32 `protobuf:"fixed32,56,opt,name=t_fixed32_in1,json=tFixed32In1,proto3" json:"t_fixed32_in1,omitempty"`
	TFixed32NotIn1 uint32 `protobuf:"fixed32,57,opt,name=t_fixed32_not_in1,json=tFixed32NotIn1,proto3" json:"t_fixed32_not_in1,omitempty"`
	// Type for fixed64
	TFixed64_1     uint64 `protobuf:"fixed64,61,opt,name=t_fixed64_1,json=tFixed641,proto3" json:"t_fixed64_1,omitempty"`
	TFixed64_2     uint64 `protobuf:"fixed64,62,opt,name=t_fixed64_2,json=tFixed642,proto3" json:"t_fixed64_2,omitempty"`
	TFixed64_3     uint64 `protobuf:"fixed64,63,opt,name=t_fixed64_3,json=tFixed643,proto3" json:"t_fixed64_3,omitempty"`
	TFixed64_4     uint64 `protobuf:"fixed64,64,opt,name=t_fixed64_4,json=tFixed644,proto3" json:"t_fixed64_4,omitempty"`
	TFixed64Eq1    uint64 `protobuf:"fixed64,70,opt,name=t_fixed64_eq1,json=tFixed64Eq1,proto3" json:"t_fixed64_eq1,omitempty"`
	TFixed64Ne1    uint64 `protobuf:"fixed64,71,opt,name=t_fixed64_ne1,json=tFixed64Ne1,proto3" json:"t_fixed64_ne1,omitempty"`
	TFixed64Lt1    uint64 `protobuf:"fixed64,72,opt,name=t_fixed64_lt1,json=tFixed64Lt1,proto3" json:"t_fixed64_lt1,omitempty"`
	TFixed64Gt1    uint64 `protobuf:"fixed64,73,opt,name=t_fixed64_gt1,json=tFixed64Gt1,proto3" json:"t_fixed64_gt1,omitempty"`
	TFixed64Lte1   uint64 `protobuf:"fixed64,74,opt,name=t_fixed64_lte1,json=tFixed64Lte1,proto3" json:"t_fixed64_lte1,omitempty"`
	TFixed64Gte1   uint64 `protobuf:"fixed64,75,opt,name=t_fixed64_gte1,json=tFixed64Gte1,proto3" json:"t_fixed64_gte1,omitempty"`
	TFixed64In1    uint64 `protobuf:"fixed64,76,opt,name=t_fixed64_in1,json=tFixed64In1,proto3" json:"t_fixed64_in1,omitempty"`
	TFixed64NotIn1 uint64 `protobuf:"fixed64,77,opt,name=t_fixed64_not_in1,json=tFixed64NotIn1,proto3" json:"t_fixed64_not_in1,omitempty"`
}

func (x *ValidUintTagsGeneral1) Reset() {
	*x = ValidUintTagsGeneral1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidUintTagsGeneral1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidUintTagsGeneral1) ProtoMessage() {}

func (x *ValidUintTagsGeneral1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidUintTagsGeneral1.ProtoReflect.Descriptor instead.
func (*ValidUintTagsGeneral1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{8}
}

func (x *ValidUintTagsGeneral1) GetTUint32_1() uint32 {
	if x != nil {
		return x.TUint32_1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32_2() uint32 {
	if x != nil {
		return x.TUint32_2
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32_3() uint32 {
	if x != nil {
		return x.TUint32_3
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32_4() uint32 {
	if x != nil {
		return x.TUint32_4
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32Eq1() uint32 {
	if x != nil {
		return x.TUint32Eq1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32Ne1() uint32 {
	if x != nil {
		return x.TUint32Ne1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32Lt1() uint32 {
	if x != nil {
		return x.TUint32Lt1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32Gt1() uint32 {
	if x != nil {
		return x.TUint32Gt1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32Lte1() uint32 {
	if x != nil {
		return x.TUint32Lte1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32Gte1() uint32 {
	if x != nil {
		return x.TUint32Gte1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32In1() uint32 {
	if x != nil {
		return x.TUint32In1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint32NotIn1() uint32 {
	if x != nil {
		return x.TUint32NotIn1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64_1() uint64 {
	if x != nil {
		return x.TUint64_1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64_2() uint64 {
	if x != nil {
		return x.TUint64_2
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64_3() uint64 {
	if x != nil {
		return x.TUint64_3
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64_4() uint64 {
	if x != nil {
		return x.TUint64_4
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64Eq1() uint64 {
	if x != nil {
		return x.TUint64Eq1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64Ne1() uint64 {
	if x != nil {
		return x.TUint64Ne1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64Lt1() uint64 {
	if x != nil {
		return x.TUint64Lt1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64Gt1() uint64 {
	if x != nil {
		return x.TUint64Gt1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64Lte1() uint64 {
	if x != nil {
		return x.TUint64Lte1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64Gte1() uint64 {
	if x != nil {
		return x.TUint64Gte1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64In1() uint64 {
	if x != nil {
		return x.TUint64In1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTUint64NotIn1() uint64 {
	if x != nil {
		return x.TUint64NotIn1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32_1() uint32 {
	if x != nil {
		return x.TFixed32_1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32_2() uint32 {
	if x != nil {
		return x.TFixed32_2
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32_3() uint32 {
	if x != nil {
		return x.TFixed32_3
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32_4() uint32 {
	if x != nil {
		return x.TFixed32_4
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32Eq1() uint32 {
	if x != nil {
		return x.TFixed32Eq1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32Ne1() uint32 {
	if x != nil {
		return x.TFixed32Ne1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32Lt1() uint32 {
	if x != nil {
		return x.TFixed32Lt1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32Gt1() uint32 {
	if x != nil {
		return x.TFixed32Gt1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32Lte1() uint32 {
	if x != nil {
		return x.TFixed32Lte1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32Gte1() uint32 {
	if x != nil {
		return x.TFixed32Gte1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32In1() uint32 {
	if x != nil {
		return x.TFixed32In1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed32NotIn1() uint32 {
	if x != nil {
		return x.TFixed32NotIn1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64_1() uint64 {
	if x != nil {
		return x.TFixed64_1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64_2() uint64 {
	if x != nil {
		return x.TFixed64_2
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64_3() uint64 {
	if x != nil {
		return x.TFixed64_3
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64_4() uint64 {
	if x != nil {
		return x.TFixed64_4
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64Eq1() uint64 {
	if x != nil {
		return x.TFixed64Eq1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64Ne1() uint64 {
	if x != nil {
		return x.TFixed64Ne1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64Lt1() uint64 {
	if x != nil {
		return x.TFixed64Lt1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64Gt1() uint64 {
	if x != nil {
		return x.TFixed64Gt1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64Lte1() uint64 {
	if x != nil {
		return x.TFixed64Lte1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64Gte1() uint64 {
	if x != nil {
		return x.TFixed64Gte1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64In1() uint64 {
	if x != nil {
		return x.TFixed64In1
	}
	return 0
}

func (x *ValidUintTagsGeneral1) GetTFixed64NotIn1() uint64 {
	if x != nil {
		return x.TFixed64NotIn1
	}
	return 0
}

// ValidUintTagsOptional1 for test option tag UintTags with optional field.
type ValidUintTagsOptional1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type for uint32
	TUint32_1     *uint32 `protobuf:"varint,1,opt,name=t_uint32_1,json=tUint321,proto3,oneof" json:"t_uint32_1,omitempty"`
	TUint32_2     *uint32 `protobuf:"varint,2,opt,name=t_uint32_2,json=tUint322,proto3,oneof" json:"t_uint32_2,omitempty"`
	TUint32_3     *uint32 `protobuf:"varint,3,opt,name=t_uint32_3,json=tUint323,proto3,oneof" json:"t_uint32_3,omitempty"`
	TUint32_4     *uint32 `protobuf:"varint,4,opt,name=t_uint32_4,json=tUint324,proto3,oneof" json:"t_uint32_4,omitempty"`
	TUint32Eq1    *uint32 `protobuf:"varint,10,opt,name=t_uint32_eq1,json=tUint32Eq1,proto3,oneof" json:"t_uint32_eq1,omitempty"`
	TUint32Ne1    *uint32 `protobuf:"varint,11,opt,name=t_uint32_ne1,json=tUint32Ne1,proto3,oneof" json:"t_uint32_ne1,omitempty"`
	TUint32Lt1    *uint32 `protobuf:"varint,12,opt,name=t_uint32_lt1,json=tUint32Lt1,proto3,oneof" json:"t_uint32_lt1,omitempty"`
	TUint32Gt1    *uint32 `protobuf:"varint,13,opt,name=t_uint32_gt1,json=tUint32Gt1,proto3,oneof" json:"t_uint32_gt1,omitempty"`
	TUint32Lte1   *uint32 `protobuf:"varint,14,opt,name=t_uint32_lte1,json=tUint32Lte1,proto3,oneof" json:"t_uint32_lte1,omitempty"`
	TUint32Gte1   *uint32 `protobuf:"varint,15,opt,name=t_uint32_gte1,json=tUint32Gte1,proto3,oneof" json:"t_uint32_gte1,omitempty"`
	TUint32In1    *uint32 `protobuf:"varint,16,opt,name=t_uint32_in1,json=tUint32In1,proto3,oneof" json:"t_uint32_in1,omitempty"`
	TUint32NotIn1 *uint32 `protobuf:"varint,17,opt,name=t_uint32_not_in1,json=tUint32NotIn1,proto3,oneof" json:"t_uint32_not_in1,omitempty"`
	// Type for uint64
	TUint64_1     *uint64 `protobuf:"varint,21,opt,name=t_uint64_1,json=tUint641,proto3,oneof" json:"t_uint64_1,omitempty"`
	TUint64_2     *uint64 `protobuf:"varint,22,opt,name=t_uint64_2,json=tUint642,proto3,oneof" json:"t_uint64_2,omitempty"`
	TUint64_3     *uint64 `protobuf:"varint,23,opt,name=t_uint64_3,json=tUint643,proto3,oneof" json:"t_uint64_3,omitempty"`
	TUint64_4     *uint64 `protobuf:"varint,24,opt,name=t_uint64_4,json=tUint644,proto3,oneof" json:"t_uint64_4,omitempty"`
	TUint64Eq1    *uint64 `protobuf:"varint,30,opt,name=t_uint64_eq1,json=tUint64Eq1,proto3,oneof" json:"t_uint64_eq1,omitempty"`
	TUint64Ne1    *uint64 `protobuf:"varint,31,opt,name=t_uint64_ne1,json=tUint64Ne1,proto3,oneof" json:"t_uint64_ne1,omitempty"`
	TUint64Lt1    *uint64 `protobuf:"varint,32,opt,name=t_uint64_lt1,json=tUint64Lt1,proto3,oneof" json:"t_uint64_lt1,omitempty"`
	TUint64Gt1    *uint64 `protobuf:"varint,33,opt,name=t_uint64_gt1,json=tUint64Gt1,proto3,oneof" json:"t_uint64_gt1,omitempty"`
	TUint64Lte1   *uint64 `protobuf:"varint,34,opt,name=t_uint64_lte1,json=tUint64Lte1,proto3,oneof" json:"t_uint64_lte1,omitempty"`
	TUint64Gte1   *uint64 `protobuf:"varint,35,opt,name=t_uint64_gte1,json=tUint64Gte1,proto3,oneof" json:"t_uint64_gte1,omitempty"`
	TUint64In1    *uint64 `protobuf:"varint,36,opt,name=t_uint64_in1,json=tUint64In1,proto3,oneof" json:"t_uint64_in1,omitempty"`
	TUint64NotIn1 *uint64 `protobuf:"varint,37,opt,name=t_uint64_not_in1,json=tUint64NotIn1,proto3,oneof" json:"t_uint64_not_in1,omitempty"`
	// Type for fixed32
	TFixed32_1     *uint32 `protobuf:"fixed32,41,opt,name=t_fixed32_1,json=tFixed321,proto3,oneof" json:"t_fixed32_1,omitempty"`
	TFixed32_2     *uint32 `protobuf:"fixed32,42,opt,name=t_fixed32_2,json=tFixed322,proto3,oneof" json:"t_fixed32_2,omitempty"`
	TFixed32_3     *uint32 `protobuf:"fixed32,43,opt,name=t_fixed32_3,json=tFixed323,proto3,oneof" json:"t_fixed32_3,omitempty"`
	TFixed32_4     *uint32 `protobuf:"fixed32,44,opt,name=t_fixed32_4,json=tFixed324,proto3,oneof" json:"t_fixed32_4,omitempty"`
	TFixed32Eq1    *uint32 `protobuf:"fixed32,50,opt,name=t_fixed32_eq1,json=tFixed32Eq1,proto3,oneof" json:"t_fixed32_eq1,omitempty"`
	TFixed32Ne1    *uint32 `protobuf:"fixed32,51,opt,name=t_fixed32_ne1,json=tFixed32Ne1,proto3,oneof" json:"t_fixed32_ne1,omitempty"`
	TFixed32Lt1    *uint32 `protobuf:"fixed32,52,opt,name=t_fixed32_lt1,json=tFixed32Lt1,proto3,oneof" json:"t_fixed32_lt1,omitempty"`
	TFixed32Gt1    *uint32 `protobuf:"fixed32,53,opt,name=t_fixed32_gt1,json=tFixed32Gt1,proto3,oneof" json:"t_fixed32_gt1,omitempty"`
	TFixed32Lte1   *uint32 `protobuf:"fixed32,54,opt,name=t_fixed32_lte1,json=tFixed32Lte1,proto3,oneof" json:"t_fixed32_lte1,omitempty"`
	TFixed32Gte1   *uint32 `protobuf:"fixed32,55,opt,name=t_fixed32_gte1,json=tFixed32Gte1,proto3,oneof" json:"t_fixed32_gte1,omitempty"`
	TFixed32In1    *uint32 `protobuf:"fixed32,56,opt,name=t_fixed32_in1,json=tFixed32In1,proto3,oneof" json:"t_fixed32_in1,omitempty"`
	TFixed32NotIn1 *uint32 `protobuf:"fixed32,57,opt,name=t_fixed32_not_in1,json=tFixed32NotIn1,proto3,oneof" json:"t_fixed32_not_in1,omitempty"`
	// Type for fixed64
	TFixed64_1     *uint64 `protobuf:"fixed64,61,opt,name=t_fixed64_1,json=tFixed641,proto3,oneof" json:"t_fixed64_1,omitempty"`
	TFixed64_2     *uint64 `protobuf:"fixed64,62,opt,name=t_fixed64_2,json=tFixed642,proto3,oneof" json:"t_fixed64_2,omitempty"`
	TFixed64_3     *uint64 `protobuf:"fixed64,63,opt,name=t_fixed64_3,json=tFixed643,proto3,oneof" json:"t_fixed64_3,omitempty"`
	TFixed64_4     *uint64 `protobuf:"fixed64,64,opt,name=t_fixed64_4,json=tFixed644,proto3,oneof" json:"t_fixed64_4,omitempty"`
	TFixed64Eq1    *uint64 `protobuf:"fixed64,70,opt,name=t_fixed64_eq1,json=tFixed64Eq1,proto3,oneof" json:"t_fixed64_eq1,omitempty"`
	TFixed64Ne1    *uint64 `protobuf:"fixed64,71,opt,name=t_fixed64_ne1,json=tFixed64Ne1,proto3,oneof" json:"t_fixed64_ne1,omitempty"`
	TFixed64Lt1    *uint64 `protobuf:"fixed64,72,opt,name=t_fixed64_lt1,json=tFixed64Lt1,proto3,oneof" json:"t_fixed64_lt1,omitempty"`
	TFixed64Gt1    *uint64 `protobuf:"fixed64,73,opt,name=t_fixed64_gt1,json=tFixed64Gt1,proto3,oneof" json:"t_fixed64_gt1,omitempty"`
	TFixed64Lte1   *uint64 `protobuf:"fixed64,74,opt,name=t_fixed64_lte1,json=tFixed64Lte1,proto3,oneof" json:"t_fixed64_lte1,omitempty"`
	TFixed64Gte1   *uint64 `protobuf:"fixed64,75,opt,name=t_fixed64_gte1,json=tFixed64Gte1,proto3,oneof" json:"t_fixed64_gte1,omitempty"`
	TFixed64In1    *uint64 `protobuf:"fixed64,76,opt,name=t_fixed64_in1,json=tFixed64In1,proto3,oneof" json:"t_fixed64_in1,omitempty"`
	TFixed64NotIn1 *uint64 `protobuf:"fixed64,77,opt,name=t_fixed64_not_in1,json=tFixed64NotIn1,proto3,oneof" json:"t_fixed64_not_in1,omitempty"`
}

func (x *ValidUintTagsOptional1) Reset() {
	*x = ValidUintTagsOptional1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidUintTagsOptional1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidUintTagsOptional1) ProtoMessage() {}

func (x *ValidUintTagsOptional1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidUintTagsOptional1.ProtoReflect.Descriptor instead.
func (*ValidUintTagsOptional1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{9}
}

func (x *ValidUintTagsOptional1) GetTUint32_1() uint32 {
	if x != nil && x.TUint32_1 != nil {
		return *x.TUint32_1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32_2() uint32 {
	if x != nil && x.TUint32_2 != nil {
		return *x.TUint32_2
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32_3() uint32 {
	if x != nil && x.TUint32_3 != nil {
		return *x.TUint32_3
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32_4() uint32 {
	if x != nil && x.TUint32_4 != nil {
		return *x.TUint32_4
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32Eq1() uint32 {
	if x != nil && x.TUint32Eq1 != nil {
		return *x.TUint32Eq1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32Ne1() uint32 {
	if x != nil && x.TUint32Ne1 != nil {
		return *x.TUint32Ne1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32Lt1() uint32 {
	if x != nil && x.TUint32Lt1 != nil {
		return *x.TUint32Lt1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32Gt1() uint32 {
	if x != nil && x.TUint32Gt1 != nil {
		return *x.TUint32Gt1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32Lte1() uint32 {
	if x != nil && x.TUint32Lte1 != nil {
		return *x.TUint32Lte1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32Gte1() uint32 {
	if x != nil && x.TUint32Gte1 != nil {
		return *x.TUint32Gte1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32In1() uint32 {
	if x != nil && x.TUint32In1 != nil {
		return *x.TUint32In1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint32NotIn1() uint32 {
	if x != nil && x.TUint32NotIn1 != nil {
		return *x.TUint32NotIn1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64_1() uint64 {
	if x != nil && x.TUint64_1 != nil {
		return *x.TUint64_1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64_2() uint64 {
	if x != nil && x.TUint64_2 != nil {
		return *x.TUint64_2
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64_3() uint64 {
	if x != nil && x.TUint64_3 != nil {
		return *x.TUint64_3
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64_4() uint64 {
	if x != nil && x.TUint64_4 != nil {
		return *x.TUint64_4
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64Eq1() uint64 {
	if x != nil && x.TUint64Eq1 != nil {
		return *x.TUint64Eq1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64Ne1() uint64 {
	if x != nil && x.TUint64Ne1 != nil {
		return *x.TUint64Ne1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64Lt1() uint64 {
	if x != nil && x.TUint64Lt1 != nil {
		return *x.TUint64Lt1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64Gt1() uint64 {
	if x != nil && x.TUint64Gt1 != nil {
		return *x.TUint64Gt1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64Lte1() uint64 {
	if x != nil && x.TUint64Lte1 != nil {
		return *x.TUint64Lte1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64Gte1() uint64 {
	if x != nil && x.TUint64Gte1 != nil {
		return *x.TUint64Gte1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64In1() uint64 {
	if x != nil && x.TUint64In1 != nil {
		return *x.TUint64In1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTUint64NotIn1() uint64 {
	if x != nil && x.TUint64NotIn1 != nil {
		return *x.TUint64NotIn1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32_1() uint32 {
	if x != nil && x.TFixed32_1 != nil {
		return *x.TFixed32_1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32_2() uint32 {
	if x != nil && x.TFixed32_2 != nil {
		return *x.TFixed32_2
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32_3() uint32 {
	if x != nil && x.TFixed32_3 != nil {
		return *x.TFixed32_3
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32_4() uint32 {
	if x != nil && x.TFixed32_4 != nil {
		return *x.TFixed32_4
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32Eq1() uint32 {
	if x != nil && x.TFixed32Eq1 != nil {
		return *x.TFixed32Eq1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32Ne1() uint32 {
	if x != nil && x.TFixed32Ne1 != nil {
		return *x.TFixed32Ne1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32Lt1() uint32 {
	if x != nil && x.TFixed32Lt1 != nil {
		return *x.TFixed32Lt1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32Gt1() uint32 {
	if x != nil && x.TFixed32Gt1 != nil {
		return *x.TFixed32Gt1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32Lte1() uint32 {
	if x != nil && x.TFixed32Lte1 != nil {
		return *x.TFixed32Lte1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32Gte1() uint32 {
	if x != nil && x.TFixed32Gte1 != nil {
		return *x.TFixed32Gte1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32In1() uint32 {
	if x != nil && x.TFixed32In1 != nil {
		return *x.TFixed32In1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed32NotIn1() uint32 {
	if x != nil && x.TFixed32NotIn1 != nil {
		return *x.TFixed32NotIn1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64_1() uint64 {
	if x != nil && x.TFixed64_1 != nil {
		return *x.TFixed64_1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64_2() uint64 {
	if x != nil && x.TFixed64_2 != nil {
		return *x.TFixed64_2
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64_3() uint64 {
	if x != nil && x.TFixed64_3 != nil {
		return *x.TFixed64_3
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64_4() uint64 {
	if x != nil && x.TFixed64_4 != nil {
		return *x.TFixed64_4
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64Eq1() uint64 {
	if x != nil && x.TFixed64Eq1 != nil {
		return *x.TFixed64Eq1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64Ne1() uint64 {
	if x != nil && x.TFixed64Ne1 != nil {
		return *x.TFixed64Ne1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64Lt1() uint64 {
	if x != nil && x.TFixed64Lt1 != nil {
		return *x.TFixed64Lt1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64Gt1() uint64 {
	if x != nil && x.TFixed64Gt1 != nil {
		return *x.TFixed64Gt1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64Lte1() uint64 {
	if x != nil && x.TFixed64Lte1 != nil {
		return *x.TFixed64Lte1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64Gte1() uint64 {
	if x != nil && x.TFixed64Gte1 != nil {
		return *x.TFixed64Gte1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64In1() uint64 {
	if x != nil && x.TFixed64In1 != nil {
		return *x.TFixed64In1
	}
	return 0
}

func (x *ValidUintTagsOptional1) GetTFixed64NotIn1() uint64 {
	if x != nil && x.TFixed64NotIn1 != nil {
		return *x.TFixed64NotIn1
	}
	return 0
}

// ValidUintTagsOneOf1 for test option tag UintTags with oneof field.
type ValidUintTagsOneOf1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneTyp1:
	//	*ValidUintTagsOneOf1_TUint32_1
	//	*ValidUintTagsOneOf1_TUint32_2
	//	*ValidUintTagsOneOf1_TUint32_3
	//	*ValidUintTagsOneOf1_TUint32_4
	//	*ValidUintTagsOneOf1_TUint32Eq1
	//	*ValidUintTagsOneOf1_TUint32Ne1
	//	*ValidUintTagsOneOf1_TUint32Lt1
	//	*ValidUintTagsOneOf1_TUint32Gt1
	//	*ValidUintTagsOneOf1_TUint32Lte1
	//	*ValidUintTagsOneOf1_TUint32Gte1
	//	*ValidUintTagsOneOf1_TUint32In1
	//	*ValidUintTagsOneOf1_TUint32NotIn1
	//	*ValidUintTagsOneOf1_TUint64_1
	//	*ValidUintTagsOneOf1_TUint64_2
	//	*ValidUintTagsOneOf1_TUint64_3
	//	*ValidUintTagsOneOf1_TUint64_4
	//	*ValidUintTagsOneOf1_TUint64Eq1
	//	*ValidUintTagsOneOf1_TUint64Ne1
	//	*ValidUintTagsOneOf1_TUint64Lt1
	//	*ValidUintTagsOneOf1_TUint64Gt1
	//	*ValidUintTagsOneOf1_TUint64Lte1
	//	*ValidUintTagsOneOf1_TUint64Gte1
	//	*ValidUintTagsOneOf1_TUint64In1
	//	*ValidUintTagsOneOf1_TUint64NotIn1
	//	*ValidUintTagsOneOf1_TFixed32_1
	//	*ValidUintTagsOneOf1_TFixed32_2
	//	*ValidUintTagsOneOf1_TFixed32_3
	//	*ValidUintTagsOneOf1_TFixed32_4
	//	*ValidUintTagsOneOf1_TFixed32Eq1
	//	*ValidUintTagsOneOf1_TFixed32Ne1
	//	*ValidUintTagsOneOf1_TFixed32Lt1
	//	*ValidUintTagsOneOf1_TFixed32Gt1
	//	*ValidUintTagsOneOf1_TFixed32Lte1
	//	*ValidUintTagsOneOf1_TFixed32Gte1
	//	*ValidUintTagsOneOf1_TFixed32In1
	//	*ValidUintTagsOneOf1_TFixed32NotIn1
	//	*ValidUintTagsOneOf1_TFixed64_1
	//	*ValidUintTagsOneOf1_TFixed64_2
	//	*ValidUintTagsOneOf1_TFixed64_3
	//	*ValidUintTagsOneOf1_TFixed64_4
	//	*ValidUintTagsOneOf1_TFixed64Eq1
	//	*ValidUintTagsOneOf1_TFixed64Ne1
	//	*ValidUintTagsOneOf1_TFixed64Lt1
	//	*ValidUintTagsOneOf1_TFixed64Gt1
	//	*ValidUintTagsOneOf1_TFixed64Lte1
	//	*ValidUintTagsOneOf1_TFixed64Gte1
	//	*ValidUintTagsOneOf1_TFixed64In1
	//	*ValidUintTagsOneOf1_TFixed64NotIn1
	OneTyp1 isValidUintTagsOneOf1_OneTyp1 `protobuf_oneof:"one_typ1"`
}

func (x *ValidUintTagsOneOf1) Reset() {
	*x = ValidUintTagsOneOf1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidUintTagsOneOf1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidUintTagsOneOf1) ProtoMessage() {}

func (x *ValidUintTagsOneOf1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidUintTagsOneOf1.ProtoReflect.Descriptor instead.
func (*ValidUintTagsOneOf1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{10}
}

func (m *ValidUintTagsOneOf1) GetOneTyp1() isValidUintTagsOneOf1_OneTyp1 {
	if m != nil {
		return m.OneTyp1
	}
	return nil
}

func (x *ValidUintTagsOneOf1) GetTUint32_1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32_1); ok {
		return x.TUint32_1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32_2() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32_2); ok {
		return x.TUint32_2
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32_3() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32_3); ok {
		return x.TUint32_3
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32_4() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32_4); ok {
		return x.TUint32_4
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32Eq1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32Eq1); ok {
		return x.TUint32Eq1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32Ne1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32Ne1); ok {
		return x.TUint32Ne1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32Lt1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32Lt1); ok {
		return x.TUint32Lt1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32Gt1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32Gt1); ok {
		return x.TUint32Gt1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32Lte1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32Lte1); ok {
		return x.TUint32Lte1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32Gte1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32Gte1); ok {
		return x.TUint32Gte1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32In1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32In1); ok {
		return x.TUint32In1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint32NotIn1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint32NotIn1); ok {
		return x.TUint32NotIn1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64_1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64_1); ok {
		return x.TUint64_1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64_2() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64_2); ok {
		return x.TUint64_2
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64_3() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64_3); ok {
		return x.TUint64_3
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64_4() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64_4); ok {
		return x.TUint64_4
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64Eq1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64Eq1); ok {
		return x.TUint64Eq1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64Ne1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64Ne1); ok {
		return x.TUint64Ne1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64Lt1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64Lt1); ok {
		return x.TUint64Lt1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64Gt1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64Gt1); ok {
		return x.TUint64Gt1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64Lte1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64Lte1); ok {
		return x.TUint64Lte1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64Gte1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64Gte1); ok {
		return x.TUint64Gte1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64In1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64In1); ok {
		return x.TUint64In1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTUint64NotIn1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TUint64NotIn1); ok {
		return x.TUint64NotIn1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32_1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32_1); ok {
		return x.TFixed32_1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32_2() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32_2); ok {
		return x.TFixed32_2
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32_3() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32_3); ok {
		return x.TFixed32_3
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32_4() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32_4); ok {
		return x.TFixed32_4
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32Eq1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32Eq1); ok {
		return x.TFixed32Eq1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32Ne1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32Ne1); ok {
		return x.TFixed32Ne1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32Lt1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32Lt1); ok {
		return x.TFixed32Lt1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32Gt1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32Gt1); ok {
		return x.TFixed32Gt1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32Lte1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32Lte1); ok {
		return x.TFixed32Lte1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32Gte1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32Gte1); ok {
		return x.TFixed32Gte1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32In1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32In1); ok {
		return x.TFixed32In1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed32NotIn1() uint32 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed32NotIn1); ok {
		return x.TFixed32NotIn1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64_1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64_1); ok {
		return x.TFixed64_1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64_2() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64_2); ok {
		return x.TFixed64_2
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64_3() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64_3); ok {
		return x.TFixed64_3
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64_4() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64_4); ok {
		return x.TFixed64_4
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64Eq1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64Eq1); ok {
		return x.TFixed64Eq1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64Ne1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64Ne1); ok {
		return x.TFixed64Ne1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64Lt1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64Lt1); ok {
		return x.TFixed64Lt1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64Gt1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64Gt1); ok {
		return x.TFixed64Gt1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64Lte1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64Lte1); ok {
		return x.TFixed64Lte1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64Gte1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64Gte1); ok {
		return x.TFixed64Gte1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64In1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64In1); ok {
		return x.TFixed64In1
	}
	return 0
}

func (x *ValidUintTagsOneOf1) GetTFixed64NotIn1() uint64 {
	if x, ok := x.GetOneTyp1().(*ValidUintTagsOneOf1_TFixed64NotIn1); ok {
		return x.TFixed64NotIn1
	}
	return 0
}

type isValidUintTagsOneOf1_OneTyp1 interface {
	isValidUintTagsOneOf1_OneTyp1()
}

type ValidUintTagsOneOf1_TUint32_1 struct {
	// Type for uint32
	TUint32_1 uint32 `protobuf:"varint,1,opt,name=t_uint32_1,json=tUint321,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32_2 struct {
	TUint32_2 uint32 `protobuf:"varint,2,opt,name=t_uint32_2,json=tUint322,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32_3 struct {
	TUint32_3 uint32 `protobuf:"varint,3,opt,name=t_uint32_3,json=tUint323,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32_4 struct {
	TUint32_4 uint32 `protobuf:"varint,4,opt,name=t_uint32_4,json=tUint324,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32Eq1 struct {
	TUint32Eq1 uint32 `protobuf:"varint,10,opt,name=t_uint32_eq1,json=tUint32Eq1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32Ne1 struct {
	TUint32Ne1 uint32 `protobuf:"varint,11,opt,name=t_uint32_ne1,json=tUint32Ne1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32Lt1 struct {
	TUint32Lt1 uint32 `protobuf:"varint,12,opt,name=t_uint32_lt1,json=tUint32Lt1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32Gt1 struct {
	TUint32Gt1 uint32 `protobuf:"varint,13,opt,name=t_uint32_gt1,json=tUint32Gt1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32Lte1 struct {
	TUint32Lte1 uint32 `protobuf:"varint,14,opt,name=t_uint32_lte1,json=tUint32Lte1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32Gte1 struct {
	TUint32Gte1 uint32 `protobuf:"varint,15,opt,name=t_uint32_gte1,json=tUint32Gte1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32In1 struct {
	TUint32In1 uint32 `protobuf:"varint,16,opt,name=t_uint32_in1,json=tUint32In1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint32NotIn1 struct {
	TUint32NotIn1 uint32 `protobuf:"varint,17,opt,name=t_uint32_not_in1,json=tUint32NotIn1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64_1 struct {
	// Type for uint64
	TUint64_1 uint64 `protobuf:"varint,21,opt,name=t_uint64_1,json=tUint641,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64_2 struct {
	TUint64_2 uint64 `protobuf:"varint,22,opt,name=t_uint64_2,json=tUint642,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64_3 struct {
	TUint64_3 uint64 `protobuf:"varint,23,opt,name=t_uint64_3,json=tUint643,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64_4 struct {
	TUint64_4 uint64 `protobuf:"varint,24,opt,name=t_uint64_4,json=tUint644,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64Eq1 struct {
	TUint64Eq1 uint64 `protobuf:"varint,30,opt,name=t_uint64_eq1,json=tUint64Eq1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64Ne1 struct {
	TUint64Ne1 uint64 `protobuf:"varint,31,opt,name=t_uint64_ne1,json=tUint64Ne1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64Lt1 struct {
	TUint64Lt1 uint64 `protobuf:"varint,32,opt,name=t_uint64_lt1,json=tUint64Lt1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64Gt1 struct {
	TUint64Gt1 uint64 `protobuf:"varint,33,opt,name=t_uint64_gt1,json=tUint64Gt1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64Lte1 struct {
	TUint64Lte1 uint64 `protobuf:"varint,34,opt,name=t_uint64_lte1,json=tUint64Lte1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64Gte1 struct {
	TUint64Gte1 uint64 `protobuf:"varint,35,opt,name=t_uint64_gte1,json=tUint64Gte1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64In1 struct {
	TUint64In1 uint64 `protobuf:"varint,36,opt,name=t_uint64_in1,json=tUint64In1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TUint64NotIn1 struct {
	TUint64NotIn1 uint64 `protobuf:"varint,37,opt,name=t_uint64_not_in1,json=tUint64NotIn1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32_1 struct {
	// Type for fixed32
	TFixed32_1 uint32 `protobuf:"fixed32,41,opt,name=t_fixed32_1,json=tFixed321,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32_2 struct {
	TFixed32_2 uint32 `protobuf:"fixed32,42,opt,name=t_fixed32_2,json=tFixed322,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32_3 struct {
	TFixed32_3 uint32 `protobuf:"fixed32,43,opt,name=t_fixed32_3,json=tFixed323,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32_4 struct {
	TFixed32_4 uint32 `protobuf:"fixed32,44,opt,name=t_fixed32_4,json=tFixed324,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32Eq1 struct {
	TFixed32Eq1 uint32 `protobuf:"fixed32,50,opt,name=t_fixed32_eq1,json=tFixed32Eq1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32Ne1 struct {
	TFixed32Ne1 uint32 `protobuf:"fixed32,51,opt,name=t_fixed32_ne1,json=tFixed32Ne1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32Lt1 struct {
	TFixed32Lt1 uint32 `protobuf:"fixed32,52,opt,name=t_fixed32_lt1,json=tFixed32Lt1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32Gt1 struct {
	TFixed32Gt1 uint32 `protobuf:"fixed32,53,opt,name=t_fixed32_gt1,json=tFixed32Gt1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32Lte1 struct {
	TFixed32Lte1 uint32 `protobuf:"fixed32,54,opt,name=t_fixed32_lte1,json=tFixed32Lte1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32Gte1 struct {
	TFixed32Gte1 uint32 `protobuf:"fixed32,55,opt,name=t_fixed32_gte1,json=tFixed32Gte1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32In1 struct {
	TFixed32In1 uint32 `protobuf:"fixed32,56,opt,name=t_fixed32_in1,json=tFixed32In1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed32NotIn1 struct {
	TFixed32NotIn1 uint32 `protobuf:"fixed32,57,opt,name=t_fixed32_not_in1,json=tFixed32NotIn1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64_1 struct {
	// Type for fixed64
	TFixed64_1 uint64 `protobuf:"fixed64,61,opt,name=t_fixed64_1,json=tFixed641,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64_2 struct {
	TFixed64_2 uint64 `protobuf:"fixed64,62,opt,name=t_fixed64_2,json=tFixed642,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64_3 struct {
	TFixed64_3 uint64 `protobuf:"fixed64,63,opt,name=t_fixed64_3,json=tFixed643,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64_4 struct {
	TFixed64_4 uint64 `protobuf:"fixed64,64,opt,name=t_fixed64_4,json=tFixed644,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64Eq1 struct {
	TFixed64Eq1 uint64 `protobuf:"fixed64,70,opt,name=t_fixed64_eq1,json=tFixed64Eq1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64Ne1 struct {
	TFixed64Ne1 uint64 `protobuf:"fixed64,71,opt,name=t_fixed64_ne1,json=tFixed64Ne1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64Lt1 struct {
	TFixed64Lt1 uint64 `protobuf:"fixed64,72,opt,name=t_fixed64_lt1,json=tFixed64Lt1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64Gt1 struct {
	TFixed64Gt1 uint64 `protobuf:"fixed64,73,opt,name=t_fixed64_gt1,json=tFixed64Gt1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64Lte1 struct {
	TFixed64Lte1 uint64 `protobuf:"fixed64,74,opt,name=t_fixed64_lte1,json=tFixed64Lte1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64Gte1 struct {
	TFixed64Gte1 uint64 `protobuf:"fixed64,75,opt,name=t_fixed64_gte1,json=tFixed64Gte1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64In1 struct {
	TFixed64In1 uint64 `protobuf:"fixed64,76,opt,name=t_fixed64_in1,json=tFixed64In1,proto3,oneof"`
}

type ValidUintTagsOneOf1_TFixed64NotIn1 struct {
	TFixed64NotIn1 uint64 `protobuf:"fixed64,77,opt,name=t_fixed64_not_in1,json=tFixed64NotIn1,proto3,oneof"`
}

func (*ValidUintTagsOneOf1_TUint32_1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32_2) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32_3) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32_4) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32Eq1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32Ne1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32Lt1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32Gt1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32Lte1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32Gte1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32In1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint32NotIn1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64_1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64_2) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64_3) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64_4) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64Eq1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64Ne1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64Lt1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64Gt1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64Lte1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64Gte1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64In1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TUint64NotIn1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32_1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32_2) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32_3) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32_4) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32Eq1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32Ne1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32Lt1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32Gt1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32Lte1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32Gte1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32In1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed32NotIn1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64_1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64_2) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64_3) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64_4) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64Eq1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64Ne1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64Lt1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64Gt1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64Lte1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64Gte1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64In1) isValidUintTagsOneOf1_OneTyp1() {}

func (*ValidUintTagsOneOf1_TFixed64NotIn1) isValidUintTagsOneOf1_OneTyp1() {}

// ValidUintTagsOneOf1 for test option tag BoolTags with field.
type ValidBoolTags1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TBoolGeneral_1   bool  `protobuf:"varint,1,opt,name=t_bool_general_1,json=tBoolGeneral1,proto3" json:"t_bool_general_1,omitempty"`
	TBoolGeneral_2   bool  `protobuf:"varint,2,opt,name=t_bool_general_2,json=tBoolGeneral2,proto3" json:"t_bool_general_2,omitempty"`
	TBoolGeneral_3   bool  `protobuf:"varint,3,opt,name=t_bool_general_3,json=tBoolGeneral3,proto3" json:"t_bool_general_3,omitempty"`
	TBoolGeneral_4   bool  `protobuf:"varint,4,opt,name=t_bool_general_4,json=tBoolGeneral4,proto3" json:"t_bool_general_4,omitempty"`
	TBoolGeneralEq1  bool  `protobuf:"varint,11,opt,name=t_bool_general_eq1,json=tBoolGeneralEq1,proto3" json:"t_bool_general_eq1,omitempty"`
	TBoolOptional_1  *bool `protobuf:"varint,21,opt,name=t_bool_optional_1,json=tBoolOptional1,proto3,oneof" json:"t_bool_optional_1,omitempty"`
	TBoolOptional_2  *bool `protobuf:"varint,22,opt,name=t_bool_optional_2,json=tBoolOptional2,proto3,oneof" json:"t_bool_optional_2,omitempty"`
	TBoolOptional_3  *bool `protobuf:"varint,23,opt,name=t_bool_optional_3,json=tBoolOptional3,proto3,oneof" json:"t_bool_optional_3,omitempty"`
	TBoolOptional_4  *bool `protobuf:"varint,24,opt,name=t_bool_optional_4,json=tBoolOptional4,proto3,oneof" json:"t_bool_optional_4,omitempty"`
	TBoolOptionalEq1 *bool `protobuf:"varint,31,opt,name=t_bool_optional_eq1,json=tBoolOptionalEq1,proto3,oneof" json:"t_bool_optional_eq1,omitempty"`
	// Types that are assignable to OneTyp1:
	//	*ValidBoolTags1_TBoolOnfof_1
	//	*ValidBoolTags1_TBoolOnfof_2
	//	*ValidBoolTags1_TBoolOnfof_3
	//	*ValidBoolTags1_TBoolOnfof_4
	//	*ValidBoolTags1_TBoolOneofEq1
	OneTyp1 isValidBoolTags1_OneTyp1 `protobuf_oneof:"one_typ1"`
}

func (x *ValidBoolTags1) Reset() {
	*x = ValidBoolTags1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidBoolTags1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidBoolTags1) ProtoMessage() {}

func (x *ValidBoolTags1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidBoolTags1.ProtoReflect.Descriptor instead.
func (*ValidBoolTags1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{11}
}

func (x *ValidBoolTags1) GetTBoolGeneral_1() bool {
	if x != nil {
		return x.TBoolGeneral_1
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolGeneral_2() bool {
	if x != nil {
		return x.TBoolGeneral_2
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolGeneral_3() bool {
	if x != nil {
		return x.TBoolGeneral_3
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolGeneral_4() bool {
	if x != nil {
		return x.TBoolGeneral_4
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolGeneralEq1() bool {
	if x != nil {
		return x.TBoolGeneralEq1
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolOptional_1() bool {
	if x != nil && x.TBoolOptional_1 != nil {
		return *x.TBoolOptional_1
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolOptional_2() bool {
	if x != nil && x.TBoolOptional_2 != nil {
		return *x.TBoolOptional_2
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolOptional_3() bool {
	if x != nil && x.TBoolOptional_3 != nil {
		return *x.TBoolOptional_3
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolOptional_4() bool {
	if x != nil && x.TBoolOptional_4 != nil {
		return *x.TBoolOptional_4
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolOptionalEq1() bool {
	if x != nil && x.TBoolOptionalEq1 != nil {
		return *x.TBoolOptionalEq1
	}
	return false
}

func (m *ValidBoolTags1) GetOneTyp1() isValidBoolTags1_OneTyp1 {
	if m != nil {
		return m.OneTyp1
	}
	return nil
}

func (x *ValidBoolTags1) GetTBoolOnfof_1() bool {
	if x, ok := x.GetOneTyp1().(*ValidBoolTags1_TBoolOnfof_1); ok {
		return x.TBoolOnfof_1
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolOnfof_2() bool {
	if x, ok := x.GetOneTyp1().(*ValidBoolTags1_TBoolOnfof_2); ok {
		return x.TBoolOnfof_2
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolOnfof_3() bool {
	if x, ok := x.GetOneTyp1().(*ValidBoolTags1_TBoolOnfof_3); ok {
		return x.TBoolOnfof_3
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolOnfof_4() bool {
	if x, ok := x.GetOneTyp1().(*ValidBoolTags1_TBoolOnfof_4); ok {
		return x.TBoolOnfof_4
	}
	return false
}

func (x *ValidBoolTags1) GetTBoolOneofEq1() bool {
	if x, ok := x.GetOneTyp1().(*ValidBoolTags1_TBoolOneofEq1); ok {
		return x.TBoolOneofEq1
	}
	return false
}

type isValidBoolTags1_OneTyp1 interface {
	isValidBoolTags1_OneTyp1()
}

type ValidBoolTags1_TBoolOnfof_1 struct {
	TBoolOnfof_1 bool `protobuf:"varint,41,opt,name=t_bool_onfof_1,json=tBoolOnfof1,proto3,oneof"`
}

type ValidBoolTags1_TBoolOnfof_2 struct {
	TBoolOnfof_2 bool `protobuf:"varint,42,opt,name=t_bool_onfof_2,json=tBoolOnfof2,proto3,oneof"`
}

type ValidBoolTags1_TBoolOnfof_3 struct {
	TBoolOnfof_3 bool `protobuf:"varint,43,opt,name=t_bool_onfof_3,json=tBoolOnfof3,proto3,oneof"`
}

type ValidBoolTags1_TBoolOnfof_4 struct {
	TBoolOnfof_4 bool `protobuf:"varint,44,opt,name=t_bool_onfof_4,json=tBoolOnfof4,proto3,oneof"`
}

type ValidBoolTags1_TBoolOneofEq1 struct {
	TBoolOneofEq1 bool `protobuf:"varint,51,opt,name=t_bool_oneof_eq1,json=tBoolOneofEq1,proto3,oneof"`
}

func (*ValidBoolTags1_TBoolOnfof_1) isValidBoolTags1_OneTyp1() {}

func (*ValidBoolTags1_TBoolOnfof_2) isValidBoolTags1_OneTyp1() {}

func (*ValidBoolTags1_TBoolOnfof_3) isValidBoolTags1_OneTyp1() {}

func (*ValidBoolTags1_TBoolOnfof_4) isValidBoolTags1_OneTyp1() {}

func (*ValidBoolTags1_TBoolOneofEq1) isValidBoolTags1_OneTyp1() {}

// ValidMessageTags for test option tag MessageTags with field.
type ValidMessageTags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TMessageGeneral_1       *Config `protobuf:"bytes,1,opt,name=t_message_general_1,json=tMessageGeneral1,proto3" json:"t_message_general_1,omitempty"`
	TMessageGeneral_2       *Config `protobuf:"bytes,2,opt,name=t_message_general_2,json=tMessageGeneral2,proto3" json:"t_message_general_2,omitempty"`
	TMessageGeneral_3       *Config `protobuf:"bytes,3,opt,name=t_message_general_3,json=tMessageGeneral3,proto3" json:"t_message_general_3,omitempty"`
	TMessageGeneral_4       *Config `protobuf:"bytes,4,opt,name=t_message_general_4,json=tMessageGeneral4,proto3" json:"t_message_general_4,omitempty"`
	TMessageGeneralNotNull1 *Config `protobuf:"bytes,11,opt,name=t_message_general_not_null1,json=tMessageGeneralNotNull1,proto3" json:"t_message_general_not_null1,omitempty"`
	TMessageGeneralNotNull2 *Config `protobuf:"bytes,12,opt,name=t_message_general_not_null2,json=tMessageGeneralNotNull2,proto3" json:"t_message_general_not_null2,omitempty"`
	TMessageGeneralSkip1    *Config `protobuf:"bytes,13,opt,name=t_message_general_skip1,json=tMessageGeneralSkip1,proto3" json:"t_message_general_skip1,omitempty"`
	TMessageGeneralSkip2    *Config `protobuf:"bytes,14,opt,name=t_message_general_skip2,json=tMessageGeneralSkip2,proto3" json:"t_message_general_skip2,omitempty"`
	// Types that are assignable to OneTyp1:
	//	*ValidMessageTags_TMessageOnfof_1
	//	*ValidMessageTags_TMessageOnfof_2
	//	*ValidMessageTags_TMessageOnfof_3
	//	*ValidMessageTags_TMessageOnfof_4
	//	*ValidMessageTags_TMessageOneofNotNull1
	//	*ValidMessageTags_TMessageOneofNotNull2
	//	*ValidMessageTags_TMessageOneofSkip1
	//	*ValidMessageTags_TMessageOneofSkip2
	OneTyp1 isValidMessageTags_OneTyp1 `protobuf_oneof:"one_typ1"`
}

func (x *ValidMessageTags) Reset() {
	*x = ValidMessageTags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidMessageTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMessageTags) ProtoMessage() {}

func (x *ValidMessageTags) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMessageTags.ProtoReflect.Descriptor instead.
func (*ValidMessageTags) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{12}
}

func (x *ValidMessageTags) GetTMessageGeneral_1() *Config {
	if x != nil {
		return x.TMessageGeneral_1
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageGeneral_2() *Config {
	if x != nil {
		return x.TMessageGeneral_2
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageGeneral_3() *Config {
	if x != nil {
		return x.TMessageGeneral_3
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageGeneral_4() *Config {
	if x != nil {
		return x.TMessageGeneral_4
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageGeneralNotNull1() *Config {
	if x != nil {
		return x.TMessageGeneralNotNull1
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageGeneralNotNull2() *Config {
	if x != nil {
		return x.TMessageGeneralNotNull2
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageGeneralSkip1() *Config {
	if x != nil {
		return x.TMessageGeneralSkip1
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageGeneralSkip2() *Config {
	if x != nil {
		return x.TMessageGeneralSkip2
	}
	return nil
}

func (m *ValidMessageTags) GetOneTyp1() isValidMessageTags_OneTyp1 {
	if m != nil {
		return m.OneTyp1
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageOnfof_1() *Config {
	if x, ok := x.GetOneTyp1().(*ValidMessageTags_TMessageOnfof_1); ok {
		return x.TMessageOnfof_1
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageOnfof_2() *Config {
	if x, ok := x.GetOneTyp1().(*ValidMessageTags_TMessageOnfof_2); ok {
		return x.TMessageOnfof_2
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageOnfof_3() *Config {
	if x, ok := x.GetOneTyp1().(*ValidMessageTags_TMessageOnfof_3); ok {
		return x.TMessageOnfof_3
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageOnfof_4() *Config {
	if x, ok := x.GetOneTyp1().(*ValidMessageTags_TMessageOnfof_4); ok {
		return x.TMessageOnfof_4
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageOneofNotNull1() *Config {
	if x, ok := x.GetOneTyp1().(*ValidMessageTags_TMessageOneofNotNull1); ok {
		return x.TMessageOneofNotNull1
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageOneofNotNull2() *Config {
	if x, ok := x.GetOneTyp1().(*ValidMessageTags_TMessageOneofNotNull2); ok {
		return x.TMessageOneofNotNull2
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageOneofSkip1() *Config {
	if x, ok := x.GetOneTyp1().(*ValidMessageTags_TMessageOneofSkip1); ok {
		return x.TMessageOneofSkip1
	}
	return nil
}

func (x *ValidMessageTags) GetTMessageOneofSkip2() *Config {
	if x, ok := x.GetOneTyp1().(*ValidMessageTags_TMessageOneofSkip2); ok {
		return x.TMessageOneofSkip2
	}
	return nil
}

type isValidMessageTags_OneTyp1 interface {
	isValidMessageTags_OneTyp1()
}

type ValidMessageTags_TMessageOnfof_1 struct {
	TMessageOnfof_1 *Config `protobuf:"bytes,41,opt,name=t_message_onfof_1,json=tMessageOnfof1,proto3,oneof"`
}

type ValidMessageTags_TMessageOnfof_2 struct {
	TMessageOnfof_2 *Config `protobuf:"bytes,42,opt,name=t_message_onfof_2,json=tMessageOnfof2,proto3,oneof"`
}

type ValidMessageTags_TMessageOnfof_3 struct {
	TMessageOnfof_3 *Config `protobuf:"bytes,43,opt,name=t_message_onfof_3,json=tMessageOnfof3,proto3,oneof"`
}

type ValidMessageTags_TMessageOnfof_4 struct {
	TMessageOnfof_4 *Config `protobuf:"bytes,44,opt,name=t_message_onfof_4,json=tMessageOnfof4,proto3,oneof"`
}

type ValidMessageTags_TMessageOneofNotNull1 struct {
	TMessageOneofNotNull1 *Config `protobuf:"bytes,51,opt,name=t_message_oneof_not_null1,json=tMessageOneofNotNull1,proto3,oneof"`
}

type ValidMessageTags_TMessageOneofNotNull2 struct {
	TMessageOneofNotNull2 *Config `protobuf:"bytes,52,opt,name=t_message_oneof_not_null2,json=tMessageOneofNotNull2,proto3,oneof"`
}

type ValidMessageTags_TMessageOneofSkip1 struct {
	TMessageOneofSkip1 *Config `protobuf:"bytes,53,opt,name=t_message_oneof_skip1,json=tMessageOneofSkip1,proto3,oneof"`
}

type ValidMessageTags_TMessageOneofSkip2 struct {
	TMessageOneofSkip2 *Config `protobuf:"bytes,54,opt,name=t_message_oneof_skip2,json=tMessageOneofSkip2,proto3,oneof"`
}

func (*ValidMessageTags_TMessageOnfof_1) isValidMessageTags_OneTyp1() {}

func (*ValidMessageTags_TMessageOnfof_2) isValidMessageTags_OneTyp1() {}

func (*ValidMessageTags_TMessageOnfof_3) isValidMessageTags_OneTyp1() {}

func (*ValidMessageTags_TMessageOnfof_4) isValidMessageTags_OneTyp1() {}

func (*ValidMessageTags_TMessageOneofNotNull1) isValidMessageTags_OneTyp1() {}

func (*ValidMessageTags_TMessageOneofNotNull2) isValidMessageTags_OneTyp1() {}

func (*ValidMessageTags_TMessageOneofSkip1) isValidMessageTags_OneTyp1() {}

func (*ValidMessageTags_TMessageOneofSkip2) isValidMessageTags_OneTyp1() {}

// ValidEnumTagsGeneral1 for test option tag EnumTags with general field.
type ValidEnumTagsGeneral1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TEnum_1      Enum1 `protobuf:"varint,1,opt,name=t_enum_1,json=tEnum1,proto3,enum=govalidatortest.Enum1" json:"t_enum_1,omitempty"`
	TEnum_2      Enum1 `protobuf:"varint,2,opt,name=t_enum_2,json=tEnum2,proto3,enum=govalidatortest.Enum1" json:"t_enum_2,omitempty"`
	TEnum_3      Enum1 `protobuf:"varint,3,opt,name=t_enum_3,json=tEnum3,proto3,enum=govalidatortest.Enum1" json:"t_enum_3,omitempty"`
	TEnum_4      Enum1 `protobuf:"varint,4,opt,name=t_enum_4,json=tEnum4,proto3,enum=govalidatortest.Enum1" json:"t_enum_4,omitempty"`
	TEnumEq1     Enum1 `protobuf:"varint,10,opt,name=t_enum_eq1,json=tEnumEq1,proto3,enum=govalidatortest.Enum1" json:"t_enum_eq1,omitempty"`
	TEnumNe1     Enum1 `protobuf:"varint,11,opt,name=t_enum_ne1,json=tEnumNe1,proto3,enum=govalidatortest.Enum1" json:"t_enum_ne1,omitempty"`
	TEnumLt1     Enum1 `protobuf:"varint,12,opt,name=t_enum_lt1,json=tEnumLt1,proto3,enum=govalidatortest.Enum1" json:"t_enum_lt1,omitempty"`
	TEnumGt1     Enum1 `protobuf:"varint,13,opt,name=t_enum_gt1,json=tEnumGt1,proto3,enum=govalidatortest.Enum1" json:"t_enum_gt1,omitempty"`
	TEnumLte1    Enum1 `protobuf:"varint,14,opt,name=t_enum_lte1,json=tEnumLte1,proto3,enum=govalidatortest.Enum1" json:"t_enum_lte1,omitempty"`
	TEnumGte1    Enum1 `protobuf:"varint,15,opt,name=t_enum_gte1,json=tEnumGte1,proto3,enum=govalidatortest.Enum1" json:"t_enum_gte1,omitempty"`
	TEnumIn1     Enum1 `protobuf:"varint,16,opt,name=t_enum_in1,json=tEnumIn1,proto3,enum=govalidatortest.Enum1" json:"t_enum_in1,omitempty"`
	TEnumNotIn1  Enum1 `protobuf:"varint,17,opt,name=t_enum_not_in1,json=tEnumNotIn1,proto3,enum=govalidatortest.Enum1" json:"t_enum_not_in1,omitempty"`
	TEnumInEnums Enum1 `protobuf:"varint,18,opt,name=t_enum_in_enums,json=tEnumInEnums,proto3,enum=govalidatortest.Enum1" json:"t_enum_in_enums,omitempty"`
}

func (x *ValidEnumTagsGeneral1) Reset() {
	*x = ValidEnumTagsGeneral1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidEnumTagsGeneral1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidEnumTagsGeneral1) ProtoMessage() {}

func (x *ValidEnumTagsGeneral1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidEnumTagsGeneral1.ProtoReflect.Descriptor instead.
func (*ValidEnumTagsGeneral1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{13}
}

func (x *ValidEnumTagsGeneral1) GetTEnum_1() Enum1 {
	if x != nil {
		return x.TEnum_1
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnum_2() Enum1 {
	if x != nil {
		return x.TEnum_2
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnum_3() Enum1 {
	if x != nil {
		return x.TEnum_3
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnum_4() Enum1 {
	if x != nil {
		return x.TEnum_4
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnumEq1() Enum1 {
	if x != nil {
		return x.TEnumEq1
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnumNe1() Enum1 {
	if x != nil {
		return x.TEnumNe1
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnumLt1() Enum1 {
	if x != nil {
		return x.TEnumLt1
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnumGt1() Enum1 {
	if x != nil {
		return x.TEnumGt1
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnumLte1() Enum1 {
	if x != nil {
		return x.TEnumLte1
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnumGte1() Enum1 {
	if x != nil {
		return x.TEnumGte1
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnumIn1() Enum1 {
	if x != nil {
		return x.TEnumIn1
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnumNotIn1() Enum1 {
	if x != nil {
		return x.TEnumNotIn1
	}
	return Enum1_January
}

func (x *ValidEnumTagsGeneral1) GetTEnumInEnums() Enum1 {
	if x != nil {
		return x.TEnumInEnums
	}
	return Enum1_January
}

// ValidEnumTagsOptional1 for test option tag EnumTags with optional field.
type ValidEnumTagsOptional1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TEnum_1      *Enum1 `protobuf:"varint,1,opt,name=t_enum_1,json=tEnum1,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_1,omitempty"`
	TEnum_2      *Enum1 `protobuf:"varint,2,opt,name=t_enum_2,json=tEnum2,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_2,omitempty"`
	TEnum_3      *Enum1 `protobuf:"varint,3,opt,name=t_enum_3,json=tEnum3,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_3,omitempty"`
	TEnum_4      *Enum1 `protobuf:"varint,4,opt,name=t_enum_4,json=tEnum4,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_4,omitempty"`
	TEnumEq1     *Enum1 `protobuf:"varint,10,opt,name=t_enum_eq1,json=tEnumEq1,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_eq1,omitempty"`
	TEnumNe1     *Enum1 `protobuf:"varint,11,opt,name=t_enum_ne1,json=tEnumNe1,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_ne1,omitempty"`
	TEnumLt1     *Enum1 `protobuf:"varint,12,opt,name=t_enum_lt1,json=tEnumLt1,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_lt1,omitempty"`
	TEnumGt1     *Enum1 `protobuf:"varint,13,opt,name=t_enum_gt1,json=tEnumGt1,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_gt1,omitempty"`
	TEnumLte1    *Enum1 `protobuf:"varint,14,opt,name=t_enum_lte1,json=tEnumLte1,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_lte1,omitempty"`
	TEnumGte1    *Enum1 `protobuf:"varint,15,opt,name=t_enum_gte1,json=tEnumGte1,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_gte1,omitempty"`
	TEnumIn1     *Enum1 `protobuf:"varint,16,opt,name=t_enum_in1,json=tEnumIn1,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_in1,omitempty"`
	TEnumNotIn1  *Enum1 `protobuf:"varint,17,opt,name=t_enum_not_in1,json=tEnumNotIn1,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_not_in1,omitempty"`
	TEnumInEnums *Enum1 `protobuf:"varint,18,opt,name=t_enum_in_enums,json=tEnumInEnums,proto3,enum=govalidatortest.Enum1,oneof" json:"t_enum_in_enums,omitempty"`
}

func (x *ValidEnumTagsOptional1) Reset() {
	*x = ValidEnumTagsOptional1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidEnumTagsOptional1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidEnumTagsOptional1) ProtoMessage() {}

func (x *ValidEnumTagsOptional1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidEnumTagsOptional1.ProtoReflect.Descriptor instead.
func (*ValidEnumTagsOptional1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{14}
}

func (x *ValidEnumTagsOptional1) GetTEnum_1() Enum1 {
	if x != nil && x.TEnum_1 != nil {
		return *x.TEnum_1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnum_2() Enum1 {
	if x != nil && x.TEnum_2 != nil {
		return *x.TEnum_2
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnum_3() Enum1 {
	if x != nil && x.TEnum_3 != nil {
		return *x.TEnum_3
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnum_4() Enum1 {
	if x != nil && x.TEnum_4 != nil {
		return *x.TEnum_4
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnumEq1() Enum1 {
	if x != nil && x.TEnumEq1 != nil {
		return *x.TEnumEq1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnumNe1() Enum1 {
	if x != nil && x.TEnumNe1 != nil {
		return *x.TEnumNe1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnumLt1() Enum1 {
	if x != nil && x.TEnumLt1 != nil {
		return *x.TEnumLt1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnumGt1() Enum1 {
	if x != nil && x.TEnumGt1 != nil {
		return *x.TEnumGt1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnumLte1() Enum1 {
	if x != nil && x.TEnumLte1 != nil {
		return *x.TEnumLte1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnumGte1() Enum1 {
	if x != nil && x.TEnumGte1 != nil {
		return *x.TEnumGte1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnumIn1() Enum1 {
	if x != nil && x.TEnumIn1 != nil {
		return *x.TEnumIn1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnumNotIn1() Enum1 {
	if x != nil && x.TEnumNotIn1 != nil {
		return *x.TEnumNotIn1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOptional1) GetTEnumInEnums() Enum1 {
	if x != nil && x.TEnumInEnums != nil {
		return *x.TEnumInEnums
	}
	return Enum1_January
}

// ValidEnumTagsOneOf1 for test option tag EnumTags with oneof field.
type ValidEnumTagsOneOf1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneTyp1:
	//	*ValidEnumTagsOneOf1_TEnum_1
	//	*ValidEnumTagsOneOf1_TEnum_2
	//	*ValidEnumTagsOneOf1_TEnum_3
	//	*ValidEnumTagsOneOf1_TEnum_4
	//	*ValidEnumTagsOneOf1_TEnumEq1
	//	*ValidEnumTagsOneOf1_TEnumNe1
	//	*ValidEnumTagsOneOf1_TEnumLt1
	//	*ValidEnumTagsOneOf1_TEnumGt1
	//	*ValidEnumTagsOneOf1_TEnumLte1
	//	*ValidEnumTagsOneOf1_TEnumGte1
	//	*ValidEnumTagsOneOf1_TEnumIn1
	//	*ValidEnumTagsOneOf1_TEnumNotIn1
	//	*ValidEnumTagsOneOf1_TEnumInEnums
	OneTyp1 isValidEnumTagsOneOf1_OneTyp1 `protobuf_oneof:"one_typ1"`
}

func (x *ValidEnumTagsOneOf1) Reset() {
	*x = ValidEnumTagsOneOf1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidEnumTagsOneOf1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidEnumTagsOneOf1) ProtoMessage() {}

func (x *ValidEnumTagsOneOf1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidEnumTagsOneOf1.ProtoReflect.Descriptor instead.
func (*ValidEnumTagsOneOf1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{15}
}

func (m *ValidEnumTagsOneOf1) GetOneTyp1() isValidEnumTagsOneOf1_OneTyp1 {
	if m != nil {
		return m.OneTyp1
	}
	return nil
}

func (x *ValidEnumTagsOneOf1) GetTEnum_1() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnum_1); ok {
		return x.TEnum_1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnum_2() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnum_2); ok {
		return x.TEnum_2
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnum_3() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnum_3); ok {
		return x.TEnum_3
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnum_4() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnum_4); ok {
		return x.TEnum_4
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnumEq1() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnumEq1); ok {
		return x.TEnumEq1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnumNe1() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnumNe1); ok {
		return x.TEnumNe1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnumLt1() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnumLt1); ok {
		return x.TEnumLt1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnumGt1() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnumGt1); ok {
		return x.TEnumGt1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnumLte1() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnumLte1); ok {
		return x.TEnumLte1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnumGte1() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnumGte1); ok {
		return x.TEnumGte1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnumIn1() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnumIn1); ok {
		return x.TEnumIn1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnumNotIn1() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnumNotIn1); ok {
		return x.TEnumNotIn1
	}
	return Enum1_January
}

func (x *ValidEnumTagsOneOf1) GetTEnumInEnums() Enum1 {
	if x, ok := x.GetOneTyp1().(*ValidEnumTagsOneOf1_TEnumInEnums); ok {
		return x.TEnumInEnums
	}
	return Enum1_January
}

type isValidEnumTagsOneOf1_OneTyp1 interface {
	isValidEnumTagsOneOf1_OneTyp1()
}

type ValidEnumTagsOneOf1_TEnum_1 struct {
	TEnum_1 Enum1 `protobuf:"varint,1,opt,name=t_enum_1,json=tEnum1,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnum_2 struct {
	TEnum_2 Enum1 `protobuf:"varint,2,opt,name=t_enum_2,json=tEnum2,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnum_3 struct {
	TEnum_3 Enum1 `protobuf:"varint,3,opt,name=t_enum_3,json=tEnum3,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnum_4 struct {
	TEnum_4 Enum1 `protobuf:"varint,4,opt,name=t_enum_4,json=tEnum4,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnumEq1 struct {
	TEnumEq1 Enum1 `protobuf:"varint,10,opt,name=t_enum_eq1,json=tEnumEq1,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnumNe1 struct {
	TEnumNe1 Enum1 `protobuf:"varint,11,opt,name=t_enum_ne1,json=tEnumNe1,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnumLt1 struct {
	TEnumLt1 Enum1 `protobuf:"varint,12,opt,name=t_enum_lt1,json=tEnumLt1,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnumGt1 struct {
	TEnumGt1 Enum1 `protobuf:"varint,13,opt,name=t_enum_gt1,json=tEnumGt1,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnumLte1 struct {
	TEnumLte1 Enum1 `protobuf:"varint,14,opt,name=t_enum_lte1,json=tEnumLte1,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnumGte1 struct {
	TEnumGte1 Enum1 `protobuf:"varint,15,opt,name=t_enum_gte1,json=tEnumGte1,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnumIn1 struct {
	TEnumIn1 Enum1 `protobuf:"varint,16,opt,name=t_enum_in1,json=tEnumIn1,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnumNotIn1 struct {
	TEnumNotIn1 Enum1 `protobuf:"varint,17,opt,name=t_enum_not_in1,json=tEnumNotIn1,proto3,enum=govalidatortest.Enum1,oneof"`
}

type ValidEnumTagsOneOf1_TEnumInEnums struct {
	TEnumInEnums Enum1 `protobuf:"varint,18,opt,name=t_enum_in_enums,json=tEnumInEnums,proto3,enum=govalidatortest.Enum1,oneof"`
}

func (*ValidEnumTagsOneOf1_TEnum_1) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnum_2) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnum_3) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnum_4) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnumEq1) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnumNe1) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnumLt1) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnumGt1) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnumLte1) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnumGte1) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnumIn1) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnumNotIn1) isValidEnumTagsOneOf1_OneTyp1() {}

func (*ValidEnumTagsOneOf1_TEnumInEnums) isValidEnumTagsOneOf1_OneTyp1() {}

// ValidBytesTags1 for test option tag ValidBytes with field.
type ValidBytesTags1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TBytes_1      []byte `protobuf:"bytes,1,opt,name=t_bytes_1,json=tBytes1,proto3" json:"t_bytes_1,omitempty"`
	TBytes_2      []byte `protobuf:"bytes,2,opt,name=t_bytes_2,json=tBytes2,proto3" json:"t_bytes_2,omitempty"`
	TBytes_3      []byte `protobuf:"bytes,3,opt,name=t_bytes_3,json=tBytes3,proto3" json:"t_bytes_3,omitempty"`
	TBytes_4      []byte `protobuf:"bytes,4,opt,name=t_bytes_4,json=tBytes4,proto3" json:"t_bytes_4,omitempty"`
	TBytesLenEq1  []byte `protobuf:"bytes,10,opt,name=t_bytes_len_eq1,json=tBytesLenEq1,proto3" json:"t_bytes_len_eq1,omitempty"`
	TBytesLenNe1  []byte `protobuf:"bytes,11,opt,name=t_bytes_len_ne1,json=tBytesLenNe1,proto3" json:"t_bytes_len_ne1,omitempty"`
	TBytesLenLt1  []byte `protobuf:"bytes,12,opt,name=t_bytes_len_lt1,json=tBytesLenLt1,proto3" json:"t_bytes_len_lt1,omitempty"`
	TBytesLenGt1  []byte `protobuf:"bytes,13,opt,name=t_bytes_len_gt1,json=tBytesLenGt1,proto3" json:"t_bytes_len_gt1,omitempty"`
	TBytesLenLte1 []byte `protobuf:"bytes,14,opt,name=t_bytes_len_lte1,json=tBytesLenLte1,proto3" json:"t_bytes_len_lte1,omitempty"`
	TBytesLenGte1 []byte `protobuf:"bytes,15,opt,name=t_bytes_len_gte1,json=tBytesLenGte1,proto3" json:"t_bytes_len_gte1,omitempty"`
}

func (x *ValidBytesTags1) Reset() {
	*x = ValidBytesTags1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidBytesTags1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidBytesTags1) ProtoMessage() {}

func (x *ValidBytesTags1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidBytesTags1.ProtoReflect.Descriptor instead.
func (*ValidBytesTags1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{16}
}

func (x *ValidBytesTags1) GetTBytes_1() []byte {
	if x != nil {
		return x.TBytes_1
	}
	return nil
}

func (x *ValidBytesTags1) GetTBytes_2() []byte {
	if x != nil {
		return x.TBytes_2
	}
	return nil
}

func (x *ValidBytesTags1) GetTBytes_3() []byte {
	if x != nil {
		return x.TBytes_3
	}
	return nil
}

func (x *ValidBytesTags1) GetTBytes_4() []byte {
	if x != nil {
		return x.TBytes_4
	}
	return nil
}

func (x *ValidBytesTags1) GetTBytesLenEq1() []byte {
	if x != nil {
		return x.TBytesLenEq1
	}
	return nil
}

func (x *ValidBytesTags1) GetTBytesLenNe1() []byte {
	if x != nil {
		return x.TBytesLenNe1
	}
	return nil
}

func (x *ValidBytesTags1) GetTBytesLenLt1() []byte {
	if x != nil {
		return x.TBytesLenLt1
	}
	return nil
}

func (x *ValidBytesTags1) GetTBytesLenGt1() []byte {
	if x != nil {
		return x.TBytesLenGt1
	}
	return nil
}

func (x *ValidBytesTags1) GetTBytesLenLte1() []byte {
	if x != nil {
		return x.TBytesLenLte1
	}
	return nil
}

func (x *ValidBytesTags1) GetTBytesLenGte1() []byte {
	if x != nil {
		return x.TBytesLenGte1
	}
	return nil
}

// ValidRepeatedTagsField1 for test option tag RepeatedTags.
type ValidRepeatedTagsGeneral1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TList_101           []string  `protobuf:"bytes,101,rep,name=t_list_101,json=tList101,proto3" json:"t_list_101,omitempty"`
	TList_102           []string  `protobuf:"bytes,102,rep,name=t_list_102,json=tList102,proto3" json:"t_list_102,omitempty"`
	TList_103           []string  `protobuf:"bytes,103,rep,name=t_list_103,json=tList103,proto3" json:"t_list_103,omitempty"`
	TList_104           []string  `protobuf:"bytes,104,rep,name=t_list_104,json=tList104,proto3" json:"t_list_104,omitempty"`
	TList_105           []string  `protobuf:"bytes,105,rep,name=t_list_105,json=tList105,proto3" json:"t_list_105,omitempty"`
	TList_106           []string  `protobuf:"bytes,106,rep,name=t_list_106,json=tList106,proto3" json:"t_list_106,omitempty"`
	TList_107           []*Config `protobuf:"bytes,107,rep,name=t_list_107,json=tList107,proto3" json:"t_list_107,omitempty"`
	TList_108           []*Config `protobuf:"bytes,108,rep,name=t_list_108,json=tList108,proto3" json:"t_list_108,omitempty"`
	TList_109           []*Config `protobuf:"bytes,109,rep,name=t_list_109,json=tList109,proto3" json:"t_list_109,omitempty"`
	TList_110           []*Config `protobuf:"bytes,110,rep,name=t_list_110,json=tList110,proto3" json:"t_list_110,omitempty"`
	TList_111           []*Config `protobuf:"bytes,111,rep,name=t_list_111,json=tList111,proto3" json:"t_list_111,omitempty"`
	TList_112           []*Config `protobuf:"bytes,112,rep,name=t_list_112,json=tList112,proto3" json:"t_list_112,omitempty"`
	TList_113           []Enum1   `protobuf:"varint,113,rep,packed,name=t_list_113,json=tList113,proto3,enum=govalidatortest.Enum1" json:"t_list_113,omitempty"`
	TList_114           []Enum1   `protobuf:"varint,114,rep,packed,name=t_list_114,json=tList114,proto3,enum=govalidatortest.Enum1" json:"t_list_114,omitempty"`
	TList_115           []Enum1   `protobuf:"varint,115,rep,packed,name=t_list_115,json=tList115,proto3,enum=govalidatortest.Enum1" json:"t_list_115,omitempty"`
	TList_116           []Enum1   `protobuf:"varint,116,rep,packed,name=t_list_116,json=tList116,proto3,enum=govalidatortest.Enum1" json:"t_list_116,omitempty"`
	TList_117           []Enum1   `protobuf:"varint,117,rep,packed,name=t_list_117,json=tList117,proto3,enum=govalidatortest.Enum1" json:"t_list_117,omitempty"`
	TList_118           []Enum1   `protobuf:"varint,118,rep,packed,name=t_list_118,json=tList118,proto3,enum=govalidatortest.Enum1" json:"t_list_118,omitempty"`
	TListNotNull1       []string  `protobuf:"bytes,16,rep,name=t_list_not_null1,json=tListNotNull1,proto3" json:"t_list_not_null1,omitempty"`
	TListLenEq1         []string  `protobuf:"bytes,10,rep,name=t_list_len_eq1,json=tListLenEq1,proto3" json:"t_list_len_eq1,omitempty"`
	TListLenNe1         []string  `protobuf:"bytes,11,rep,name=t_list_len_ne1,json=tListLenNe1,proto3" json:"t_list_len_ne1,omitempty"`
	TListLenLt1         []string  `protobuf:"bytes,12,rep,name=t_list_len_lt1,json=tListLenLt1,proto3" json:"t_list_len_lt1,omitempty"`
	TListLenGt1         []string  `protobuf:"bytes,13,rep,name=t_list_len_gt1,json=tListLenGt1,proto3" json:"t_list_len_gt1,omitempty"`
	TListLenLte1        []string  `protobuf:"bytes,14,rep,name=t_list_len_lte1,json=tListLenLte1,proto3" json:"t_list_len_lte1,omitempty"`
	TListLenGte1        []string  `protobuf:"bytes,15,rep,name=t_list_len_gte1,json=tListLenGte1,proto3" json:"t_list_len_gte1,omitempty"`
	TListUniqueString   []string  `protobuf:"bytes,31,rep,name=t_list_unique_string,json=tListUniqueString,proto3" json:"t_list_unique_string,omitempty"`
	TListUniqueDouble   []float64 `protobuf:"fixed64,32,rep,packed,name=t_list_unique_double,json=tListUniqueDouble,proto3" json:"t_list_unique_double,omitempty"`
	TListUniqueFloat    []float32 `protobuf:"fixed32,33,rep,packed,name=t_list_unique_float,json=tListUniqueFloat,proto3" json:"t_list_unique_float,omitempty"`
	TListUniqueInt32    []int32   `protobuf:"varint,34,rep,packed,name=t_list_unique_int32,json=tListUniqueInt32,proto3" json:"t_list_unique_int32,omitempty"`
	TListUniqueInt64    []int64   `protobuf:"varint,35,rep,packed,name=t_list_unique_int64,json=tListUniqueInt64,proto3" json:"t_list_unique_int64,omitempty"`
	TListUniqueUint32   []uint32  `protobuf:"varint,36,rep,packed,name=t_list_unique_uint32,json=tListUniqueUint32,proto3" json:"t_list_unique_uint32,omitempty"`
	TListUniqueUint64   []uint64  `protobuf:"varint,37,rep,packed,name=t_list_unique_uint64,json=tListUniqueUint64,proto3" json:"t_list_unique_uint64,omitempty"`
	TListUniqueSint32   []int32   `protobuf:"zigzag32,38,rep,packed,name=t_list_unique_sint32,json=tListUniqueSint32,proto3" json:"t_list_unique_sint32,omitempty"`
	TListUniqueSint64   []int64   `protobuf:"zigzag64,39,rep,packed,name=t_list_unique_sint64,json=tListUniqueSint64,proto3" json:"t_list_unique_sint64,omitempty"`
	TListUniqueSfixed32 []int32   `protobuf:"fixed32,40,rep,packed,name=t_list_unique_sfixed32,json=tListUniqueSfixed32,proto3" json:"t_list_unique_sfixed32,omitempty"`
	TListUniqueSfixed64 []int64   `protobuf:"fixed64,41,rep,packed,name=t_list_unique_sfixed64,json=tListUniqueSfixed64,proto3" json:"t_list_unique_sfixed64,omitempty"`
	TListUniqueFixed32  []uint32  `protobuf:"fixed32,42,rep,packed,name=t_list_unique_fixed32,json=tListUniqueFixed32,proto3" json:"t_list_unique_fixed32,omitempty"`
	TListUniqueFixed64  []uint64  `protobuf:"fixed64,43,rep,packed,name=t_list_unique_fixed64,json=tListUniqueFixed64,proto3" json:"t_list_unique_fixed64,omitempty"`
	TListUniqueBool     []bool    `protobuf:"varint,44,rep,packed,name=t_list_unique_bool,json=tListUniqueBool,proto3" json:"t_list_unique_bool,omitempty"`
	TListUniqueEnum     []Enum1   `protobuf:"varint,45,rep,packed,name=t_list_unique_enum,json=tListUniqueEnum,proto3,enum=govalidatortest.Enum1" json:"t_list_unique_enum,omitempty"`
	TListUniqueMessage  []*Config `protobuf:"bytes,46,rep,name=t_list_unique_message,json=tListUniqueMessage,proto3" json:"t_list_unique_message,omitempty"`
	TListUniqueBytes    [][]byte  `protobuf:"bytes,47,rep,name=t_list_unique_bytes,json=tListUniqueBytes,proto3" json:"t_list_unique_bytes,omitempty"`
}

func (x *ValidRepeatedTagsGeneral1) Reset() {
	*x = ValidRepeatedTagsGeneral1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidRepeatedTagsGeneral1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidRepeatedTagsGeneral1) ProtoMessage() {}

func (x *ValidRepeatedTagsGeneral1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidRepeatedTagsGeneral1.ProtoReflect.Descriptor instead.
func (*ValidRepeatedTagsGeneral1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{17}
}

func (x *ValidRepeatedTagsGeneral1) GetTList_101() []string {
	if x != nil {
		return x.TList_101
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_102() []string {
	if x != nil {
		return x.TList_102
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_103() []string {
	if x != nil {
		return x.TList_103
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_104() []string {
	if x != nil {
		return x.TList_104
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_105() []string {
	if x != nil {
		return x.TList_105
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_106() []string {
	if x != nil {
		return x.TList_106
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_107() []*Config {
	if x != nil {
		return x.TList_107
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_108() []*Config {
	if x != nil {
		return x.TList_108
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_109() []*Config {
	if x != nil {
		return x.TList_109
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_110() []*Config {
	if x != nil {
		return x.TList_110
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_111() []*Config {
	if x != nil {
		return x.TList_111
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_112() []*Config {
	if x != nil {
		return x.TList_112
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_113() []Enum1 {
	if x != nil {
		return x.TList_113
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_114() []Enum1 {
	if x != nil {
		return x.TList_114
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_115() []Enum1 {
	if x != nil {
		return x.TList_115
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_116() []Enum1 {
	if x != nil {
		return x.TList_116
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_117() []Enum1 {
	if x != nil {
		return x.TList_117
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTList_118() []Enum1 {
	if x != nil {
		return x.TList_118
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListNotNull1() []string {
	if x != nil {
		return x.TListNotNull1
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListLenEq1() []string {
	if x != nil {
		return x.TListLenEq1
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListLenNe1() []string {
	if x != nil {
		return x.TListLenNe1
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListLenLt1() []string {
	if x != nil {
		return x.TListLenLt1
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListLenGt1() []string {
	if x != nil {
		return x.TListLenGt1
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListLenLte1() []string {
	if x != nil {
		return x.TListLenLte1
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListLenGte1() []string {
	if x != nil {
		return x.TListLenGte1
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueString() []string {
	if x != nil {
		return x.TListUniqueString
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueDouble() []float64 {
	if x != nil {
		return x.TListUniqueDouble
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueFloat() []float32 {
	if x != nil {
		return x.TListUniqueFloat
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueInt32() []int32 {
	if x != nil {
		return x.TListUniqueInt32
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueInt64() []int64 {
	if x != nil {
		return x.TListUniqueInt64
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueUint32() []uint32 {
	if x != nil {
		return x.TListUniqueUint32
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueUint64() []uint64 {
	if x != nil {
		return x.TListUniqueUint64
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueSint32() []int32 {
	if x != nil {
		return x.TListUniqueSint32
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueSint64() []int64 {
	if x != nil {
		return x.TListUniqueSint64
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueSfixed32() []int32 {
	if x != nil {
		return x.TListUniqueSfixed32
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueSfixed64() []int64 {
	if x != nil {
		return x.TListUniqueSfixed64
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueFixed32() []uint32 {
	if x != nil {
		return x.TListUniqueFixed32
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueFixed64() []uint64 {
	if x != nil {
		return x.TListUniqueFixed64
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueBool() []bool {
	if x != nil {
		return x.TListUniqueBool
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueEnum() []Enum1 {
	if x != nil {
		return x.TListUniqueEnum
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueMessage() []*Config {
	if x != nil {
		return x.TListUniqueMessage
	}
	return nil
}

func (x *ValidRepeatedTagsGeneral1) GetTListUniqueBytes() [][]byte {
	if x != nil {
		return x.TListUniqueBytes
	}
	return nil
}

// ValidRepeatedTagsField1 for test option tag RepeatedTags wit item.
type ValidRepeatedTagsItem1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TListItemString   []string  `protobuf:"bytes,31,rep,name=t_list_item_string,json=tListItemString,proto3" json:"t_list_item_string,omitempty"`
	TListItemDouble   []float64 `protobuf:"fixed64,32,rep,packed,name=t_list_item_double,json=tListItemDouble,proto3" json:"t_list_item_double,omitempty"`
	TListItemFloat    []float32 `protobuf:"fixed32,33,rep,packed,name=t_list_item_float,json=tListItemFloat,proto3" json:"t_list_item_float,omitempty"`
	TListItemInt32    []int32   `protobuf:"varint,34,rep,packed,name=t_list_item_int32,json=tListItemInt32,proto3" json:"t_list_item_int32,omitempty"`
	TListItemInt64    []int64   `protobuf:"varint,35,rep,packed,name=t_list_item_int64,json=tListItemInt64,proto3" json:"t_list_item_int64,omitempty"`
	TListItemSint32   []int32   `protobuf:"zigzag32,38,rep,packed,name=t_list_item_sint32,json=tListItemSint32,proto3" json:"t_list_item_sint32,omitempty"`
	TListItemSint64   []int64   `protobuf:"zigzag64,39,rep,packed,name=t_list_item_sint64,json=tListItemSint64,proto3" json:"t_list_item_sint64,omitempty"`
	TListItemSfixed32 []int32   `protobuf:"fixed32,40,rep,packed,name=t_list_item_sfixed32,json=tListItemSfixed32,proto3" json:"t_list_item_sfixed32,omitempty"`
	TListItemSfixed64 []int64   `protobuf:"fixed64,41,rep,packed,name=t_list_item_sfixed64,json=tListItemSfixed64,proto3" json:"t_list_item_sfixed64,omitempty"`
	TListItemUint32   []uint32  `protobuf:"varint,36,rep,packed,name=t_list_item_uint32,json=tListItemUint32,proto3" json:"t_list_item_uint32,omitempty"`
	TListItemUint64   []uint64  `protobuf:"varint,37,rep,packed,name=t_list_item_uint64,json=tListItemUint64,proto3" json:"t_list_item_uint64,omitempty"`
	TListItemFixed32  []uint32  `protobuf:"fixed32,42,rep,packed,name=t_list_item_fixed32,json=tListItemFixed32,proto3" json:"t_list_item_fixed32,omitempty"`
	TListItemFixed64  []uint64  `protobuf:"fixed64,43,rep,packed,name=t_list_item_fixed64,json=tListItemFixed64,proto3" json:"t_list_item_fixed64,omitempty"`
	TListItemBool     []bool    `protobuf:"varint,44,rep,packed,name=t_list_item_bool,json=tListItemBool,proto3" json:"t_list_item_bool,omitempty"`
	TListItemEnum     []Enum1   `protobuf:"varint,45,rep,packed,name=t_list_item_enum,json=tListItemEnum,proto3,enum=govalidatortest.Enum1" json:"t_list_item_enum,omitempty"`
	TListItemBytes    [][]byte  `protobuf:"bytes,46,rep,name=t_list_item_bytes,json=tListItemBytes,proto3" json:"t_list_item_bytes,omitempty"`
	TListItemMessage  []*Config `protobuf:"bytes,47,rep,name=t_list_item_message,json=tListItemMessage,proto3" json:"t_list_item_message,omitempty"`
}

func (x *ValidRepeatedTagsItem1) Reset() {
	*x = ValidRepeatedTagsItem1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidRepeatedTagsItem1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidRepeatedTagsItem1) ProtoMessage() {}

func (x *ValidRepeatedTagsItem1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidRepeatedTagsItem1.ProtoReflect.Descriptor instead.
func (*ValidRepeatedTagsItem1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{18}
}

func (x *ValidRepeatedTagsItem1) GetTListItemString() []string {
	if x != nil {
		return x.TListItemString
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemDouble() []float64 {
	if x != nil {
		return x.TListItemDouble
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemFloat() []float32 {
	if x != nil {
		return x.TListItemFloat
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemInt32() []int32 {
	if x != nil {
		return x.TListItemInt32
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemInt64() []int64 {
	if x != nil {
		return x.TListItemInt64
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemSint32() []int32 {
	if x != nil {
		return x.TListItemSint32
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemSint64() []int64 {
	if x != nil {
		return x.TListItemSint64
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemSfixed32() []int32 {
	if x != nil {
		return x.TListItemSfixed32
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemSfixed64() []int64 {
	if x != nil {
		return x.TListItemSfixed64
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemUint32() []uint32 {
	if x != nil {
		return x.TListItemUint32
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemUint64() []uint64 {
	if x != nil {
		return x.TListItemUint64
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemFixed32() []uint32 {
	if x != nil {
		return x.TListItemFixed32
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemFixed64() []uint64 {
	if x != nil {
		return x.TListItemFixed64
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemBool() []bool {
	if x != nil {
		return x.TListItemBool
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemEnum() []Enum1 {
	if x != nil {
		return x.TListItemEnum
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemBytes() [][]byte {
	if x != nil {
		return x.TListItemBytes
	}
	return nil
}

func (x *ValidRepeatedTagsItem1) GetTListItemMessage() []*Config {
	if x != nil {
		return x.TListItemMessage
	}
	return nil
}

// ValidMapTagsGeneral1 for test option tag MapTags.
type ValidMapTagsGeneral1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TMap_101     map[string]string  `protobuf:"bytes,101,rep,name=t_map_101,json=tMap101,proto3" json:"t_map_101,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_102     map[string]string  `protobuf:"bytes,102,rep,name=t_map_102,json=tMap102,proto3" json:"t_map_102,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_103     map[string]string  `protobuf:"bytes,103,rep,name=t_map_103,json=tMap103,proto3" json:"t_map_103,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_104     map[string]string  `protobuf:"bytes,104,rep,name=t_map_104,json=tMap104,proto3" json:"t_map_104,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_105     map[string]string  `protobuf:"bytes,105,rep,name=t_map_105,json=tMap105,proto3" json:"t_map_105,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_106     map[string]string  `protobuf:"bytes,106,rep,name=t_map_106,json=tMap106,proto3" json:"t_map_106,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_107     map[string]string  `protobuf:"bytes,107,rep,name=t_map_107,json=tMap107,proto3" json:"t_map_107,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_108     map[string]string  `protobuf:"bytes,108,rep,name=t_map_108,json=tMap108,proto3" json:"t_map_108,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_111     map[string]*Config `protobuf:"bytes,111,rep,name=t_map_111,json=tMap111,proto3" json:"t_map_111,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_112     map[string]*Config `protobuf:"bytes,112,rep,name=t_map_112,json=tMap112,proto3" json:"t_map_112,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_113     map[string]*Config `protobuf:"bytes,113,rep,name=t_map_113,json=tMap113,proto3" json:"t_map_113,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_114     map[string]*Config `protobuf:"bytes,114,rep,name=t_map_114,json=tMap114,proto3" json:"t_map_114,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_115     map[string]*Config `protobuf:"bytes,115,rep,name=t_map_115,json=tMap115,proto3" json:"t_map_115,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_116     map[string]*Config `protobuf:"bytes,116,rep,name=t_map_116,json=tMap116,proto3" json:"t_map_116,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_117     map[string]*Config `protobuf:"bytes,117,rep,name=t_map_117,json=tMap117,proto3" json:"t_map_117,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMap_118     map[string]*Config `protobuf:"bytes,118,rep,name=t_map_118,json=tMap118,proto3" json:"t_map_118,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapNotNull1 map[string]string  `protobuf:"bytes,16,rep,name=t_map_not_null1,json=tMapNotNull1,proto3" json:"t_map_not_null1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapLenEq1   map[string]string  `protobuf:"bytes,10,rep,name=t_map_len_eq1,json=tMapLenEq1,proto3" json:"t_map_len_eq1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapLenNe1   map[string]string  `protobuf:"bytes,11,rep,name=t_map_len_ne1,json=tMapLenNe1,proto3" json:"t_map_len_ne1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapLenLt1   map[string]string  `protobuf:"bytes,12,rep,name=t_map_len_lt1,json=tMapLenLt1,proto3" json:"t_map_len_lt1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapLenGt1   map[string]string  `protobuf:"bytes,13,rep,name=t_map_len_gt1,json=tMapLenGt1,proto3" json:"t_map_len_gt1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapLenLte1  map[string]string  `protobuf:"bytes,14,rep,name=t_map_len_lte1,json=tMapLenLte1,proto3" json:"t_map_len_lte1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapLenGte1  map[string]string  `protobuf:"bytes,15,rep,name=t_map_len_gte1,json=tMapLenGte1,proto3" json:"t_map_len_gte1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValidMapTagsGeneral1) Reset() {
	*x = ValidMapTagsGeneral1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidMapTagsGeneral1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMapTagsGeneral1) ProtoMessage() {}

func (x *ValidMapTagsGeneral1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMapTagsGeneral1.ProtoReflect.Descriptor instead.
func (*ValidMapTagsGeneral1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{19}
}

func (x *ValidMapTagsGeneral1) GetTMap_101() map[string]string {
	if x != nil {
		return x.TMap_101
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_102() map[string]string {
	if x != nil {
		return x.TMap_102
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_103() map[string]string {
	if x != nil {
		return x.TMap_103
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_104() map[string]string {
	if x != nil {
		return x.TMap_104
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_105() map[string]string {
	if x != nil {
		return x.TMap_105
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_106() map[string]string {
	if x != nil {
		return x.TMap_106
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_107() map[string]string {
	if x != nil {
		return x.TMap_107
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_108() map[string]string {
	if x != nil {
		return x.TMap_108
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_111() map[string]*Config {
	if x != nil {
		return x.TMap_111
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_112() map[string]*Config {
	if x != nil {
		return x.TMap_112
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_113() map[string]*Config {
	if x != nil {
		return x.TMap_113
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_114() map[string]*Config {
	if x != nil {
		return x.TMap_114
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_115() map[string]*Config {
	if x != nil {
		return x.TMap_115
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_116() map[string]*Config {
	if x != nil {
		return x.TMap_116
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_117() map[string]*Config {
	if x != nil {
		return x.TMap_117
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMap_118() map[string]*Config {
	if x != nil {
		return x.TMap_118
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMapNotNull1() map[string]string {
	if x != nil {
		return x.TMapNotNull1
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMapLenEq1() map[string]string {
	if x != nil {
		return x.TMapLenEq1
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMapLenNe1() map[string]string {
	if x != nil {
		return x.TMapLenNe1
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMapLenLt1() map[string]string {
	if x != nil {
		return x.TMapLenLt1
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMapLenGt1() map[string]string {
	if x != nil {
		return x.TMapLenGt1
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMapLenLte1() map[string]string {
	if x != nil {
		return x.TMapLenLte1
	}
	return nil
}

func (x *ValidMapTagsGeneral1) GetTMapLenGte1() map[string]string {
	if x != nil {
		return x.TMapLenGte1
	}
	return nil
}

// ValidMapTagsGeneral1 for test option tag MapTags with key.
type ValidMapTagsKey1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TMapKeyString   map[string]int32 `protobuf:"bytes,10,rep,name=t_map_key_string,json=tMapKeyString,proto3" json:"t_map_key_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeyInt32    map[int32]int32  `protobuf:"bytes,11,rep,name=t_map_key_int32,json=tMapKeyInt32,proto3" json:"t_map_key_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeyInt64    map[int64]int32  `protobuf:"bytes,12,rep,name=t_map_key_int64,json=tMapKeyInt64,proto3" json:"t_map_key_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeySint32   map[int32]int32  `protobuf:"bytes,15,rep,name=t_map_key_sint32,json=tMapKeySint32,proto3" json:"t_map_key_sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeySint64   map[int64]int32  `protobuf:"bytes,16,rep,name=t_map_key_sint64,json=tMapKeySint64,proto3" json:"t_map_key_sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeySfixed32 map[int32]int32  `protobuf:"bytes,19,rep,name=t_map_key_sfixed32,json=tMapKeySfixed32,proto3" json:"t_map_key_sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeySfixed64 map[int64]int32  `protobuf:"bytes,20,rep,name=t_map_key_sfixed64,json=tMapKeySfixed64,proto3" json:"t_map_key_sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeyUint32   map[uint32]int32 `protobuf:"bytes,13,rep,name=t_map_key_uint32,json=tMapKeyUint32,proto3" json:"t_map_key_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeyUint64   map[uint64]int32 `protobuf:"bytes,14,rep,name=t_map_key_uint64,json=tMapKeyUint64,proto3" json:"t_map_key_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeyFixed32  map[uint32]int32 `protobuf:"bytes,17,rep,name=t_map_key_fixed32,json=tMapKeyFixed32,proto3" json:"t_map_key_fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapKeyFixed64  map[uint64]int32 `protobuf:"bytes,18,rep,name=t_map_key_fixed64,json=tMapKeyFixed64,proto3" json:"t_map_key_fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ValidMapTagsKey1) Reset() {
	*x = ValidMapTagsKey1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidMapTagsKey1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMapTagsKey1) ProtoMessage() {}

func (x *ValidMapTagsKey1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMapTagsKey1.ProtoReflect.Descriptor instead.
func (*ValidMapTagsKey1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{20}
}

func (x *ValidMapTagsKey1) GetTMapKeyString() map[string]int32 {
	if x != nil {
		return x.TMapKeyString
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeyInt32() map[int32]int32 {
	if x != nil {
		return x.TMapKeyInt32
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeyInt64() map[int64]int32 {
	if x != nil {
		return x.TMapKeyInt64
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeySint32() map[int32]int32 {
	if x != nil {
		return x.TMapKeySint32
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeySint64() map[int64]int32 {
	if x != nil {
		return x.TMapKeySint64
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeySfixed32() map[int32]int32 {
	if x != nil {
		return x.TMapKeySfixed32
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeySfixed64() map[int64]int32 {
	if x != nil {
		return x.TMapKeySfixed64
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeyUint32() map[uint32]int32 {
	if x != nil {
		return x.TMapKeyUint32
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeyUint64() map[uint64]int32 {
	if x != nil {
		return x.TMapKeyUint64
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeyFixed32() map[uint32]int32 {
	if x != nil {
		return x.TMapKeyFixed32
	}
	return nil
}

func (x *ValidMapTagsKey1) GetTMapKeyFixed64() map[uint64]int32 {
	if x != nil {
		return x.TMapKeyFixed64
	}
	return nil
}

// ValidMapTagsGeneral1 for test option tag MapTags with value.
type ValidMapTagsValue1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TMapValueString   map[string]string  `protobuf:"bytes,10,rep,name=t_map_value_string,json=tMapValueString,proto3" json:"t_map_value_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapValueDouble   map[string]float64 `protobuf:"bytes,12,rep,name=t_map_value_double,json=tMapValueDouble,proto3" json:"t_map_value_double,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	TMapValueFloat    map[string]float32 `protobuf:"bytes,11,rep,name=t_map_value_float,json=tMapValueFloat,proto3" json:"t_map_value_float,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	TMapValueInt32    map[string]int32   `protobuf:"bytes,13,rep,name=t_map_value_int32,json=tMapValueInt32,proto3" json:"t_map_value_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapValueInt64    map[string]int64   `protobuf:"bytes,14,rep,name=t_map_value_int64,json=tMapValueInt64,proto3" json:"t_map_value_int64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapValueSint32   map[string]int32   `protobuf:"bytes,15,rep,name=t_map_value_sint32,json=tMapValueSint32,proto3" json:"t_map_value_sint32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	TMapValueSint64   map[string]int64   `protobuf:"bytes,16,rep,name=t_map_value_sint64,json=tMapValueSint64,proto3" json:"t_map_value_sint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	TMapValueSfixed32 map[string]int32   `protobuf:"bytes,17,rep,name=t_map_value_sfixed32,json=tMapValueSfixed32,proto3" json:"t_map_value_sfixed32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	TMapValueSfixed64 map[string]int64   `protobuf:"bytes,18,rep,name=t_map_value_sfixed64,json=tMapValueSfixed64,proto3" json:"t_map_value_sfixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	TMapValueUint32   map[string]uint32  `protobuf:"bytes,19,rep,name=t_map_value_uint32,json=tMapValueUint32,proto3" json:"t_map_value_uint32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapValueUint64   map[string]uint64  `protobuf:"bytes,20,rep,name=t_map_value_uint64,json=tMapValueUint64,proto3" json:"t_map_value_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapValueFixed32  map[string]uint32  `protobuf:"bytes,21,rep,name=t_map_value_fixed32,json=tMapValueFixed32,proto3" json:"t_map_value_fixed32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	TMapValueFixed64  map[string]uint64  `protobuf:"bytes,22,rep,name=t_map_value_fixed64,json=tMapValueFixed64,proto3" json:"t_map_value_fixed64,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	TMapValueBool     map[string]bool    `protobuf:"bytes,23,rep,name=t_map_value_bool,json=tMapValueBool,proto3" json:"t_map_value_bool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TMapValueEnum     map[string]Enum1   `protobuf:"bytes,25,rep,name=t_map_value_enum,json=tMapValueEnum,proto3" json:"t_map_value_enum,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=govalidatortest.Enum1"`
	TMapValueBytes    map[string][]byte  `protobuf:"bytes,24,rep,name=t_map_value_bytes,json=tMapValueBytes,proto3" json:"t_map_value_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapValueMessage  map[string]*Config `protobuf:"bytes,26,rep,name=t_map_value_message,json=tMapValueMessage,proto3" json:"t_map_value_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValidMapTagsValue1) Reset() {
	*x = ValidMapTagsValue1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidMapTagsValue1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMapTagsValue1) ProtoMessage() {}

func (x *ValidMapTagsValue1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMapTagsValue1.ProtoReflect.Descriptor instead.
func (*ValidMapTagsValue1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{21}
}

func (x *ValidMapTagsValue1) GetTMapValueString() map[string]string {
	if x != nil {
		return x.TMapValueString
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueDouble() map[string]float64 {
	if x != nil {
		return x.TMapValueDouble
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueFloat() map[string]float32 {
	if x != nil {
		return x.TMapValueFloat
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueInt32() map[string]int32 {
	if x != nil {
		return x.TMapValueInt32
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueInt64() map[string]int64 {
	if x != nil {
		return x.TMapValueInt64
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueSint32() map[string]int32 {
	if x != nil {
		return x.TMapValueSint32
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueSint64() map[string]int64 {
	if x != nil {
		return x.TMapValueSint64
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueSfixed32() map[string]int32 {
	if x != nil {
		return x.TMapValueSfixed32
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueSfixed64() map[string]int64 {
	if x != nil {
		return x.TMapValueSfixed64
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueUint32() map[string]uint32 {
	if x != nil {
		return x.TMapValueUint32
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueUint64() map[string]uint64 {
	if x != nil {
		return x.TMapValueUint64
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueFixed32() map[string]uint32 {
	if x != nil {
		return x.TMapValueFixed32
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueFixed64() map[string]uint64 {
	if x != nil {
		return x.TMapValueFixed64
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueBool() map[string]bool {
	if x != nil {
		return x.TMapValueBool
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueEnum() map[string]Enum1 {
	if x != nil {
		return x.TMapValueEnum
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueBytes() map[string][]byte {
	if x != nil {
		return x.TMapValueBytes
	}
	return nil
}

func (x *ValidMapTagsValue1) GetTMapValueMessage() map[string]*Config {
	if x != nil {
		return x.TMapValueMessage
	}
	return nil
}

// ValidStringTagsGeneral1 for test option tag StringTags with general field.
type ValidStringTagsGeneral1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1               string `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3" json:"t_string1,omitempty"`
	TString2               string `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3" json:"t_string2,omitempty"`
	TString3               string `protobuf:"bytes,3,opt,name=t_string3,json=tString3,proto3" json:"t_string3,omitempty"`
	TString4               string `protobuf:"bytes,4,opt,name=t_string4,json=tString4,proto3" json:"t_string4,omitempty"`
	TStringEq1             string `protobuf:"bytes,10,opt,name=t_string_eq1,json=tStringEq1,proto3" json:"t_string_eq1,omitempty"`
	TStringNe1             string `protobuf:"bytes,11,opt,name=t_string_ne1,json=tStringNe1,proto3" json:"t_string_ne1,omitempty"`
	TStringLt1             string `protobuf:"bytes,12,opt,name=t_string_lt1,json=tStringLt1,proto3" json:"t_string_lt1,omitempty"`
	TStringGt1             string `protobuf:"bytes,13,opt,name=t_string_gt1,json=tStringGt1,proto3" json:"t_string_gt1,omitempty"`
	TStringLte1            string `protobuf:"bytes,14,opt,name=t_string_lte1,json=tStringLte1,proto3" json:"t_string_lte1,omitempty"`
	TStringGte1            string `protobuf:"bytes,15,opt,name=t_string_gte1,json=tStringGte1,proto3" json:"t_string_gte1,omitempty"`
	TStringIn1             string `protobuf:"bytes,16,opt,name=t_string_in1,json=tStringIn1,proto3" json:"t_string_in1,omitempty"`
	TStringNotIn1          string `protobuf:"bytes,17,opt,name=t_string_not_in1,json=tStringNotIn1,proto3" json:"t_string_not_in1,omitempty"`
	TStringCharLenEq1      string `protobuf:"bytes,20,opt,name=t_string_char_len_eq1,json=tStringCharLenEq1,proto3" json:"t_string_char_len_eq1,omitempty"`
	TStringCharLenNe1      string `protobuf:"bytes,21,opt,name=t_string_char_len_ne1,json=tStringCharLenNe1,proto3" json:"t_string_char_len_ne1,omitempty"`
	TStringCharLenGt1      string `protobuf:"bytes,22,opt,name=t_string_char_len_gt1,json=tStringCharLenGt1,proto3" json:"t_string_char_len_gt1,omitempty"`
	TStringCharLenLt1      string `protobuf:"bytes,23,opt,name=t_string_char_len_lt1,json=tStringCharLenLt1,proto3" json:"t_string_char_len_lt1,omitempty"`
	TStringCharLenGte1     string `protobuf:"bytes,24,opt,name=t_string_char_len_gte1,json=tStringCharLenGte1,proto3" json:"t_string_char_len_gte1,omitempty"`
	TStringCharLenLte1     string `protobuf:"bytes,25,opt,name=t_string_char_len_lte1,json=tStringCharLenLte1,proto3" json:"t_string_char_len_lte1,omitempty"`
	TStringByteLenEq1      string `protobuf:"bytes,30,opt,name=t_string_byte_len_eq1,json=tStringByteLenEq1,proto3" json:"t_string_byte_len_eq1,omitempty"`
	TStringByteLenNe1      string `protobuf:"bytes,31,opt,name=t_string_byte_len_ne1,json=tStringByteLenNe1,proto3" json:"t_string_byte_len_ne1,omitempty"`
	TStringByteLenGt1      string `protobuf:"bytes,32,opt,name=t_string_byte_len_gt1,json=tStringByteLenGt1,proto3" json:"t_string_byte_len_gt1,omitempty"`
	TStringByteLenLt1      string `protobuf:"bytes,33,opt,name=t_string_byte_len_lt1,json=tStringByteLenLt1,proto3" json:"t_string_byte_len_lt1,omitempty"`
	TStringByteLenGte1     string `protobuf:"bytes,34,opt,name=t_string_byte_len_gte1,json=tStringByteLenGte1,proto3" json:"t_string_byte_len_gte1,omitempty"`
	TStringByteLenLte1     string `protobuf:"bytes,35,opt,name=t_string_byte_len_lte1,json=tStringByteLenLte1,proto3" json:"t_string_byte_len_lte1,omitempty"`
	TStringRegex1          string `protobuf:"bytes,40,opt,name=t_string_regex1,json=tStringRegex1,proto3" json:"t_string_regex1,omitempty"`
	TStringPrefix1         string `protobuf:"bytes,41,opt,name=t_string_prefix1,json=tStringPrefix1,proto3" json:"t_string_prefix1,omitempty"`
	TStringNoPrefix1       string `protobuf:"bytes,42,opt,name=t_string_no_prefix1,json=tStringNoPrefix1,proto3" json:"t_string_no_prefix1,omitempty"`
	TStringSuffix1         string `protobuf:"bytes,43,opt,name=t_string_suffix1,json=tStringSuffix1,proto3" json:"t_string_suffix1,omitempty"`
	TStringNoSuffix1       string `protobuf:"bytes,44,opt,name=t_string_no_suffix1,json=tStringNoSuffix1,proto3" json:"t_string_no_suffix1,omitempty"`
	TStringContains1       string `protobuf:"bytes,45,opt,name=t_string_contains1,json=tStringContains1,proto3" json:"t_string_contains1,omitempty"`
	TStringNoContains1     string `protobuf:"bytes,46,opt,name=t_string_no_contains1,json=tStringNoContains1,proto3" json:"t_string_no_contains1,omitempty"`
	TStringContainsAny1    string `protobuf:"bytes,47,opt,name=t_string_contains_any1,json=tStringContainsAny1,proto3" json:"t_string_contains_any1,omitempty"`
	TStringNotContainsAny1 string `protobuf:"bytes,48,opt,name=t_string_not_contains_any1,json=tStringNotContainsAny1,proto3" json:"t_string_not_contains_any1,omitempty"`
	TStringUtf8            string `protobuf:"bytes,81,opt,name=t_string_utf8,json=tStringUtf8,proto3" json:"t_string_utf8,omitempty"`
	TStringAscii           string `protobuf:"bytes,71,opt,name=t_string_ascii,json=tStringAscii,proto3" json:"t_string_ascii,omitempty"`
	TStringPrintAscii      string `protobuf:"bytes,72,opt,name=t_string_print_ascii,json=tStringPrintAscii,proto3" json:"t_string_print_ascii,omitempty"`
	TStringBoolean         string `protobuf:"bytes,73,opt,name=t_string_boolean,json=tStringBoolean,proto3" json:"t_string_boolean,omitempty"`
	TStringLowercase       string `protobuf:"bytes,74,opt,name=t_string_lowercase,json=tStringLowercase,proto3" json:"t_string_lowercase,omitempty"`
	TStringUppercase       string `protobuf:"bytes,75,opt,name=t_string_uppercase,json=tStringUppercase,proto3" json:"t_string_uppercase,omitempty"`
	TStringAlpha           string `protobuf:"bytes,76,opt,name=t_string_alpha,json=tStringAlpha,proto3" json:"t_string_alpha,omitempty"`
	TStringNumber          string `protobuf:"bytes,77,opt,name=t_string_number,json=tStringNumber,proto3" json:"t_string_number,omitempty"`
	TStringAlphaNumber     string `protobuf:"bytes,78,opt,name=t_string_alpha_number,json=tStringAlphaNumber,proto3" json:"t_string_alpha_number,omitempty"`
	TStringIp              string `protobuf:"bytes,101,opt,name=t_string_ip,json=tStringIp,proto3" json:"t_string_ip,omitempty"`
	TStringIpv4            string `protobuf:"bytes,102,opt,name=t_string_ipv4,json=tStringIpv4,proto3" json:"t_string_ipv4,omitempty"`
	TStringIpv6            string `protobuf:"bytes,103,opt,name=t_string_ipv6,json=tStringIpv6,proto3" json:"t_string_ipv6,omitempty"`
	TStringIpAddr          string `protobuf:"bytes,104,opt,name=t_string_ip_addr,json=tStringIpAddr,proto3" json:"t_string_ip_addr,omitempty"`
	TStringIp4Addr         string `protobuf:"bytes,105,opt,name=t_string_ip4_addr,json=tStringIp4Addr,proto3" json:"t_string_ip4_addr,omitempty"`
	TStringIp6Addr         string `protobuf:"bytes,106,opt,name=t_string_ip6_addr,json=tStringIp6Addr,proto3" json:"t_string_ip6_addr,omitempty"`
	TStringCidr            string `protobuf:"bytes,107,opt,name=t_string_cidr,json=tStringCidr,proto3" json:"t_string_cidr,omitempty"`
	TStringCidrv4          string `protobuf:"bytes,108,opt,name=t_string_cidrv4,json=tStringCidrv4,proto3" json:"t_string_cidrv4,omitempty"`
	TStringCidrv6          string `protobuf:"bytes,109,opt,name=t_string_cidrv6,json=tStringCidrv6,proto3" json:"t_string_cidrv6,omitempty"`
	TStringMac             string `protobuf:"bytes,110,opt,name=t_string_mac,json=tStringMac,proto3" json:"t_string_mac,omitempty"`
	TStringTcpAddr         string `protobuf:"bytes,111,opt,name=t_string_tcp_addr,json=tStringTcpAddr,proto3" json:"t_string_tcp_addr,omitempty"`
	TStringTcp4Addr        string `protobuf:"bytes,112,opt,name=t_string_tcp4_addr,json=tStringTcp4Addr,proto3" json:"t_string_tcp4_addr,omitempty"`
	TStringTcp6Addr        string `protobuf:"bytes,113,opt,name=t_string_tcp6_addr,json=tStringTcp6Addr,proto3" json:"t_string_tcp6_addr,omitempty"`
	TStringUdpAddr         string `protobuf:"bytes,114,opt,name=t_string_udp_addr,json=tStringUdpAddr,proto3" json:"t_string_udp_addr,omitempty"`
	TStringUdp4Addr        string `protobuf:"bytes,115,opt,name=t_string_udp4_addr,json=tStringUdp4Addr,proto3" json:"t_string_udp4_addr,omitempty"`
	TStringUdp6Addr        string `protobuf:"bytes,116,opt,name=t_string_udp6_addr,json=tStringUdp6Addr,proto3" json:"t_string_udp6_addr,omitempty"`
	TStringUnixAddr        string `protobuf:"bytes,117,opt,name=t_string_unix_addr,json=tStringUnixAddr,proto3" json:"t_string_unix_addr,omitempty"`
	TStringHostname        string `protobuf:"bytes,118,opt,name=t_string_hostname,json=tStringHostname,proto3" json:"t_string_hostname,omitempty"`
	TStringHostnameRfc1123 string `protobuf:"bytes,119,opt,name=t_string_hostname_rfc1123,json=tStringHostnameRfc1123,proto3" json:"t_string_hostname_rfc1123,omitempty"`
	TStringHostnamePort    string `protobuf:"bytes,120,opt,name=t_string_hostname_port,json=tStringHostnamePort,proto3" json:"t_string_hostname_port,omitempty"`
	TStringDataUri         string `protobuf:"bytes,121,opt,name=t_string_data_uri,json=tStringDataUri,proto3" json:"t_string_data_uri,omitempty"`
	TStringFqdn            string `protobuf:"bytes,122,opt,name=t_string_fqdn,json=tStringFqdn,proto3" json:"t_string_fqdn,omitempty"`
	TStringUri             string `protobuf:"bytes,123,opt,name=t_string_uri,json=tStringUri,proto3" json:"t_string_uri,omitempty"`
	TStringUrl             string `protobuf:"bytes,124,opt,name=t_string_url,json=tStringUrl,proto3" json:"t_string_url,omitempty"`
	TStringUrlEncoded      string `protobuf:"bytes,125,opt,name=t_string_url_encoded,json=tStringUrlEncoded,proto3" json:"t_string_url_encoded,omitempty"`
	TStringUnixCron        string `protobuf:"bytes,141,opt,name=t_string_unix_cron,json=tStringUnixCron,proto3" json:"t_string_unix_cron,omitempty"`
	TStringEmail           string `protobuf:"bytes,126,opt,name=t_string_email,json=tStringEmail,proto3" json:"t_string_email,omitempty"`
	TStringJson            string `protobuf:"bytes,127,opt,name=t_string_json,json=tStringJson,proto3" json:"t_string_json,omitempty"`
	TStringJwt             string `protobuf:"bytes,128,opt,name=t_string_jwt,json=tStringJwt,proto3" json:"t_string_jwt,omitempty"`
	TStringHtml            string `protobuf:"bytes,129,opt,name=t_string_html,json=tStringHtml,proto3" json:"t_string_html,omitempty"`
	TStringHtmlEncoded     string `protobuf:"bytes,130,opt,name=t_string_html_encoded,json=tStringHtmlEncoded,proto3" json:"t_string_html_encoded,omitempty"`
	TStringBase64          string `protobuf:"bytes,131,opt,name=t_string_base64,json=tStringBase64,proto3" json:"t_string_base64,omitempty"`
	TStringBase64Url       string `protobuf:"bytes,132,opt,name=t_string_base64_url,json=tStringBase64Url,proto3" json:"t_string_base64_url,omitempty"`
	TStringHexadecimal     string `protobuf:"bytes,133,opt,name=t_string_hexadecimal,json=tStringHexadecimal,proto3" json:"t_string_hexadecimal,omitempty"`
	TStringDatetime        string `protobuf:"bytes,134,opt,name=t_string_datetime,json=tStringDatetime,proto3" json:"t_string_datetime,omitempty"`
	TStringTimezone        string `protobuf:"bytes,135,opt,name=t_string_timezone,json=tStringTimezone,proto3" json:"t_string_timezone,omitempty"`
	TStringUuid            string `protobuf:"bytes,136,opt,name=t_string_uuid,json=tStringUuid,proto3" json:"t_string_uuid,omitempty"`
	TStringUuid1           string `protobuf:"bytes,137,opt,name=t_string_uuid1,json=tStringUuid1,proto3" json:"t_string_uuid1,omitempty"`
	TStringUuid3           string `protobuf:"bytes,138,opt,name=t_string_uuid3,json=tStringUuid3,proto3" json:"t_string_uuid3,omitempty"`
	TStringUuid4           string `protobuf:"bytes,139,opt,name=t_string_uuid4,json=tStringUuid4,proto3" json:"t_string_uuid4,omitempty"`
	TStringUuid5           string `protobuf:"bytes,140,opt,name=t_string_uuid5,json=tStringUuid5,proto3" json:"t_string_uuid5,omitempty"`
}

func (x *ValidStringTagsGeneral1) Reset() {
	*x = ValidStringTagsGeneral1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidStringTagsGeneral1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidStringTagsGeneral1) ProtoMessage() {}

func (x *ValidStringTagsGeneral1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidStringTagsGeneral1.ProtoReflect.Descriptor instead.
func (*ValidStringTagsGeneral1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{22}
}

func (x *ValidStringTagsGeneral1) GetTString1() string {
	if x != nil {
		return x.TString1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTString2() string {
	if x != nil {
		return x.TString2
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTString3() string {
	if x != nil {
		return x.TString3
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTString4() string {
	if x != nil {
		return x.TString4
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringEq1() string {
	if x != nil {
		return x.TStringEq1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringNe1() string {
	if x != nil {
		return x.TStringNe1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringLt1() string {
	if x != nil {
		return x.TStringLt1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringGt1() string {
	if x != nil {
		return x.TStringGt1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringLte1() string {
	if x != nil {
		return x.TStringLte1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringGte1() string {
	if x != nil {
		return x.TStringGte1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringIn1() string {
	if x != nil {
		return x.TStringIn1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringNotIn1() string {
	if x != nil {
		return x.TStringNotIn1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringCharLenEq1() string {
	if x != nil {
		return x.TStringCharLenEq1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringCharLenNe1() string {
	if x != nil {
		return x.TStringCharLenNe1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringCharLenGt1() string {
	if x != nil {
		return x.TStringCharLenGt1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringCharLenLt1() string {
	if x != nil {
		return x.TStringCharLenLt1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringCharLenGte1() string {
	if x != nil {
		return x.TStringCharLenGte1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringCharLenLte1() string {
	if x != nil {
		return x.TStringCharLenLte1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringByteLenEq1() string {
	if x != nil {
		return x.TStringByteLenEq1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringByteLenNe1() string {
	if x != nil {
		return x.TStringByteLenNe1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringByteLenGt1() string {
	if x != nil {
		return x.TStringByteLenGt1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringByteLenLt1() string {
	if x != nil {
		return x.TStringByteLenLt1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringByteLenGte1() string {
	if x != nil {
		return x.TStringByteLenGte1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringByteLenLte1() string {
	if x != nil {
		return x.TStringByteLenLte1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringRegex1() string {
	if x != nil {
		return x.TStringRegex1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringPrefix1() string {
	if x != nil {
		return x.TStringPrefix1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringNoPrefix1() string {
	if x != nil {
		return x.TStringNoPrefix1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringSuffix1() string {
	if x != nil {
		return x.TStringSuffix1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringNoSuffix1() string {
	if x != nil {
		return x.TStringNoSuffix1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringContains1() string {
	if x != nil {
		return x.TStringContains1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringNoContains1() string {
	if x != nil {
		return x.TStringNoContains1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringContainsAny1() string {
	if x != nil {
		return x.TStringContainsAny1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringNotContainsAny1() string {
	if x != nil {
		return x.TStringNotContainsAny1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUtf8() string {
	if x != nil {
		return x.TStringUtf8
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringAscii() string {
	if x != nil {
		return x.TStringAscii
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringPrintAscii() string {
	if x != nil {
		return x.TStringPrintAscii
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringBoolean() string {
	if x != nil {
		return x.TStringBoolean
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringLowercase() string {
	if x != nil {
		return x.TStringLowercase
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUppercase() string {
	if x != nil {
		return x.TStringUppercase
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringAlpha() string {
	if x != nil {
		return x.TStringAlpha
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringNumber() string {
	if x != nil {
		return x.TStringNumber
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringAlphaNumber() string {
	if x != nil {
		return x.TStringAlphaNumber
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringIp() string {
	if x != nil {
		return x.TStringIp
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringIpv4() string {
	if x != nil {
		return x.TStringIpv4
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringIpv6() string {
	if x != nil {
		return x.TStringIpv6
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringIpAddr() string {
	if x != nil {
		return x.TStringIpAddr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringIp4Addr() string {
	if x != nil {
		return x.TStringIp4Addr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringIp6Addr() string {
	if x != nil {
		return x.TStringIp6Addr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringCidr() string {
	if x != nil {
		return x.TStringCidr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringCidrv4() string {
	if x != nil {
		return x.TStringCidrv4
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringCidrv6() string {
	if x != nil {
		return x.TStringCidrv6
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringMac() string {
	if x != nil {
		return x.TStringMac
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringTcpAddr() string {
	if x != nil {
		return x.TStringTcpAddr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringTcp4Addr() string {
	if x != nil {
		return x.TStringTcp4Addr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringTcp6Addr() string {
	if x != nil {
		return x.TStringTcp6Addr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUdpAddr() string {
	if x != nil {
		return x.TStringUdpAddr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUdp4Addr() string {
	if x != nil {
		return x.TStringUdp4Addr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUdp6Addr() string {
	if x != nil {
		return x.TStringUdp6Addr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUnixAddr() string {
	if x != nil {
		return x.TStringUnixAddr
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringHostname() string {
	if x != nil {
		return x.TStringHostname
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringHostnameRfc1123() string {
	if x != nil {
		return x.TStringHostnameRfc1123
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringHostnamePort() string {
	if x != nil {
		return x.TStringHostnamePort
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringDataUri() string {
	if x != nil {
		return x.TStringDataUri
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringFqdn() string {
	if x != nil {
		return x.TStringFqdn
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUri() string {
	if x != nil {
		return x.TStringUri
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUrl() string {
	if x != nil {
		return x.TStringUrl
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUrlEncoded() string {
	if x != nil {
		return x.TStringUrlEncoded
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUnixCron() string {
	if x != nil {
		return x.TStringUnixCron
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringEmail() string {
	if x != nil {
		return x.TStringEmail
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringJson() string {
	if x != nil {
		return x.TStringJson
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringJwt() string {
	if x != nil {
		return x.TStringJwt
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringHtml() string {
	if x != nil {
		return x.TStringHtml
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringHtmlEncoded() string {
	if x != nil {
		return x.TStringHtmlEncoded
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringBase64() string {
	if x != nil {
		return x.TStringBase64
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringBase64Url() string {
	if x != nil {
		return x.TStringBase64Url
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringHexadecimal() string {
	if x != nil {
		return x.TStringHexadecimal
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringDatetime() string {
	if x != nil {
		return x.TStringDatetime
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringTimezone() string {
	if x != nil {
		return x.TStringTimezone
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUuid() string {
	if x != nil {
		return x.TStringUuid
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUuid1() string {
	if x != nil {
		return x.TStringUuid1
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUuid3() string {
	if x != nil {
		return x.TStringUuid3
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUuid4() string {
	if x != nil {
		return x.TStringUuid4
	}
	return ""
}

func (x *ValidStringTagsGeneral1) GetTStringUuid5() string {
	if x != nil {
		return x.TStringUuid5
	}
	return ""
}

// ValidStringTagsOptional1 for test option tag StringTags with optional field.
type ValidStringTagsOptional1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TString1               *string `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3,oneof" json:"t_string1,omitempty"`
	TString2               *string `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3,oneof" json:"t_string2,omitempty"`
	TString3               *string `protobuf:"bytes,3,opt,name=t_string3,json=tString3,proto3,oneof" json:"t_string3,omitempty"`
	TString4               *string `protobuf:"bytes,4,opt,name=t_string4,json=tString4,proto3,oneof" json:"t_string4,omitempty"`
	TStringEq1             *string `protobuf:"bytes,10,opt,name=t_string_eq1,json=tStringEq1,proto3,oneof" json:"t_string_eq1,omitempty"`
	TStringNe1             *string `protobuf:"bytes,11,opt,name=t_string_ne1,json=tStringNe1,proto3,oneof" json:"t_string_ne1,omitempty"`
	TStringLt1             *string `protobuf:"bytes,12,opt,name=t_string_lt1,json=tStringLt1,proto3,oneof" json:"t_string_lt1,omitempty"`
	TStringGt1             *string `protobuf:"bytes,13,opt,name=t_string_gt1,json=tStringGt1,proto3,oneof" json:"t_string_gt1,omitempty"`
	TStringLte1            *string `protobuf:"bytes,14,opt,name=t_string_lte1,json=tStringLte1,proto3,oneof" json:"t_string_lte1,omitempty"`
	TStringGte1            *string `protobuf:"bytes,15,opt,name=t_string_gte1,json=tStringGte1,proto3,oneof" json:"t_string_gte1,omitempty"`
	TStringIn1             *string `protobuf:"bytes,16,opt,name=t_string_in1,json=tStringIn1,proto3,oneof" json:"t_string_in1,omitempty"`
	TStringNotIn1          *string `protobuf:"bytes,17,opt,name=t_string_not_in1,json=tStringNotIn1,proto3,oneof" json:"t_string_not_in1,omitempty"`
	TStringCharLenEq1      *string `protobuf:"bytes,20,opt,name=t_string_char_len_eq1,json=tStringCharLenEq1,proto3,oneof" json:"t_string_char_len_eq1,omitempty"`
	TStringCharLenNe1      *string `protobuf:"bytes,21,opt,name=t_string_char_len_ne1,json=tStringCharLenNe1,proto3,oneof" json:"t_string_char_len_ne1,omitempty"`
	TStringCharLenGt1      *string `protobuf:"bytes,22,opt,name=t_string_char_len_gt1,json=tStringCharLenGt1,proto3,oneof" json:"t_string_char_len_gt1,omitempty"`
	TStringCharLenLt1      *string `protobuf:"bytes,23,opt,name=t_string_char_len_lt1,json=tStringCharLenLt1,proto3,oneof" json:"t_string_char_len_lt1,omitempty"`
	TStringCharLenGte1     *string `protobuf:"bytes,24,opt,name=t_string_char_len_gte1,json=tStringCharLenGte1,proto3,oneof" json:"t_string_char_len_gte1,omitempty"`
	TStringCharLenLte1     *string `protobuf:"bytes,25,opt,name=t_string_char_len_lte1,json=tStringCharLenLte1,proto3,oneof" json:"t_string_char_len_lte1,omitempty"`
	TStringByteLenEq1      *string `protobuf:"bytes,30,opt,name=t_string_byte_len_eq1,json=tStringByteLenEq1,proto3,oneof" json:"t_string_byte_len_eq1,omitempty"`
	TStringByteLenNe1      *string `protobuf:"bytes,31,opt,name=t_string_byte_len_ne1,json=tStringByteLenNe1,proto3,oneof" json:"t_string_byte_len_ne1,omitempty"`
	TStringByteLenGt1      *string `protobuf:"bytes,32,opt,name=t_string_byte_len_gt1,json=tStringByteLenGt1,proto3,oneof" json:"t_string_byte_len_gt1,omitempty"`
	TStringByteLenLt1      *string `protobuf:"bytes,33,opt,name=t_string_byte_len_lt1,json=tStringByteLenLt1,proto3,oneof" json:"t_string_byte_len_lt1,omitempty"`
	TStringByteLenGte1     *string `protobuf:"bytes,34,opt,name=t_string_byte_len_gte1,json=tStringByteLenGte1,proto3,oneof" json:"t_string_byte_len_gte1,omitempty"`
	TStringByteLenLte1     *string `protobuf:"bytes,35,opt,name=t_string_byte_len_lte1,json=tStringByteLenLte1,proto3,oneof" json:"t_string_byte_len_lte1,omitempty"`
	TStringRegex1          *string `protobuf:"bytes,40,opt,name=t_string_regex1,json=tStringRegex1,proto3,oneof" json:"t_string_regex1,omitempty"`
	TStringPrefix1         *string `protobuf:"bytes,41,opt,name=t_string_prefix1,json=tStringPrefix1,proto3,oneof" json:"t_string_prefix1,omitempty"`
	TStringNoPrefix1       *string `protobuf:"bytes,42,opt,name=t_string_no_prefix1,json=tStringNoPrefix1,proto3,oneof" json:"t_string_no_prefix1,omitempty"`
	TStringSuffix1         *string `protobuf:"bytes,43,opt,name=t_string_suffix1,json=tStringSuffix1,proto3,oneof" json:"t_string_suffix1,omitempty"`
	TStringNoSuffix1       *string `protobuf:"bytes,44,opt,name=t_string_no_suffix1,json=tStringNoSuffix1,proto3,oneof" json:"t_string_no_suffix1,omitempty"`
	TStringContains1       *string `protobuf:"bytes,45,opt,name=t_string_contains1,json=tStringContains1,proto3,oneof" json:"t_string_contains1,omitempty"`
	TStringNoContains1     *string `protobuf:"bytes,46,opt,name=t_string_no_contains1,json=tStringNoContains1,proto3,oneof" json:"t_string_no_contains1,omitempty"`
	TStringContainsAny1    *string `protobuf:"bytes,47,opt,name=t_string_contains_any1,json=tStringContainsAny1,proto3,oneof" json:"t_string_contains_any1,omitempty"`
	TStringNotContainsAny1 *string `protobuf:"bytes,48,opt,name=t_string_not_contains_any1,json=tStringNotContainsAny1,proto3,oneof" json:"t_string_not_contains_any1,omitempty"`
	TStringUtf8            *string `protobuf:"bytes,81,opt,name=t_string_utf8,json=tStringUtf8,proto3,oneof" json:"t_string_utf8,omitempty"`
	TStringAscii           *string `protobuf:"bytes,71,opt,name=t_string_ascii,json=tStringAscii,proto3,oneof" json:"t_string_ascii,omitempty"`
	TStringPrintAscii      *string `protobuf:"bytes,72,opt,name=t_string_print_ascii,json=tStringPrintAscii,proto3,oneof" json:"t_string_print_ascii,omitempty"`
	TStringBoolean         *string `protobuf:"bytes,73,opt,name=t_string_boolean,json=tStringBoolean,proto3,oneof" json:"t_string_boolean,omitempty"`
	TStringLowercase       *string `protobuf:"bytes,74,opt,name=t_string_lowercase,json=tStringLowercase,proto3,oneof" json:"t_string_lowercase,omitempty"`
	TStringUppercase       *string `protobuf:"bytes,75,opt,name=t_string_uppercase,json=tStringUppercase,proto3,oneof" json:"t_string_uppercase,omitempty"`
	TStringAlpha           *string `protobuf:"bytes,76,opt,name=t_string_alpha,json=tStringAlpha,proto3,oneof" json:"t_string_alpha,omitempty"`
	TStringNumber          *string `protobuf:"bytes,77,opt,name=t_string_number,json=tStringNumber,proto3,oneof" json:"t_string_number,omitempty"`
	TStringAlphaNumber     *string `protobuf:"bytes,78,opt,name=t_string_alpha_number,json=tStringAlphaNumber,proto3,oneof" json:"t_string_alpha_number,omitempty"`
	TStringIp              *string `protobuf:"bytes,101,opt,name=t_string_ip,json=tStringIp,proto3,oneof" json:"t_string_ip,omitempty"`
	TStringIpv4            *string `protobuf:"bytes,102,opt,name=t_string_ipv4,json=tStringIpv4,proto3,oneof" json:"t_string_ipv4,omitempty"`
	TStringIpv6            *string `protobuf:"bytes,103,opt,name=t_string_ipv6,json=tStringIpv6,proto3,oneof" json:"t_string_ipv6,omitempty"`
	TStringIpAddr          *string `protobuf:"bytes,104,opt,name=t_string_ip_addr,json=tStringIpAddr,proto3,oneof" json:"t_string_ip_addr,omitempty"`
	TStringIp4Addr         *string `protobuf:"bytes,105,opt,name=t_string_ip4_addr,json=tStringIp4Addr,proto3,oneof" json:"t_string_ip4_addr,omitempty"`
	TStringIp6Addr         *string `protobuf:"bytes,106,opt,name=t_string_ip6_addr,json=tStringIp6Addr,proto3,oneof" json:"t_string_ip6_addr,omitempty"`
	TStringCidr            *string `protobuf:"bytes,107,opt,name=t_string_cidr,json=tStringCidr,proto3,oneof" json:"t_string_cidr,omitempty"`
	TStringCidrv4          *string `protobuf:"bytes,108,opt,name=t_string_cidrv4,json=tStringCidrv4,proto3,oneof" json:"t_string_cidrv4,omitempty"`
	TStringCidrv6          *string `protobuf:"bytes,109,opt,name=t_string_cidrv6,json=tStringCidrv6,proto3,oneof" json:"t_string_cidrv6,omitempty"`
	TStringMac             *string `protobuf:"bytes,110,opt,name=t_string_mac,json=tStringMac,proto3,oneof" json:"t_string_mac,omitempty"`
	TStringTcpAddr         *string `protobuf:"bytes,111,opt,name=t_string_tcp_addr,json=tStringTcpAddr,proto3,oneof" json:"t_string_tcp_addr,omitempty"`
	TStringTcp4Addr        *string `protobuf:"bytes,112,opt,name=t_string_tcp4_addr,json=tStringTcp4Addr,proto3,oneof" json:"t_string_tcp4_addr,omitempty"`
	TStringTcp6Addr        *string `protobuf:"bytes,113,opt,name=t_string_tcp6_addr,json=tStringTcp6Addr,proto3,oneof" json:"t_string_tcp6_addr,omitempty"`
	TStringUdpAddr         *string `protobuf:"bytes,114,opt,name=t_string_udp_addr,json=tStringUdpAddr,proto3,oneof" json:"t_string_udp_addr,omitempty"`
	TStringUdp4Addr        *string `protobuf:"bytes,115,opt,name=t_string_udp4_addr,json=tStringUdp4Addr,proto3,oneof" json:"t_string_udp4_addr,omitempty"`
	TStringUdp6Addr        *string `protobuf:"bytes,116,opt,name=t_string_udp6_addr,json=tStringUdp6Addr,proto3,oneof" json:"t_string_udp6_addr,omitempty"`
	TStringUnixAddr        *string `protobuf:"bytes,117,opt,name=t_string_unix_addr,json=tStringUnixAddr,proto3,oneof" json:"t_string_unix_addr,omitempty"`
	TStringHostname        *string `protobuf:"bytes,118,opt,name=t_string_hostname,json=tStringHostname,proto3,oneof" json:"t_string_hostname,omitempty"`
	TStringHostnameRfc1123 *string `protobuf:"bytes,119,opt,name=t_string_hostname_rfc1123,json=tStringHostnameRfc1123,proto3,oneof" json:"t_string_hostname_rfc1123,omitempty"`
	TStringHostnamePort    *string `protobuf:"bytes,120,opt,name=t_string_hostname_port,json=tStringHostnamePort,proto3,oneof" json:"t_string_hostname_port,omitempty"`
	TStringDataUri         *string `protobuf:"bytes,121,opt,name=t_string_data_uri,json=tStringDataUri,proto3,oneof" json:"t_string_data_uri,omitempty"`
	TStringFqdn            *string `protobuf:"bytes,122,opt,name=t_string_fqdn,json=tStringFqdn,proto3,oneof" json:"t_string_fqdn,omitempty"`
	TStringUri             *string `protobuf:"bytes,123,opt,name=t_string_uri,json=tStringUri,proto3,oneof" json:"t_string_uri,omitempty"`
	TStringUrl             *string `protobuf:"bytes,124,opt,name=t_string_url,json=tStringUrl,proto3,oneof" json:"t_string_url,omitempty"`
	TStringUrlEncoded      *string `protobuf:"bytes,125,opt,name=t_string_url_encoded,json=tStringUrlEncoded,proto3,oneof" json:"t_string_url_encoded,omitempty"`
	TStringUnixCron        *string `protobuf:"bytes,141,opt,name=t_string_unix_cron,json=tStringUnixCron,proto3,oneof" json:"t_string_unix_cron,omitempty"`
	TStringEmail           *string `protobuf:"bytes,126,opt,name=t_string_email,json=tStringEmail,proto3,oneof" json:"t_string_email,omitempty"`
	TStringJson            *string `protobuf:"bytes,127,opt,name=t_string_json,json=tStringJson,proto3,oneof" json:"t_string_json,omitempty"`
	TStringJwt             *string `protobuf:"bytes,128,opt,name=t_string_jwt,json=tStringJwt,proto3,oneof" json:"t_string_jwt,omitempty"`
	TStringHtml            *string `protobuf:"bytes,129,opt,name=t_string_html,json=tStringHtml,proto3,oneof" json:"t_string_html,omitempty"`
	TStringHtmlEncoded     *string `protobuf:"bytes,130,opt,name=t_string_html_encoded,json=tStringHtmlEncoded,proto3,oneof" json:"t_string_html_encoded,omitempty"`
	TStringBase64          *string `protobuf:"bytes,131,opt,name=t_string_base64,json=tStringBase64,proto3,oneof" json:"t_string_base64,omitempty"`
	TStringBase64Url       *string `protobuf:"bytes,132,opt,name=t_string_base64_url,json=tStringBase64Url,proto3,oneof" json:"t_string_base64_url,omitempty"`
	TStringHexadecimal     *string `protobuf:"bytes,133,opt,name=t_string_hexadecimal,json=tStringHexadecimal,proto3,oneof" json:"t_string_hexadecimal,omitempty"`
	TStringDatetime        *string `protobuf:"bytes,134,opt,name=t_string_datetime,json=tStringDatetime,proto3,oneof" json:"t_string_datetime,omitempty"`
	TStringTimezone        *string `protobuf:"bytes,135,opt,name=t_string_timezone,json=tStringTimezone,proto3,oneof" json:"t_string_timezone,omitempty"`
	TStringUuid            *string `protobuf:"bytes,136,opt,name=t_string_uuid,json=tStringUuid,proto3,oneof" json:"t_string_uuid,omitempty"`
	TStringUuid1           *string `protobuf:"bytes,137,opt,name=t_string_uuid1,json=tStringUuid1,proto3,oneof" json:"t_string_uuid1,omitempty"`
	TStringUuid3           *string `protobuf:"bytes,138,opt,name=t_string_uuid3,json=tStringUuid3,proto3,oneof" json:"t_string_uuid3,omitempty"`
	TStringUuid4           *string `protobuf:"bytes,139,opt,name=t_string_uuid4,json=tStringUuid4,proto3,oneof" json:"t_string_uuid4,omitempty"`
	TStringUuid5           *string `protobuf:"bytes,140,opt,name=t_string_uuid5,json=tStringUuid5,proto3,oneof" json:"t_string_uuid5,omitempty"`
}

func (x *ValidStringTagsOptional1) Reset() {
	*x = ValidStringTagsOptional1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidStringTagsOptional1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidStringTagsOptional1) ProtoMessage() {}

func (x *ValidStringTagsOptional1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidStringTagsOptional1.ProtoReflect.Descriptor instead.
func (*ValidStringTagsOptional1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{23}
}

func (x *ValidStringTagsOptional1) GetTString1() string {
	if x != nil && x.TString1 != nil {
		return *x.TString1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTString2() string {
	if x != nil && x.TString2 != nil {
		return *x.TString2
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTString3() string {
	if x != nil && x.TString3 != nil {
		return *x.TString3
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTString4() string {
	if x != nil && x.TString4 != nil {
		return *x.TString4
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringEq1() string {
	if x != nil && x.TStringEq1 != nil {
		return *x.TStringEq1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringNe1() string {
	if x != nil && x.TStringNe1 != nil {
		return *x.TStringNe1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringLt1() string {
	if x != nil && x.TStringLt1 != nil {
		return *x.TStringLt1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringGt1() string {
	if x != nil && x.TStringGt1 != nil {
		return *x.TStringGt1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringLte1() string {
	if x != nil && x.TStringLte1 != nil {
		return *x.TStringLte1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringGte1() string {
	if x != nil && x.TStringGte1 != nil {
		return *x.TStringGte1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringIn1() string {
	if x != nil && x.TStringIn1 != nil {
		return *x.TStringIn1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringNotIn1() string {
	if x != nil && x.TStringNotIn1 != nil {
		return *x.TStringNotIn1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringCharLenEq1() string {
	if x != nil && x.TStringCharLenEq1 != nil {
		return *x.TStringCharLenEq1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringCharLenNe1() string {
	if x != nil && x.TStringCharLenNe1 != nil {
		return *x.TStringCharLenNe1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringCharLenGt1() string {
	if x != nil && x.TStringCharLenGt1 != nil {
		return *x.TStringCharLenGt1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringCharLenLt1() string {
	if x != nil && x.TStringCharLenLt1 != nil {
		return *x.TStringCharLenLt1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringCharLenGte1() string {
	if x != nil && x.TStringCharLenGte1 != nil {
		return *x.TStringCharLenGte1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringCharLenLte1() string {
	if x != nil && x.TStringCharLenLte1 != nil {
		return *x.TStringCharLenLte1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringByteLenEq1() string {
	if x != nil && x.TStringByteLenEq1 != nil {
		return *x.TStringByteLenEq1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringByteLenNe1() string {
	if x != nil && x.TStringByteLenNe1 != nil {
		return *x.TStringByteLenNe1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringByteLenGt1() string {
	if x != nil && x.TStringByteLenGt1 != nil {
		return *x.TStringByteLenGt1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringByteLenLt1() string {
	if x != nil && x.TStringByteLenLt1 != nil {
		return *x.TStringByteLenLt1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringByteLenGte1() string {
	if x != nil && x.TStringByteLenGte1 != nil {
		return *x.TStringByteLenGte1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringByteLenLte1() string {
	if x != nil && x.TStringByteLenLte1 != nil {
		return *x.TStringByteLenLte1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringRegex1() string {
	if x != nil && x.TStringRegex1 != nil {
		return *x.TStringRegex1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringPrefix1() string {
	if x != nil && x.TStringPrefix1 != nil {
		return *x.TStringPrefix1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringNoPrefix1() string {
	if x != nil && x.TStringNoPrefix1 != nil {
		return *x.TStringNoPrefix1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringSuffix1() string {
	if x != nil && x.TStringSuffix1 != nil {
		return *x.TStringSuffix1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringNoSuffix1() string {
	if x != nil && x.TStringNoSuffix1 != nil {
		return *x.TStringNoSuffix1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringContains1() string {
	if x != nil && x.TStringContains1 != nil {
		return *x.TStringContains1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringNoContains1() string {
	if x != nil && x.TStringNoContains1 != nil {
		return *x.TStringNoContains1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringContainsAny1() string {
	if x != nil && x.TStringContainsAny1 != nil {
		return *x.TStringContainsAny1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringNotContainsAny1() string {
	if x != nil && x.TStringNotContainsAny1 != nil {
		return *x.TStringNotContainsAny1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUtf8() string {
	if x != nil && x.TStringUtf8 != nil {
		return *x.TStringUtf8
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringAscii() string {
	if x != nil && x.TStringAscii != nil {
		return *x.TStringAscii
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringPrintAscii() string {
	if x != nil && x.TStringPrintAscii != nil {
		return *x.TStringPrintAscii
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringBoolean() string {
	if x != nil && x.TStringBoolean != nil {
		return *x.TStringBoolean
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringLowercase() string {
	if x != nil && x.TStringLowercase != nil {
		return *x.TStringLowercase
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUppercase() string {
	if x != nil && x.TStringUppercase != nil {
		return *x.TStringUppercase
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringAlpha() string {
	if x != nil && x.TStringAlpha != nil {
		return *x.TStringAlpha
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringNumber() string {
	if x != nil && x.TStringNumber != nil {
		return *x.TStringNumber
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringAlphaNumber() string {
	if x != nil && x.TStringAlphaNumber != nil {
		return *x.TStringAlphaNumber
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringIp() string {
	if x != nil && x.TStringIp != nil {
		return *x.TStringIp
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringIpv4() string {
	if x != nil && x.TStringIpv4 != nil {
		return *x.TStringIpv4
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringIpv6() string {
	if x != nil && x.TStringIpv6 != nil {
		return *x.TStringIpv6
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringIpAddr() string {
	if x != nil && x.TStringIpAddr != nil {
		return *x.TStringIpAddr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringIp4Addr() string {
	if x != nil && x.TStringIp4Addr != nil {
		return *x.TStringIp4Addr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringIp6Addr() string {
	if x != nil && x.TStringIp6Addr != nil {
		return *x.TStringIp6Addr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringCidr() string {
	if x != nil && x.TStringCidr != nil {
		return *x.TStringCidr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringCidrv4() string {
	if x != nil && x.TStringCidrv4 != nil {
		return *x.TStringCidrv4
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringCidrv6() string {
	if x != nil && x.TStringCidrv6 != nil {
		return *x.TStringCidrv6
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringMac() string {
	if x != nil && x.TStringMac != nil {
		return *x.TStringMac
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringTcpAddr() string {
	if x != nil && x.TStringTcpAddr != nil {
		return *x.TStringTcpAddr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringTcp4Addr() string {
	if x != nil && x.TStringTcp4Addr != nil {
		return *x.TStringTcp4Addr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringTcp6Addr() string {
	if x != nil && x.TStringTcp6Addr != nil {
		return *x.TStringTcp6Addr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUdpAddr() string {
	if x != nil && x.TStringUdpAddr != nil {
		return *x.TStringUdpAddr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUdp4Addr() string {
	if x != nil && x.TStringUdp4Addr != nil {
		return *x.TStringUdp4Addr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUdp6Addr() string {
	if x != nil && x.TStringUdp6Addr != nil {
		return *x.TStringUdp6Addr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUnixAddr() string {
	if x != nil && x.TStringUnixAddr != nil {
		return *x.TStringUnixAddr
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringHostname() string {
	if x != nil && x.TStringHostname != nil {
		return *x.TStringHostname
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringHostnameRfc1123() string {
	if x != nil && x.TStringHostnameRfc1123 != nil {
		return *x.TStringHostnameRfc1123
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringHostnamePort() string {
	if x != nil && x.TStringHostnamePort != nil {
		return *x.TStringHostnamePort
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringDataUri() string {
	if x != nil && x.TStringDataUri != nil {
		return *x.TStringDataUri
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringFqdn() string {
	if x != nil && x.TStringFqdn != nil {
		return *x.TStringFqdn
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUri() string {
	if x != nil && x.TStringUri != nil {
		return *x.TStringUri
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUrl() string {
	if x != nil && x.TStringUrl != nil {
		return *x.TStringUrl
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUrlEncoded() string {
	if x != nil && x.TStringUrlEncoded != nil {
		return *x.TStringUrlEncoded
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUnixCron() string {
	if x != nil && x.TStringUnixCron != nil {
		return *x.TStringUnixCron
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringEmail() string {
	if x != nil && x.TStringEmail != nil {
		return *x.TStringEmail
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringJson() string {
	if x != nil && x.TStringJson != nil {
		return *x.TStringJson
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringJwt() string {
	if x != nil && x.TStringJwt != nil {
		return *x.TStringJwt
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringHtml() string {
	if x != nil && x.TStringHtml != nil {
		return *x.TStringHtml
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringHtmlEncoded() string {
	if x != nil && x.TStringHtmlEncoded != nil {
		return *x.TStringHtmlEncoded
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringBase64() string {
	if x != nil && x.TStringBase64 != nil {
		return *x.TStringBase64
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringBase64Url() string {
	if x != nil && x.TStringBase64Url != nil {
		return *x.TStringBase64Url
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringHexadecimal() string {
	if x != nil && x.TStringHexadecimal != nil {
		return *x.TStringHexadecimal
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringDatetime() string {
	if x != nil && x.TStringDatetime != nil {
		return *x.TStringDatetime
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringTimezone() string {
	if x != nil && x.TStringTimezone != nil {
		return *x.TStringTimezone
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUuid() string {
	if x != nil && x.TStringUuid != nil {
		return *x.TStringUuid
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUuid1() string {
	if x != nil && x.TStringUuid1 != nil {
		return *x.TStringUuid1
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUuid3() string {
	if x != nil && x.TStringUuid3 != nil {
		return *x.TStringUuid3
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUuid4() string {
	if x != nil && x.TStringUuid4 != nil {
		return *x.TStringUuid4
	}
	return ""
}

func (x *ValidStringTagsOptional1) GetTStringUuid5() string {
	if x != nil && x.TStringUuid5 != nil {
		return *x.TStringUuid5
	}
	return ""
}

// ValidStringTagsOneOf1 for test option tag StringTags with oneof field.
type ValidStringTagsOneOf1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneTyp1:
	//	*ValidStringTagsOneOf1_TString1
	//	*ValidStringTagsOneOf1_TString2
	//	*ValidStringTagsOneOf1_TString3
	//	*ValidStringTagsOneOf1_TString4
	//	*ValidStringTagsOneOf1_TStringEq1
	//	*ValidStringTagsOneOf1_TStringNe1
	//	*ValidStringTagsOneOf1_TStringLt1
	//	*ValidStringTagsOneOf1_TStringGt1
	//	*ValidStringTagsOneOf1_TStringLte1
	//	*ValidStringTagsOneOf1_TStringGte1
	//	*ValidStringTagsOneOf1_TStringIn1
	//	*ValidStringTagsOneOf1_TStringNotIn1
	//	*ValidStringTagsOneOf1_TStringCharLenEq1
	//	*ValidStringTagsOneOf1_TStringCharLenNe1
	//	*ValidStringTagsOneOf1_TStringCharLenGt1
	//	*ValidStringTagsOneOf1_TStringCharLenLt1
	//	*ValidStringTagsOneOf1_TStringCharLenGte1
	//	*ValidStringTagsOneOf1_TStringCharLenLte1
	//	*ValidStringTagsOneOf1_TStringByteLenEq1
	//	*ValidStringTagsOneOf1_TStringByteLenNe1
	//	*ValidStringTagsOneOf1_TStringByteLenGt1
	//	*ValidStringTagsOneOf1_TStringByteLenLt1
	//	*ValidStringTagsOneOf1_TStringByteLenGte1
	//	*ValidStringTagsOneOf1_TStringByteLenLte1
	//	*ValidStringTagsOneOf1_TStringRegex1
	//	*ValidStringTagsOneOf1_TStringPrefix1
	//	*ValidStringTagsOneOf1_TStringNoPrefix1
	//	*ValidStringTagsOneOf1_TStringSuffix1
	//	*ValidStringTagsOneOf1_TStringNoSuffix1
	//	*ValidStringTagsOneOf1_TStringContains1
	//	*ValidStringTagsOneOf1_TStringNoContains1
	//	*ValidStringTagsOneOf1_TStringContainsAny1
	//	*ValidStringTagsOneOf1_TStringNotContainsAny1
	//	*ValidStringTagsOneOf1_TStringUtf8
	//	*ValidStringTagsOneOf1_TStringAscii
	//	*ValidStringTagsOneOf1_TStringPrintAscii
	//	*ValidStringTagsOneOf1_TStringBoolean
	//	*ValidStringTagsOneOf1_TStringLowercase
	//	*ValidStringTagsOneOf1_TStringUppercase
	//	*ValidStringTagsOneOf1_TStringAlpha
	//	*ValidStringTagsOneOf1_TStringNumber
	//	*ValidStringTagsOneOf1_TStringAlphaNumber
	//	*ValidStringTagsOneOf1_TStringIp
	//	*ValidStringTagsOneOf1_TStringIpv4
	//	*ValidStringTagsOneOf1_TStringIpv6
	//	*ValidStringTagsOneOf1_TStringIpAddr
	//	*ValidStringTagsOneOf1_TStringIp4Addr
	//	*ValidStringTagsOneOf1_TStringIp6Addr
	//	*ValidStringTagsOneOf1_TStringCidr
	//	*ValidStringTagsOneOf1_TStringCidrv4
	//	*ValidStringTagsOneOf1_TStringCidrv6
	//	*ValidStringTagsOneOf1_TStringMac
	//	*ValidStringTagsOneOf1_TStringTcpAddr
	//	*ValidStringTagsOneOf1_TStringTcp4Addr
	//	*ValidStringTagsOneOf1_TStringTcp6Addr
	//	*ValidStringTagsOneOf1_TStringUdpAddr
	//	*ValidStringTagsOneOf1_TStringUdp4Addr
	//	*ValidStringTagsOneOf1_TStringUdp6Addr
	//	*ValidStringTagsOneOf1_TStringUnixAddr
	//	*ValidStringTagsOneOf1_TStringHostname
	//	*ValidStringTagsOneOf1_TStringHostnameRfc1123
	//	*ValidStringTagsOneOf1_TStringHostnamePort
	//	*ValidStringTagsOneOf1_TStringDataUri
	//	*ValidStringTagsOneOf1_TStringFqdn
	//	*ValidStringTagsOneOf1_TStringUri
	//	*ValidStringTagsOneOf1_TStringUrl
	//	*ValidStringTagsOneOf1_TStringUrlEncoded
	//	*ValidStringTagsOneOf1_TStringUnixCron
	//	*ValidStringTagsOneOf1_TStringEmail
	//	*ValidStringTagsOneOf1_TStringJson
	//	*ValidStringTagsOneOf1_TStringJwt
	//	*ValidStringTagsOneOf1_TStringHtml
	//	*ValidStringTagsOneOf1_TStringHtmlEncoded
	//	*ValidStringTagsOneOf1_TStringBase64
	//	*ValidStringTagsOneOf1_TStringBase64Url
	//	*ValidStringTagsOneOf1_TStringHexadecimal
	//	*ValidStringTagsOneOf1_TStringDatetime
	//	*ValidStringTagsOneOf1_TStringTimezone
	//	*ValidStringTagsOneOf1_TStringUuid
	//	*ValidStringTagsOneOf1_TStringUuid1
	//	*ValidStringTagsOneOf1_TStringUuid3
	//	*ValidStringTagsOneOf1_TStringUuid4
	//	*ValidStringTagsOneOf1_TStringUuid5
	OneTyp1 isValidStringTagsOneOf1_OneTyp1 `protobuf_oneof:"one_typ1"`
}

func (x *ValidStringTagsOneOf1) Reset() {
	*x = ValidStringTagsOneOf1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidStringTagsOneOf1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidStringTagsOneOf1) ProtoMessage() {}

func (x *ValidStringTagsOneOf1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidStringTagsOneOf1.ProtoReflect.Descriptor instead.
func (*ValidStringTagsOneOf1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{24}
}

func (m *ValidStringTagsOneOf1) GetOneTyp1() isValidStringTagsOneOf1_OneTyp1 {
	if m != nil {
		return m.OneTyp1
	}
	return nil
}

func (x *ValidStringTagsOneOf1) GetTString1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TString1); ok {
		return x.TString1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTString2() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TString2); ok {
		return x.TString2
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTString3() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TString3); ok {
		return x.TString3
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTString4() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TString4); ok {
		return x.TString4
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringEq1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringEq1); ok {
		return x.TStringEq1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringNe1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringNe1); ok {
		return x.TStringNe1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringLt1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringLt1); ok {
		return x.TStringLt1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringGt1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringGt1); ok {
		return x.TStringGt1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringLte1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringLte1); ok {
		return x.TStringLte1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringGte1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringGte1); ok {
		return x.TStringGte1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringIn1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringIn1); ok {
		return x.TStringIn1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringNotIn1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringNotIn1); ok {
		return x.TStringNotIn1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringCharLenEq1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringCharLenEq1); ok {
		return x.TStringCharLenEq1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringCharLenNe1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringCharLenNe1); ok {
		return x.TStringCharLenNe1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringCharLenGt1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringCharLenGt1); ok {
		return x.TStringCharLenGt1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringCharLenLt1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringCharLenLt1); ok {
		return x.TStringCharLenLt1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringCharLenGte1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringCharLenGte1); ok {
		return x.TStringCharLenGte1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringCharLenLte1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringCharLenLte1); ok {
		return x.TStringCharLenLte1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringByteLenEq1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringByteLenEq1); ok {
		return x.TStringByteLenEq1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringByteLenNe1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringByteLenNe1); ok {
		return x.TStringByteLenNe1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringByteLenGt1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringByteLenGt1); ok {
		return x.TStringByteLenGt1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringByteLenLt1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringByteLenLt1); ok {
		return x.TStringByteLenLt1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringByteLenGte1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringByteLenGte1); ok {
		return x.TStringByteLenGte1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringByteLenLte1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringByteLenLte1); ok {
		return x.TStringByteLenLte1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringRegex1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringRegex1); ok {
		return x.TStringRegex1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringPrefix1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringPrefix1); ok {
		return x.TStringPrefix1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringNoPrefix1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringNoPrefix1); ok {
		return x.TStringNoPrefix1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringSuffix1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringSuffix1); ok {
		return x.TStringSuffix1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringNoSuffix1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringNoSuffix1); ok {
		return x.TStringNoSuffix1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringContains1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringContains1); ok {
		return x.TStringContains1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringNoContains1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringNoContains1); ok {
		return x.TStringNoContains1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringContainsAny1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringContainsAny1); ok {
		return x.TStringContainsAny1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringNotContainsAny1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringNotContainsAny1); ok {
		return x.TStringNotContainsAny1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUtf8() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUtf8); ok {
		return x.TStringUtf8
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringAscii() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringAscii); ok {
		return x.TStringAscii
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringPrintAscii() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringPrintAscii); ok {
		return x.TStringPrintAscii
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringBoolean() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringBoolean); ok {
		return x.TStringBoolean
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringLowercase() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringLowercase); ok {
		return x.TStringLowercase
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUppercase() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUppercase); ok {
		return x.TStringUppercase
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringAlpha() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringAlpha); ok {
		return x.TStringAlpha
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringNumber() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringNumber); ok {
		return x.TStringNumber
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringAlphaNumber() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringAlphaNumber); ok {
		return x.TStringAlphaNumber
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringIp() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringIp); ok {
		return x.TStringIp
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringIpv4() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringIpv4); ok {
		return x.TStringIpv4
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringIpv6() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringIpv6); ok {
		return x.TStringIpv6
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringIpAddr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringIpAddr); ok {
		return x.TStringIpAddr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringIp4Addr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringIp4Addr); ok {
		return x.TStringIp4Addr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringIp6Addr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringIp6Addr); ok {
		return x.TStringIp6Addr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringCidr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringCidr); ok {
		return x.TStringCidr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringCidrv4() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringCidrv4); ok {
		return x.TStringCidrv4
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringCidrv6() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringCidrv6); ok {
		return x.TStringCidrv6
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringMac() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringMac); ok {
		return x.TStringMac
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringTcpAddr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringTcpAddr); ok {
		return x.TStringTcpAddr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringTcp4Addr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringTcp4Addr); ok {
		return x.TStringTcp4Addr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringTcp6Addr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringTcp6Addr); ok {
		return x.TStringTcp6Addr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUdpAddr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUdpAddr); ok {
		return x.TStringUdpAddr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUdp4Addr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUdp4Addr); ok {
		return x.TStringUdp4Addr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUdp6Addr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUdp6Addr); ok {
		return x.TStringUdp6Addr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUnixAddr() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUnixAddr); ok {
		return x.TStringUnixAddr
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringHostname() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringHostname); ok {
		return x.TStringHostname
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringHostnameRfc1123() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringHostnameRfc1123); ok {
		return x.TStringHostnameRfc1123
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringHostnamePort() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringHostnamePort); ok {
		return x.TStringHostnamePort
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringDataUri() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringDataUri); ok {
		return x.TStringDataUri
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringFqdn() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringFqdn); ok {
		return x.TStringFqdn
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUri() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUri); ok {
		return x.TStringUri
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUrl() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUrl); ok {
		return x.TStringUrl
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUrlEncoded() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUrlEncoded); ok {
		return x.TStringUrlEncoded
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUnixCron() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUnixCron); ok {
		return x.TStringUnixCron
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringEmail() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringEmail); ok {
		return x.TStringEmail
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringJson() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringJson); ok {
		return x.TStringJson
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringJwt() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringJwt); ok {
		return x.TStringJwt
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringHtml() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringHtml); ok {
		return x.TStringHtml
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringHtmlEncoded() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringHtmlEncoded); ok {
		return x.TStringHtmlEncoded
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringBase64() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringBase64); ok {
		return x.TStringBase64
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringBase64Url() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringBase64Url); ok {
		return x.TStringBase64Url
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringHexadecimal() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringHexadecimal); ok {
		return x.TStringHexadecimal
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringDatetime() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringDatetime); ok {
		return x.TStringDatetime
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringTimezone() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringTimezone); ok {
		return x.TStringTimezone
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUuid() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUuid); ok {
		return x.TStringUuid
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUuid1() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUuid1); ok {
		return x.TStringUuid1
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUuid3() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUuid3); ok {
		return x.TStringUuid3
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUuid4() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUuid4); ok {
		return x.TStringUuid4
	}
	return ""
}

func (x *ValidStringTagsOneOf1) GetTStringUuid5() string {
	if x, ok := x.GetOneTyp1().(*ValidStringTagsOneOf1_TStringUuid5); ok {
		return x.TStringUuid5
	}
	return ""
}

type isValidStringTagsOneOf1_OneTyp1 interface {
	isValidStringTagsOneOf1_OneTyp1()
}

type ValidStringTagsOneOf1_TString1 struct {
	TString1 string `protobuf:"bytes,1,opt,name=t_string1,json=tString1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TString2 struct {
	TString2 string `protobuf:"bytes,2,opt,name=t_string2,json=tString2,proto3,oneof"`
}

type ValidStringTagsOneOf1_TString3 struct {
	TString3 string `protobuf:"bytes,3,opt,name=t_string3,json=tString3,proto3,oneof"`
}

type ValidStringTagsOneOf1_TString4 struct {
	TString4 string `protobuf:"bytes,4,opt,name=t_string4,json=tString4,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringEq1 struct {
	TStringEq1 string `protobuf:"bytes,10,opt,name=t_string_eq1,json=tStringEq1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringNe1 struct {
	TStringNe1 string `protobuf:"bytes,11,opt,name=t_string_ne1,json=tStringNe1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringLt1 struct {
	TStringLt1 string `protobuf:"bytes,12,opt,name=t_string_lt1,json=tStringLt1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringGt1 struct {
	TStringGt1 string `protobuf:"bytes,13,opt,name=t_string_gt1,json=tStringGt1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringLte1 struct {
	TStringLte1 string `protobuf:"bytes,14,opt,name=t_string_lte1,json=tStringLte1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringGte1 struct {
	TStringGte1 string `protobuf:"bytes,15,opt,name=t_string_gte1,json=tStringGte1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringIn1 struct {
	TStringIn1 string `protobuf:"bytes,16,opt,name=t_string_in1,json=tStringIn1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringNotIn1 struct {
	TStringNotIn1 string `protobuf:"bytes,17,opt,name=t_string_not_in1,json=tStringNotIn1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringCharLenEq1 struct {
	TStringCharLenEq1 string `protobuf:"bytes,20,opt,name=t_string_char_len_eq1,json=tStringCharLenEq1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringCharLenNe1 struct {
	TStringCharLenNe1 string `protobuf:"bytes,21,opt,name=t_string_char_len_ne1,json=tStringCharLenNe1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringCharLenGt1 struct {
	TStringCharLenGt1 string `protobuf:"bytes,22,opt,name=t_string_char_len_gt1,json=tStringCharLenGt1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringCharLenLt1 struct {
	TStringCharLenLt1 string `protobuf:"bytes,23,opt,name=t_string_char_len_lt1,json=tStringCharLenLt1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringCharLenGte1 struct {
	TStringCharLenGte1 string `protobuf:"bytes,24,opt,name=t_string_char_len_gte1,json=tStringCharLenGte1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringCharLenLte1 struct {
	TStringCharLenLte1 string `protobuf:"bytes,25,opt,name=t_string_char_len_lte1,json=tStringCharLenLte1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringByteLenEq1 struct {
	TStringByteLenEq1 string `protobuf:"bytes,30,opt,name=t_string_byte_len_eq1,json=tStringByteLenEq1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringByteLenNe1 struct {
	TStringByteLenNe1 string `protobuf:"bytes,31,opt,name=t_string_byte_len_ne1,json=tStringByteLenNe1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringByteLenGt1 struct {
	TStringByteLenGt1 string `protobuf:"bytes,32,opt,name=t_string_byte_len_gt1,json=tStringByteLenGt1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringByteLenLt1 struct {
	TStringByteLenLt1 string `protobuf:"bytes,33,opt,name=t_string_byte_len_lt1,json=tStringByteLenLt1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringByteLenGte1 struct {
	TStringByteLenGte1 string `protobuf:"bytes,34,opt,name=t_string_byte_len_gte1,json=tStringByteLenGte1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringByteLenLte1 struct {
	TStringByteLenLte1 string `protobuf:"bytes,35,opt,name=t_string_byte_len_lte1,json=tStringByteLenLte1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringRegex1 struct {
	TStringRegex1 string `protobuf:"bytes,40,opt,name=t_string_regex1,json=tStringRegex1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringPrefix1 struct {
	TStringPrefix1 string `protobuf:"bytes,41,opt,name=t_string_prefix1,json=tStringPrefix1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringNoPrefix1 struct {
	TStringNoPrefix1 string `protobuf:"bytes,42,opt,name=t_string_no_prefix1,json=tStringNoPrefix1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringSuffix1 struct {
	TStringSuffix1 string `protobuf:"bytes,43,opt,name=t_string_suffix1,json=tStringSuffix1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringNoSuffix1 struct {
	TStringNoSuffix1 string `protobuf:"bytes,44,opt,name=t_string_no_suffix1,json=tStringNoSuffix1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringContains1 struct {
	TStringContains1 string `protobuf:"bytes,45,opt,name=t_string_contains1,json=tStringContains1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringNoContains1 struct {
	TStringNoContains1 string `protobuf:"bytes,46,opt,name=t_string_no_contains1,json=tStringNoContains1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringContainsAny1 struct {
	TStringContainsAny1 string `protobuf:"bytes,47,opt,name=t_string_contains_any1,json=tStringContainsAny1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringNotContainsAny1 struct {
	TStringNotContainsAny1 string `protobuf:"bytes,48,opt,name=t_string_not_contains_any1,json=tStringNotContainsAny1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUtf8 struct {
	TStringUtf8 string `protobuf:"bytes,81,opt,name=t_string_utf8,json=tStringUtf8,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringAscii struct {
	TStringAscii string `protobuf:"bytes,71,opt,name=t_string_ascii,json=tStringAscii,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringPrintAscii struct {
	TStringPrintAscii string `protobuf:"bytes,72,opt,name=t_string_print_ascii,json=tStringPrintAscii,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringBoolean struct {
	TStringBoolean string `protobuf:"bytes,73,opt,name=t_string_boolean,json=tStringBoolean,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringLowercase struct {
	TStringLowercase string `protobuf:"bytes,74,opt,name=t_string_lowercase,json=tStringLowercase,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUppercase struct {
	TStringUppercase string `protobuf:"bytes,75,opt,name=t_string_uppercase,json=tStringUppercase,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringAlpha struct {
	TStringAlpha string `protobuf:"bytes,76,opt,name=t_string_alpha,json=tStringAlpha,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringNumber struct {
	TStringNumber string `protobuf:"bytes,77,opt,name=t_string_number,json=tStringNumber,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringAlphaNumber struct {
	TStringAlphaNumber string `protobuf:"bytes,78,opt,name=t_string_alpha_number,json=tStringAlphaNumber,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringIp struct {
	TStringIp string `protobuf:"bytes,101,opt,name=t_string_ip,json=tStringIp,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringIpv4 struct {
	TStringIpv4 string `protobuf:"bytes,102,opt,name=t_string_ipv4,json=tStringIpv4,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringIpv6 struct {
	TStringIpv6 string `protobuf:"bytes,103,opt,name=t_string_ipv6,json=tStringIpv6,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringIpAddr struct {
	TStringIpAddr string `protobuf:"bytes,104,opt,name=t_string_ip_addr,json=tStringIpAddr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringIp4Addr struct {
	TStringIp4Addr string `protobuf:"bytes,105,opt,name=t_string_ip4_addr,json=tStringIp4Addr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringIp6Addr struct {
	TStringIp6Addr string `protobuf:"bytes,106,opt,name=t_string_ip6_addr,json=tStringIp6Addr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringCidr struct {
	TStringCidr string `protobuf:"bytes,107,opt,name=t_string_cidr,json=tStringCidr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringCidrv4 struct {
	TStringCidrv4 string `protobuf:"bytes,108,opt,name=t_string_cidrv4,json=tStringCidrv4,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringCidrv6 struct {
	TStringCidrv6 string `protobuf:"bytes,109,opt,name=t_string_cidrv6,json=tStringCidrv6,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringMac struct {
	TStringMac string `protobuf:"bytes,110,opt,name=t_string_mac,json=tStringMac,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringTcpAddr struct {
	TStringTcpAddr string `protobuf:"bytes,111,opt,name=t_string_tcp_addr,json=tStringTcpAddr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringTcp4Addr struct {
	TStringTcp4Addr string `protobuf:"bytes,112,opt,name=t_string_tcp4_addr,json=tStringTcp4Addr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringTcp6Addr struct {
	TStringTcp6Addr string `protobuf:"bytes,113,opt,name=t_string_tcp6_addr,json=tStringTcp6Addr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUdpAddr struct {
	TStringUdpAddr string `protobuf:"bytes,114,opt,name=t_string_udp_addr,json=tStringUdpAddr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUdp4Addr struct {
	TStringUdp4Addr string `protobuf:"bytes,115,opt,name=t_string_udp4_addr,json=tStringUdp4Addr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUdp6Addr struct {
	TStringUdp6Addr string `protobuf:"bytes,116,opt,name=t_string_udp6_addr,json=tStringUdp6Addr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUnixAddr struct {
	TStringUnixAddr string `protobuf:"bytes,117,opt,name=t_string_unix_addr,json=tStringUnixAddr,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringHostname struct {
	TStringHostname string `protobuf:"bytes,118,opt,name=t_string_hostname,json=tStringHostname,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringHostnameRfc1123 struct {
	TStringHostnameRfc1123 string `protobuf:"bytes,119,opt,name=t_string_hostname_rfc1123,json=tStringHostnameRfc1123,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringHostnamePort struct {
	TStringHostnamePort string `protobuf:"bytes,120,opt,name=t_string_hostname_port,json=tStringHostnamePort,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringDataUri struct {
	TStringDataUri string `protobuf:"bytes,121,opt,name=t_string_data_uri,json=tStringDataUri,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringFqdn struct {
	TStringFqdn string `protobuf:"bytes,122,opt,name=t_string_fqdn,json=tStringFqdn,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUri struct {
	TStringUri string `protobuf:"bytes,123,opt,name=t_string_uri,json=tStringUri,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUrl struct {
	TStringUrl string `protobuf:"bytes,124,opt,name=t_string_url,json=tStringUrl,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUrlEncoded struct {
	TStringUrlEncoded string `protobuf:"bytes,125,opt,name=t_string_url_encoded,json=tStringUrlEncoded,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUnixCron struct {
	TStringUnixCron string `protobuf:"bytes,141,opt,name=t_string_unix_cron,json=tStringUnixCron,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringEmail struct {
	TStringEmail string `protobuf:"bytes,126,opt,name=t_string_email,json=tStringEmail,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringJson struct {
	TStringJson string `protobuf:"bytes,127,opt,name=t_string_json,json=tStringJson,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringJwt struct {
	TStringJwt string `protobuf:"bytes,128,opt,name=t_string_jwt,json=tStringJwt,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringHtml struct {
	TStringHtml string `protobuf:"bytes,129,opt,name=t_string_html,json=tStringHtml,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringHtmlEncoded struct {
	TStringHtmlEncoded string `protobuf:"bytes,130,opt,name=t_string_html_encoded,json=tStringHtmlEncoded,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringBase64 struct {
	TStringBase64 string `protobuf:"bytes,131,opt,name=t_string_base64,json=tStringBase64,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringBase64Url struct {
	TStringBase64Url string `protobuf:"bytes,132,opt,name=t_string_base64_url,json=tStringBase64Url,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringHexadecimal struct {
	TStringHexadecimal string `protobuf:"bytes,133,opt,name=t_string_hexadecimal,json=tStringHexadecimal,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringDatetime struct {
	TStringDatetime string `protobuf:"bytes,134,opt,name=t_string_datetime,json=tStringDatetime,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringTimezone struct {
	TStringTimezone string `protobuf:"bytes,135,opt,name=t_string_timezone,json=tStringTimezone,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUuid struct {
	TStringUuid string `protobuf:"bytes,136,opt,name=t_string_uuid,json=tStringUuid,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUuid1 struct {
	TStringUuid1 string `protobuf:"bytes,137,opt,name=t_string_uuid1,json=tStringUuid1,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUuid3 struct {
	TStringUuid3 string `protobuf:"bytes,138,opt,name=t_string_uuid3,json=tStringUuid3,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUuid4 struct {
	TStringUuid4 string `protobuf:"bytes,139,opt,name=t_string_uuid4,json=tStringUuid4,proto3,oneof"`
}

type ValidStringTagsOneOf1_TStringUuid5 struct {
	TStringUuid5 string `protobuf:"bytes,140,opt,name=t_string_uuid5,json=tStringUuid5,proto3,oneof"`
}

func (*ValidStringTagsOneOf1_TString1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TString2) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TString3) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TString4) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringEq1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringNe1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringLt1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringGt1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringLte1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringGte1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringIn1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringNotIn1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringCharLenEq1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringCharLenNe1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringCharLenGt1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringCharLenLt1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringCharLenGte1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringCharLenLte1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringByteLenEq1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringByteLenNe1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringByteLenGt1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringByteLenLt1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringByteLenGte1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringByteLenLte1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringRegex1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringPrefix1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringNoPrefix1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringSuffix1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringNoSuffix1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringContains1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringNoContains1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringContainsAny1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringNotContainsAny1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUtf8) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringAscii) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringPrintAscii) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringBoolean) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringLowercase) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUppercase) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringAlpha) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringNumber) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringAlphaNumber) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringIp) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringIpv4) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringIpv6) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringIpAddr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringIp4Addr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringIp6Addr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringCidr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringCidrv4) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringCidrv6) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringMac) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringTcpAddr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringTcp4Addr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringTcp6Addr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUdpAddr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUdp4Addr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUdp6Addr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUnixAddr) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringHostname) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringHostnameRfc1123) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringHostnamePort) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringDataUri) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringFqdn) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUri) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUrl) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUrlEncoded) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUnixCron) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringEmail) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringJson) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringJwt) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringHtml) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringHtmlEncoded) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringBase64) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringBase64Url) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringHexadecimal) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringDatetime) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringTimezone) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUuid) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUuid1) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUuid3) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUuid4) isValidStringTagsOneOf1_OneTyp1() {}

func (*ValidStringTagsOneOf1_TStringUuid5) isValidStringTagsOneOf1_OneTyp1() {}

// ValidOptionsMultiCond1 for test multi option in a field.
type ValidOptionsMultiCond1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TBasicString1 string            `protobuf:"bytes,1,opt,name=t_basic_string1,json=tBasicString1,proto3" json:"t_basic_string1,omitempty"`
	TBasicString2 *string           `protobuf:"bytes,2,opt,name=t_basic_string2,json=tBasicString2,proto3,oneof" json:"t_basic_string2,omitempty"`
	TBasicInt64   int64             `protobuf:"varint,3,opt,name=t_basic_int64,json=tBasicInt64,proto3" json:"t_basic_int64,omitempty"`
	TBasicInt32   *int32            `protobuf:"varint,4,opt,name=t_basic_int32,json=tBasicInt32,proto3,oneof" json:"t_basic_int32,omitempty"`
	TListString   []string          `protobuf:"bytes,10,rep,name=t_list_string,json=tListString,proto3" json:"t_list_string,omitempty"`
	TListInt64    []int64           `protobuf:"varint,11,rep,packed,name=t_list_int64,json=tListInt64,proto3" json:"t_list_int64,omitempty"`
	TMapString1   map[string]string `protobuf:"bytes,20,rep,name=t_map_string1,json=tMapString1,proto3" json:"t_map_string1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapInt64     map[int64]int64   `protobuf:"bytes,21,rep,name=t_map_int64,json=tMapInt64,proto3" json:"t_map_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Types that are assignable to OneTyp1:
	//	*ValidOptionsMultiCond1_OneofString1
	//	*ValidOptionsMultiCond1_OneofInt64
	OneTyp1     isValidOptionsMultiCond1_OneTyp1 `protobuf_oneof:"one_typ1"`
	TMapString2 map[string]string                `protobuf:"bytes,22,rep,name=t_map_string2,json=tMapString2,proto3" json:"t_map_string2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ValidOptionsMultiCond1) Reset() {
	*x = ValidOptionsMultiCond1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidOptionsMultiCond1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidOptionsMultiCond1) ProtoMessage() {}

func (x *ValidOptionsMultiCond1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidOptionsMultiCond1.ProtoReflect.Descriptor instead.
func (*ValidOptionsMultiCond1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{25}
}

func (x *ValidOptionsMultiCond1) GetTBasicString1() string {
	if x != nil {
		return x.TBasicString1
	}
	return ""
}

func (x *ValidOptionsMultiCond1) GetTBasicString2() string {
	if x != nil && x.TBasicString2 != nil {
		return *x.TBasicString2
	}
	return ""
}

func (x *ValidOptionsMultiCond1) GetTBasicInt64() int64 {
	if x != nil {
		return x.TBasicInt64
	}
	return 0
}

func (x *ValidOptionsMultiCond1) GetTBasicInt32() int32 {
	if x != nil && x.TBasicInt32 != nil {
		return *x.TBasicInt32
	}
	return 0
}

func (x *ValidOptionsMultiCond1) GetTListString() []string {
	if x != nil {
		return x.TListString
	}
	return nil
}

func (x *ValidOptionsMultiCond1) GetTListInt64() []int64 {
	if x != nil {
		return x.TListInt64
	}
	return nil
}

func (x *ValidOptionsMultiCond1) GetTMapString1() map[string]string {
	if x != nil {
		return x.TMapString1
	}
	return nil
}

func (x *ValidOptionsMultiCond1) GetTMapInt64() map[int64]int64 {
	if x != nil {
		return x.TMapInt64
	}
	return nil
}

func (m *ValidOptionsMultiCond1) GetOneTyp1() isValidOptionsMultiCond1_OneTyp1 {
	if m != nil {
		return m.OneTyp1
	}
	return nil
}

func (x *ValidOptionsMultiCond1) GetOneofString1() string {
	if x, ok := x.GetOneTyp1().(*ValidOptionsMultiCond1_OneofString1); ok {
		return x.OneofString1
	}
	return ""
}

func (x *ValidOptionsMultiCond1) GetOneofInt64() int64 {
	if x, ok := x.GetOneTyp1().(*ValidOptionsMultiCond1_OneofInt64); ok {
		return x.OneofInt64
	}
	return 0
}

func (x *ValidOptionsMultiCond1) GetTMapString2() map[string]string {
	if x != nil {
		return x.TMapString2
	}
	return nil
}

type isValidOptionsMultiCond1_OneTyp1 interface {
	isValidOptionsMultiCond1_OneTyp1()
}

type ValidOptionsMultiCond1_OneofString1 struct {
	OneofString1 string `protobuf:"bytes,30,opt,name=oneof_string1,json=oneofString1,proto3,oneof"`
}

type ValidOptionsMultiCond1_OneofInt64 struct {
	OneofInt64 int64 `protobuf:"varint,31,opt,name=oneof_int64,json=oneofInt64,proto3,oneof"`
}

func (*ValidOptionsMultiCond1_OneofString1) isValidOptionsMultiCond1_OneTyp1() {}

func (*ValidOptionsMultiCond1_OneofInt64) isValidOptionsMultiCond1_OneTyp1() {}

// message for check if.
//
type CheckIfOptions1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofType1:
	//	*CheckIfOptions1_Oneof1String1
	OneofType1   isCheckIfOptions1_OneofType1 `protobuf_oneof:"oneof_type1"`
	TBasicString string                       `protobuf:"bytes,10,opt,name=t_basic_string,json=tBasicString,proto3" json:"t_basic_string,omitempty"`
	TListString  []string                     `protobuf:"bytes,11,rep,name=t_list_string,json=tListString,proto3" json:"t_list_string,omitempty"`
	TMapString   map[string]string            `protobuf:"bytes,12,rep,name=t_map_string,json=tMapString,proto3" json:"t_map_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to OneofType2:
	//	*CheckIfOptions1_Oneof2String
	OneofType2 isCheckIfOptions1_OneofType2 `protobuf_oneof:"oneof_type2"`
}

func (x *CheckIfOptions1) Reset() {
	*x = CheckIfOptions1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIfOptions1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfOptions1) ProtoMessage() {}

func (x *CheckIfOptions1) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfOptions1.ProtoReflect.Descriptor instead.
func (*CheckIfOptions1) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{26}
}

func (m *CheckIfOptions1) GetOneofType1() isCheckIfOptions1_OneofType1 {
	if m != nil {
		return m.OneofType1
	}
	return nil
}

func (x *CheckIfOptions1) GetOneof1String1() string {
	if x, ok := x.GetOneofType1().(*CheckIfOptions1_Oneof1String1); ok {
		return x.Oneof1String1
	}
	return ""
}

func (x *CheckIfOptions1) GetTBasicString() string {
	if x != nil {
		return x.TBasicString
	}
	return ""
}

func (x *CheckIfOptions1) GetTListString() []string {
	if x != nil {
		return x.TListString
	}
	return nil
}

func (x *CheckIfOptions1) GetTMapString() map[string]string {
	if x != nil {
		return x.TMapString
	}
	return nil
}

func (m *CheckIfOptions1) GetOneofType2() isCheckIfOptions1_OneofType2 {
	if m != nil {
		return m.OneofType2
	}
	return nil
}

func (x *CheckIfOptions1) GetOneof2String() string {
	if x, ok := x.GetOneofType2().(*CheckIfOptions1_Oneof2String); ok {
		return x.Oneof2String
	}
	return ""
}

type isCheckIfOptions1_OneofType1 interface {
	isCheckIfOptions1_OneofType1()
}

type CheckIfOptions1_Oneof1String1 struct {
	Oneof1String1 string `protobuf:"bytes,1,opt,name=oneof1_string1,json=oneof1String1,proto3,oneof"`
}

func (*CheckIfOptions1_Oneof1String1) isCheckIfOptions1_OneofType1() {}

type isCheckIfOptions1_OneofType2 interface {
	isCheckIfOptions1_OneofType2()
}

type CheckIfOptions1_Oneof2String struct {
	Oneof2String string `protobuf:"bytes,13,opt,name=oneof2_string,json=oneof2String,proto3,oneof"`
}

func (*CheckIfOptions1_Oneof2String) isCheckIfOptions1_OneofType2() {}

type CheckIfOptions2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofType1:
	//	*CheckIfOptions2_Oneof1String1
	OneofType1   isCheckIfOptions2_OneofType1 `protobuf_oneof:"oneof_type1"`
	TBasicString string                       `protobuf:"bytes,10,opt,name=t_basic_string,json=tBasicString,proto3" json:"t_basic_string,omitempty"`
	TListString  []string                     `protobuf:"bytes,11,rep,name=t_list_string,json=tListString,proto3" json:"t_list_string,omitempty"`
	TMapString   map[string]string            `protobuf:"bytes,12,rep,name=t_map_string,json=tMapString,proto3" json:"t_map_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to OneofType2:
	//	*CheckIfOptions2_Oneof2String
	OneofType2 isCheckIfOptions2_OneofType2 `protobuf_oneof:"oneof_type2"`
}

func (x *CheckIfOptions2) Reset() {
	*x = CheckIfOptions2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIfOptions2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfOptions2) ProtoMessage() {}

func (x *CheckIfOptions2) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfOptions2.ProtoReflect.Descriptor instead.
func (*CheckIfOptions2) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{27}
}

func (m *CheckIfOptions2) GetOneofType1() isCheckIfOptions2_OneofType1 {
	if m != nil {
		return m.OneofType1
	}
	return nil
}

func (x *CheckIfOptions2) GetOneof1String1() string {
	if x, ok := x.GetOneofType1().(*CheckIfOptions2_Oneof1String1); ok {
		return x.Oneof1String1
	}
	return ""
}

func (x *CheckIfOptions2) GetTBasicString() string {
	if x != nil {
		return x.TBasicString
	}
	return ""
}

func (x *CheckIfOptions2) GetTListString() []string {
	if x != nil {
		return x.TListString
	}
	return nil
}

func (x *CheckIfOptions2) GetTMapString() map[string]string {
	if x != nil {
		return x.TMapString
	}
	return nil
}

func (m *CheckIfOptions2) GetOneofType2() isCheckIfOptions2_OneofType2 {
	if m != nil {
		return m.OneofType2
	}
	return nil
}

func (x *CheckIfOptions2) GetOneof2String() string {
	if x, ok := x.GetOneofType2().(*CheckIfOptions2_Oneof2String); ok {
		return x.Oneof2String
	}
	return ""
}

type isCheckIfOptions2_OneofType1 interface {
	isCheckIfOptions2_OneofType1()
}

type CheckIfOptions2_Oneof1String1 struct {
	Oneof1String1 string `protobuf:"bytes,1,opt,name=oneof1_string1,json=oneof1String1,proto3,oneof"`
}

func (*CheckIfOptions2_Oneof1String1) isCheckIfOptions2_OneofType1() {}

type isCheckIfOptions2_OneofType2 interface {
	isCheckIfOptions2_OneofType2()
}

type CheckIfOptions2_Oneof2String struct {
	Oneof2String string `protobuf:"bytes,13,opt,name=oneof2_string,json=oneof2String,proto3,oneof"`
}

func (*CheckIfOptions2_Oneof2String) isCheckIfOptions2_OneofType2() {}

type CheckIfOptions3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeedString1  string            `protobuf:"bytes,1,opt,name=seed_string1,json=seedString1,proto3" json:"seed_string1,omitempty"`
	TBasicString string            `protobuf:"bytes,10,opt,name=t_basic_string,json=tBasicString,proto3" json:"t_basic_string,omitempty"`
	TListString  []string          `protobuf:"bytes,11,rep,name=t_list_string,json=tListString,proto3" json:"t_list_string,omitempty"`
	TMapString   map[string]string `protobuf:"bytes,12,rep,name=t_map_string,json=tMapString,proto3" json:"t_map_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to OneofType2:
	//	*CheckIfOptions3_Oneof2String
	OneofType2 isCheckIfOptions3_OneofType2 `protobuf_oneof:"oneof_type2"`
}

func (x *CheckIfOptions3) Reset() {
	*x = CheckIfOptions3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIfOptions3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfOptions3) ProtoMessage() {}

func (x *CheckIfOptions3) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfOptions3.ProtoReflect.Descriptor instead.
func (*CheckIfOptions3) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{28}
}

func (x *CheckIfOptions3) GetSeedString1() string {
	if x != nil {
		return x.SeedString1
	}
	return ""
}

func (x *CheckIfOptions3) GetTBasicString() string {
	if x != nil {
		return x.TBasicString
	}
	return ""
}

func (x *CheckIfOptions3) GetTListString() []string {
	if x != nil {
		return x.TListString
	}
	return nil
}

func (x *CheckIfOptions3) GetTMapString() map[string]string {
	if x != nil {
		return x.TMapString
	}
	return nil
}

func (m *CheckIfOptions3) GetOneofType2() isCheckIfOptions3_OneofType2 {
	if m != nil {
		return m.OneofType2
	}
	return nil
}

func (x *CheckIfOptions3) GetOneof2String() string {
	if x, ok := x.GetOneofType2().(*CheckIfOptions3_Oneof2String); ok {
		return x.Oneof2String
	}
	return ""
}

type isCheckIfOptions3_OneofType2 interface {
	isCheckIfOptions3_OneofType2()
}

type CheckIfOptions3_Oneof2String struct {
	Oneof2String string `protobuf:"bytes,13,opt,name=oneof2_string,json=oneof2String,proto3,oneof"`
}

func (*CheckIfOptions3_Oneof2String) isCheckIfOptions3_OneofType2() {}

type CheckIfOptions4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OneofType1:
	//	*CheckIfOptions4_Oneof1String1
	OneofType1   isCheckIfOptions4_OneofType1 `protobuf_oneof:"oneof_type1"`
	TBasicString string                       `protobuf:"bytes,10,opt,name=t_basic_string,json=tBasicString,proto3" json:"t_basic_string,omitempty"`
	TListString  []string                     `protobuf:"bytes,11,rep,name=t_list_string,json=tListString,proto3" json:"t_list_string,omitempty"`
	TMapString   map[string]string            `protobuf:"bytes,12,rep,name=t_map_string,json=tMapString,proto3" json:"t_map_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to OneofType2:
	//	*CheckIfOptions4_Oneof2String
	OneofType2 isCheckIfOptions4_OneofType2 `protobuf_oneof:"oneof_type2"`
}

func (x *CheckIfOptions4) Reset() {
	*x = CheckIfOptions4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIfOptions4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfOptions4) ProtoMessage() {}

func (x *CheckIfOptions4) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfOptions4.ProtoReflect.Descriptor instead.
func (*CheckIfOptions4) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{29}
}

func (m *CheckIfOptions4) GetOneofType1() isCheckIfOptions4_OneofType1 {
	if m != nil {
		return m.OneofType1
	}
	return nil
}

func (x *CheckIfOptions4) GetOneof1String1() string {
	if x, ok := x.GetOneofType1().(*CheckIfOptions4_Oneof1String1); ok {
		return x.Oneof1String1
	}
	return ""
}

func (x *CheckIfOptions4) GetTBasicString() string {
	if x != nil {
		return x.TBasicString
	}
	return ""
}

func (x *CheckIfOptions4) GetTListString() []string {
	if x != nil {
		return x.TListString
	}
	return nil
}

func (x *CheckIfOptions4) GetTMapString() map[string]string {
	if x != nil {
		return x.TMapString
	}
	return nil
}

func (m *CheckIfOptions4) GetOneofType2() isCheckIfOptions4_OneofType2 {
	if m != nil {
		return m.OneofType2
	}
	return nil
}

func (x *CheckIfOptions4) GetOneof2String() string {
	if x, ok := x.GetOneofType2().(*CheckIfOptions4_Oneof2String); ok {
		return x.Oneof2String
	}
	return ""
}

type isCheckIfOptions4_OneofType1 interface {
	isCheckIfOptions4_OneofType1()
}

type CheckIfOptions4_Oneof1String1 struct {
	Oneof1String1 string `protobuf:"bytes,1,opt,name=oneof1_string1,json=oneof1String1,proto3,oneof"`
}

func (*CheckIfOptions4_Oneof1String1) isCheckIfOptions4_OneofType1() {}

type isCheckIfOptions4_OneofType2 interface {
	isCheckIfOptions4_OneofType2()
}

type CheckIfOptions4_Oneof2String struct {
	Oneof2String string `protobuf:"bytes,13,opt,name=oneof2_string,json=oneof2String,proto3,oneof"`
}

func (*CheckIfOptions4_Oneof2String) isCheckIfOptions4_OneofType2() {}

type CheckIfOptions5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeedString1  string            `protobuf:"bytes,1,opt,name=seed_string1,json=seedString1,proto3" json:"seed_string1,omitempty"`
	TBasicString string            `protobuf:"bytes,10,opt,name=t_basic_string,json=tBasicString,proto3" json:"t_basic_string,omitempty"`
	TListString  []string          `protobuf:"bytes,11,rep,name=t_list_string,json=tListString,proto3" json:"t_list_string,omitempty"`
	TMapString   map[string]string `protobuf:"bytes,12,rep,name=t_map_string,json=tMapString,proto3" json:"t_map_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to OneofType2:
	//	*CheckIfOptions5_Oneof2String
	OneofType2 isCheckIfOptions5_OneofType2 `protobuf_oneof:"oneof_type2"`
}

func (x *CheckIfOptions5) Reset() {
	*x = CheckIfOptions5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIfOptions5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfOptions5) ProtoMessage() {}

func (x *CheckIfOptions5) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfOptions5.ProtoReflect.Descriptor instead.
func (*CheckIfOptions5) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{30}
}

func (x *CheckIfOptions5) GetSeedString1() string {
	if x != nil {
		return x.SeedString1
	}
	return ""
}

func (x *CheckIfOptions5) GetTBasicString() string {
	if x != nil {
		return x.TBasicString
	}
	return ""
}

func (x *CheckIfOptions5) GetTListString() []string {
	if x != nil {
		return x.TListString
	}
	return nil
}

func (x *CheckIfOptions5) GetTMapString() map[string]string {
	if x != nil {
		return x.TMapString
	}
	return nil
}

func (m *CheckIfOptions5) GetOneofType2() isCheckIfOptions5_OneofType2 {
	if m != nil {
		return m.OneofType2
	}
	return nil
}

func (x *CheckIfOptions5) GetOneof2String() string {
	if x, ok := x.GetOneofType2().(*CheckIfOptions5_Oneof2String); ok {
		return x.Oneof2String
	}
	return ""
}

type isCheckIfOptions5_OneofType2 interface {
	isCheckIfOptions5_OneofType2()
}

type CheckIfOptions5_Oneof2String struct {
	Oneof2String string `protobuf:"bytes,13,opt,name=oneof2_string,json=oneof2String,proto3,oneof"`
}

func (*CheckIfOptions5_Oneof2String) isCheckIfOptions5_OneofType2() {}

type CheckIfOptions6 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeedMapString map[string]string `protobuf:"bytes,1,rep,name=seed_map_string,json=seedMapString,proto3" json:"seed_map_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapString1   map[string]string `protobuf:"bytes,10,rep,name=t_map_string1,json=tMapString1,proto3" json:"t_map_string1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TMapString2   map[string]string `protobuf:"bytes,11,rep,name=t_map_string2,json=tMapString2,proto3" json:"t_map_string2,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CheckIfOptions6) Reset() {
	*x = CheckIfOptions6{}
	if protoimpl.UnsafeEnabled {
		mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckIfOptions6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIfOptions6) ProtoMessage() {}

func (x *CheckIfOptions6) ProtoReflect() protoreflect.Message {
	mi := &file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIfOptions6.ProtoReflect.Descriptor instead.
func (*CheckIfOptions6) Descriptor() ([]byte, []int) {
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP(), []int{31}
}

func (x *CheckIfOptions6) GetSeedMapString() map[string]string {
	if x != nil {
		return x.SeedMapString
	}
	return nil
}

func (x *CheckIfOptions6) GetTMapString1() map[string]string {
	if x != nil {
		return x.TMapString1
	}
	return nil
}

func (x *CheckIfOptions6) GetTMapString2() map[string]string {
	if x != nil {
		return x.TMapString2
	}
	return nil
}

var File_xgo_tests_govalidatortest_govalidator_test_proto protoreflect.FileDescriptor

var file_xgo_tests_govalidatortest_govalidator_test_proto_rawDesc = []byte{
	0x0a, 0x30, 0x78, 0x67, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x24, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xc2, 0x01, 0x0b, 0x1a, 0x09, 0x31, 0x32, 0x37,
	0x2e, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06,
	0xb2, 0x01, 0x03, 0x18, 0x90, 0x3f, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xdc, 0x02, 0x0a,
	0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x54, 0x61, 0x67, 0x73, 0x31,
	0x12, 0x27, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x27, 0x0a, 0x0e, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x12, 0x27, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x33, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x33, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x27, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x34, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x34, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x12, 0x27, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x35, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x42, 0x1a, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x12, 0x0b, 0xba, 0xe0,
	0x1f, 0x07, 0x12, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x42, 0x1a, 0x0a, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x0b, 0xba, 0xe0, 0x1f, 0x07, 0x12, 0x05,
	0xa2, 0x01, 0x02, 0x08, 0x00, 0x42, 0x18, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x33, 0x12, 0x09, 0xba, 0xe0, 0x1f, 0x05, 0x12, 0x03, 0xa2, 0x01, 0x00, 0x42,
	0x15, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x34, 0x12, 0x06,
	0xba, 0xe0, 0x1f, 0x02, 0x12, 0x00, 0x42, 0x13, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x35, 0x12, 0x04, 0xba, 0xe0, 0x1f, 0x00, 0x22, 0xd4, 0x09, 0x0a, 0x16,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x31, 0x12, 0x24, 0x0a, 0x08, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xaa, 0x01, 0x00, 0x52, 0x07,
	0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x12, 0x21, 0x0a, 0x08, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12,
	0x00, 0x52, 0x07, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x12, 0x1f, 0x0a, 0x08, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x07, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x12, 0x32, 0x0a, 0x0b, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x19, 0x9a, 0x99, 0x99, 0x99,
	0x99, 0x99, 0xf1, 0x3f, 0x52, 0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x71, 0x31, 0x12,
	0x32, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x21,
	0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x52, 0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x4e, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c,
	0x74, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c,
	0xaa, 0x01, 0x09, 0x29, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x08, 0x40, 0x52, 0x09, 0x74, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x74, 0x31, 0x12, 0x32, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf,
	0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x31, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x10, 0x40,
	0x52, 0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x47, 0x74, 0x31, 0x12, 0x34, 0x0a, 0x0c, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x39, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x14, 0x40, 0x52, 0x0a, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x74, 0x65,
	0x31, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x65,
	0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa,
	0x01, 0x09, 0x41, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x18, 0x40, 0x52, 0x0a, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x47, 0x74, 0x65, 0x31, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x42, 0x23, 0xe2, 0xdf,
	0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01, 0x1a, 0x4a, 0x18, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1,
	0x3f, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xf3, 0x3f, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf4,
	0x3f, 0x52, 0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x4a, 0x0a, 0x0f,
	0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x02, 0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01, 0x1a,
	0x52, 0x18, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99,
	0x01, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x52, 0x0c, 0x74, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x31, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03,
	0xaa, 0x01, 0x00, 0x52, 0x08, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x12, 0x23, 0x0a,
	0x09, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x33, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x08, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x33, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x34, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x74, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x34, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f,
	0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x19, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x52,
	0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x71, 0x31, 0x12, 0x34, 0x0a, 0x0c, 0x74,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x21, 0xcd, 0xcc, 0xcc,
	0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x52, 0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x65,
	0x31, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x74,
	0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa,
	0x01, 0x09, 0x29, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x08, 0x40, 0x52, 0x0a, 0x74, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x4c, 0x74, 0x31, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2,
	0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x31, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x10,
	0x40, 0x52, 0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x74, 0x31, 0x12, 0x36, 0x0a,
	0x0d, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x39,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x14, 0x40, 0x52, 0x0b, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x36, 0x0a, 0x0d, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf,
	0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x41, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x18, 0x40,
	0x52, 0x0b, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x74, 0x65, 0x31, 0x12, 0x45, 0x0a,
	0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01, 0x1a, 0x4a, 0x18,
	0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xf3, 0x3f,
	0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf4, 0x3f, 0x52, 0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x31, 0x12, 0x4c, 0x0a, 0x10, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x42, 0x23,
	0xe2, 0xdf, 0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01, 0x1a, 0x52, 0x18, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc,
	0xcc, 0x00, 0x40, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x02, 0x40, 0x52, 0x0d, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x31, 0x22, 0xcd, 0x0d, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x12, 0x1e,
	0x0a, 0x08, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x29,
	0x0a, 0x08, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xaa, 0x01, 0x00, 0x48, 0x01, 0x52, 0x07, 0x74,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x12, 0x00, 0x48, 0x02, 0x52, 0x07, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x08, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x03, 0x52, 0x07, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x34, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf,
	0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x19, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f,
	0x48, 0x04, 0x52, 0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x37, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x65, 0x31, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09,
	0x21, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x48, 0x05, 0x52, 0x09, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x4e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12,
	0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x29, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
	0x08, 0x40, 0x48, 0x06, 0x52, 0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x74, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x74,
	0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa,
	0x01, 0x09, 0x31, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x10, 0x40, 0x48, 0x07, 0x52, 0x09, 0x74,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x39, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x14, 0x40, 0x48, 0x08, 0x52, 0x0a, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c,
	0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf,
	0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x41, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x18, 0x40,
	0x48, 0x09, 0x52, 0x0a, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x47, 0x74, 0x65, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x31,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01,
	0x1a, 0x4a, 0x18, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x33, 0x33, 0x33, 0x33, 0x33,
	0x33, 0xf3, 0x3f, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf4, 0x3f, 0x48, 0x0a, 0x52, 0x09, 0x74,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0f, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01, 0x1a, 0x52,
	0x18, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01,
	0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x48, 0x0b, 0x52, 0x0c, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x0c, 0x52, 0x08, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x09, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xaa, 0x01, 0x00, 0x48, 0x0d, 0x52, 0x08,
	0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x74,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x33, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x0e, 0x52, 0x08, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x33, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x09, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x0f,
	0x52, 0x08, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x34, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x19, 0x9a,
	0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x48, 0x10, 0x52, 0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12,
	0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x21, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc,
	0x00, 0x40, 0x48, 0x11, 0x52, 0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x6c, 0x74, 0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12,
	0x0c, 0xaa, 0x01, 0x09, 0x29, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x08, 0x40, 0x48, 0x12, 0x52,
	0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x31,
	0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x10, 0x40, 0x48, 0x13, 0x52, 0x0a, 0x74, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x39, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x14, 0x40, 0x48, 0x14, 0x52, 0x0b, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c,
	0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x0d, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2,
	0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x41, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x18,
	0x40, 0x48, 0x15, 0x52, 0x0b, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x74, 0x65, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x69, 0x6e, 0x31, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12,
	0x1d, 0xaa, 0x01, 0x1a, 0x4a, 0x18, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0xf3, 0x3f, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf4, 0x3f, 0x48, 0x16,
	0x52, 0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x10, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x31, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12,
	0x1d, 0xaa, 0x01, 0x1a, 0x52, 0x18, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x9a, 0x99,
	0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x48, 0x17,
	0x52, 0x0d, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x6e, 0x65, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x34, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x31, 0x22, 0x8e, 0x0a, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x54, 0x61, 0x67, 0x73, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x31, 0x12, 0x1b, 0x0a, 0x08, 0x74,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x07, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x12, 0x26, 0x0a, 0x08, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x12, 0x03, 0xaa, 0x01, 0x00, 0x48, 0x00, 0x52, 0x07, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x32,
	0x12, 0x23, 0x0a, 0x08, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x07, 0x74, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x12, 0x21, 0x0a, 0x08, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52,
	0x07, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2,
	0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x19, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1,
	0x3f, 0x48, 0x00, 0x52, 0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x71, 0x31, 0x12, 0x34,
	0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x21, 0xcd,
	0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x48, 0x00, 0x52, 0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x4e, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f,
	0x6c, 0x74, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12,
	0x0c, 0xaa, 0x01, 0x09, 0x29, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x08, 0x40, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x74, 0x31, 0x12, 0x34, 0x0a, 0x0b, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x31, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x66, 0x10, 0x40, 0x48, 0x00, 0x52, 0x09, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x47, 0x74, 0x31,
	0x12, 0x36, 0x0a, 0x0c, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6c, 0x74, 0x65, 0x31,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01,
	0x09, 0x39, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x14, 0x40, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x42, 0x12,
	0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x41, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
	0x18, 0x40, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x47, 0x74, 0x65, 0x31,
	0x12, 0x45, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01, 0x1a,
	0x4a, 0x18, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
	0xf3, 0x3f, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf4, 0x3f, 0x48, 0x00, 0x52, 0x09, 0x74, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01, 0x1a, 0x52, 0x18, 0xcd, 0xcc, 0xcc,
	0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x02, 0x40, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x08, 0x74, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x31, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xaa,
	0x01, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x32, 0x12, 0x25,
	0x0a, 0x09, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x33, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x33, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x34, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x19, 0x9a, 0x99, 0x99, 0x99,
	0x99, 0x99, 0xf1, 0x3f, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45,
	0x71, 0x31, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x65, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c,
	0xaa, 0x01, 0x09, 0x21, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x31, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x29, 0xcd, 0xcc, 0xcc, 0xcc,
	0xcc, 0xcc, 0x08, 0x40, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c,
	0x74, 0x31, 0x12, 0x36, 0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x67,
	0x74, 0x31, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c,
	0xaa, 0x01, 0x09, 0x31, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x10, 0x40, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x74, 0x31, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x5f,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x39, 0x66, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x14, 0x40, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x4c, 0x74, 0x65, 0x31, 0x12, 0x38, 0x0a, 0x0d, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x42, 0x12, 0xe2, 0xdf, 0x1f,
	0x0e, 0x12, 0x0c, 0xaa, 0x01, 0x09, 0x41, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x18, 0x40, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x47, 0x74, 0x65, 0x31, 0x12, 0x47,
	0x0a, 0x0c, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01, 0x1a, 0x4a,
	0x18, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0xf3,
	0x3f, 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xf4, 0x3f, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x31, 0x12, 0x4e, 0x0a, 0x10, 0x74, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x23, 0xe2, 0xdf, 0x1f, 0x1f, 0x12, 0x1d, 0xaa, 0x01, 0x1a, 0x52, 0x18, 0xcd, 0xcc,
	0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0x01, 0x40, 0x66, 0x66,
	0x66, 0x66, 0x66, 0x66, 0x02, 0x40, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x31, 0x22, 0xe2, 0x19, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x12, 0x1a, 0x0a, 0x09,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x31, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x32, 0x12,
	0x22, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x33, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x74, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x34, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x71, 0x31, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65,
	0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x20, 0x02, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x65, 0x31, 0x12,
	0x2b, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x31, 0x12, 0x2b, 0x0a, 0x0b,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x52, 0x09,
	0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0a, 0x74, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x52, 0x0a, 0x74, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xe2, 0xdf,
	0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x52, 0x09, 0x74, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x31, 0x12, 0x35, 0x0a, 0x0f, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03,
	0x52, 0x0c, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1a,
	0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x31, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x32, 0x12, 0x22, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x33, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x07, 0x74, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x33, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07,
	0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x34, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x71, 0x31, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x6e, 0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xb2, 0x01, 0x02, 0x20, 0x02, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x65,
	0x31, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x31, 0x12, 0x2b,
	0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x04,
	0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0a,
	0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x52, 0x0a, 0x74,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e,
	0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x52, 0x09,
	0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x12, 0x35, 0x0a, 0x0f, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01,
	0x02, 0x03, 0x52, 0x0c, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31,
	0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x31, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x31, 0x12, 0x27,
	0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x11, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x52, 0x08, 0x74,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x11, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x12, 0x00, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x33, 0x12, 0x22, 0x0a,
	0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x11, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x34, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x71,
	0x31, 0x18, 0x32, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x71, 0x31,
	0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x20, 0x02, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x65, 0x31, 0x12,
	0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x18,
	0x34, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x31, 0x12, 0x2d,
	0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30,
	0x04, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x31, 0x12, 0x2f, 0x0a,
	0x0d, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38,
	0x05, 0x52, 0x0b, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x2f,
	0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18,
	0x37, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02,
	0x40, 0x06, 0x52, 0x0b, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31, 0x12,
	0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05,
	0x4a, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e,
	0x31, 0x12, 0x37, 0x0a, 0x10, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x39, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0d, 0x74, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08,
	0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x31, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x12, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x32, 0x12, 0x24, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x33, 0x18,
	0x3f, 0x20, 0x01, 0x28, 0x12, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x08, 0x74,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x33, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x40, 0x20, 0x01, 0x28, 0x12, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x34, 0x12, 0x2d, 0x0a, 0x0c, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a,
	0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x71, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x47, 0x20, 0x01, 0x28, 0x12,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x20, 0x02, 0x52, 0x0a, 0x74,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x65, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x48, 0x20, 0x01, 0x28, 0x12, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x49, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x52, 0x0a, 0x74, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0b, 0x74, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x12, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x52, 0x0b, 0x74, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x12, 0x42,
	0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x52,
	0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x12, 0x37, 0x0a, 0x10, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05,
	0x52, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0d, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x6f,
	0x74, 0x49, 0x6e, 0x31, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x31, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x31, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x32, 0x12, 0x28, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x33, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12,
	0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x33, 0x12, 0x26, 0x0a,
	0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x0f, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x34, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x71, 0x31, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0f,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x20, 0x02, 0x52, 0x0c, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x65, 0x31, 0x12, 0x31, 0x0a, 0x0e, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x5c, 0x20,
	0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x28, 0x03,
	0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x74, 0x31, 0x12, 0x31,
	0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31,
	0x18, 0x5d, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x30, 0x04, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x47, 0x74,
	0x31, 0x12, 0x33, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x6c, 0x74, 0x65, 0x31, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0d, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x33, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0f, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x52, 0x0d, 0x74, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x0e, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x60, 0x20,
	0x01, 0x28, 0x0f, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03,
	0x01, 0x02, 0x03, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e,
	0x31, 0x12, 0x3b, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0e, 0xe2,
	0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0f, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x20,
	0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x31,
	0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x32,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x10, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01,
	0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x32, 0x12, 0x28, 0x0a,
	0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x33, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x10, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x33, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x68, 0x20, 0x01, 0x28, 0x10, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x34, 0x12,
	0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x65, 0x71,
	0x31, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45,
	0x71, 0x31, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x6e, 0x65, 0x31, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x20, 0x02, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x4e, 0x65, 0x31, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x70, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x71, 0x20, 0x01, 0x28, 0x10,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x52, 0x0c, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x47, 0x74, 0x31, 0x12, 0x33, 0x0a, 0x0f, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x72,
	0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38,
	0x05, 0x52, 0x0d, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31,
	0x12, 0x33, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67,
	0x74, 0x65, 0x31, 0x18, 0x73, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x52, 0x0d, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x74, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0e, 0xe2,
	0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0c, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x12, 0x3b, 0x0a, 0x12, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x31, 0x18, 0x75, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2,
	0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0f, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x22, 0x9f, 0x26, 0x0a, 0x15, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x31, 0x12, 0x1f, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01,
	0x00, 0x48, 0x01, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x02, 0x52, 0x07, 0x74, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x33, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x48, 0x03, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18,
	0x01, 0x48, 0x04, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x71, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x20, 0x02, 0x48, 0x05, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x65, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c,
	0x74, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xb2, 0x01, 0x02, 0x28, 0x03, 0x48, 0x06, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x48, 0x07, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x08, 0x52, 0x0a, 0x74, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x48, 0x09,
	0x52, 0x0a, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x33, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a,
	0x03, 0x01, 0x02, 0x03, 0x48, 0x0a, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xe2,
	0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x0b, 0x52,
	0x0c, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x0c, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x48,
	0x0d, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x32, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x0e, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x33, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48,
	0x0f, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x34, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x48,
	0x10, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x20,
	0x02, 0x48, 0x11, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x65, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x28, 0x03, 0x48, 0x12, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67,
	0x74, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xb2, 0x01, 0x02, 0x30, 0x04, 0x48, 0x13, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x47,
	0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x14, 0x52, 0x0a, 0x74, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x48, 0x15, 0x52, 0x0a,
	0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a,
	0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01,
	0x02, 0x03, 0x48, 0x16, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x25, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x17, 0x52, 0x0c, 0x74,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x31, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x11, 0x48, 0x18, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x11, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00,
	0x48, 0x19, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x11, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x1a, 0x52, 0x08, 0x74,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x33, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x11, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x1b, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x65, 0x71, 0x31, 0x18, 0x32, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x48, 0x1c, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x20, 0x02, 0x48, 0x1d, 0x52, 0x0a, 0x74, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x28, 0x03, 0x48, 0x1e,
	0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x18,
	0x35, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02,
	0x30, 0x04, 0x48, 0x1f, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6c, 0x74, 0x65, 0x31, 0x18, 0x36, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x20, 0x52, 0x0b, 0x74, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x37, 0x20, 0x01, 0x28, 0x11,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x48, 0x21, 0x52,
	0x0b, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05,
	0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x22, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x10, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x39, 0x20, 0x01, 0x28, 0x11,
	0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03,
	0x48, 0x23, 0x52, 0x0d, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x12, 0x48, 0x24, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x12, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x48, 0x25, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x32, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x33, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x12, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12,
	0x00, 0x48, 0x26, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x33, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x12, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x27, 0x52, 0x08, 0x74, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x34, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28, 0x12, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x48, 0x28, 0x52, 0x0a,
	0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x20, 0x02,
	0x48, 0x29, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x65, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74,
	0x31, 0x18, 0x48, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x28, 0x03, 0x48, 0x2a, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c,
	0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x49, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x48, 0x2b, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x12,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x2c, 0x52,
	0x0b, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x40, 0x06, 0x48, 0x2d, 0x52, 0x0b, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74,
	0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x2e, 0x52, 0x0a, 0x74,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x10,
	0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31,
	0x18, 0x4d, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01,
	0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x2f, 0x52, 0x0d, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x31, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0f,
	0x48, 0x30, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x32, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2,
	0x01, 0x00, 0x48, 0x31, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x32,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x33, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12,
	0x00, 0x48, 0x32, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x33, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x34, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x33,
	0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x65, 0x71,
	0x31, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x18, 0x01, 0x48, 0x34, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0f, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x20, 0x02, 0x48, 0x35, 0x52, 0x0c,
	0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74,
	0x31, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x28, 0x03, 0x48, 0x36, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0f, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x48, 0x37, 0x52, 0x0c,
	0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74,
	0x65, 0x31, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x38, 0x52, 0x0d, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0f, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x5f, 0x20, 0x01,
	0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x48,
	0x39, 0x52, 0x0d, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x3a, 0x52, 0x0c, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x12, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x31, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a,
	0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x3b, 0x52, 0x0f, 0x74, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x31,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x10, 0x48, 0x3c, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x31, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x66, 0x20, 0x01, 0x28, 0x10, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x48, 0x3d, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x33, 0x18, 0x67, 0x20, 0x01, 0x28, 0x10, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x3e, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x33, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x68, 0x20, 0x01, 0x28, 0x10, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x3f, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x34, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x48, 0x40, 0x52, 0x0c, 0x74, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x18,
	0x6f, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02,
	0x20, 0x02, 0x48, 0x41, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e,
	0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x70, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x28, 0x03, 0x48, 0x42, 0x52, 0x0c, 0x74, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02,
	0x30, 0x04, 0x48, 0x43, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x47,
	0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x72, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x44, 0x52, 0x0d, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74,
	0x65, 0x31, 0x18, 0x73, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xb2, 0x01, 0x02, 0x40, 0x06, 0x48, 0x45, 0x52, 0x0d, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0e, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x74, 0x20, 0x01, 0x28,
	0x10, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02,
	0x03, 0x48, 0x46, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x75, 0x20, 0x01, 0x28, 0x10,
	0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03,
	0x48, 0x47, 0x52, 0x0f, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x33, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x34, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74,
	0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67,
	0x74, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6c, 0x74, 0x65, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x33, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x34, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e,
	0x31, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x32, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x33, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x34, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x6c, 0x74, 0x31, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e,
	0x31, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x32, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x33, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x34, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e,
	0x65, 0x31, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x69, 0x6e, 0x31, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x22, 0xfc, 0x1a, 0x0a, 0x12, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x4f, 0x6e, 0x65, 0x4f, 0x66,
	0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x31, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x31, 0x12,
	0x27, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x48, 0x00, 0x52,
	0x07, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x33, 0x12, 0x22,
	0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x34, 0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x71,
	0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x71,
	0x31, 0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x20, 0x02, 0x48, 0x00, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x65, 0x31,
	0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x31, 0x12,
	0x2d, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30,
	0x04, 0x48, 0x00, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x31, 0x12, 0x2f,
	0x0a, 0x0c, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38,
	0x05, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x12,
	0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02,
	0x40, 0x06, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31,
	0x12, 0x30, 0x0a, 0x0b, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05,
	0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49,
	0x6e, 0x31, 0x12, 0x37, 0x0a, 0x0f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x74,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x31, 0x12, 0x27, 0x0a, 0x09, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x48, 0x00, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x32, 0x12, 0x24, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x33, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52,
	0x07, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x33, 0x12, 0x22, 0x0a, 0x09, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x48, 0x00, 0x52, 0x07, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x34, 0x12, 0x2d, 0x0a, 0x0b,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x71, 0x31, 0x12, 0x2d, 0x0a, 0x0b, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x20, 0x02, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x65, 0x31, 0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x31, 0x12, 0x2d, 0x0a, 0x0b, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x74,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x30, 0x0a, 0x0b, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x12, 0x37, 0x0a, 0x0f,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05,
	0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4e,
	0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x31, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x11, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12,
	0x03, 0xb2, 0x01, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x32,
	0x12, 0x26, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x11, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x33, 0x12, 0x24, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x11, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x34, 0x12, 0x2f,
	0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x71, 0x31, 0x12,
	0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02,
	0x20, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x65, 0x31,
	0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74,
	0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74,
	0x31, 0x18, 0x35, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x30, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47,
	0x74, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c,
	0x74, 0x65, 0x31, 0x18, 0x36, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x37, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x38, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0e,
	0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x31, 0x12, 0x39, 0x0a, 0x10,
	0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x11, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01,
	0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x08, 0x74,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x31, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x12, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x32, 0x12, 0x26, 0x0a, 0x0a, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x33,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x12, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x33, 0x12, 0x24, 0x0a, 0x0a, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x40, 0x20, 0x01, 0x28, 0x12, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x34,
	0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x71,
	0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x65,
	0x31, 0x18, 0x47, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2,
	0x01, 0x02, 0x20, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4e,
	0x65, 0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c,
	0x74, 0x31, 0x18, 0x48, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xb2, 0x01, 0x02, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x67, 0x74, 0x31, 0x18, 0x49, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x47, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x40, 0x06, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x12,
	0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x12, 0x39,
	0x0a, 0x10, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x31, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x12, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08,
	0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x31, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0f, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x31, 0x12, 0x2d, 0x0a,
	0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x52, 0x20,
	0x01, 0x28, 0x0f, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x32, 0x12, 0x2a, 0x0a, 0x0c,
	0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x53, 0x20, 0x01,
	0x28, 0x0f, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x33, 0x12, 0x28, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x34, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x65, 0x71, 0x31, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x45, 0x71, 0x31, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0f, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x20, 0x02, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x65, 0x31, 0x12, 0x33, 0x0a, 0x0e,
	0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x74,
	0x31, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x67, 0x74, 0x31, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x47, 0x74, 0x31, 0x12, 0x35, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0f, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x00, 0x52, 0x0d,
	0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x35, 0x0a,
	0x0f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31,
	0x18, 0x5f, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x40, 0x06, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x47, 0x74, 0x65, 0x31, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0e, 0xe2, 0xdf,
	0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x31, 0x12, 0x3d, 0x0a, 0x12,
	0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x31, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0f, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08,
	0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x10, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x31, 0x12,
	0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x32, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x10, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xb2, 0x01, 0x00,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x32, 0x12, 0x2a,
	0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x33, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x10, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x0a,
	0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x33, 0x12, 0x28, 0x0a, 0x0c, 0x74, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x68, 0x20, 0x01, 0x28, 0x10,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x34, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x71, 0x31, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x20, 0x02, 0x48, 0x00,
	0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x65, 0x31, 0x12, 0x33,
	0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31,
	0x18, 0x70, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01,
	0x02, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x4c, 0x74, 0x31, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x71, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x30, 0x04, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x47, 0x74, 0x31, 0x12, 0x35, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xb2, 0x01, 0x02, 0x38, 0x05, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x12,
	0x35, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74,
	0x65, 0x31, 0x18, 0x73, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xb2, 0x01, 0x02, 0x40, 0x06, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x74, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0e,
	0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xb2, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00,
	0x52, 0x0c, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x12, 0x3d,
	0x0a, 0x12, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x69, 0x6e, 0x31, 0x18, 0x75, 0x20, 0x01, 0x28, 0x10, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a,
	0x12, 0x08, 0xb2, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x42, 0x0a, 0x0a,
	0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x31, 0x22, 0xaf, 0x11, 0x0a, 0x15, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x31, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x31, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xba, 0x01, 0x00,
	0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x32, 0x12, 0x24, 0x0a, 0x0a, 0x74, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x33,
	0x12, 0x22, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x34, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xba, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x45, 0x71, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6e, 0x65, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xba, 0x01, 0x02, 0x20, 0x02, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e,
	0x65, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c,
	0x74, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xba, 0x01, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74,
	0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74,
	0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba,
	0x01, 0x02, 0x30, 0x04, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x31,
	0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65,
	0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba,
	0x01, 0x02, 0x38, 0x05, 0x52, 0x0b, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x65,
	0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74,
	0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xba, 0x01, 0x02, 0x40, 0x06, 0x52, 0x0b, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74,
	0x65, 0x31, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69,
	0x6e, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08,
	0xba, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x49, 0x6e, 0x31, 0x12, 0x37, 0x0a, 0x10, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e,
	0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0d,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1c, 0x0a,
	0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x31, 0x12, 0x27, 0x0a, 0x0a, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xba, 0x01, 0x00, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x32, 0x12, 0x24, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00,
	0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x33, 0x12, 0x22, 0x0a, 0x0a, 0x74, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x34, 0x12, 0x2d,
	0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x18,
	0x01, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x71, 0x31, 0x12, 0x2d, 0x0a,
	0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x20, 0x02,
	0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x65, 0x31, 0x12, 0x2d, 0x0a, 0x0c,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x31, 0x12, 0x2d, 0x0a, 0x0c, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x30, 0x04, 0x52, 0x0a,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0b,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x40, 0x06, 0x52,
	0x0b, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x30, 0x0a, 0x0c,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03, 0x01,
	0x02, 0x03, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x12, 0x37,
	0x0a, 0x10, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x31, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08,
	0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0d, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x74, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x31, 0x12, 0x29, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x07, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x12, 0x03, 0xba, 0x01, 0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x32, 0x12, 0x26, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x07, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52,
	0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x33, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x07, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x34,
	0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x65, 0x71,
	0x31, 0x18, 0x32, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba,
	0x01, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x71,
	0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e,
	0x65, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xba, 0x01, 0x02, 0x20, 0x02, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e,
	0x65, 0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x6c, 0x74, 0x31, 0x18, 0x34, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xba, 0x01, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x4c, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x67, 0x74, 0x31, 0x18, 0x35, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xba, 0x01, 0x02, 0x30, 0x04, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x47, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x36, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0c, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x37, 0x20, 0x01, 0x28, 0x07, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x40, 0x06, 0x52, 0x0c, 0x74, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x0d, 0x74, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x07, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02,
	0x03, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x31, 0x12, 0x39,
	0x0a, 0x11, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x31, 0x18, 0x39, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12,
	0x08, 0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0e, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x31, 0x12, 0x29, 0x0a, 0x0b, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x06, 0x42, 0x09,
	0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xba, 0x01, 0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x32, 0x12, 0x26, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x33, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x06, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12,
	0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x33, 0x12, 0x24, 0x0a, 0x0b,
	0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x40, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x34, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x65, 0x71, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xba, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x45, 0x71, 0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x6e, 0x65, 0x31, 0x18, 0x47, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xba, 0x01, 0x02, 0x20, 0x02, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4e, 0x65, 0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x48, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x4c, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x49, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x30, 0x04, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x47, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0c, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x31, 0x0a, 0x0e, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x40, 0x06, 0x52, 0x0c,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x0d,
	0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x06, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03,
	0x01, 0x02, 0x03, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x31,
	0x12, 0x39, 0x0a, 0x11, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x52, 0x0e, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x22, 0xe0, 0x19, 0x0a, 0x16,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x74, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x12, 0x03, 0xba, 0x01, 0x00, 0x48, 0x01, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x32, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x12, 0x00, 0x48, 0x02, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x33, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x03, 0x52, 0x08,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x34, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x18, 0x01, 0x48, 0x04,
	0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02,
	0x20, 0x02, 0x48, 0x05, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x65, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6c, 0x74, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xba, 0x01, 0x02, 0x28, 0x03, 0x48, 0x06, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x30, 0x04, 0x48, 0x07, 0x52, 0x0a, 0x74, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x48,
	0x08, 0x52, 0x0b, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74,
	0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xba, 0x01, 0x02, 0x40, 0x06, 0x48, 0x09, 0x52, 0x0b, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x47, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xe2,
	0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x0a, 0x52,
	0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x10, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08,
	0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x0b, 0x52, 0x0d, 0x74, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0a,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04,
	0x48, 0x0c, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xba, 0x01, 0x00, 0x48, 0x0d,
	0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x32, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x0e, 0x52, 0x08, 0x74, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x33, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x48, 0x0f, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71,
	0x31, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba,
	0x01, 0x02, 0x18, 0x01, 0x48, 0x10, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x20, 0x02, 0x48, 0x11, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x4e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x28, 0x03, 0x48, 0x12, 0x52, 0x0a,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x30, 0x04,
	0x48, 0x13, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74,
	0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xba, 0x01, 0x02, 0x38, 0x05, 0x48, 0x14, 0x52, 0x0b, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x40, 0x06, 0x48, 0x15, 0x52, 0x0b, 0x74,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03,
	0x01, 0x02, 0x03, 0x48, 0x16, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x10, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e,
	0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x17,
	0x52, 0x0d, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x07, 0x48, 0x18, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x07, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x12, 0x03, 0xba, 0x01, 0x00, 0x48, 0x19, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x07, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x12, 0x00, 0x48, 0x1a, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x33, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x07, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48,
	0x1b, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01,
	0x02, 0x18, 0x01, 0x48, 0x1c, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45,
	0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x20, 0x02, 0x48, 0x1d, 0x52, 0x0b, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x28, 0x03, 0x48,
	0x1e, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x74, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67,
	0x74, 0x31, 0x18, 0x35, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xba, 0x01, 0x02, 0x30, 0x04, 0x48, 0x1f, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x36, 0x20, 0x01, 0x28, 0x07, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x48, 0x20, 0x52, 0x0c,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65,
	0x31, 0x18, 0x37, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba,
	0x01, 0x02, 0x40, 0x06, 0x48, 0x21, 0x52, 0x0c, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x47, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x38, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0e,
	0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x22,
	0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x11, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x39, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x23, 0x52, 0x0e, 0x74,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x31, 0x18,
	0x3d, 0x20, 0x01, 0x28, 0x06, 0x48, 0x24, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x06, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x12, 0x03, 0xba, 0x01, 0x00, 0x48, 0x25, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x32, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x33, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x06, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x12, 0x00, 0x48, 0x26, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x33, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x34, 0x18, 0x40, 0x20, 0x01, 0x28, 0x06, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x27, 0x52,
	0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x34, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x18,
	0x01, 0x48, 0x28, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x71, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x6e, 0x65, 0x31, 0x18, 0x47, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xba, 0x01, 0x02, 0x20, 0x02, 0x48, 0x29, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x4e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x48, 0x20, 0x01, 0x28, 0x06,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x28, 0x03, 0x48, 0x2a, 0x52,
	0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31,
	0x18, 0x49, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01,
	0x02, 0x30, 0x04, 0x48, 0x2b, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x47,
	0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x48, 0x2c, 0x52, 0x0c, 0x74, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18,
	0x4b, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02,
	0x40, 0x06, 0x48, 0x2d, 0x52, 0x0c, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x47, 0x74,
	0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0e, 0xe2, 0xdf,
	0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x2e, 0x52, 0x0b,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x11, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x31, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12,
	0x08, 0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x2f, 0x52, 0x0e, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x31, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x32, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67, 0x74,
	0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x69, 0x6e, 0x31, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x33, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x34, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x33, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x34, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x65, 0x71, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69,
	0x6e, 0x31, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x31, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x33, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x34, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c,
	0x74, 0x65, 0x31, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x22, 0x99,
	0x12, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x73,
	0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x08, 0x74, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x31, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x12, 0x03, 0xba, 0x01, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x32, 0x12, 0x26, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x33, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x33, 0x12, 0x24, 0x0a, 0x0a, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x34, 0x12,
	0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x71, 0x31,
	0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01,
	0x02, 0x20, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x65,
	0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x74,
	0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba,
	0x01, 0x02, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x74, 0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x67,
	0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xba, 0x01, 0x02, 0x30, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x47, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x40, 0x06, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x47, 0x74, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x0c, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x31, 0x12, 0x39, 0x0a,
	0x10, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba,
	0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x31, 0x12, 0x29, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x12, 0x03, 0xba, 0x01, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x32, 0x12, 0x26, 0x0a, 0x0a, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x33, 0x12, 0x24, 0x0a, 0x0a, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x34, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x65, 0x71,
	0x31, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba,
	0x01, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45,
	0x71, 0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e,
	0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xba, 0x01, 0x02, 0x20, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4e, 0x65, 0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x6c, 0x74, 0x31, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xba, 0x01, 0x02, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4c, 0x74, 0x31, 0x12, 0x2f, 0x0a, 0x0c, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x67, 0x74, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xba, 0x01, 0x02, 0x30, 0x04, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x47, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x23, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x40, 0x06, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x0c, 0x74,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02,
	0x03, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x31, 0x12,
	0x39, 0x0a, 0x10, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x31, 0x18, 0x25, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12,
	0x08, 0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x07, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x31, 0x12, 0x2b, 0x0a, 0x0b,
	0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x07, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xba, 0x01, 0x00, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x32, 0x12, 0x28, 0x0a, 0x0b, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x07, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x33, 0x12, 0x26, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x5f, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x07, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x34, 0x12, 0x31, 0x0a, 0x0d, 0x74,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x71, 0x31, 0x12, 0x31,
	0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x65, 0x31, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02,
	0x20, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x65,
	0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c,
	0x74, 0x31, 0x18, 0x34, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xba, 0x01, 0x02, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x4c, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x35, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x30, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x47, 0x74, 0x31, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x36, 0x20, 0x01, 0x28, 0x07, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x33, 0x0a, 0x0e,
	0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x37,
	0x20, 0x01, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x40,
	0x06, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x47, 0x74, 0x65,
	0x31, 0x12, 0x34, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x69,
	0x6e, 0x31, 0x18, 0x38, 0x20, 0x01, 0x28, 0x07, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08,
	0xba, 0x01, 0x05, 0x4a, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x49, 0x6e, 0x31, 0x12, 0x3b, 0x0a, 0x11, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x07, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x52, 0x03, 0x01,
	0x02, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x6f,
	0x74, 0x49, 0x6e, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x5f, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x09, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x31, 0x12, 0x2b, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x06, 0x42, 0x09, 0xe2, 0xdf, 0x1f,
	0x05, 0x12, 0x03, 0xba, 0x01, 0x00, 0x48, 0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x32, 0x12, 0x28, 0x0a, 0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x33, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x06, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x33, 0x12, 0x26, 0x0a,
	0x0b, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x34, 0x18, 0x40, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x09, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x34, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x46, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x71, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x47, 0x20, 0x01, 0x28, 0x06, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x20, 0x02, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x65, 0x31, 0x12, 0x31, 0x0a, 0x0d, 0x74,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4c, 0x74, 0x31, 0x12, 0x31,
	0x0a, 0x0d, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x31, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02,
	0x30, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x47, 0x74,
	0x31, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6c,
	0x74, 0x65, 0x31, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xba, 0x01, 0x02, 0x38, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xba, 0x01, 0x02, 0x40, 0x06, 0x48, 0x00, 0x52, 0x0c, 0x74,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x47, 0x74, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x0d, 0x74,
	0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x4c, 0x20, 0x01,
	0x28, 0x06, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x4a, 0x03, 0x01,
	0x02, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x49, 0x6e,
	0x31, 0x12, 0x3b, 0x0a, 0x11, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x06, 0x42, 0x0e, 0xe2, 0xdf,
	0x1f, 0x0a, 0x12, 0x08, 0xba, 0x01, 0x05, 0x52, 0x03, 0x01, 0x02, 0x03, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x42, 0x0a,
	0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x31, 0x22, 0x8a, 0x07, 0x0a, 0x0e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x61, 0x67, 0x73, 0x31, 0x12, 0x27, 0x0a,
	0x10, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x12, 0x32, 0x0a, 0x10, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xd2, 0x01, 0x00, 0x52, 0x0d, 0x74, 0x42, 0x6f,
	0x6f, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x32, 0x12, 0x2f, 0x0a, 0x10, 0x74, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x0d, 0x74, 0x42,
	0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x33, 0x12, 0x2d, 0x0a, 0x10, 0x74,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x34, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x0d, 0x74, 0x42, 0x6f,
	0x6f, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x34, 0x12, 0x38, 0x0a, 0x12, 0x74, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xd2, 0x01,
	0x02, 0x18, 0x01, 0x52, 0x0f, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x45, 0x71, 0x31, 0x12, 0x2e, 0x0a, 0x11, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x0e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x11, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xd2, 0x01, 0x00, 0x48, 0x02, 0x52, 0x0e, 0x74, 0x42,
	0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x32, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x11, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x33, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x12, 0x00, 0x48, 0x03, 0x52, 0x0e, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x33, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x11, 0x74, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x34, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x04, 0x52, 0x0e, 0x74, 0x42, 0x6f, 0x6f,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x34, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x13, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x65, 0x71, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xd2, 0x01, 0x02, 0x18, 0x01, 0x48, 0x05, 0x52, 0x10, 0x74, 0x42, 0x6f, 0x6f, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x6e, 0x66, 0x6f, 0x66, 0x5f, 0x31,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x4f,
	0x6e, 0x66, 0x6f, 0x66, 0x31, 0x12, 0x30, 0x0a, 0x0e, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6f, 0x6e, 0x66, 0x6f, 0x66, 0x5f, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x12, 0x03, 0xd2, 0x01, 0x00, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x42, 0x6f, 0x6f,
	0x6c, 0x4f, 0x6e, 0x66, 0x6f, 0x66, 0x32, 0x12, 0x2d, 0x0a, 0x0e, 0x74, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6f, 0x6e, 0x66, 0x6f, 0x66, 0x5f, 0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x42, 0x6f, 0x6f, 0x6c,
	0x4f, 0x6e, 0x66, 0x6f, 0x66, 0x33, 0x12, 0x2b, 0x0a, 0x0e, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x6f, 0x6e, 0x66, 0x6f, 0x66, 0x5f, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x04,
	0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x6e, 0x66,
	0x6f, 0x66, 0x34, 0x12, 0x36, 0x0a, 0x10, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xd2, 0x01, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x42,
	0x6f, 0x6f, 0x6c, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x45, 0x71, 0x31, 0x42, 0x0a, 0x0a, 0x08, 0x6f,
	0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x31, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x31, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x32, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x33, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x34, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x31, 0x22, 0x84, 0x0b, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x46, 0x0a, 0x13,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x10, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x31, 0x12, 0x51, 0x0a, 0x13, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x12, 0x03, 0xe2, 0x01, 0x00, 0x52, 0x10, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x32, 0x12, 0x4e, 0x0a, 0x13, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x10, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x33, 0x12, 0x4c, 0x0a, 0x13, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x34, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x52, 0x10, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x34, 0x12, 0x62, 0x0a, 0x1b, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x17, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x31, 0x12, 0x62, 0x0a, 0x1b, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2,
	0x01, 0x02, 0x10, 0x00, 0x52, 0x17, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x32, 0x12, 0x5b, 0x0a,
	0x17, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2,
	0x01, 0x02, 0x18, 0x00, 0x52, 0x14, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x31, 0x12, 0x5b, 0x0a, 0x17, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01, 0x02, 0x18,
	0x01, 0x52, 0x14, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x53, 0x6b, 0x69, 0x70, 0x32, 0x12, 0x44, 0x0a, 0x11, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x66, 0x6f, 0x66, 0x5f, 0x31, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x66, 0x6f, 0x66, 0x31, 0x12, 0x4f, 0x0a,
	0x11, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x66, 0x6f, 0x66,
	0x5f, 0x32, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xe2, 0x01, 0x00, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x66, 0x6f, 0x66, 0x32, 0x12, 0x4c,
	0x0a, 0x11, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x66, 0x6f,
	0x66, 0x5f, 0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x66, 0x6f, 0x66, 0x33, 0x12, 0x4a, 0x0a, 0x11,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x66, 0x6f, 0x66, 0x5f,
	0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4f, 0x6e, 0x66, 0x6f, 0x66, 0x34, 0x12, 0x60, 0x0a, 0x19, 0x74, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x6e, 0x75, 0x6c, 0x6c, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01, 0x02, 0x10,
	0x01, 0x48, 0x00, 0x52, 0x15, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x65,
	0x6f, 0x66, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x31, 0x12, 0x60, 0x0a, 0x19, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x32, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01,
	0x02, 0x10, 0x00, 0x48, 0x00, 0x52, 0x15, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f,
	0x6e, 0x65, 0x6f, 0x66, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x32, 0x12, 0x59, 0x0a, 0x15,
	0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x73, 0x6b, 0x69, 0x70, 0x31, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01, 0x02, 0x18,
	0x00, 0x48, 0x00, 0x52, 0x12, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x65,
	0x6f, 0x66, 0x53, 0x6b, 0x69, 0x70, 0x31, 0x12, 0x59, 0x0a, 0x15, 0x74, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x32,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xe2, 0x01, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x12,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x6b, 0x69,
	0x70, 0x32, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x31, 0x22, 0xed,
	0x06, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x67, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x12, 0x30, 0x0a, 0x08, 0x74, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xda, 0x01, 0x00, 0x52,
	0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x12, 0x38, 0x0a, 0x08, 0x74, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x31, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x33, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x34, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02,
	0x18, 0x00, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x31, 0x12, 0x41, 0x0a, 0x0a,
	0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xda, 0x01, 0x02, 0x20, 0x01, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x65, 0x31, 0x12,
	0x41, 0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x28, 0x02, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x4c,
	0x74, 0x31, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x74, 0x31,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x30, 0x03, 0x52, 0x08, 0x74, 0x45, 0x6e,
	0x75, 0x6d, 0x47, 0x74, 0x31, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x38, 0x04, 0x52,
	0x09, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x43, 0x0a, 0x0b, 0x74, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda,
	0x01, 0x02, 0x40, 0x08, 0x52, 0x09, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x47, 0x74, 0x65, 0x31, 0x12,
	0x44, 0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xda, 0x01, 0x05, 0x4a, 0x03, 0x00, 0x01, 0x02, 0x52, 0x08, 0x74, 0x45, 0x6e,
	0x75, 0x6d, 0x49, 0x6e, 0x31, 0x12, 0x4b, 0x0a, 0x0e, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xda, 0x01, 0x05,
	0x52, 0x03, 0x03, 0x04, 0x08, 0x52, 0x0b, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x31, 0x12, 0x4a, 0x0a, 0x0f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x58, 0x01,
	0x52, 0x0c, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0xf5,
	0x08, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x67, 0x73,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x48, 0x00, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x08, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x12, 0x03, 0xda, 0x01, 0x00, 0x48, 0x01, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x32, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x12, 0x00, 0x48, 0x02, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x34, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x04, 0xe2, 0xdf, 0x1f,
	0x00, 0x48, 0x03, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x34, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x00, 0x48, 0x04, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x6e, 0x65, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x20, 0x01, 0x48,
	0x05, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xda, 0x01, 0x02, 0x28, 0x02, 0x48, 0x06, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x30, 0x03, 0x48,
	0x07, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x48,
	0x0a, 0x0b, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x38, 0x04, 0x48, 0x08, 0x52, 0x09, 0x74, 0x45, 0x6e, 0x75,
	0x6d, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x74, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02,
	0x40, 0x08, 0x48, 0x09, 0x52, 0x09, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x47, 0x74, 0x65, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x31,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0e,
	0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xda, 0x01, 0x05, 0x4a, 0x03, 0x00, 0x01, 0x02, 0x48, 0x0a,
	0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a,
	0x0e, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0e, 0xe2,
	0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xda, 0x01, 0x05, 0x52, 0x03, 0x03, 0x04, 0x08, 0x48, 0x0b, 0x52,
	0x0b, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x4f, 0x0a, 0x0f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x58, 0x01, 0x48, 0x0c, 0x52,
	0x0c, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x31, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x32, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x33, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x65, 0x71, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e,
	0x65, 0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x74,
	0x31, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x74, 0x31,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x74, 0x65, 0x31,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x74, 0x65, 0x31,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x31, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69,
	0x6e, 0x31, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x22, 0x91, 0x07, 0x0a, 0x13, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x45, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x67, 0x73, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x31, 0x12, 0x32,
	0x0a, 0x08, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x48, 0x00, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x12, 0x3d, 0x0a, 0x08, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x12, 0x03, 0xda, 0x01, 0x00, 0x48, 0x00, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d,
	0x32, 0x12, 0x3a, 0x0a, 0x08, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x33, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x06, 0xe2, 0xdf, 0x1f,
	0x02, 0x12, 0x00, 0x48, 0x00, 0x52, 0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x33, 0x12, 0x38, 0x0a,
	0x08, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x34, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x18, 0x00,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x71, 0x31, 0x12, 0x43, 0x0a, 0x0a,
	0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xda, 0x01, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x65,
	0x31, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x74, 0x31, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2,
	0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x74, 0x45,
	0x6e, 0x75, 0x6d, 0x4c, 0x74, 0x31, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x30, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x47, 0x74, 0x31, 0x12, 0x45, 0x0a, 0x0b, 0x74,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xda, 0x01, 0x02, 0x38, 0x04, 0x48, 0x00, 0x52, 0x09, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x4c, 0x74,
	0x65, 0x31, 0x12, 0x45, 0x0a, 0x0b, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x74, 0x65,
	0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x40, 0x08, 0x48, 0x00, 0x52, 0x09,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x47, 0x74, 0x65, 0x31, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xda, 0x01, 0x05,
	0x4a, 0x03, 0x00, 0x01, 0x02, 0x48, 0x00, 0x52, 0x08, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x6e,
	0x31, 0x12, 0x4d, 0x0a, 0x0e, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x6e, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x31, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xda, 0x01, 0x05, 0x52, 0x03, 0x03, 0x04,
	0x08, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31,
	0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xda, 0x01, 0x02, 0x58, 0x01, 0x48, 0x00,
	0x52, 0x0c, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x73, 0x42, 0x0a,
	0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x31, 0x22, 0xd6, 0x03, 0x0a, 0x0f, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x54, 0x61, 0x67, 0x73, 0x31, 0x12, 0x1a,
	0x0a, 0x09, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x31, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x12, 0x03, 0xca, 0x01, 0x00, 0x52, 0x07, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x32, 0x12, 0x22, 0x0a, 0x09, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x07, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x33, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x34, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xca, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x31, 0x12, 0x32, 0x0a, 0x0f, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xca, 0x01, 0x02, 0x20,
	0x02, 0x52, 0x0c, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x12,
	0x32, 0x0a, 0x0f, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c,
	0x74, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xca, 0x01, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e,
	0x4c, 0x74, 0x31, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c,
	0x65, 0x6e, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xca, 0x01, 0x02, 0x30, 0x04, 0x52, 0x0c, 0x74, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x31, 0x12, 0x34, 0x0a, 0x10, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xca, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0d,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x34, 0x0a,
	0x10, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65,
	0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xca,
	0x01, 0x02, 0x40, 0x06, 0x52, 0x0d, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x47,
	0x74, 0x65, 0x31, 0x22, 0xb9, 0x13, 0x0a, 0x19, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x31, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x30, 0x31, 0x18,
	0x65, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x30, 0x31, 0x12,
	0x27, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x30, 0x32, 0x18, 0x66, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xea, 0x01, 0x00, 0x52, 0x08,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x30, 0x32, 0x12, 0x24, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x31, 0x30, 0x33, 0x18, 0x67, 0x20, 0x03, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf,
	0x1f, 0x02, 0x12, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x30, 0x33, 0x12, 0x22,
	0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x30, 0x34, 0x18, 0x68, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31,
	0x30, 0x34, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x30, 0x35,
	0x18, 0x69, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xea, 0x01,
	0x05, 0x5a, 0x03, 0xc2, 0x01, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x30, 0x35,
	0x12, 0x29, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x30, 0x36, 0x18, 0x6a,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x5a,
	0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x30, 0x36, 0x12, 0x35, 0x0a, 0x0a, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x30, 0x37, 0x18, 0x6b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31,
	0x30, 0x37, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x30, 0x38,
	0x18, 0x6c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xea, 0x01, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x31, 0x30, 0x38, 0x12, 0x3d, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31,
	0x30, 0x39, 0x18, 0x6d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x31, 0x30, 0x39, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x31,
	0x30, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x31, 0x30,
	0x12, 0x45, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x31, 0x31, 0x18, 0x6f,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0e, 0xe2,
	0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xea, 0x01, 0x05, 0x5a, 0x03, 0xe2, 0x01, 0x00, 0x52, 0x08, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x31, 0x31, 0x31, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x31, 0x31, 0x32, 0x18, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x5a,
	0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x31, 0x32, 0x12, 0x34, 0x0a, 0x0a, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x31, 0x33, 0x18, 0x71, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x31,
	0x33, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x31, 0x34, 0x18,
	0x72, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x09, 0xe2,
	0xdf, 0x1f, 0x05, 0x12, 0x03, 0xea, 0x01, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31,
	0x31, 0x34, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x31, 0x35,
	0x18, 0x73, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x06,
	0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x31, 0x35,
	0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x31, 0x36, 0x18, 0x74,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x04, 0xe2, 0xdf,
	0x1f, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31, 0x31, 0x36, 0x12, 0x44, 0x0a, 0x0a,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x31, 0x37, 0x18, 0x75, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08,
	0xea, 0x01, 0x05, 0x5a, 0x03, 0xda, 0x01, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x31,
	0x31, 0x37, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x31, 0x31, 0x38,
	0x18, 0x76, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x5a, 0x00, 0x52, 0x08, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x31, 0x31, 0x38, 0x12, 0x34, 0x0a, 0x10, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x31, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x31, 0x12, 0x30, 0x0a, 0x0e, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x18, 0x01,
	0x52, 0x0b, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x31, 0x12, 0x30, 0x0a,
	0x0e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x31, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02,
	0x20, 0x02, 0x52, 0x0b, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x12,
	0x30, 0x0a, 0x0e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74,
	0x31, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea,
	0x01, 0x02, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x4c, 0x74,
	0x31, 0x12, 0x30, 0x0a, 0x0e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xea, 0x01, 0x02, 0x30, 0x04, 0x52, 0x0b, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e,
	0x47, 0x74, 0x31, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6c, 0x65,
	0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0c, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x0f, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x40, 0x06, 0x52, 0x0c, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x65, 0x31, 0x12, 0x3c, 0x0a, 0x14, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xea, 0x01, 0x02, 0x50, 0x01, 0x52, 0x11, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x14, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x01, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea,
	0x01, 0x02, 0x50, 0x01, 0x52, 0x11, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x13, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x02, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x50,
	0x01, 0x52, 0x10, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x13, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x22, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x50, 0x01, 0x52, 0x10, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x3a, 0x0a, 0x13, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x23, 0x20, 0x03, 0x28, 0x03, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x50, 0x01, 0x52, 0x10, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3c, 0x0a, 0x14, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12,
	0x05, 0xea, 0x01, 0x02, 0x50, 0x01, 0x52, 0x11, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x3c, 0x0a, 0x14, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x25, 0x20, 0x03, 0x28, 0x04, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea,
	0x01, 0x02, 0x50, 0x01, 0x52, 0x11, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x3c, 0x0a, 0x14, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x26, 0x20, 0x03, 0x28, 0x11, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02,
	0x50, 0x01, 0x52, 0x11, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x3c, 0x0a, 0x14, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x27, 0x20,
	0x03, 0x28, 0x12, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x50, 0x01,
	0x52, 0x11, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x40, 0x0a, 0x16, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x28, 0x20,
	0x03, 0x28, 0x0f, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x50, 0x01,
	0x52, 0x13, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x40, 0x0a, 0x16, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x29, 0x20, 0x03, 0x28, 0x10, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02,
	0x50, 0x01, 0x52, 0x13, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x2a, 0x20, 0x03, 0x28, 0x07, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01,
	0x02, 0x50, 0x01, 0x52, 0x12, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x18, 0x2b, 0x20, 0x03, 0x28, 0x06, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01,
	0x02, 0x50, 0x01, 0x52, 0x12, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x38, 0x0a, 0x12, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x2c, 0x20,
	0x03, 0x28, 0x08, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x50, 0x01,
	0x52, 0x0f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x6f, 0x6f,
	0x6c, 0x12, 0x50, 0x0a, 0x12, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x31, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02,
	0x50, 0x01, 0x52, 0x0f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x5e, 0x0a, 0x15, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x12, 0xe2, 0xdf, 0x1f,
	0x0e, 0x12, 0x0c, 0xea, 0x01, 0x09, 0x50, 0x01, 0x5a, 0x05, 0xe2, 0x01, 0x02, 0x18, 0x01, 0x52,
	0x12, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x13, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0c,
	0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x50, 0x01, 0x52, 0x10, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22,
	0xd0, 0x09, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x31, 0x12, 0x43, 0x0a, 0x12, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x12, 0x10, 0xea, 0x01,
	0x0d, 0x30, 0x01, 0x5a, 0x09, 0xc2, 0x01, 0x06, 0xca, 0x02, 0x03, 0x69, 0x64, 0x2d, 0x52, 0x0f,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x4f, 0x0a, 0x12, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x03, 0x28, 0x01, 0x42, 0x22, 0xe2, 0xdf, 0x1f,
	0x1e, 0x12, 0x1c, 0xea, 0x01, 0x19, 0x30, 0x01, 0x5a, 0x15, 0xaa, 0x01, 0x12, 0x39, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0x26, 0x40, 0x41, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x52,
	0x0f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x4d, 0x0a, 0x11, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x02, 0x42, 0x22, 0xe2, 0xdf, 0x1f,
	0x1e, 0x12, 0x1c, 0xea, 0x01, 0x19, 0x30, 0x01, 0x5a, 0x15, 0xaa, 0x01, 0x12, 0x39, 0x33, 0x33,
	0x33, 0x33, 0x33, 0x33, 0x26, 0x40, 0x41, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x52,
	0x0e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x3f, 0x0a, 0x11, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x22, 0x20, 0x03, 0x28, 0x05, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10,
	0x12, 0x0e, 0xea, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02,
	0x52, 0x0e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x3f, 0x0a, 0x11, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x23, 0x20, 0x03, 0x28, 0x03, 0x42, 0x14, 0xe2, 0xdf, 0x1f,
	0x10, 0x12, 0x0e, 0xea, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40,
	0x02, 0x52, 0x0e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x41, 0x0a, 0x12, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x26, 0x20, 0x03, 0x28, 0x11, 0x42, 0x14, 0xe2,
	0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xea, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38,
	0x0a, 0x40, 0x02, 0x52, 0x0f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x41, 0x0a, 0x12, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x27, 0x20, 0x03, 0x28, 0x12,
	0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xea, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xb2,
	0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x45, 0x0a, 0x14, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18,
	0x28, 0x20, 0x03, 0x28, 0x0f, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xea, 0x01, 0x0b,
	0x30, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x11, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x45,
	0x0a, 0x14, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x29, 0x20, 0x03, 0x28, 0x10, 0x42, 0x14, 0xe2, 0xdf,
	0x1f, 0x10, 0x12, 0x0e, 0xea, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a,
	0x40, 0x02, 0x52, 0x11, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x41, 0x0a, 0x12, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x24, 0x20, 0x03, 0x28,
	0x0d, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xea, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07,
	0xba, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0f, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x41, 0x0a, 0x12, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x04, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xea, 0x01, 0x0b, 0x30,
	0x01, 0x5a, 0x07, 0xba, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0f, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x43, 0x0a, 0x13, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x07, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e,
	0xea, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xba, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x10,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x12, 0x43, 0x0a, 0x13, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x06, 0x42, 0x14, 0xe2,
	0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xea, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xba, 0x01, 0x04, 0x38,
	0x0a, 0x40, 0x02, 0x52, 0x10, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x3b, 0x0a, 0x10, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x2c, 0x20, 0x03, 0x28, 0x08, 0x42,
	0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xea, 0x01, 0x09, 0x30, 0x01, 0x5a, 0x05, 0xd2, 0x01,
	0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x53, 0x0a, 0x10, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x31, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xea, 0x01, 0x09, 0x30,
	0x01, 0x5a, 0x05, 0xda, 0x01, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x3d, 0x0a, 0x11, 0x74, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x2e, 0x20, 0x03,
	0x28, 0x0c, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xea, 0x01, 0x09, 0x30, 0x01, 0x5a,
	0x05, 0xca, 0x01, 0x02, 0x18, 0x03, 0x52, 0x0e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x13, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x2f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x12, 0xe2, 0xdf,
	0x1f, 0x0e, 0x12, 0x0c, 0xea, 0x01, 0x09, 0x30, 0x01, 0x5a, 0x05, 0xe2, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x10, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xde, 0x1d, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54,
	0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x12, 0x4e, 0x0a, 0x09, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x30, 0x31, 0x18, 0x65, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x31, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x74, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x31, 0x12, 0x59, 0x0a, 0x09, 0x74,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x30, 0x32, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x32, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xf2, 0x01, 0x00, 0x52, 0x07, 0x74,
	0x4d, 0x61, 0x70, 0x31, 0x30, 0x32, 0x12, 0x56, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x31, 0x30, 0x33, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31,
	0x2e, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x06, 0xe2,
	0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x33, 0x12, 0x54,
	0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x30, 0x34, 0x18, 0x68, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61,
	0x70, 0x31, 0x30, 0x34, 0x12, 0x5e, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x30,
	0x35, 0x18, 0x69, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54,
	0x4d, 0x61, 0x70, 0x31, 0x30, 0x35, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xf2, 0x01, 0x05, 0x5a, 0x03, 0xc2, 0x01, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61,
	0x70, 0x31, 0x30, 0x35, 0x12, 0x5b, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x30,
	0x36, 0x18, 0x6a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54,
	0x4d, 0x61, 0x70, 0x31, 0x30, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x5a, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61, 0x70, 0x31, 0x30,
	0x36, 0x12, 0x5e, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x30, 0x37, 0x18, 0x6b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54,
	0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70,
	0x31, 0x30, 0x37, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08,
	0xf2, 0x01, 0x05, 0x62, 0x03, 0xc2, 0x01, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61, 0x70, 0x31, 0x30,
	0x37, 0x12, 0x5b, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x30, 0x38, 0x18, 0x6c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54,
	0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70,
	0x31, 0x30, 0x38, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05,
	0xf2, 0x01, 0x02, 0x62, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x38, 0x12, 0x4e,
	0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x31, 0x31, 0x18, 0x6f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x31,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x31, 0x12, 0x59,
	0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x31, 0x32, 0x18, 0x70, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xf2, 0x01, 0x00,
	0x52, 0x07, 0x74, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x32, 0x12, 0x56, 0x0a, 0x09, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x31, 0x31, 0x33, 0x18, 0x71, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67,
	0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61, 0x70, 0x31, 0x31,
	0x33, 0x12, 0x54, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x31, 0x34, 0x18, 0x72,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54,
	0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70,
	0x31, 0x31, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x07,
	0x74, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x34, 0x12, 0x5e, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x31, 0x31, 0x35, 0x18, 0x73, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x35, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e,
	0xe2, 0xdf, 0x1f, 0x0a, 0x12, 0x08, 0xf2, 0x01, 0x05, 0x5a, 0x03, 0xc2, 0x01, 0x00, 0x52, 0x07,
	0x74, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x35, 0x12, 0x5b, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x31, 0x31, 0x36, 0x18, 0x74, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b,
	0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x5a, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61,
	0x70, 0x31, 0x31, 0x36, 0x12, 0x5e, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x31,
	0x37, 0x18, 0x75, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54,
	0x4d, 0x61, 0x70, 0x31, 0x31, 0x37, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0xe2, 0xdf, 0x1f,
	0x0a, 0x12, 0x08, 0xf2, 0x01, 0x05, 0x62, 0x03, 0xe2, 0x01, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61,
	0x70, 0x31, 0x31, 0x37, 0x12, 0x5b, 0x0a, 0x09, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x31, 0x31,
	0x38, 0x18, 0x76, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54,
	0x4d, 0x61, 0x70, 0x31, 0x31, 0x38, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x62, 0x00, 0x52, 0x07, 0x74, 0x4d, 0x61, 0x70, 0x31, 0x31,
	0x38, 0x12, 0x6b, 0x0a, 0x0f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x31, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x31, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0c, 0x74, 0x4d, 0x61, 0x70, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x31, 0x12, 0x65,
	0x0a, 0x0d, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70,
	0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61,
	0x70, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xe2, 0xdf,
	0x1f, 0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x74, 0x4d, 0x61, 0x70, 0x4c,
	0x65, 0x6e, 0x45, 0x71, 0x31, 0x12, 0x65, 0x0a, 0x0d, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c,
	0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67,
	0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x20, 0x02,
	0x52, 0x0a, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x12, 0x65, 0x0a, 0x0d,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61,
	0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4c,
	0x65, 0x6e, 0x4c, 0x74, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xf2, 0x01, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e,
	0x4c, 0x74, 0x31, 0x12, 0x65, 0x0a, 0x0d, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x65, 0x6e,
	0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x31, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x30, 0x04, 0x52, 0x0a,
	0x74, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x31, 0x12, 0x68, 0x0a, 0x0e, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67,
	0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4c, 0x65,
	0x6e, 0x4c, 0x74, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xf2, 0x01, 0x02, 0x38, 0x05, 0x52, 0x0b, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e,
	0x4c, 0x74, 0x65, 0x31, 0x12, 0x68, 0x0a, 0x0e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x65,
	0x6e, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x65, 0x31, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x40,
	0x06, 0x52, 0x0b, 0x74, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x65, 0x31, 0x1a, 0x3a,
	0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x54, 0x4d,
	0x61, 0x70, 0x31, 0x30, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30,
	0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x34, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a,
	0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x35, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x54, 0x4d,
	0x61, 0x70, 0x31, 0x30, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30,
	0x37, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x30, 0x38, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53,
	0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70,
	0x31, 0x31, 0x33, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a,
	0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x35, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31,
	0x31, 0x36, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x0c,
	0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x37, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x53, 0x0a, 0x0c, 0x54, 0x4d, 0x61, 0x70, 0x31, 0x31, 0x38, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x4d, 0x61, 0x70, 0x4e, 0x6f,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x4d, 0x61, 0x70, 0x4c,
	0x65, 0x6e, 0x45, 0x71, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x4d, 0x61, 0x70, 0x4c, 0x65,
	0x6e, 0x4e, 0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e,
	0x4c, 0x74, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x47,
	0x74, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x4c, 0x74,
	0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x4d, 0x61, 0x70, 0x4c, 0x65, 0x6e, 0x47, 0x74,
	0x65, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x81, 0x10, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70,
	0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x31, 0x12, 0x75, 0x0a, 0x10, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67,
	0x73, 0x4b, 0x65, 0x79, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x12, 0x10,
	0xf2, 0x01, 0x0d, 0x30, 0x01, 0x5a, 0x09, 0xc2, 0x01, 0x06, 0xca, 0x02, 0x03, 0x69, 0x64, 0x2d,
	0x52, 0x0d, 0x74, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x70, 0x0a, 0x0f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2,
	0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38,
	0x0a, 0x40, 0x02, 0x52, 0x0c, 0x74, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x70, 0x0a, 0x0f, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x31, 0x2e, 0x54, 0x4d,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xb2, 0x01,
	0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0c, 0x74, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x73, 0x0a, 0x10, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x31,
	0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01,
	0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0d, 0x74, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x73, 0x0a, 0x10, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67,
	0x73, 0x4b, 0x65, 0x79, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e,
	0xf2, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0d,
	0x74, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x79, 0x0a,
	0x12, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x31, 0x2e, 0x54, 0x4d, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07,
	0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0f, 0x74, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x79, 0x0a, 0x12, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54,
	0x61, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf,
	0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a,
	0x40, 0x02, 0x52, 0x0f, 0x74, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x12, 0x73, 0x0a, 0x10, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x31,
	0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01,
	0x5a, 0x07, 0xba, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0d, 0x74, 0x4d, 0x61, 0x70, 0x4b,
	0x65, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x73, 0x0a, 0x10, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67,
	0x73, 0x4b, 0x65, 0x79, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x55, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e,
	0xf2, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xba, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0d,
	0x74, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x76, 0x0a,
	0x11, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x4b, 0x65, 0x79, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xba, 0x01,
	0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0e, 0x74, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x76, 0x0a, 0x11, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x4b,
	0x65, 0x79, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2,
	0x01, 0x0b, 0x30, 0x01, 0x5a, 0x07, 0xba, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0e, 0x74,
	0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x1a, 0x40, 0x0a,
	0x12, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3f, 0x0a, 0x11, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x4d, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x10, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a,
	0x12, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x40, 0x0a, 0x12, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xac, 0x1a, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x12, 0x7d,
	0x0a, 0x12, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e,
	0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x12, 0x10, 0xf2, 0x01, 0x0d, 0x30,
	0x01, 0x62, 0x09, 0xc2, 0x01, 0x06, 0xca, 0x02, 0x03, 0x69, 0x64, 0x2d, 0x52, 0x0f, 0x74, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x89, 0x01,
	0x0a, 0x12, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e,
	0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x22, 0xe2, 0xdf, 0x1f, 0x1e, 0x12, 0x1c, 0xf2, 0x01, 0x19, 0x30,
	0x01, 0x62, 0x15, 0xaa, 0x01, 0x12, 0x39, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x26, 0x40, 0x41,
	0x9a, 0x99, 0x99, 0x99, 0x99, 0x99, 0xf1, 0x3f, 0x52, 0x0f, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70,
	0x54, 0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x22,
	0xe2, 0xdf, 0x1f, 0x1e, 0x12, 0x1c, 0xf2, 0x01, 0x19, 0x30, 0x01, 0x62, 0x15, 0xaa, 0x01, 0x12,
	0x39, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x26, 0x40, 0x41, 0x9a, 0x99, 0x99, 0x99, 0x99, 0x99,
	0xf1, 0x3f, 0x52, 0x0e, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x78, 0x0a, 0x11, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01,
	0x0b, 0x30, 0x01, 0x62, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0e, 0x74, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x78, 0x0a, 0x11,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x62, 0x07, 0xb2,
	0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x0e, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x7b, 0x0a, 0x12, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf,
	0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x62, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a,
	0x40, 0x02, 0x52, 0x0f, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x7b, 0x0a, 0x12, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12,
	0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x62, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02, 0x52,
	0x0f, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x81, 0x01, 0x0a, 0x14, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f,
	0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x62, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40,
	0x02, 0x52, 0x11, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61,
	0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x14, 0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x62, 0x07, 0xb2, 0x01,
	0x04, 0x38, 0x0a, 0x40, 0x02, 0x52, 0x11, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x7b, 0x0a, 0x12, 0x74, 0x5f, 0x6d, 0x61,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54,
	0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14,
	0xe2, 0xdf, 0x1f, 0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x62, 0x07, 0xba, 0x01, 0x04,
	0x38, 0x0a, 0x40, 0x02, 0x52, 0x0f, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x7b, 0x0a, 0x12, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f,
	0x10, 0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x62, 0x07, 0xba, 0x01, 0x04, 0x38, 0x0a, 0x40,
	0x02, 0x52, 0x0f, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x7e, 0x0a, 0x13, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10,
	0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x62, 0x07, 0xba, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02,
	0x52, 0x10, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x7e, 0x0a, 0x13, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xe2, 0xdf, 0x1f, 0x10,
	0x12, 0x0e, 0xf2, 0x01, 0x0b, 0x30, 0x01, 0x62, 0x07, 0xba, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x02,
	0x52, 0x10, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x12, 0x73, 0x0a, 0x10, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x67,
	0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xf2, 0x01, 0x09, 0x30,
	0x01, 0x62, 0x05, 0xd2, 0x01, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x73, 0x0a, 0x10, 0x74, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12,
	0x0c, 0xf2, 0x01, 0x09, 0x30, 0x01, 0x62, 0x05, 0xda, 0x01, 0x02, 0x58, 0x01, 0x52, 0x0d, 0x74,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x76, 0x0a, 0x11,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x67, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xf2, 0x01, 0x09, 0x30, 0x01, 0x62, 0x05, 0xca,
	0x01, 0x02, 0x18, 0x03, 0x52, 0x0e, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x7c, 0x0a, 0x13, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x67, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x12, 0xe2, 0xdf,
	0x1f, 0x0e, 0x12, 0x0c, 0xf2, 0x01, 0x09, 0x30, 0x01, 0x62, 0x05, 0xe2, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x10, 0x74, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a,
	0x13, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x41, 0x0a, 0x13, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x54,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x44, 0x0a, 0x16, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x10, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x54,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x43, 0x0a, 0x15, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x54, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x12, 0x54,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x15, 0x54, 0x4d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x25, 0x0a, 0x17, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x73, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12,
	0x26, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05, 0x12, 0x03, 0xc2, 0x01, 0x00, 0x52, 0x08, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02,
	0x12, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x21, 0x0a, 0x09,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12,
	0x2e, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x71, 0x31, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0x1a, 0x01, 0x62, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x31, 0x12,
	0x2e, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x31, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0x22, 0x01, 0x62, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x31, 0x12,
	0x2e, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x74, 0x31, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0x2a, 0x01, 0x63, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x74, 0x31, 0x12,
	0x2e, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x74, 0x31, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0x32, 0x01, 0x63, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x74, 0x31, 0x12,
	0x30, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x74, 0x65, 0x31,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0x3a, 0x01, 0x63, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x74, 0x65,
	0x31, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x74,
	0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06,
	0xc2, 0x01, 0x03, 0x42, 0x01, 0x63, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47,
	0x74, 0x65, 0x31, 0x12, 0x34, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12,
	0x0c, 0xc2, 0x01, 0x09, 0x4a, 0x01, 0x61, 0x4a, 0x01, 0x62, 0x4a, 0x01, 0x63, 0x52, 0x0a, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x31, 0x12, 0x3b, 0x0a, 0x10, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0x52, 0x01,
	0x78, 0x52, 0x01, 0x79, 0x52, 0x01, 0x7a, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xa0, 0x01, 0x03, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72,
	0x4c, 0x65, 0x6e, 0x45, 0x71, 0x31, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65, 0x31, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xa8, 0x01, 0x03, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72,
	0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x31, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xb0, 0x01, 0x03, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72,
	0x4c, 0x65, 0x6e, 0x47, 0x74, 0x31, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x31, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xb8, 0x01, 0x03, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72,
	0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x31, 0x12, 0x40, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65, 0x31,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xc0, 0x01, 0x03, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x72, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x65, 0x31, 0x12, 0x40, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74,
	0x65, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06,
	0xc2, 0x01, 0x03, 0xc8, 0x01, 0x03, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x65, 0x71, 0x31, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x05, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x31, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x6e, 0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xf8, 0x01, 0x05, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x67, 0x74, 0x31, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0x80, 0x02, 0x05, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x31, 0x12, 0x3e, 0x0a, 0x15, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x6c, 0x74, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0x88, 0x02, 0x05, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x31, 0x12, 0x40, 0x0a, 0x16, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x67, 0x74, 0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0x90, 0x02, 0x05, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x65, 0x31, 0x12, 0x40, 0x0a, 0x16,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x05, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x40,
	0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78,
	0x31, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xe2, 0xdf, 0x1f, 0x14, 0x12, 0x12, 0xc2,
	0x01, 0x0f, 0xc2, 0x02, 0x0c, 0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x2e, 0x6a, 0x61, 0x72,
	0x24, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x31,
	0x12, 0x3c, 0x0a, 0x10, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e,
	0x12, 0x0c, 0xc2, 0x01, 0x09, 0xca, 0x02, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x0e,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x31, 0x12, 0x41,
	0x0a, 0x13, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f,
	0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0xd2, 0x02, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52,
	0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x31, 0x12, 0x3c, 0x0a, 0x10, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x31, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f,
	0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0xda, 0x02, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x52,
	0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x31, 0x12,
	0x41, 0x0a, 0x13, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x31, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf,
	0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0xe2, 0x02, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x31, 0x12, 0x3d, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x31, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0xea, 0x02, 0x03, 0x61, 0x62, 0x63, 0x52,
	0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x31, 0x12, 0x42, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x31, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0xf2, 0x02, 0x03, 0x61, 0x62,
	0x63, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x31, 0x12, 0x44, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06,
	0xfa, 0x02, 0x03, 0x78, 0x79, 0x7a, 0x52, 0x13, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6e, 0x79, 0x31, 0x12, 0x4b, 0x0a, 0x1a, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x82, 0x03, 0x03, 0x78, 0x79, 0x7a,
	0x52, 0x16, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x41, 0x6e, 0x79, 0x31, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x74, 0x66, 0x38, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x05, 0x01, 0x52, 0x0b, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x74, 0x66, 0x38, 0x12, 0x32, 0x0a, 0x0e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x18, 0x47, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x04, 0x01,
	0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x63, 0x69, 0x69, 0x12, 0x3d,
	0x0a, 0x14, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0, 0x04, 0x01, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x63, 0x69, 0x69, 0x12, 0x36, 0x0a,
	0x10, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xc8, 0x04, 0x01, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3a, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd0, 0x04, 0x01, 0x52,
	0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd8, 0x04, 0x01, 0x52, 0x10, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18,
	0x4c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xe0, 0x04, 0x01, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x70, 0x68,
	0x61, 0x12, 0x34, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0xe8, 0x04, 0x01, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xf0, 0x04, 0x01, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x70,
	0x68, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0b, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xa8, 0x06, 0x01, 0x52, 0x09, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb0, 0x06, 0x01, 0x52, 0x0b, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x76, 0x34, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x06, 0x01, 0x52, 0x0b, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x76, 0x36, 0x12, 0x35, 0x0a, 0x10, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x68,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0,
	0x06, 0x01, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x37, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8, 0x06, 0x01, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x70, 0x34, 0x41, 0x64, 0x64, 0x72, 0x12, 0x37, 0x0a, 0x11, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xd0, 0x06, 0x01, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x69, 0x64, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0xd8, 0x06, 0x01, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x69, 0x64, 0x72, 0x12, 0x34, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x76, 0x34, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe0, 0x06, 0x01, 0x52, 0x0d, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x64, 0x72, 0x76, 0x34, 0x12, 0x34, 0x0a, 0x0f, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x76, 0x36, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe8,
	0x06, 0x01, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x64, 0x72, 0x76,
	0x36, 0x12, 0x2e, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61,
	0x63, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xf0, 0x06, 0x01, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x63, 0x12, 0x37, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x63,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf8, 0x06, 0x01, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x54, 0x63, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x12, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x63, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0x80, 0x07, 0x01, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x63, 0x70,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x63, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x07, 0x01, 0x52,
	0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x63, 0x70, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x37, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x64, 0x70,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x72, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x90, 0x07, 0x01, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x64, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x12, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x64, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0x98, 0x07, 0x01, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x64, 0x70, 0x34,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x64, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xa0, 0x07, 0x01, 0x52, 0x0f,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x64, 0x70, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x39, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xa8, 0x07, 0x01, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x78, 0x41, 0x64, 0x64, 0x72, 0x12, 0x38, 0x0a, 0x11, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x76, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xb0, 0x07, 0x01, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x19, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x66, 0x63, 0x31, 0x31, 0x32,
	0x33, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xb8, 0x07, 0x01, 0x52, 0x16, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x66, 0x63, 0x31, 0x31, 0x32, 0x33, 0x12, 0x41, 0x0a,
	0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0, 0x07, 0x01, 0x52, 0x13, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x37, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8, 0x07, 0x01, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x55, 0x72, 0x69, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd0, 0x07, 0x01, 0x52, 0x0b,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x71, 0x64, 0x6e, 0x12, 0x2e, 0x0a, 0x0c, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x7b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd8, 0x07, 0x01, 0x52,
	0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x69, 0x12, 0x2e, 0x0a, 0x0c, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x7c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe0, 0x07, 0x01, 0x52,
	0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x3d, 0x0a, 0x14, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xe8, 0x07, 0x01, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x55, 0x72, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x12, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x63, 0x72, 0x6f, 0x6e,
	0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0x80, 0x05, 0x01, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e,
	0x69, 0x78, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe0, 0x08, 0x01, 0x52, 0x0c, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x0d, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe8, 0x08, 0x01, 0x52,
	0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0c,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x80, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x08,
	0x01, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x77, 0x74, 0x12, 0x31, 0x0a,
	0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xf8, 0x08, 0x01, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x74, 0x6d, 0x6c,
	0x12, 0x40, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x74, 0x6d,
	0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x80, 0x09, 0x01, 0x52, 0x12,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x74, 0x6d, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x12, 0x35, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x09, 0x01, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x3c, 0x0a, 0x13, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0x90, 0x09, 0x01, 0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x14, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18,
	0x85, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0x98, 0x09, 0x01, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x78,
	0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x4c, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x12, 0x19, 0xc2, 0x01, 0x16, 0xa2,
	0x09, 0x13, 0x32, 0x30, 0x30, 0x36, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x20, 0x31, 0x35, 0x3a,
	0x30, 0x34, 0x3a, 0x30, 0x35, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xa8, 0x09, 0x01,
	0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xb0, 0x09, 0x01, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x31, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x09, 0x01, 0x52, 0x0c, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x31, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x33, 0x18, 0x8a, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0, 0x09, 0x01,
	0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x33, 0x12, 0x33,
	0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x34,
	0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xc8, 0x09, 0x01, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x34, 0x12, 0x33, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x35, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd0, 0x09, 0x01, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x35, 0x22, 0xb5, 0x36, 0x0a, 0x18, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x73, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x31, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf, 0x1f, 0x05,
	0x12, 0x03, 0xc2, 0x01, 0x00, 0x48, 0x01, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48,
	0x02, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0xdf, 0x1f, 0x00, 0x48, 0x03, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x34, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x1a, 0x01, 0x62, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0c, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x22, 0x01, 0x62, 0x48,
	0x05, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x65, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x74, 0x31,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0x2a, 0x01, 0x63, 0x48, 0x06, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x32, 0x01, 0x63, 0x48, 0x07, 0x52, 0x0a, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0d, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x3a, 0x01, 0x63, 0x48,
	0x08, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x74,
	0x65, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06,
	0xc2, 0x01, 0x03, 0x42, 0x01, 0x63, 0x48, 0x09, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x47, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0x4a, 0x01, 0x61, 0x4a, 0x01, 0x62, 0x4a,
	0x01, 0x63, 0x48, 0x0a, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x10, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2,
	0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0x52, 0x01, 0x78, 0x52, 0x01, 0x79, 0x52, 0x01,
	0x7a, 0x48, 0x0b, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x31, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xa0,
	0x01, 0x03, 0x48, 0x0c, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61,
	0x72, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x15, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x6e, 0x65, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xa8, 0x01, 0x03, 0x48, 0x0d, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x43, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb0, 0x01, 0x03, 0x48, 0x0e, 0x52, 0x11,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x47, 0x74,
	0x31, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x01,
	0x03, 0x48, 0x0f, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72,
	0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x16, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67,
	0x74, 0x65, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xc0, 0x01, 0x03, 0x48, 0x10, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x45, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8, 0x01, 0x03, 0x48, 0x11,
	0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e,
	0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xf0, 0x01, 0x05, 0x48, 0x12, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x15,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x5f, 0x6e, 0x65, 0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf8, 0x01, 0x05, 0x48, 0x13, 0x52, 0x11, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x80, 0x02, 0x05, 0x48, 0x14,
	0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e,
	0x47, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x31, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0x88, 0x02, 0x05, 0x48, 0x15, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x74, 0x65, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x31, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x16, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e,
	0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x90, 0x02, 0x05, 0x48, 0x16, 0x52, 0x12, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x65, 0x31, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x05,
	0x48, 0x17, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c,
	0x65, 0x6e, 0x4c, 0x74, 0x65, 0x31, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x31, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x18, 0xe2, 0xdf, 0x1f, 0x14, 0x12, 0x12, 0xc2, 0x01, 0x0f, 0xc2, 0x02, 0x0c,
	0x5e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2b, 0x2e, 0x6a, 0x61, 0x72, 0x24, 0x48, 0x18, 0x52, 0x0d,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x10, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x31, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e,
	0x12, 0x0c, 0xc2, 0x01, 0x09, 0xca, 0x02, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x19,
	0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x13, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0xd2, 0x02, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x48, 0x1a, 0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e,
	0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x31, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x10, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x31, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09,
	0xda, 0x02, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x48, 0x1b, 0x52, 0x0e, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x31, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x13, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x31, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f,
	0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0xe2, 0x02, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x48,
	0x1c, 0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x53, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x31, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x31, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0xea, 0x02, 0x03,
	0x61, 0x62, 0x63, 0x48, 0x1d, 0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x31, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x15, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x31, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12,
	0x09, 0xc2, 0x01, 0x06, 0xf2, 0x02, 0x03, 0x61, 0x62, 0x63, 0x48, 0x1e, 0x52, 0x12, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x31,
	0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0xfa, 0x02,
	0x03, 0x78, 0x79, 0x7a, 0x48, 0x1f, 0x52, 0x13, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6e, 0x79, 0x31, 0x88, 0x01, 0x01, 0x12, 0x50,
	0x0a, 0x1a, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x82, 0x03, 0x03,
	0x78, 0x79, 0x7a, 0x48, 0x20, 0x52, 0x16, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6e, 0x79, 0x31, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x74, 0x66,
	0x38, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0x88, 0x05, 0x01, 0x48, 0x21, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x55, 0x74, 0x66, 0x38, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x04, 0x01, 0x48, 0x22, 0x52,
	0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x63, 0x69, 0x69, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x14, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0, 0x04, 0x01, 0x48, 0x23, 0x52, 0x11,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x63, 0x69,
	0x69, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x10, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8, 0x04, 0x01, 0x48, 0x24, 0x52, 0x0e,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd0, 0x04, 0x01, 0x48, 0x25, 0x52, 0x10, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd8, 0x04, 0x01, 0x48, 0x26, 0x52, 0x10,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe0, 0x04, 0x01, 0x48, 0x27, 0x52, 0x0c, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0f,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x4d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xe8, 0x04, 0x01, 0x48, 0x28, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xf0, 0x04, 0x01, 0x48, 0x29, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41,
	0x6c, 0x70, 0x68, 0x61, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a,
	0x0b, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xa8, 0x06, 0x01,
	0x48, 0x2a, 0x52, 0x09, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x76,
	0x34, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xb0, 0x06, 0x01, 0x48, 0x2b, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x70, 0x76, 0x34, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x06, 0x01, 0x48, 0x2c, 0x52, 0x0b,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01, 0x12, 0x3a,
	0x0a, 0x10, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06,
	0xc2, 0x01, 0x03, 0xc0, 0x06, 0x01, 0x48, 0x2d, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x11, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xc8, 0x06, 0x01, 0x48, 0x2e, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70,
	0x34, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd0, 0x06,
	0x01, 0x48, 0x2f, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd8, 0x06, 0x01, 0x48, 0x30, 0x52, 0x0b, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a,
	0x0f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x76, 0x34,
	0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xe0, 0x06, 0x01, 0x48, 0x31, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x69, 0x64, 0x72, 0x76, 0x34, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x76, 0x36, 0x18, 0x6d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe8, 0x06, 0x01, 0x48,
	0x32, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x64, 0x72, 0x76, 0x36,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x61, 0x63, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xf0, 0x06, 0x01, 0x48, 0x33, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x6f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf8, 0x06,
	0x01, 0x48, 0x34, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x63, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x63, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x70, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x80, 0x07, 0x01,
	0x48, 0x35, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x63, 0x70, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x63, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x07, 0x01,
	0x48, 0x36, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x63, 0x70, 0x36, 0x41,
	0x64, 0x64, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x90, 0x07, 0x01, 0x48,
	0x37, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x64, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x64, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x07, 0x01, 0x48, 0x38,
	0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x64, 0x70, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x64, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xa0, 0x07, 0x01, 0x48, 0x39,
	0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x64, 0x70, 0x36, 0x41, 0x64, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xa8, 0x07, 0x01, 0x48, 0x3a,
	0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x78, 0x41, 0x64, 0x64,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x76, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb0, 0x07, 0x01, 0x48, 0x3b, 0x52,
	0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x19, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x66, 0x63, 0x31, 0x31, 0x32, 0x33,
	0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xb8, 0x07, 0x01, 0x48, 0x3c, 0x52, 0x16, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x66, 0x63, 0x31, 0x31, 0x32, 0x33, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0, 0x07, 0x01, 0x48,
	0x3d, 0x52, 0x13, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x11, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x79,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8,
	0x07, 0x01, 0x48, 0x3e, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd0, 0x07, 0x01, 0x48, 0x3f, 0x52, 0x0b,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x71, 0x64, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33,
	0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x7b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd8,
	0x07, 0x01, 0x48, 0x40, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x69,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xe0, 0x07, 0x01, 0x48, 0x41, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x14, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64,
	0x18, 0x7d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xe8, 0x07, 0x01, 0x48, 0x42, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55,
	0x72, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x12,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x63, 0x72,
	0x6f, 0x6e, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0x80, 0x05, 0x01, 0x48, 0x43, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x6e, 0x69, 0x78, 0x43, 0x72, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x7e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xe0, 0x08, 0x01, 0x48, 0x44, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe8, 0x08, 0x01, 0x48, 0x45, 0x52, 0x0b, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x80, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0,
	0x08, 0x01, 0x48, 0x46, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x77, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x74, 0x6d, 0x6c, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf8, 0x08, 0x01, 0x48, 0x47, 0x52, 0x0b, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x74, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x15, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x80, 0x09, 0x01, 0x48, 0x48, 0x52, 0x12, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x74, 0x6d, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x09, 0x01, 0x48, 0x49, 0x52, 0x0d, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x13, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x90, 0x09, 0x01, 0x48, 0x4a, 0x52, 0x10, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x55, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x14, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65,
	0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x09, 0x01, 0x48, 0x4b,
	0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x86, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x12, 0x19, 0xc2, 0x01, 0x16, 0xa2, 0x09,
	0x13, 0x32, 0x30, 0x30, 0x36, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x20, 0x31, 0x35, 0x3a, 0x30,
	0x34, 0x3a, 0x30, 0x35, 0x48, 0x4c, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x11, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x87, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xa8, 0x09, 0x01, 0x48, 0x4d, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0d, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x88, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb0, 0x09, 0x01,
	0x48, 0x4e, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x31, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x09, 0x01, 0x48, 0x4f, 0x52, 0x0c, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x31, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x33, 0x18, 0x8a,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xc0, 0x09, 0x01, 0x48, 0x50, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75,
	0x69, 0x64, 0x33, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8, 0x09, 0x01, 0x48, 0x51, 0x52,
	0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x34, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x35, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xd0, 0x09, 0x01, 0x48, 0x52, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x35, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x33, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x34, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x71, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x31, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e,
	0x5f, 0x6e, 0x65, 0x31, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67,
	0x74, 0x65, 0x31, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e,
	0x65, 0x31, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x31, 0x42, 0x18, 0x0a, 0x16,
	0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c,
	0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x31, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65,
	0x31, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x31,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x31, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x31, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x31, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x6f, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x31, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x31, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x31, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x5f, 0x61, 0x6e, 0x79, 0x31, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x5f, 0x61, 0x6e, 0x79, 0x31, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x74, 0x66, 0x38, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x73,
	0x63, 0x69, 0x69, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70,
	0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72,
	0x76, 0x34, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x69, 0x64, 0x72, 0x76, 0x36, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x63, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x63, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x63, 0x70, 0x34, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x63, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x64, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x64, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69,
	0x78, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x1c, 0x0a, 0x1a,
	0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x72, 0x66, 0x63, 0x31, 0x31, 0x32, 0x33, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x71, 0x64, 0x6e, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6a, 0x77, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x78, 0x61, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f,
	0x6e, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x31, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x33, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x34, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x35,
	0x22, 0xcf, 0x26, 0x0a, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x61, 0x67, 0x73, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x31, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x09, 0xe2, 0xdf,
	0x1f, 0x05, 0x12, 0x03, 0xc2, 0x01, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x32, 0x12, 0x25, 0x0a, 0x09, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xe2, 0xdf, 0x1f, 0x02, 0x12, 0x00, 0x48, 0x00,
	0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x33, 0x12, 0x23, 0x0a, 0x09, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2,
	0xdf, 0x1f, 0x00, 0x48, 0x00, 0x52, 0x08, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x34, 0x12,
	0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x71, 0x31, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0x1a, 0x01, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x71,
	0x31, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x65,
	0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0x22, 0x01, 0x62, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x65, 0x31, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x74, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0x2a, 0x01, 0x63, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x74, 0x31, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x67, 0x74, 0x31, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x32, 0x01, 0x63, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x47, 0x74, 0x31, 0x12, 0x32, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x3a, 0x01, 0x63, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x32, 0x0a, 0x0d, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x42, 0x01, 0x63,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x47, 0x74, 0x65, 0x31, 0x12,
	0x36, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x31, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09,
	0x4a, 0x01, 0x61, 0x4a, 0x01, 0x62, 0x4a, 0x01, 0x63, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x31, 0x12, 0x3d, 0x0a, 0x10, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x31, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0x52, 0x01, 0x78, 0x52,
	0x01, 0x79, 0x52, 0x01, 0x7a, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x31, 0x12, 0x40, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xa0, 0x01, 0x03, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68,
	0x61, 0x72, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x31, 0x12, 0x40, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65,
	0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xa8, 0x01, 0x03, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x12, 0x40, 0x0a, 0x15, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x67, 0x74, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xb0, 0x01, 0x03, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x31, 0x12, 0x40, 0x0a, 0x15,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65,
	0x6e, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x01, 0x03, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x31, 0x12, 0x42,
	0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f,
	0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0, 0x01, 0x03, 0x48, 0x00, 0x52, 0x12,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x6e, 0x47, 0x74,
	0x65, 0x31, 0x12, 0x42, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8, 0x01, 0x03,
	0x48, 0x00, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x61, 0x72, 0x4c,
	0x65, 0x6e, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x40, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x65, 0x71, 0x31, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xf0, 0x01, 0x05, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x74, 0x65, 0x4c, 0x65, 0x6e, 0x45, 0x71, 0x31, 0x12, 0x40, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6e, 0x65,
	0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xf8, 0x01, 0x05, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x4e, 0x65, 0x31, 0x12, 0x40, 0x0a, 0x15, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x67, 0x74, 0x31, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0x80, 0x02, 0x05, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x47, 0x74, 0x31, 0x12, 0x40, 0x0a, 0x15,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65,
	0x6e, 0x5f, 0x6c, 0x74, 0x31, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x88, 0x02, 0x05, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x4c, 0x74, 0x31, 0x12, 0x42,
	0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x6c, 0x65, 0x6e, 0x5f, 0x67, 0x74, 0x65, 0x31, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x90, 0x02, 0x05, 0x48, 0x00, 0x52, 0x12,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x65, 0x6e, 0x47, 0x74,
	0x65, 0x31, 0x12, 0x42, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x5f, 0x6c, 0x74, 0x65, 0x31, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x02, 0x05,
	0x48, 0x00, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x4c,
	0x65, 0x6e, 0x4c, 0x74, 0x65, 0x31, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x31, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xe2, 0xdf, 0x1f, 0x14, 0x12, 0x12, 0xc2, 0x01, 0x0f, 0xc2, 0x02, 0x0c, 0x5e, 0x5b, 0x30,
	0x2d, 0x39, 0x5d, 0x2b, 0x2e, 0x6a, 0x61, 0x72, 0x24, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x31, 0x12, 0x3e, 0x0a, 0x10, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x31, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0xca,
	0x02, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x31, 0x12, 0x43, 0x0a, 0x13, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x31, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12, 0x0c, 0xc2,
	0x01, 0x09, 0xd2, 0x02, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x48, 0x00, 0x52, 0x10, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x31, 0x12,
	0x3e, 0x0a, 0x10, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x31, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf, 0x1f, 0x0e, 0x12,
	0x0c, 0xc2, 0x01, 0x09, 0xda, 0x02, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x48, 0x00, 0x52,
	0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x31, 0x12,
	0x43, 0x0a, 0x13, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x31, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xe2, 0xdf,
	0x1f, 0x0e, 0x12, 0x0c, 0xc2, 0x01, 0x09, 0xe2, 0x02, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78,
	0x48, 0x00, 0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x53, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x31, 0x12, 0x3f, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x31, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0xea, 0x02, 0x03, 0x61, 0x62,
	0x63, 0x48, 0x00, 0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x31, 0x12, 0x44, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x31, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0xf2,
	0x02, 0x03, 0x61, 0x62, 0x63, 0x48, 0x00, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x31, 0x12, 0x46, 0x0a, 0x16, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x5f, 0x61, 0x6e, 0x79, 0x31, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f,
	0x0b, 0x12, 0x09, 0xc2, 0x01, 0x06, 0xfa, 0x02, 0x03, 0x78, 0x79, 0x7a, 0x48, 0x00, 0x52, 0x13,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41,
	0x6e, 0x79, 0x31, 0x12, 0x4d, 0x0a, 0x1a, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5f, 0x61, 0x6e, 0x79,
	0x31, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xe2, 0xdf, 0x1f, 0x0b, 0x12, 0x09, 0xc2,
	0x01, 0x06, 0x82, 0x03, 0x03, 0x78, 0x79, 0x7a, 0x48, 0x00, 0x52, 0x16, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6e,
	0x79, 0x31, 0x12, 0x32, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x74, 0x66, 0x38, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0x88, 0x05, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x74, 0x66, 0x38, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x73, 0x63, 0x69, 0x69, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x04, 0x01, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x63, 0x69, 0x69, 0x12, 0x3f, 0x0a, 0x14,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x73, 0x63, 0x69, 0x69, 0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0, 0x04, 0x01, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x41, 0x73, 0x63, 0x69, 0x69, 0x12, 0x38, 0x0a,
	0x10, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xc8, 0x04, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x4a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd0, 0x04,
	0x01, 0x48, 0x00, 0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x63, 0x61, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd8, 0x04, 0x01, 0x48,
	0x00, 0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x70, 0x65, 0x72, 0x63,
	0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe0, 0x04, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x36, 0x0a, 0x0f, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe8, 0x04, 0x01,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x04, 0x01, 0x48, 0x00,
	0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x70, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xa8, 0x06, 0x01, 0x48, 0x00, 0x52, 0x09, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x70, 0x12, 0x32, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x70, 0x76, 0x34, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb0, 0x06, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x76, 0x34, 0x12, 0x32, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x06, 0x01, 0x48, 0x00, 0x52,
	0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x76, 0x36, 0x12, 0x37, 0x0a, 0x10,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xc0, 0x06, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x69, 0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8, 0x06, 0x01, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x34, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x39, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x70, 0x36,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd0, 0x06, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x49, 0x70, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12, 0x32, 0x0a, 0x0d, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xd8, 0x06, 0x01,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x64, 0x72, 0x12,
	0x36, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72,
	0x76, 0x34, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06,
	0xc2, 0x01, 0x03, 0xe0, 0x06, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x69, 0x64, 0x72, 0x76, 0x34, 0x12, 0x36, 0x0a, 0x0f, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x76, 0x36, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe8, 0x06, 0x01, 0x48, 0x00,
	0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x69, 0x64, 0x72, 0x76, 0x36, 0x12,
	0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x63, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xf0, 0x06, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x63, 0x12, 0x39, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x63,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf8, 0x06, 0x01, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x63, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3b, 0x0a, 0x12,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x63, 0x70, 0x34, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06,
	0xc2, 0x01, 0x03, 0x80, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x54, 0x63, 0x70, 0x34, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3b, 0x0a, 0x12, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x63, 0x70, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x71, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0x88, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x63,
	0x70, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12, 0x39, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x64, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x72, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x90, 0x07, 0x01, 0x48,
	0x00, 0x52, 0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x64, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x3b, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x64,
	0x70, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x64, 0x70, 0x34, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3b,
	0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x64, 0x70, 0x36, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x74, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0xa0, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x55, 0x64, 0x70, 0x36, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3b, 0x0a, 0x12, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xa8, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x78, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3a, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x76, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb0, 0x07,
	0x01, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x19, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x66, 0x63, 0x31, 0x31, 0x32,
	0x33, 0x18, 0x77, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xb8, 0x07, 0x01, 0x48, 0x00, 0x52, 0x16, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x66, 0x63, 0x31, 0x31, 0x32, 0x33, 0x12,
	0x43, 0x0a, 0x16, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0, 0x07, 0x01, 0x48, 0x00, 0x52,
	0x13, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8, 0x07, 0x01, 0x48, 0x00, 0x52,
	0x0e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x55, 0x72, 0x69, 0x12,
	0x32, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x71, 0x64, 0x6e,
	0x18, 0x7a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0xd0, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x71, 0x64, 0x6e, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x72, 0x69, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xd8, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x55, 0x72, 0x69, 0x12, 0x30, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe0, 0x07, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x14, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18,
	0x7d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0xe8, 0x07, 0x01, 0x48, 0x00, 0x52, 0x11, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x72,
	0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x12, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x8d,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03,
	0x80, 0x05, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x6e,
	0x69, 0x78, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe0, 0x08, 0x01, 0x48, 0x00, 0x52, 0x0c,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x0d,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x7f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xe8, 0x08,
	0x01, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4a, 0x73, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x0c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6a, 0x77, 0x74,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xf0, 0x08, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4a, 0x77, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x68, 0x74, 0x6d, 0x6c, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf8, 0x08, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x42, 0x0a, 0x15, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06,
	0xc2, 0x01, 0x03, 0x80, 0x09, 0x01, 0x48, 0x00, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x74, 0x6d, 0x6c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0f,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x18,
	0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01,
	0x03, 0x88, 0x09, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x12, 0x3e, 0x0a, 0x13, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x90, 0x09,
	0x01, 0x48, 0x00, 0x52, 0x10, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x55, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x14, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x85, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0x98,
	0x09, 0x01, 0x48, 0x00, 0x52, 0x12, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x78,
	0x61, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x12, 0x19, 0xc2, 0x01, 0x16, 0xa2,
	0x09, 0x13, 0x32, 0x30, 0x30, 0x36, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x20, 0x31, 0x35, 0x3a,
	0x30, 0x34, 0x3a, 0x30, 0x35, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x87, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xa8,
	0x09, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb0, 0x09, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x31, 0x18, 0x89, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xb8, 0x09,
	0x01, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64,
	0x31, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x33, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08,
	0x12, 0x06, 0xc2, 0x01, 0x03, 0xc0, 0x09, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x33, 0x12, 0x35, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x34, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xc8, 0x09, 0x01, 0x48,
	0x00, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x75, 0x69, 0x64, 0x34, 0x12,
	0x35, 0x0a, 0x0e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x35, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06,
	0xc2, 0x01, 0x03, 0xd0, 0x09, 0x01, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x55, 0x75, 0x69, 0x64, 0x35, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x31, 0x22, 0x95, 0x09, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x64, 0x31, 0x12, 0x3d, 0x0a,
	0x0f, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0xdf, 0x1f, 0x11, 0x12, 0x0f, 0xc2, 0x01,
	0x0c, 0x80, 0x02, 0x05, 0x88, 0x02, 0x07, 0xca, 0x02, 0x03, 0x69, 0x64, 0x2d, 0x52, 0x0d, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x42, 0x0a, 0x0f,
	0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0xdf, 0x1f, 0x11, 0x12, 0x0f, 0xc2, 0x01, 0x0c,
	0x80, 0x02, 0x05, 0x88, 0x02, 0x07, 0xca, 0x02, 0x03, 0x69, 0x64, 0x2d, 0x48, 0x01, 0x52, 0x0d,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x0d, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2,
	0x01, 0x04, 0x38, 0x0a, 0x40, 0x01, 0x52, 0x0b, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x36, 0x0a, 0x0d, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09,
	0x12, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x01, 0x48, 0x02, 0x52, 0x0b, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x74,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x1e, 0xe2, 0xdf, 0x1f, 0x1a, 0x12, 0x18, 0xea, 0x01, 0x15, 0x38, 0x03, 0x40,
	0x01, 0x5a, 0x0f, 0xc2, 0x01, 0x0c, 0x80, 0x02, 0x01, 0x88, 0x02, 0x05, 0xca, 0x02, 0x03, 0x69,
	0x64, 0x2d, 0x52, 0x0b, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x38, 0x0a, 0x0c, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x03, 0x42, 0x16, 0xe2, 0xdf, 0x1f, 0x12, 0x12, 0x10, 0xea, 0x01, 0x0d,
	0x38, 0x03, 0x40, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x38, 0x0a, 0x40, 0x01, 0x52, 0x0a, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f, 0x6e, 0x64, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2f, 0xe2, 0xdf, 0x1f,
	0x2b, 0x12, 0x29, 0xf2, 0x01, 0x26, 0x38, 0x03, 0x40, 0x01, 0x5a, 0x0f, 0xc2, 0x01, 0x0c, 0x80,
	0x02, 0x05, 0x88, 0x02, 0x07, 0xca, 0x02, 0x03, 0x69, 0x64, 0x2d, 0x62, 0x0f, 0xc2, 0x01, 0x0c,
	0x80, 0x02, 0x05, 0x88, 0x02, 0x07, 0xca, 0x02, 0x03, 0x69, 0x64, 0x2d, 0x52, 0x0b, 0x74, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x77, 0x0a, 0x0b, 0x74, 0x5f, 0x6d,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x6f, 0x6e, 0x64, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1f, 0xe2, 0xdf, 0x1f, 0x1b, 0x12, 0x19, 0xf2, 0x01,
	0x16, 0x38, 0x03, 0x40, 0x01, 0x5a, 0x07, 0xb2, 0x01, 0x04, 0x28, 0x0a, 0x30, 0x05, 0x62, 0x07,
	0xb2, 0x01, 0x04, 0x28, 0x0a, 0x30, 0x05, 0x52, 0x09, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x3c, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe2, 0xdf, 0x1f, 0x11, 0x12,
	0x0f, 0xc2, 0x01, 0x0c, 0x80, 0x02, 0x05, 0x88, 0x02, 0x07, 0xca, 0x02, 0x03, 0x69, 0x64, 0x2d,
	0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x42, 0x0d, 0xe2, 0xdf, 0x1f, 0x09, 0x12, 0x07, 0xb2, 0x01, 0x04,
	0x38, 0x0a, 0x40, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0xa5, 0x01, 0x0a, 0x0d, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x6f,
	0x6e, 0x64, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x47, 0xe2, 0xdf, 0x1f, 0x43, 0x12, 0x41, 0xf2, 0x01, 0x3e, 0x38,
	0x03, 0x40, 0x01, 0x5a, 0x1b, 0xc2, 0x01, 0x18, 0x4a, 0x02, 0x61, 0x31, 0x4a, 0x02, 0x61, 0x32,
	0x4a, 0x02, 0x61, 0x33, 0x52, 0x02, 0x61, 0x33, 0x52, 0x02, 0x61, 0x34, 0x52, 0x02, 0x61, 0x35,
	0x62, 0x1b, 0xc2, 0x01, 0x18, 0x4a, 0x02, 0x61, 0x31, 0x4a, 0x02, 0x61, 0x32, 0x4a, 0x02, 0x61,
	0x33, 0x52, 0x02, 0x61, 0x33, 0x52, 0x02, 0x61, 0x34, 0x52, 0x02, 0x61, 0x35, 0x52, 0x0b, 0x74,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x31, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x9d, 0x04, 0x0a, 0x0f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x31, 0x12, 0x27,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x4c, 0x0a, 0x0e, 0x74, 0x5f, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xe2, 0xdf, 0x1f, 0x16, 0x0a, 0x14, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x31, 0x12, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0xe2, 0xdf, 0x1f, 0x08, 0x12,
	0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x03, 0x52, 0x0c, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0d, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x25, 0xe2, 0xdf,
	0x1f, 0x16, 0x0a, 0x14, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x31, 0x12, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01,
	0x02, 0x18, 0x03, 0x52, 0x0b, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x79, 0x0a, 0x0c, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x31, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x25, 0xe2, 0xdf, 0x1f, 0x16, 0x0a, 0x14,
	0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x12, 0x05, 0xa2,
	0x01, 0x02, 0x08, 0x01, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x18, 0x03, 0x52,
	0x0a, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4d, 0x0a, 0x0d, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0xe2, 0xdf, 0x1f, 0x16, 0x0a, 0x14, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x12, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0xe2, 0xdf,
	0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x42, 0x30, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x21, 0xba, 0xe0, 0x1f, 0x1d, 0x0a, 0x14, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x12, 0x05, 0xa2, 0x01,
	0x02, 0x08, 0x01, 0x12, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x22, 0xc6, 0x04, 0x0a, 0x0f, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x12, 0x27,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x54, 0x0a, 0x0e, 0x74, 0x5f, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2e, 0xe2, 0xdf, 0x1f, 0x1e, 0x0a, 0x1c, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x1a, 0x05, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x03, 0x52,
	0x0c, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x51, 0x0a,
	0x0d, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x2d, 0xe2, 0xdf, 0x1f, 0x1e, 0x0a, 0x1c, 0x0a, 0x0e, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x0a, 0xc2, 0x01,
	0x07, 0x1a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01,
	0x02, 0x18, 0x03, 0x52, 0x0b, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x81, 0x01, 0x0a, 0x0c, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x32, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2d, 0xe2, 0xdf, 0x1f, 0x1e, 0x0a,
	0x1c, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x1a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0xe2, 0xdf, 0x1f,
	0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x18, 0x03, 0x52, 0x0a, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xe2, 0xdf, 0x1f,
	0x1e, 0x0a, 0x1c, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x31, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x1a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0xe2,
	0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x3d, 0x0a, 0x0f, 0x54,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x42, 0x38, 0x0a, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x29, 0xba, 0xe0, 0x1f, 0x25, 0x0a, 0x1c,
	0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31,
	0x12, 0x0a, 0xc2, 0x01, 0x07, 0x1a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x05, 0xa2, 0x01,
	0x02, 0x08, 0x01, 0x22, 0xa6, 0x04, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x33, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x52, 0x0a, 0x0e, 0x74, 0x5f,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x1c, 0x0a, 0x1a, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x1a, 0x05, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x03,
	0x52, 0x0c, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4f,
	0x0a, 0x0d, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2b, 0xe2, 0xdf, 0x1f, 0x1c, 0x0a, 0x1a, 0x0a, 0x0c, 0x73,
	0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x0a, 0xc2, 0x01, 0x07,
	0x1a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02,
	0x18, 0x03, 0x52, 0x0b, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x7f, 0x0a, 0x0c, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x33, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2b, 0xe2, 0xdf, 0x1f, 0x1c, 0x0a, 0x1a, 0x0a,
	0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x0a, 0xc2,
	0x01, 0x07, 0x1a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xf2,
	0x01, 0x02, 0x18, 0x03, 0x52, 0x0a, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x53, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x1c, 0x0a, 0x1a, 0x0a,
	0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x0a, 0xc2,
	0x01, 0x07, 0x1a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2,
	0x01, 0x03, 0xf0, 0x01, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x36, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x32, 0x12, 0x27, 0xba, 0xe0, 0x1f, 0x23, 0x0a, 0x1a, 0x0a, 0x0c, 0x73, 0x65, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x0a, 0xc2, 0x01, 0x07, 0x1a, 0x05,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01, 0x22, 0xc1, 0x04, 0x0a,
	0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x34,
	0x12, 0x27, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x31, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x53, 0x0a, 0x0e, 0x74, 0x5f, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2d, 0xe2, 0xdf, 0x1f, 0x1d, 0x0a, 0x1b, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02,
	0x03, 0x88, 0x02, 0x05, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x03,
	0x52, 0x0c, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x50,
	0x0a, 0x0d, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x1d, 0x0a, 0x1b, 0x0a, 0x0e, 0x6f,
	0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x09, 0xc2,
	0x01, 0x06, 0x80, 0x02, 0x03, 0x88, 0x02, 0x05, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01,
	0x02, 0x18, 0x03, 0x52, 0x0b, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x80, 0x01, 0x0a, 0x0c, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x34, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x2c, 0xe2, 0xdf, 0x1f, 0x1d, 0x0a,
	0x1b, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x31, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x03, 0x88, 0x02, 0x05, 0xe2, 0xdf, 0x1f, 0x07,
	0x12, 0x05, 0xf2, 0x01, 0x02, 0x18, 0x03, 0x52, 0x0a, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d, 0xe2, 0xdf, 0x1f, 0x1d,
	0x0a, 0x1b, 0x0a, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x03, 0x88, 0x02, 0x05, 0xe2, 0xdf, 0x1f,
	0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x3d, 0x0a, 0x0f, 0x54, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x31, 0x42, 0x37, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x28, 0xba, 0xe0, 0x1f, 0x24, 0x0a, 0x1b, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x31, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x09,
	0xc2, 0x01, 0x06, 0x80, 0x02, 0x03, 0x88, 0x02, 0x05, 0x12, 0x05, 0xa2, 0x01, 0x02, 0x08, 0x01,
	0x22, 0xa1, 0x04, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x35, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x51, 0x0a, 0x0e, 0x74, 0x5f, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2b, 0xe2, 0xdf, 0x1f, 0x1b, 0x0a, 0x19, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x03, 0x88, 0x02, 0x05,
	0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x03, 0x52, 0x0c, 0x74, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x0d, 0x74, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x2a, 0xe2, 0xdf, 0x1f, 0x1b, 0x0a, 0x19, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x03, 0x88,
	0x02, 0x05, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xea, 0x01, 0x02, 0x18, 0x03, 0x52, 0x0b, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x7e, 0x0a, 0x0c, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x35, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x2a, 0xe2, 0xdf, 0x1f, 0x1b, 0x0a, 0x19, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x03,
	0x88, 0x02, 0x05, 0xe2, 0xdf, 0x1f, 0x07, 0x12, 0x05, 0xf2, 0x01, 0x02, 0x18, 0x03, 0x52, 0x0a,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x52, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x32, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2b, 0xe2, 0xdf, 0x1f, 0x1b, 0x0a, 0x19, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x03, 0x88,
	0x02, 0x05, 0xe2, 0xdf, 0x1f, 0x08, 0x12, 0x06, 0xc2, 0x01, 0x03, 0xf0, 0x01, 0x03, 0x48, 0x00,
	0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x3d,
	0x0a, 0x0f, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x35, 0x0a,
	0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x12, 0x26, 0xba, 0xe0,
	0x1f, 0x22, 0x0a, 0x19, 0x0a, 0x0c, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x12, 0x09, 0xc2, 0x01, 0x06, 0x80, 0x02, 0x03, 0x88, 0x02, 0x05, 0x12, 0x05, 0xa2,
	0x01, 0x02, 0x08, 0x01, 0x22, 0x9c, 0x06, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x36, 0x12, 0x5b, 0x0a, 0x0f, 0x73, 0x65, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x36, 0x2e, 0x53, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0xf3, 0x01, 0x0a, 0x0d, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x36, 0x2e,
	0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x9b, 0x01, 0xe2, 0xdf, 0x1f, 0x54, 0x0a, 0x52, 0x0a, 0x0f, 0x73, 0x65, 0x65, 0x64, 0x5f,
	0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0xf2, 0x01, 0x3c, 0x30,
	0x01, 0x5a, 0x1b, 0xc2, 0x01, 0x18, 0x4a, 0x02, 0x61, 0x31, 0x4a, 0x02, 0x61, 0x32, 0x4a, 0x02,
	0x61, 0x33, 0x52, 0x02, 0x61, 0x33, 0x52, 0x02, 0x61, 0x34, 0x52, 0x02, 0x61, 0x35, 0x62, 0x1b,
	0xc2, 0x01, 0x18, 0x4a, 0x02, 0x62, 0x31, 0x4a, 0x02, 0x62, 0x32, 0x4a, 0x02, 0x62, 0x33, 0x52,
	0x02, 0x62, 0x33, 0x52, 0x02, 0x62, 0x34, 0x52, 0x02, 0x62, 0x35, 0xe2, 0xdf, 0x1f, 0x3f, 0x12,
	0x3d, 0xf2, 0x01, 0x3a, 0x5a, 0x1b, 0xc2, 0x01, 0x18, 0x4a, 0x02, 0x63, 0x31, 0x4a, 0x02, 0x63,
	0x32, 0x4a, 0x02, 0x63, 0x33, 0x52, 0x02, 0x63, 0x33, 0x52, 0x02, 0x63, 0x34, 0x52, 0x02, 0x63,
	0x35, 0x62, 0x1b, 0xc2, 0x01, 0x18, 0x4a, 0x02, 0x64, 0x31, 0x4a, 0x02, 0x64, 0x32, 0x4a, 0x02,
	0x64, 0x33, 0x52, 0x02, 0x64, 0x33, 0x52, 0x02, 0x64, 0x34, 0x52, 0x02, 0x64, 0x35, 0x52, 0x0b,
	0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x31, 0x12, 0xf3, 0x01, 0x0a, 0x0d,
	0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x66, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x36, 0x2e, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x9b, 0x01, 0xe2, 0xdf, 0x1f, 0x54, 0x0a, 0x52, 0x0a,
	0x0f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x3f, 0xf2, 0x01, 0x3c, 0x30, 0x01, 0x5a, 0x1b, 0xc2, 0x01, 0x18, 0x4a, 0x02, 0x61, 0x31,
	0x4a, 0x02, 0x61, 0x32, 0x4a, 0x02, 0x61, 0x33, 0x52, 0x02, 0x61, 0x33, 0x52, 0x02, 0x61, 0x34,
	0x52, 0x02, 0x61, 0x35, 0x62, 0x1b, 0xc2, 0x01, 0x18, 0x4a, 0x02, 0x62, 0x31, 0x4a, 0x02, 0x62,
	0x32, 0x4a, 0x02, 0x62, 0x33, 0x52, 0x02, 0x62, 0x33, 0x52, 0x02, 0x62, 0x34, 0x52, 0x02, 0x62,
	0x35, 0xe2, 0xdf, 0x1f, 0x3f, 0x12, 0x3d, 0xf2, 0x01, 0x3a, 0x5a, 0x1b, 0xc2, 0x01, 0x18, 0x4a,
	0x02, 0x63, 0x31, 0x4a, 0x02, 0x63, 0x32, 0x4a, 0x02, 0x63, 0x33, 0x52, 0x02, 0x63, 0x33, 0x52,
	0x02, 0x63, 0x34, 0x52, 0x02, 0x63, 0x35, 0x62, 0x1b, 0xc2, 0x01, 0x18, 0x4a, 0x02, 0x64, 0x31,
	0x4a, 0x02, 0x64, 0x32, 0x4a, 0x02, 0x64, 0x33, 0x52, 0x02, 0x64, 0x33, 0x52, 0x02, 0x64, 0x34,
	0x52, 0x02, 0x64, 0x35, 0x52, 0x0b, 0x74, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x32, 0x1a, 0x40, 0x0a, 0x12, 0x53, 0x65, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x31, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x2a, 0x4b, 0x0a, 0x05, 0x45, 0x6e, 0x75, 0x6d, 0x31, 0x12, 0x0b, 0x0a, 0x07,
	0x4a, 0x61, 0x6e, 0x75, 0x61, 0x72, 0x79, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x65, 0x62,
	0x72, 0x75, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x61, 0x72, 0x63, 0x68,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x70, 0x72, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x4d, 0x61, 0x79, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x75, 0x6e, 0x65, 0x10, 0x08,
	0x42, 0x17, 0x5a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x67, 0x6f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x74, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescOnce sync.Once
	file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescData = file_xgo_tests_govalidatortest_govalidator_test_proto_rawDesc
)

func file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescGZIP() []byte {
	file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescOnce.Do(func() {
		file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescData)
	})
	return file_xgo_tests_govalidatortest_govalidator_test_proto_rawDescData
}

var file_xgo_tests_govalidatortest_govalidator_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes = make([]protoimpl.MessageInfo, 94)
var file_xgo_tests_govalidatortest_govalidator_test_proto_goTypes = []interface{}{
	(Enum1)(0),                        // 0: govalidatortest.Enum1
	(*Config)(nil),                    // 1: govalidatortest.Config
	(*ValidOneOfTags1)(nil),           // 2: govalidatortest.ValidOneOfTags1
	(*ValidFloatTagsGeneral1)(nil),    // 3: govalidatortest.ValidFloatTagsGeneral1
	(*ValidFloatTagsOptional1)(nil),   // 4: govalidatortest.ValidFloatTagsOptional1
	(*ValidFloatTagsOneOf1)(nil),      // 5: govalidatortest.ValidFloatTagsOneOf1
	(*ValidIntTagsGeneral1)(nil),      // 6: govalidatortest.ValidIntTagsGeneral1
	(*ValidIntTagsOptional1)(nil),     // 7: govalidatortest.ValidIntTagsOptional1
	(*ValidIntTagsOneOf1)(nil),        // 8: govalidatortest.ValidIntTagsOneOf1
	(*ValidUintTagsGeneral1)(nil),     // 9: govalidatortest.ValidUintTagsGeneral1
	(*ValidUintTagsOptional1)(nil),    // 10: govalidatortest.ValidUintTagsOptional1
	(*ValidUintTagsOneOf1)(nil),       // 11: govalidatortest.ValidUintTagsOneOf1
	(*ValidBoolTags1)(nil),            // 12: govalidatortest.ValidBoolTags1
	(*ValidMessageTags)(nil),          // 13: govalidatortest.ValidMessageTags
	(*ValidEnumTagsGeneral1)(nil),     // 14: govalidatortest.ValidEnumTagsGeneral1
	(*ValidEnumTagsOptional1)(nil),    // 15: govalidatortest.ValidEnumTagsOptional1
	(*ValidEnumTagsOneOf1)(nil),       // 16: govalidatortest.ValidEnumTagsOneOf1
	(*ValidBytesTags1)(nil),           // 17: govalidatortest.ValidBytesTags1
	(*ValidRepeatedTagsGeneral1)(nil), // 18: govalidatortest.ValidRepeatedTagsGeneral1
	(*ValidRepeatedTagsItem1)(nil),    // 19: govalidatortest.ValidRepeatedTagsItem1
	(*ValidMapTagsGeneral1)(nil),      // 20: govalidatortest.ValidMapTagsGeneral1
	(*ValidMapTagsKey1)(nil),          // 21: govalidatortest.ValidMapTagsKey1
	(*ValidMapTagsValue1)(nil),        // 22: govalidatortest.ValidMapTagsValue1
	(*ValidStringTagsGeneral1)(nil),   // 23: govalidatortest.ValidStringTagsGeneral1
	(*ValidStringTagsOptional1)(nil),  // 24: govalidatortest.ValidStringTagsOptional1
	(*ValidStringTagsOneOf1)(nil),     // 25: govalidatortest.ValidStringTagsOneOf1
	(*ValidOptionsMultiCond1)(nil),    // 26: govalidatortest.ValidOptionsMultiCond1
	(*CheckIfOptions1)(nil),           // 27: govalidatortest.CheckIfOptions1
	(*CheckIfOptions2)(nil),           // 28: govalidatortest.CheckIfOptions2
	(*CheckIfOptions3)(nil),           // 29: govalidatortest.CheckIfOptions3
	(*CheckIfOptions4)(nil),           // 30: govalidatortest.CheckIfOptions4
	(*CheckIfOptions5)(nil),           // 31: govalidatortest.CheckIfOptions5
	(*CheckIfOptions6)(nil),           // 32: govalidatortest.CheckIfOptions6
	nil,                               // 33: govalidatortest.ValidMapTagsGeneral1.TMap101Entry
	nil,                               // 34: govalidatortest.ValidMapTagsGeneral1.TMap102Entry
	nil,                               // 35: govalidatortest.ValidMapTagsGeneral1.TMap103Entry
	nil,                               // 36: govalidatortest.ValidMapTagsGeneral1.TMap104Entry
	nil,                               // 37: govalidatortest.ValidMapTagsGeneral1.TMap105Entry
	nil,                               // 38: govalidatortest.ValidMapTagsGeneral1.TMap106Entry
	nil,                               // 39: govalidatortest.ValidMapTagsGeneral1.TMap107Entry
	nil,                               // 40: govalidatortest.ValidMapTagsGeneral1.TMap108Entry
	nil,                               // 41: govalidatortest.ValidMapTagsGeneral1.TMap111Entry
	nil,                               // 42: govalidatortest.ValidMapTagsGeneral1.TMap112Entry
	nil,                               // 43: govalidatortest.ValidMapTagsGeneral1.TMap113Entry
	nil,                               // 44: govalidatortest.ValidMapTagsGeneral1.TMap114Entry
	nil,                               // 45: govalidatortest.ValidMapTagsGeneral1.TMap115Entry
	nil,                               // 46: govalidatortest.ValidMapTagsGeneral1.TMap116Entry
	nil,                               // 47: govalidatortest.ValidMapTagsGeneral1.TMap117Entry
	nil,                               // 48: govalidatortest.ValidMapTagsGeneral1.TMap118Entry
	nil,                               // 49: govalidatortest.ValidMapTagsGeneral1.TMapNotNull1Entry
	nil,                               // 50: govalidatortest.ValidMapTagsGeneral1.TMapLenEq1Entry
	nil,                               // 51: govalidatortest.ValidMapTagsGeneral1.TMapLenNe1Entry
	nil,                               // 52: govalidatortest.ValidMapTagsGeneral1.TMapLenLt1Entry
	nil,                               // 53: govalidatortest.ValidMapTagsGeneral1.TMapLenGt1Entry
	nil,                               // 54: govalidatortest.ValidMapTagsGeneral1.TMapLenLte1Entry
	nil,                               // 55: govalidatortest.ValidMapTagsGeneral1.TMapLenGte1Entry
	nil,                               // 56: govalidatortest.ValidMapTagsKey1.TMapKeyStringEntry
	nil,                               // 57: govalidatortest.ValidMapTagsKey1.TMapKeyInt32Entry
	nil,                               // 58: govalidatortest.ValidMapTagsKey1.TMapKeyInt64Entry
	nil,                               // 59: govalidatortest.ValidMapTagsKey1.TMapKeySint32Entry
	nil,                               // 60: govalidatortest.ValidMapTagsKey1.TMapKeySint64Entry
	nil,                               // 61: govalidatortest.ValidMapTagsKey1.TMapKeySfixed32Entry
	nil,                               // 62: govalidatortest.ValidMapTagsKey1.TMapKeySfixed64Entry
	nil,                               // 63: govalidatortest.ValidMapTagsKey1.TMapKeyUint32Entry
	nil,                               // 64: govalidatortest.ValidMapTagsKey1.TMapKeyUint64Entry
	nil,                               // 65: govalidatortest.ValidMapTagsKey1.TMapKeyFixed32Entry
	nil,                               // 66: govalidatortest.ValidMapTagsKey1.TMapKeyFixed64Entry
	nil,                               // 67: govalidatortest.ValidMapTagsValue1.TMapValueStringEntry
	nil,                               // 68: govalidatortest.ValidMapTagsValue1.TMapValueDoubleEntry
	nil,                               // 69: govalidatortest.ValidMapTagsValue1.TMapValueFloatEntry
	nil,                               // 70: govalidatortest.ValidMapTagsValue1.TMapValueInt32Entry
	nil,                               // 71: govalidatortest.ValidMapTagsValue1.TMapValueInt64Entry
	nil,                               // 72: govalidatortest.ValidMapTagsValue1.TMapValueSint32Entry
	nil,                               // 73: govalidatortest.ValidMapTagsValue1.TMapValueSint64Entry
	nil,                               // 74: govalidatortest.ValidMapTagsValue1.TMapValueSfixed32Entry
	nil,                               // 75: govalidatortest.ValidMapTagsValue1.TMapValueSfixed64Entry
	nil,                               // 76: govalidatortest.ValidMapTagsValue1.TMapValueUint32Entry
	nil,                               // 77: govalidatortest.ValidMapTagsValue1.TMapValueUint64Entry
	nil,                               // 78: govalidatortest.ValidMapTagsValue1.TMapValueFixed32Entry
	nil,                               // 79: govalidatortest.ValidMapTagsValue1.TMapValueFixed64Entry
	nil,                               // 80: govalidatortest.ValidMapTagsValue1.TMapValueBoolEntry
	nil,                               // 81: govalidatortest.ValidMapTagsValue1.TMapValueEnumEntry
	nil,                               // 82: govalidatortest.ValidMapTagsValue1.TMapValueBytesEntry
	nil,                               // 83: govalidatortest.ValidMapTagsValue1.TMapValueMessageEntry
	nil,                               // 84: govalidatortest.ValidOptionsMultiCond1.TMapString1Entry
	nil,                               // 85: govalidatortest.ValidOptionsMultiCond1.TMapInt64Entry
	nil,                               // 86: govalidatortest.ValidOptionsMultiCond1.TMapString2Entry
	nil,                               // 87: govalidatortest.CheckIfOptions1.TMapStringEntry
	nil,                               // 88: govalidatortest.CheckIfOptions2.TMapStringEntry
	nil,                               // 89: govalidatortest.CheckIfOptions3.TMapStringEntry
	nil,                               // 90: govalidatortest.CheckIfOptions4.TMapStringEntry
	nil,                               // 91: govalidatortest.CheckIfOptions5.TMapStringEntry
	nil,                               // 92: govalidatortest.CheckIfOptions6.SeedMapStringEntry
	nil,                               // 93: govalidatortest.CheckIfOptions6.TMapString1Entry
	nil,                               // 94: govalidatortest.CheckIfOptions6.TMapString2Entry
}
var file_xgo_tests_govalidatortest_govalidator_test_proto_depIdxs = []int32{
	1,   // 0: govalidatortest.ValidMessageTags.t_message_general_1:type_name -> govalidatortest.Config
	1,   // 1: govalidatortest.ValidMessageTags.t_message_general_2:type_name -> govalidatortest.Config
	1,   // 2: govalidatortest.ValidMessageTags.t_message_general_3:type_name -> govalidatortest.Config
	1,   // 3: govalidatortest.ValidMessageTags.t_message_general_4:type_name -> govalidatortest.Config
	1,   // 4: govalidatortest.ValidMessageTags.t_message_general_not_null1:type_name -> govalidatortest.Config
	1,   // 5: govalidatortest.ValidMessageTags.t_message_general_not_null2:type_name -> govalidatortest.Config
	1,   // 6: govalidatortest.ValidMessageTags.t_message_general_skip1:type_name -> govalidatortest.Config
	1,   // 7: govalidatortest.ValidMessageTags.t_message_general_skip2:type_name -> govalidatortest.Config
	1,   // 8: govalidatortest.ValidMessageTags.t_message_onfof_1:type_name -> govalidatortest.Config
	1,   // 9: govalidatortest.ValidMessageTags.t_message_onfof_2:type_name -> govalidatortest.Config
	1,   // 10: govalidatortest.ValidMessageTags.t_message_onfof_3:type_name -> govalidatortest.Config
	1,   // 11: govalidatortest.ValidMessageTags.t_message_onfof_4:type_name -> govalidatortest.Config
	1,   // 12: govalidatortest.ValidMessageTags.t_message_oneof_not_null1:type_name -> govalidatortest.Config
	1,   // 13: govalidatortest.ValidMessageTags.t_message_oneof_not_null2:type_name -> govalidatortest.Config
	1,   // 14: govalidatortest.ValidMessageTags.t_message_oneof_skip1:type_name -> govalidatortest.Config
	1,   // 15: govalidatortest.ValidMessageTags.t_message_oneof_skip2:type_name -> govalidatortest.Config
	0,   // 16: govalidatortest.ValidEnumTagsGeneral1.t_enum_1:type_name -> govalidatortest.Enum1
	0,   // 17: govalidatortest.ValidEnumTagsGeneral1.t_enum_2:type_name -> govalidatortest.Enum1
	0,   // 18: govalidatortest.ValidEnumTagsGeneral1.t_enum_3:type_name -> govalidatortest.Enum1
	0,   // 19: govalidatortest.ValidEnumTagsGeneral1.t_enum_4:type_name -> govalidatortest.Enum1
	0,   // 20: govalidatortest.ValidEnumTagsGeneral1.t_enum_eq1:type_name -> govalidatortest.Enum1
	0,   // 21: govalidatortest.ValidEnumTagsGeneral1.t_enum_ne1:type_name -> govalidatortest.Enum1
	0,   // 22: govalidatortest.ValidEnumTagsGeneral1.t_enum_lt1:type_name -> govalidatortest.Enum1
	0,   // 23: govalidatortest.ValidEnumTagsGeneral1.t_enum_gt1:type_name -> govalidatortest.Enum1
	0,   // 24: govalidatortest.ValidEnumTagsGeneral1.t_enum_lte1:type_name -> govalidatortest.Enum1
	0,   // 25: govalidatortest.ValidEnumTagsGeneral1.t_enum_gte1:type_name -> govalidatortest.Enum1
	0,   // 26: govalidatortest.ValidEnumTagsGeneral1.t_enum_in1:type_name -> govalidatortest.Enum1
	0,   // 27: govalidatortest.ValidEnumTagsGeneral1.t_enum_not_in1:type_name -> govalidatortest.Enum1
	0,   // 28: govalidatortest.ValidEnumTagsGeneral1.t_enum_in_enums:type_name -> govalidatortest.Enum1
	0,   // 29: govalidatortest.ValidEnumTagsOptional1.t_enum_1:type_name -> govalidatortest.Enum1
	0,   // 30: govalidatortest.ValidEnumTagsOptional1.t_enum_2:type_name -> govalidatortest.Enum1
	0,   // 31: govalidatortest.ValidEnumTagsOptional1.t_enum_3:type_name -> govalidatortest.Enum1
	0,   // 32: govalidatortest.ValidEnumTagsOptional1.t_enum_4:type_name -> govalidatortest.Enum1
	0,   // 33: govalidatortest.ValidEnumTagsOptional1.t_enum_eq1:type_name -> govalidatortest.Enum1
	0,   // 34: govalidatortest.ValidEnumTagsOptional1.t_enum_ne1:type_name -> govalidatortest.Enum1
	0,   // 35: govalidatortest.ValidEnumTagsOptional1.t_enum_lt1:type_name -> govalidatortest.Enum1
	0,   // 36: govalidatortest.ValidEnumTagsOptional1.t_enum_gt1:type_name -> govalidatortest.Enum1
	0,   // 37: govalidatortest.ValidEnumTagsOptional1.t_enum_lte1:type_name -> govalidatortest.Enum1
	0,   // 38: govalidatortest.ValidEnumTagsOptional1.t_enum_gte1:type_name -> govalidatortest.Enum1
	0,   // 39: govalidatortest.ValidEnumTagsOptional1.t_enum_in1:type_name -> govalidatortest.Enum1
	0,   // 40: govalidatortest.ValidEnumTagsOptional1.t_enum_not_in1:type_name -> govalidatortest.Enum1
	0,   // 41: govalidatortest.ValidEnumTagsOptional1.t_enum_in_enums:type_name -> govalidatortest.Enum1
	0,   // 42: govalidatortest.ValidEnumTagsOneOf1.t_enum_1:type_name -> govalidatortest.Enum1
	0,   // 43: govalidatortest.ValidEnumTagsOneOf1.t_enum_2:type_name -> govalidatortest.Enum1
	0,   // 44: govalidatortest.ValidEnumTagsOneOf1.t_enum_3:type_name -> govalidatortest.Enum1
	0,   // 45: govalidatortest.ValidEnumTagsOneOf1.t_enum_4:type_name -> govalidatortest.Enum1
	0,   // 46: govalidatortest.ValidEnumTagsOneOf1.t_enum_eq1:type_name -> govalidatortest.Enum1
	0,   // 47: govalidatortest.ValidEnumTagsOneOf1.t_enum_ne1:type_name -> govalidatortest.Enum1
	0,   // 48: govalidatortest.ValidEnumTagsOneOf1.t_enum_lt1:type_name -> govalidatortest.Enum1
	0,   // 49: govalidatortest.ValidEnumTagsOneOf1.t_enum_gt1:type_name -> govalidatortest.Enum1
	0,   // 50: govalidatortest.ValidEnumTagsOneOf1.t_enum_lte1:type_name -> govalidatortest.Enum1
	0,   // 51: govalidatortest.ValidEnumTagsOneOf1.t_enum_gte1:type_name -> govalidatortest.Enum1
	0,   // 52: govalidatortest.ValidEnumTagsOneOf1.t_enum_in1:type_name -> govalidatortest.Enum1
	0,   // 53: govalidatortest.ValidEnumTagsOneOf1.t_enum_not_in1:type_name -> govalidatortest.Enum1
	0,   // 54: govalidatortest.ValidEnumTagsOneOf1.t_enum_in_enums:type_name -> govalidatortest.Enum1
	1,   // 55: govalidatortest.ValidRepeatedTagsGeneral1.t_list_107:type_name -> govalidatortest.Config
	1,   // 56: govalidatortest.ValidRepeatedTagsGeneral1.t_list_108:type_name -> govalidatortest.Config
	1,   // 57: govalidatortest.ValidRepeatedTagsGeneral1.t_list_109:type_name -> govalidatortest.Config
	1,   // 58: govalidatortest.ValidRepeatedTagsGeneral1.t_list_110:type_name -> govalidatortest.Config
	1,   // 59: govalidatortest.ValidRepeatedTagsGeneral1.t_list_111:type_name -> govalidatortest.Config
	1,   // 60: govalidatortest.ValidRepeatedTagsGeneral1.t_list_112:type_name -> govalidatortest.Config
	0,   // 61: govalidatortest.ValidRepeatedTagsGeneral1.t_list_113:type_name -> govalidatortest.Enum1
	0,   // 62: govalidatortest.ValidRepeatedTagsGeneral1.t_list_114:type_name -> govalidatortest.Enum1
	0,   // 63: govalidatortest.ValidRepeatedTagsGeneral1.t_list_115:type_name -> govalidatortest.Enum1
	0,   // 64: govalidatortest.ValidRepeatedTagsGeneral1.t_list_116:type_name -> govalidatortest.Enum1
	0,   // 65: govalidatortest.ValidRepeatedTagsGeneral1.t_list_117:type_name -> govalidatortest.Enum1
	0,   // 66: govalidatortest.ValidRepeatedTagsGeneral1.t_list_118:type_name -> govalidatortest.Enum1
	0,   // 67: govalidatortest.ValidRepeatedTagsGeneral1.t_list_unique_enum:type_name -> govalidatortest.Enum1
	1,   // 68: govalidatortest.ValidRepeatedTagsGeneral1.t_list_unique_message:type_name -> govalidatortest.Config
	0,   // 69: govalidatortest.ValidRepeatedTagsItem1.t_list_item_enum:type_name -> govalidatortest.Enum1
	1,   // 70: govalidatortest.ValidRepeatedTagsItem1.t_list_item_message:type_name -> govalidatortest.Config
	33,  // 71: govalidatortest.ValidMapTagsGeneral1.t_map_101:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap101Entry
	34,  // 72: govalidatortest.ValidMapTagsGeneral1.t_map_102:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap102Entry
	35,  // 73: govalidatortest.ValidMapTagsGeneral1.t_map_103:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap103Entry
	36,  // 74: govalidatortest.ValidMapTagsGeneral1.t_map_104:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap104Entry
	37,  // 75: govalidatortest.ValidMapTagsGeneral1.t_map_105:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap105Entry
	38,  // 76: govalidatortest.ValidMapTagsGeneral1.t_map_106:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap106Entry
	39,  // 77: govalidatortest.ValidMapTagsGeneral1.t_map_107:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap107Entry
	40,  // 78: govalidatortest.ValidMapTagsGeneral1.t_map_108:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap108Entry
	41,  // 79: govalidatortest.ValidMapTagsGeneral1.t_map_111:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap111Entry
	42,  // 80: govalidatortest.ValidMapTagsGeneral1.t_map_112:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap112Entry
	43,  // 81: govalidatortest.ValidMapTagsGeneral1.t_map_113:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap113Entry
	44,  // 82: govalidatortest.ValidMapTagsGeneral1.t_map_114:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap114Entry
	45,  // 83: govalidatortest.ValidMapTagsGeneral1.t_map_115:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap115Entry
	46,  // 84: govalidatortest.ValidMapTagsGeneral1.t_map_116:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap116Entry
	47,  // 85: govalidatortest.ValidMapTagsGeneral1.t_map_117:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap117Entry
	48,  // 86: govalidatortest.ValidMapTagsGeneral1.t_map_118:type_name -> govalidatortest.ValidMapTagsGeneral1.TMap118Entry
	49,  // 87: govalidatortest.ValidMapTagsGeneral1.t_map_not_null1:type_name -> govalidatortest.ValidMapTagsGeneral1.TMapNotNull1Entry
	50,  // 88: govalidatortest.ValidMapTagsGeneral1.t_map_len_eq1:type_name -> govalidatortest.ValidMapTagsGeneral1.TMapLenEq1Entry
	51,  // 89: govalidatortest.ValidMapTagsGeneral1.t_map_len_ne1:type_name -> govalidatortest.ValidMapTagsGeneral1.TMapLenNe1Entry
	52,  // 90: govalidatortest.ValidMapTagsGeneral1.t_map_len_lt1:type_name -> govalidatortest.ValidMapTagsGeneral1.TMapLenLt1Entry
	53,  // 91: govalidatortest.ValidMapTagsGeneral1.t_map_len_gt1:type_name -> govalidatortest.ValidMapTagsGeneral1.TMapLenGt1Entry
	54,  // 92: govalidatortest.ValidMapTagsGeneral1.t_map_len_lte1:type_name -> govalidatortest.ValidMapTagsGeneral1.TMapLenLte1Entry
	55,  // 93: govalidatortest.ValidMapTagsGeneral1.t_map_len_gte1:type_name -> govalidatortest.ValidMapTagsGeneral1.TMapLenGte1Entry
	56,  // 94: govalidatortest.ValidMapTagsKey1.t_map_key_string:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeyStringEntry
	57,  // 95: govalidatortest.ValidMapTagsKey1.t_map_key_int32:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeyInt32Entry
	58,  // 96: govalidatortest.ValidMapTagsKey1.t_map_key_int64:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeyInt64Entry
	59,  // 97: govalidatortest.ValidMapTagsKey1.t_map_key_sint32:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeySint32Entry
	60,  // 98: govalidatortest.ValidMapTagsKey1.t_map_key_sint64:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeySint64Entry
	61,  // 99: govalidatortest.ValidMapTagsKey1.t_map_key_sfixed32:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeySfixed32Entry
	62,  // 100: govalidatortest.ValidMapTagsKey1.t_map_key_sfixed64:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeySfixed64Entry
	63,  // 101: govalidatortest.ValidMapTagsKey1.t_map_key_uint32:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeyUint32Entry
	64,  // 102: govalidatortest.ValidMapTagsKey1.t_map_key_uint64:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeyUint64Entry
	65,  // 103: govalidatortest.ValidMapTagsKey1.t_map_key_fixed32:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeyFixed32Entry
	66,  // 104: govalidatortest.ValidMapTagsKey1.t_map_key_fixed64:type_name -> govalidatortest.ValidMapTagsKey1.TMapKeyFixed64Entry
	67,  // 105: govalidatortest.ValidMapTagsValue1.t_map_value_string:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueStringEntry
	68,  // 106: govalidatortest.ValidMapTagsValue1.t_map_value_double:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueDoubleEntry
	69,  // 107: govalidatortest.ValidMapTagsValue1.t_map_value_float:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueFloatEntry
	70,  // 108: govalidatortest.ValidMapTagsValue1.t_map_value_int32:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueInt32Entry
	71,  // 109: govalidatortest.ValidMapTagsValue1.t_map_value_int64:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueInt64Entry
	72,  // 110: govalidatortest.ValidMapTagsValue1.t_map_value_sint32:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueSint32Entry
	73,  // 111: govalidatortest.ValidMapTagsValue1.t_map_value_sint64:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueSint64Entry
	74,  // 112: govalidatortest.ValidMapTagsValue1.t_map_value_sfixed32:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueSfixed32Entry
	75,  // 113: govalidatortest.ValidMapTagsValue1.t_map_value_sfixed64:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueSfixed64Entry
	76,  // 114: govalidatortest.ValidMapTagsValue1.t_map_value_uint32:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueUint32Entry
	77,  // 115: govalidatortest.ValidMapTagsValue1.t_map_value_uint64:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueUint64Entry
	78,  // 116: govalidatortest.ValidMapTagsValue1.t_map_value_fixed32:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueFixed32Entry
	79,  // 117: govalidatortest.ValidMapTagsValue1.t_map_value_fixed64:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueFixed64Entry
	80,  // 118: govalidatortest.ValidMapTagsValue1.t_map_value_bool:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueBoolEntry
	81,  // 119: govalidatortest.ValidMapTagsValue1.t_map_value_enum:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueEnumEntry
	82,  // 120: govalidatortest.ValidMapTagsValue1.t_map_value_bytes:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueBytesEntry
	83,  // 121: govalidatortest.ValidMapTagsValue1.t_map_value_message:type_name -> govalidatortest.ValidMapTagsValue1.TMapValueMessageEntry
	84,  // 122: govalidatortest.ValidOptionsMultiCond1.t_map_string1:type_name -> govalidatortest.ValidOptionsMultiCond1.TMapString1Entry
	85,  // 123: govalidatortest.ValidOptionsMultiCond1.t_map_int64:type_name -> govalidatortest.ValidOptionsMultiCond1.TMapInt64Entry
	86,  // 124: govalidatortest.ValidOptionsMultiCond1.t_map_string2:type_name -> govalidatortest.ValidOptionsMultiCond1.TMapString2Entry
	87,  // 125: govalidatortest.CheckIfOptions1.t_map_string:type_name -> govalidatortest.CheckIfOptions1.TMapStringEntry
	88,  // 126: govalidatortest.CheckIfOptions2.t_map_string:type_name -> govalidatortest.CheckIfOptions2.TMapStringEntry
	89,  // 127: govalidatortest.CheckIfOptions3.t_map_string:type_name -> govalidatortest.CheckIfOptions3.TMapStringEntry
	90,  // 128: govalidatortest.CheckIfOptions4.t_map_string:type_name -> govalidatortest.CheckIfOptions4.TMapStringEntry
	91,  // 129: govalidatortest.CheckIfOptions5.t_map_string:type_name -> govalidatortest.CheckIfOptions5.TMapStringEntry
	92,  // 130: govalidatortest.CheckIfOptions6.seed_map_string:type_name -> govalidatortest.CheckIfOptions6.SeedMapStringEntry
	93,  // 131: govalidatortest.CheckIfOptions6.t_map_string1:type_name -> govalidatortest.CheckIfOptions6.TMapString1Entry
	94,  // 132: govalidatortest.CheckIfOptions6.t_map_string2:type_name -> govalidatortest.CheckIfOptions6.TMapString2Entry
	1,   // 133: govalidatortest.ValidMapTagsGeneral1.TMap111Entry.value:type_name -> govalidatortest.Config
	1,   // 134: govalidatortest.ValidMapTagsGeneral1.TMap112Entry.value:type_name -> govalidatortest.Config
	1,   // 135: govalidatortest.ValidMapTagsGeneral1.TMap113Entry.value:type_name -> govalidatortest.Config
	1,   // 136: govalidatortest.ValidMapTagsGeneral1.TMap114Entry.value:type_name -> govalidatortest.Config
	1,   // 137: govalidatortest.ValidMapTagsGeneral1.TMap115Entry.value:type_name -> govalidatortest.Config
	1,   // 138: govalidatortest.ValidMapTagsGeneral1.TMap116Entry.value:type_name -> govalidatortest.Config
	1,   // 139: govalidatortest.ValidMapTagsGeneral1.TMap117Entry.value:type_name -> govalidatortest.Config
	1,   // 140: govalidatortest.ValidMapTagsGeneral1.TMap118Entry.value:type_name -> govalidatortest.Config
	0,   // 141: govalidatortest.ValidMapTagsValue1.TMapValueEnumEntry.value:type_name -> govalidatortest.Enum1
	1,   // 142: govalidatortest.ValidMapTagsValue1.TMapValueMessageEntry.value:type_name -> govalidatortest.Config
	143, // [143:143] is the sub-list for method output_type
	143, // [143:143] is the sub-list for method input_type
	143, // [143:143] is the sub-list for extension type_name
	143, // [143:143] is the sub-list for extension extendee
	0,   // [0:143] is the sub-list for field type_name
}

func init() { file_xgo_tests_govalidatortest_govalidator_test_proto_init() }
func file_xgo_tests_govalidatortest_govalidator_test_proto_init() {
	if File_xgo_tests_govalidatortest_govalidator_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidOneOfTags1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidFloatTagsGeneral1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidFloatTagsOptional1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidFloatTagsOneOf1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidIntTagsGeneral1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidIntTagsOptional1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidIntTagsOneOf1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidUintTagsGeneral1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidUintTagsOptional1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidUintTagsOneOf1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidBoolTags1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidMessageTags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidEnumTagsGeneral1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidEnumTagsOptional1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidEnumTagsOneOf1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidBytesTags1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidRepeatedTagsGeneral1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidRepeatedTagsItem1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidMapTagsGeneral1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidMapTagsKey1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidMapTagsValue1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidStringTagsGeneral1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidStringTagsOptional1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidStringTagsOneOf1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidOptionsMultiCond1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIfOptions1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIfOptions2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIfOptions3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIfOptions4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIfOptions5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckIfOptions6); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ValidOneOfTags1_Oneof1String1)(nil),
		(*ValidOneOfTags1_Oneof2String1)(nil),
		(*ValidOneOfTags1_Oneof3String1)(nil),
		(*ValidOneOfTags1_Oneof4String1)(nil),
		(*ValidOneOfTags1_Oneof5String1)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ValidFloatTagsOneOf1_TFloat1)(nil),
		(*ValidFloatTagsOneOf1_TFloat2)(nil),
		(*ValidFloatTagsOneOf1_TFloat3)(nil),
		(*ValidFloatTagsOneOf1_TFloat4)(nil),
		(*ValidFloatTagsOneOf1_TFloatEq1)(nil),
		(*ValidFloatTagsOneOf1_TFloatNe1)(nil),
		(*ValidFloatTagsOneOf1_TFloatLt1)(nil),
		(*ValidFloatTagsOneOf1_TFloatGt1)(nil),
		(*ValidFloatTagsOneOf1_TFloatLte1)(nil),
		(*ValidFloatTagsOneOf1_TFloatGte1)(nil),
		(*ValidFloatTagsOneOf1_TFloatIn1)(nil),
		(*ValidFloatTagsOneOf1_TFloatNotIn1)(nil),
		(*ValidFloatTagsOneOf1_TDouble1)(nil),
		(*ValidFloatTagsOneOf1_TDouble2)(nil),
		(*ValidFloatTagsOneOf1_TDouble3)(nil),
		(*ValidFloatTagsOneOf1_TDouble4)(nil),
		(*ValidFloatTagsOneOf1_TDoubleEq1)(nil),
		(*ValidFloatTagsOneOf1_TDoubleNe1)(nil),
		(*ValidFloatTagsOneOf1_TDoubleLt1)(nil),
		(*ValidFloatTagsOneOf1_TDoubleGt1)(nil),
		(*ValidFloatTagsOneOf1_TDoubleLte1)(nil),
		(*ValidFloatTagsOneOf1_TDoubleGte1)(nil),
		(*ValidFloatTagsOneOf1_TDoubleIn1)(nil),
		(*ValidFloatTagsOneOf1_TDoubleNotIn1)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ValidIntTagsOneOf1_TInt32_1)(nil),
		(*ValidIntTagsOneOf1_TInt32_2)(nil),
		(*ValidIntTagsOneOf1_TInt32_3)(nil),
		(*ValidIntTagsOneOf1_TInt32_4)(nil),
		(*ValidIntTagsOneOf1_TInt32Eq1)(nil),
		(*ValidIntTagsOneOf1_TInt32Ne1)(nil),
		(*ValidIntTagsOneOf1_TInt32Lt1)(nil),
		(*ValidIntTagsOneOf1_TInt32Gt1)(nil),
		(*ValidIntTagsOneOf1_TInt32Lte1)(nil),
		(*ValidIntTagsOneOf1_TInt32Gte1)(nil),
		(*ValidIntTagsOneOf1_TInt32In1)(nil),
		(*ValidIntTagsOneOf1_TInt32NotIn1)(nil),
		(*ValidIntTagsOneOf1_TInt64_1)(nil),
		(*ValidIntTagsOneOf1_TInt64_2)(nil),
		(*ValidIntTagsOneOf1_TInt64_3)(nil),
		(*ValidIntTagsOneOf1_TInt64_4)(nil),
		(*ValidIntTagsOneOf1_TInt64Eq1)(nil),
		(*ValidIntTagsOneOf1_TInt64Ne1)(nil),
		(*ValidIntTagsOneOf1_TInt64Lt1)(nil),
		(*ValidIntTagsOneOf1_TInt64Gt1)(nil),
		(*ValidIntTagsOneOf1_TInt64Lte1)(nil),
		(*ValidIntTagsOneOf1_TInt64Gte1)(nil),
		(*ValidIntTagsOneOf1_TInt64In1)(nil),
		(*ValidIntTagsOneOf1_TInt64NotIn1)(nil),
		(*ValidIntTagsOneOf1_TSint32_1)(nil),
		(*ValidIntTagsOneOf1_TSint32_2)(nil),
		(*ValidIntTagsOneOf1_TSint32_3)(nil),
		(*ValidIntTagsOneOf1_TSint32_4)(nil),
		(*ValidIntTagsOneOf1_TSint32Eq1)(nil),
		(*ValidIntTagsOneOf1_TSint32Ne1)(nil),
		(*ValidIntTagsOneOf1_TSint32Lt1)(nil),
		(*ValidIntTagsOneOf1_TSint32Gt1)(nil),
		(*ValidIntTagsOneOf1_TSint32Lte1)(nil),
		(*ValidIntTagsOneOf1_TSint32Gte1)(nil),
		(*ValidIntTagsOneOf1_TSint32In1)(nil),
		(*ValidIntTagsOneOf1_TSint32NotIn1)(nil),
		(*ValidIntTagsOneOf1_TSint64_1)(nil),
		(*ValidIntTagsOneOf1_TSint64_2)(nil),
		(*ValidIntTagsOneOf1_TSint64_3)(nil),
		(*ValidIntTagsOneOf1_TSint64_4)(nil),
		(*ValidIntTagsOneOf1_TSint64Eq1)(nil),
		(*ValidIntTagsOneOf1_TSint64Ne1)(nil),
		(*ValidIntTagsOneOf1_TSint64Lt1)(nil),
		(*ValidIntTagsOneOf1_TSint64Gt1)(nil),
		(*ValidIntTagsOneOf1_TSint64Lte1)(nil),
		(*ValidIntTagsOneOf1_TSint64Gte1)(nil),
		(*ValidIntTagsOneOf1_TSint64In1)(nil),
		(*ValidIntTagsOneOf1_TSint64NotIn1)(nil),
		(*ValidIntTagsOneOf1_TSfixed32_1)(nil),
		(*ValidIntTagsOneOf1_TSfixed32_2)(nil),
		(*ValidIntTagsOneOf1_TSfixed32_3)(nil),
		(*ValidIntTagsOneOf1_TSfixed32_4)(nil),
		(*ValidIntTagsOneOf1_TSfixed32Eq1)(nil),
		(*ValidIntTagsOneOf1_TSfixed32Ne1)(nil),
		(*ValidIntTagsOneOf1_TSfixed32Lt1)(nil),
		(*ValidIntTagsOneOf1_TSfixed32Gt1)(nil),
		(*ValidIntTagsOneOf1_TSfixed32Lte1)(nil),
		(*ValidIntTagsOneOf1_TSfixed32Gte1)(nil),
		(*ValidIntTagsOneOf1_TSfixed32In1)(nil),
		(*ValidIntTagsOneOf1_TSfixed32NotIn1)(nil),
		(*ValidIntTagsOneOf1_TSfixed64_1)(nil),
		(*ValidIntTagsOneOf1_TSfixed64_2)(nil),
		(*ValidIntTagsOneOf1_TSfixed64_3)(nil),
		(*ValidIntTagsOneOf1_TSfixed64_4)(nil),
		(*ValidIntTagsOneOf1_TSfixed64Eq1)(nil),
		(*ValidIntTagsOneOf1_TSfixed64Ne1)(nil),
		(*ValidIntTagsOneOf1_TSfixed64Lt1)(nil),
		(*ValidIntTagsOneOf1_TSfixed64Gt1)(nil),
		(*ValidIntTagsOneOf1_TSfixed64Lte1)(nil),
		(*ValidIntTagsOneOf1_TSfixed64Gte1)(nil),
		(*ValidIntTagsOneOf1_TSfixed64In1)(nil),
		(*ValidIntTagsOneOf1_TSfixed64NotIn1)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ValidUintTagsOneOf1_TUint32_1)(nil),
		(*ValidUintTagsOneOf1_TUint32_2)(nil),
		(*ValidUintTagsOneOf1_TUint32_3)(nil),
		(*ValidUintTagsOneOf1_TUint32_4)(nil),
		(*ValidUintTagsOneOf1_TUint32Eq1)(nil),
		(*ValidUintTagsOneOf1_TUint32Ne1)(nil),
		(*ValidUintTagsOneOf1_TUint32Lt1)(nil),
		(*ValidUintTagsOneOf1_TUint32Gt1)(nil),
		(*ValidUintTagsOneOf1_TUint32Lte1)(nil),
		(*ValidUintTagsOneOf1_TUint32Gte1)(nil),
		(*ValidUintTagsOneOf1_TUint32In1)(nil),
		(*ValidUintTagsOneOf1_TUint32NotIn1)(nil),
		(*ValidUintTagsOneOf1_TUint64_1)(nil),
		(*ValidUintTagsOneOf1_TUint64_2)(nil),
		(*ValidUintTagsOneOf1_TUint64_3)(nil),
		(*ValidUintTagsOneOf1_TUint64_4)(nil),
		(*ValidUintTagsOneOf1_TUint64Eq1)(nil),
		(*ValidUintTagsOneOf1_TUint64Ne1)(nil),
		(*ValidUintTagsOneOf1_TUint64Lt1)(nil),
		(*ValidUintTagsOneOf1_TUint64Gt1)(nil),
		(*ValidUintTagsOneOf1_TUint64Lte1)(nil),
		(*ValidUintTagsOneOf1_TUint64Gte1)(nil),
		(*ValidUintTagsOneOf1_TUint64In1)(nil),
		(*ValidUintTagsOneOf1_TUint64NotIn1)(nil),
		(*ValidUintTagsOneOf1_TFixed32_1)(nil),
		(*ValidUintTagsOneOf1_TFixed32_2)(nil),
		(*ValidUintTagsOneOf1_TFixed32_3)(nil),
		(*ValidUintTagsOneOf1_TFixed32_4)(nil),
		(*ValidUintTagsOneOf1_TFixed32Eq1)(nil),
		(*ValidUintTagsOneOf1_TFixed32Ne1)(nil),
		(*ValidUintTagsOneOf1_TFixed32Lt1)(nil),
		(*ValidUintTagsOneOf1_TFixed32Gt1)(nil),
		(*ValidUintTagsOneOf1_TFixed32Lte1)(nil),
		(*ValidUintTagsOneOf1_TFixed32Gte1)(nil),
		(*ValidUintTagsOneOf1_TFixed32In1)(nil),
		(*ValidUintTagsOneOf1_TFixed32NotIn1)(nil),
		(*ValidUintTagsOneOf1_TFixed64_1)(nil),
		(*ValidUintTagsOneOf1_TFixed64_2)(nil),
		(*ValidUintTagsOneOf1_TFixed64_3)(nil),
		(*ValidUintTagsOneOf1_TFixed64_4)(nil),
		(*ValidUintTagsOneOf1_TFixed64Eq1)(nil),
		(*ValidUintTagsOneOf1_TFixed64Ne1)(nil),
		(*ValidUintTagsOneOf1_TFixed64Lt1)(nil),
		(*ValidUintTagsOneOf1_TFixed64Gt1)(nil),
		(*ValidUintTagsOneOf1_TFixed64Lte1)(nil),
		(*ValidUintTagsOneOf1_TFixed64Gte1)(nil),
		(*ValidUintTagsOneOf1_TFixed64In1)(nil),
		(*ValidUintTagsOneOf1_TFixed64NotIn1)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ValidBoolTags1_TBoolOnfof_1)(nil),
		(*ValidBoolTags1_TBoolOnfof_2)(nil),
		(*ValidBoolTags1_TBoolOnfof_3)(nil),
		(*ValidBoolTags1_TBoolOnfof_4)(nil),
		(*ValidBoolTags1_TBoolOneofEq1)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ValidMessageTags_TMessageOnfof_1)(nil),
		(*ValidMessageTags_TMessageOnfof_2)(nil),
		(*ValidMessageTags_TMessageOnfof_3)(nil),
		(*ValidMessageTags_TMessageOnfof_4)(nil),
		(*ValidMessageTags_TMessageOneofNotNull1)(nil),
		(*ValidMessageTags_TMessageOneofNotNull2)(nil),
		(*ValidMessageTags_TMessageOneofSkip1)(nil),
		(*ValidMessageTags_TMessageOneofSkip2)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ValidEnumTagsOneOf1_TEnum_1)(nil),
		(*ValidEnumTagsOneOf1_TEnum_2)(nil),
		(*ValidEnumTagsOneOf1_TEnum_3)(nil),
		(*ValidEnumTagsOneOf1_TEnum_4)(nil),
		(*ValidEnumTagsOneOf1_TEnumEq1)(nil),
		(*ValidEnumTagsOneOf1_TEnumNe1)(nil),
		(*ValidEnumTagsOneOf1_TEnumLt1)(nil),
		(*ValidEnumTagsOneOf1_TEnumGt1)(nil),
		(*ValidEnumTagsOneOf1_TEnumLte1)(nil),
		(*ValidEnumTagsOneOf1_TEnumGte1)(nil),
		(*ValidEnumTagsOneOf1_TEnumIn1)(nil),
		(*ValidEnumTagsOneOf1_TEnumNotIn1)(nil),
		(*ValidEnumTagsOneOf1_TEnumInEnums)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*ValidStringTagsOneOf1_TString1)(nil),
		(*ValidStringTagsOneOf1_TString2)(nil),
		(*ValidStringTagsOneOf1_TString3)(nil),
		(*ValidStringTagsOneOf1_TString4)(nil),
		(*ValidStringTagsOneOf1_TStringEq1)(nil),
		(*ValidStringTagsOneOf1_TStringNe1)(nil),
		(*ValidStringTagsOneOf1_TStringLt1)(nil),
		(*ValidStringTagsOneOf1_TStringGt1)(nil),
		(*ValidStringTagsOneOf1_TStringLte1)(nil),
		(*ValidStringTagsOneOf1_TStringGte1)(nil),
		(*ValidStringTagsOneOf1_TStringIn1)(nil),
		(*ValidStringTagsOneOf1_TStringNotIn1)(nil),
		(*ValidStringTagsOneOf1_TStringCharLenEq1)(nil),
		(*ValidStringTagsOneOf1_TStringCharLenNe1)(nil),
		(*ValidStringTagsOneOf1_TStringCharLenGt1)(nil),
		(*ValidStringTagsOneOf1_TStringCharLenLt1)(nil),
		(*ValidStringTagsOneOf1_TStringCharLenGte1)(nil),
		(*ValidStringTagsOneOf1_TStringCharLenLte1)(nil),
		(*ValidStringTagsOneOf1_TStringByteLenEq1)(nil),
		(*ValidStringTagsOneOf1_TStringByteLenNe1)(nil),
		(*ValidStringTagsOneOf1_TStringByteLenGt1)(nil),
		(*ValidStringTagsOneOf1_TStringByteLenLt1)(nil),
		(*ValidStringTagsOneOf1_TStringByteLenGte1)(nil),
		(*ValidStringTagsOneOf1_TStringByteLenLte1)(nil),
		(*ValidStringTagsOneOf1_TStringRegex1)(nil),
		(*ValidStringTagsOneOf1_TStringPrefix1)(nil),
		(*ValidStringTagsOneOf1_TStringNoPrefix1)(nil),
		(*ValidStringTagsOneOf1_TStringSuffix1)(nil),
		(*ValidStringTagsOneOf1_TStringNoSuffix1)(nil),
		(*ValidStringTagsOneOf1_TStringContains1)(nil),
		(*ValidStringTagsOneOf1_TStringNoContains1)(nil),
		(*ValidStringTagsOneOf1_TStringContainsAny1)(nil),
		(*ValidStringTagsOneOf1_TStringNotContainsAny1)(nil),
		(*ValidStringTagsOneOf1_TStringUtf8)(nil),
		(*ValidStringTagsOneOf1_TStringAscii)(nil),
		(*ValidStringTagsOneOf1_TStringPrintAscii)(nil),
		(*ValidStringTagsOneOf1_TStringBoolean)(nil),
		(*ValidStringTagsOneOf1_TStringLowercase)(nil),
		(*ValidStringTagsOneOf1_TStringUppercase)(nil),
		(*ValidStringTagsOneOf1_TStringAlpha)(nil),
		(*ValidStringTagsOneOf1_TStringNumber)(nil),
		(*ValidStringTagsOneOf1_TStringAlphaNumber)(nil),
		(*ValidStringTagsOneOf1_TStringIp)(nil),
		(*ValidStringTagsOneOf1_TStringIpv4)(nil),
		(*ValidStringTagsOneOf1_TStringIpv6)(nil),
		(*ValidStringTagsOneOf1_TStringIpAddr)(nil),
		(*ValidStringTagsOneOf1_TStringIp4Addr)(nil),
		(*ValidStringTagsOneOf1_TStringIp6Addr)(nil),
		(*ValidStringTagsOneOf1_TStringCidr)(nil),
		(*ValidStringTagsOneOf1_TStringCidrv4)(nil),
		(*ValidStringTagsOneOf1_TStringCidrv6)(nil),
		(*ValidStringTagsOneOf1_TStringMac)(nil),
		(*ValidStringTagsOneOf1_TStringTcpAddr)(nil),
		(*ValidStringTagsOneOf1_TStringTcp4Addr)(nil),
		(*ValidStringTagsOneOf1_TStringTcp6Addr)(nil),
		(*ValidStringTagsOneOf1_TStringUdpAddr)(nil),
		(*ValidStringTagsOneOf1_TStringUdp4Addr)(nil),
		(*ValidStringTagsOneOf1_TStringUdp6Addr)(nil),
		(*ValidStringTagsOneOf1_TStringUnixAddr)(nil),
		(*ValidStringTagsOneOf1_TStringHostname)(nil),
		(*ValidStringTagsOneOf1_TStringHostnameRfc1123)(nil),
		(*ValidStringTagsOneOf1_TStringHostnamePort)(nil),
		(*ValidStringTagsOneOf1_TStringDataUri)(nil),
		(*ValidStringTagsOneOf1_TStringFqdn)(nil),
		(*ValidStringTagsOneOf1_TStringUri)(nil),
		(*ValidStringTagsOneOf1_TStringUrl)(nil),
		(*ValidStringTagsOneOf1_TStringUrlEncoded)(nil),
		(*ValidStringTagsOneOf1_TStringUnixCron)(nil),
		(*ValidStringTagsOneOf1_TStringEmail)(nil),
		(*ValidStringTagsOneOf1_TStringJson)(nil),
		(*ValidStringTagsOneOf1_TStringJwt)(nil),
		(*ValidStringTagsOneOf1_TStringHtml)(nil),
		(*ValidStringTagsOneOf1_TStringHtmlEncoded)(nil),
		(*ValidStringTagsOneOf1_TStringBase64)(nil),
		(*ValidStringTagsOneOf1_TStringBase64Url)(nil),
		(*ValidStringTagsOneOf1_TStringHexadecimal)(nil),
		(*ValidStringTagsOneOf1_TStringDatetime)(nil),
		(*ValidStringTagsOneOf1_TStringTimezone)(nil),
		(*ValidStringTagsOneOf1_TStringUuid)(nil),
		(*ValidStringTagsOneOf1_TStringUuid1)(nil),
		(*ValidStringTagsOneOf1_TStringUuid3)(nil),
		(*ValidStringTagsOneOf1_TStringUuid4)(nil),
		(*ValidStringTagsOneOf1_TStringUuid5)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ValidOptionsMultiCond1_OneofString1)(nil),
		(*ValidOptionsMultiCond1_OneofInt64)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*CheckIfOptions1_Oneof1String1)(nil),
		(*CheckIfOptions1_Oneof2String)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*CheckIfOptions2_Oneof1String1)(nil),
		(*CheckIfOptions2_Oneof2String)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*CheckIfOptions3_Oneof2String)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*CheckIfOptions4_Oneof1String1)(nil),
		(*CheckIfOptions4_Oneof2String)(nil),
	}
	file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*CheckIfOptions5_Oneof2String)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_xgo_tests_govalidatortest_govalidator_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   94,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_xgo_tests_govalidatortest_govalidator_test_proto_goTypes,
		DependencyIndexes: file_xgo_tests_govalidatortest_govalidator_test_proto_depIdxs,
		EnumInfos:         file_xgo_tests_govalidatortest_govalidator_test_proto_enumTypes,
		MessageInfos:      file_xgo_tests_govalidatortest_govalidator_test_proto_msgTypes,
	}.Build()
	File_xgo_tests_govalidatortest_govalidator_test_proto = out.File
	file_xgo_tests_govalidatortest_govalidator_test_proto_rawDesc = nil
	file_xgo_tests_govalidatortest_govalidator_test_proto_goTypes = nil
	file_xgo_tests_govalidatortest_govalidator_test_proto_depIdxs = nil
}
