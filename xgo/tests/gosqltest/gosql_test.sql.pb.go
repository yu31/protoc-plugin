// Code generated by protoc-gen-gosql. DO NOT EDIT.
// versions:
// 		protoc-gen-gosql 0.0.1
// source: xgo/tests/gosqltest/gosql_test.proto

package gosqltest

import (
	driver "database/sql/driver"
	json "encoding/json"
	proto1 "github.com/gogo/protobuf/proto"
	_ "github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/descriptorpb"
)

// Scan for implements sql.Scanner (- database/sql).
func (t *User1) Scan(val interface{}) error {
	return json.Unmarshal(val.([]byte), t)
}

// Value for implements driver.Valuer (- database/sql/driver)
func (t *User1) Value() (driver.Value, error) {
	if t == nil {
		return nil, nil
	}
	return json.Marshal(t)
}

// Scan for implements sql.Scanner (- database/sql).
func (t *User1_Meta1) Scan(val interface{}) error {
	return json.Unmarshal(val.([]byte), t)
}

// Value for implements driver.Valuer (- database/sql/driver)
func (t *User1_Meta1) Value() (driver.Value, error) {
	if t == nil {
		return nil, nil
	}
	return json.Marshal(t)
}

// Scan for implements sql.Scanner (- database/sql).
func (t *User2) Scan(val interface{}) error {
	var _unmarshal = protojson.UnmarshalOptions{
		AllowPartial:   true,
		DiscardUnknown: false,
	}
	return _unmarshal.Unmarshal(val.([]byte), t)
}

// Value for implements driver.Valuer (- database/sql/driver)
func (t *User2) Value() (driver.Value, error) {
	if t == nil {
		return nil, nil
	}
	var _marshal = protojson.MarshalOptions{
		Multiline:       false,
		Indent:          " ",
		AllowPartial:    false,
		UseProtoNames:   false,
		UseEnumNumbers:  true,
		EmitUnpopulated: true,
	}
	return _marshal.Marshal(t)
}

// Scan for implements sql.Scanner (- database/sql).
func (t *User3) Scan(val interface{}) error {
	var _unmarshal = proto.UnmarshalOptions{
		Merge:          false,
		AllowPartial:   false,
		DiscardUnknown: false,
	}
	return _unmarshal.Unmarshal(val.([]byte), t)
}

// Value for implements driver.Valuer (- database/sql/driver)
func (t *User3) Value() (driver.Value, error) {
	if t == nil {
		return nil, nil
	}
	var _marshal = proto.MarshalOptions{
		AllowPartial:  false,
		Deterministic: false,
		UseCachedSize: false,
	}
	return _marshal.Marshal(t)
}

// Scan for implements sql.Scanner (- database/sql).
func (t *User4) Scan(val interface{}) error {
	return proto1.Unmarshal(val.([]byte), t)
}

// Value for implements driver.Valuer (- database/sql/driver)
func (t *User4) Value() (driver.Value, error) {
	if t == nil {
		return nil, nil
	}
	return proto1.Marshal(t)
}
