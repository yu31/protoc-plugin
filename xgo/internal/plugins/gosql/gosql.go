package gosql

import (
	"fmt"
	"reflect"

	"github.com/yu31/protoc-plugin/xgo/internal/generator"
	"github.com/yu31/protoc-plugin/xgo/internal/utils"
	"github.com/yu31/protoc-plugin/xgo/pb/pbgosql"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

const version = "0.0.1"

var (
	driverPackage    = protogen.GoImportPath("database/sql/driver")
	jsonPackage      = protogen.GoImportPath("encoding/json")
	protoPackage     = protogen.GoImportPath("google.golang.org/protobuf/proto")
	protojsonPackage = protogen.GoImportPath("google.golang.org/protobuf/encoding/protojson")
	gogoprotoPackage = protogen.GoImportPath("github.com/gogo/protobuf/proto")
)

type plugin struct {
	g *protogen.GeneratedFile

	messages []*protogen.Message
}

func New() generator.Plugin {
	return &plugin{}
}

// Name identifies the plugin.
func (p *plugin) Name() string {
	return "sql"
}

// Version identifies the plugin version.
func (p *plugin) Version() string {
	return version
}

func (p *plugin) Init(file *protogen.File) bool {
	//p.messages = utils.LoadValidMessages(file.Messages)
	//return true

	if len(file.Messages) == 0 {
		return false
	}
	p.messages = utils.LoadValidMessages(file.Messages)

	for _, msg := range p.messages {
		ext := proto.GetExtension(msg.Desc.Options(), pbgosql.E_Serialize).(*pbgosql.Serialize)
		if ext != nil && ext.Format != nil {
			return true
		}
	}
	return false
}

// Generate produces the code generated by the plugin for this file,
// except for the imports, by calling the generator's methods P, In, and Out.
func (p *plugin) Generate(g *protogen.GeneratedFile) {
	p.g = g
	for _, msg := range p.messages {
		p.generateMessage(msg)
	}
}

func (p *plugin) generateMessage(msg *protogen.Message) {
	if reflect.ValueOf(msg.Desc.Options()).IsNil() {
		return
	}

	ext := proto.GetExtension(msg.Desc.Options(), pbgosql.E_Serialize).(*pbgosql.Serialize)
	// No serialize options are set.
	if ext == nil {
		return
	}

	name := msg.GoIdent.GoName
	switch x := ext.Format.(type) {
	case nil:
		// No serialize format are set.
		return
	case *pbgosql.Serialize_Json:
		p.g.P("// Scan for implements sql.Scanner (- database/sql). ")
		p.g.P("func (t *", name, ") Scan(val interface{}) error {")
		p.g.P("    return ", jsonPackage.Ident("Unmarshal"), "(val.([]byte), t)")
		p.g.P("}")
		p.g.P()

		p.g.P("// Value for implements driver.Valuer (- database/sql/driver) ")
		p.g.P("func (t *", name, ") Value() (", driverPackage.Ident("Value"), ", error) {")
		p.g.P("    if t == nil {")
		p.g.P("        return nil, nil")
		p.g.P("    }")
		p.g.P("    return ", jsonPackage.Ident("Marshal"), "(t)")
		p.g.P("}")
	case *pbgosql.Serialize_Protojson:
		marshalOptions := x.Protojson.Marshal_
		if marshalOptions == nil {
			marshalOptions = new(pbgosql.ProtoJSON_MarshalOptions)
		}
		unmarshalOptions := x.Protojson.Unmarshal_
		if unmarshalOptions == nil {
			unmarshalOptions = new(pbgosql.ProtoJSON_UnmarshalOptions)
		}

		p.g.P("// Scan for implements sql.Scanner (- database/sql). ")
		p.g.P("func (t *", name, ") Scan(val interface{}) error {")
		p.g.P("    var _unmarshal = ", protojsonPackage.Ident("UnmarshalOptions"), "{")
		p.g.P("        AllowPartial: ", unmarshalOptions.AllowPartial, ",")
		p.g.P("        DiscardUnknown: ", unmarshalOptions.DiscardUnknown, ",")
		p.g.P("    }")
		p.g.P("    return _unmarshal.Unmarshal(val.([]byte), t)")
		p.g.P("}")
		p.g.P()

		p.g.P("// Value for implements driver.Valuer (- database/sql/driver) ")
		p.g.P("func (t *", name, ") Value() (", driverPackage.Ident("Value"), ", error) {")
		p.g.P("    if t == nil {")
		p.g.P("        return nil, nil")
		p.g.P("    }")
		p.g.P("    var _marshal = ", protojsonPackage.Ident("MarshalOptions"), "{")
		p.g.P("        Multiline: ", marshalOptions.Multiline, ",")
		p.g.P("        Indent: \"", marshalOptions.Indent, "\",")
		p.g.P("        AllowPartial: ", marshalOptions.AllowPartial, ",")
		p.g.P("        UseProtoNames: ", marshalOptions.UseProtoNames, ",")
		p.g.P("        UseEnumNumbers: ", marshalOptions.UseEnumNumbers, ",")
		p.g.P("        EmitUnpopulated: ", marshalOptions.EmitUnpopulated, ",")
		p.g.P("    }")
		p.g.P("    return _marshal.Marshal(t)")
		p.g.P("}")
	case *pbgosql.Serialize_Proto:
		marshalOptions := x.Proto.Marshal_
		if marshalOptions == nil {
			marshalOptions = new(pbgosql.Proto_MarshalOptions)
		}
		unmarshalOptions := x.Proto.Unmarshal_
		if unmarshalOptions == nil {
			unmarshalOptions = new(pbgosql.Proto_UnmarshalOptions)
		}

		p.g.P("// Scan for implements sql.Scanner (- database/sql). ")
		p.g.P("func (t *", name, ") Scan(val interface{}) error {")
		p.g.P("    var _unmarshal = ", protoPackage.Ident("UnmarshalOptions"), "{")
		p.g.P("        Merge: ", unmarshalOptions.Merge, ",")
		p.g.P("        AllowPartial: ", unmarshalOptions.AllowPartial, ",")
		p.g.P("        DiscardUnknown: ", unmarshalOptions.DiscardUnknown, ",")
		p.g.P("    }")
		p.g.P("    return _unmarshal.Unmarshal(val.([]byte), t)")
		p.g.P("}")
		p.g.P()

		p.g.P("// Value for implements driver.Valuer (- database/sql/driver) ")
		p.g.P("func (t *", name, ") Value() (", driverPackage.Ident("Value"), ", error) {")
		p.g.P("    if t == nil {")
		p.g.P("        return nil, nil")
		p.g.P("    }")
		p.g.P("    var _marshal = ", protoPackage.Ident("MarshalOptions"), "{")
		p.g.P("        AllowPartial: ", marshalOptions.AllowPartial, ",")
		p.g.P("        Deterministic: ", marshalOptions.Deterministic, ",")
		p.g.P("        UseCachedSize: ", marshalOptions.UseCachedSize, ",")
		p.g.P("    }")
		p.g.P("    return _marshal.Marshal(t)")
		p.g.P("}")
	case *pbgosql.Serialize_Gogoproto:
		p.g.P("// Scan for implements sql.Scanner (- database/sql). ")
		p.g.P("func (t *", name, ") Scan(val interface{}) error {")
		p.g.P("    return ", gogoprotoPackage.Ident("Unmarshal"), "(val.([]byte), t)")
		p.g.P("}")
		p.g.P()

		p.g.P("// Value for implements driver.Valuer (- database/sql/driver) ")
		p.g.P("func (t *", name, ") Value() (", driverPackage.Ident("Value"), ", error) {")
		p.g.P("    if t == nil {")
		p.g.P("        return nil, nil")
		p.g.P("    }")
		p.g.P("    return ", gogoprotoPackage.Ident("Marshal"), "(t)")
		p.g.P("}")
	default:
		panic(fmt.Errorf("gosql: unsupported serialize format type: %v", ext))
	}
}
